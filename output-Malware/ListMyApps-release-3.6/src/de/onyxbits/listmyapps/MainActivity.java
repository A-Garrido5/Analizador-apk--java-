// 
// Decompiled by Procyon v0.5.30
// 

package de.onyxbits.listmyapps;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Iterator;
import android.content.SharedPreferences;
import android.widget.SpinnerAdapter;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.content.SharedPreferences$Editor;
import android.content.DialogInterface$OnClickListener;
import android.content.DialogInterface$OnMultiChoiceClickListener;
import android.app.AlertDialog$Builder;
import android.text.ClipboardManager;
import android.view.MenuItem;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.view.Menu;
import android.widget.ListView;
import android.os.Bundle;
import android.content.ActivityNotFoundException;
import android.widget.Toast;
import android.content.Intent;
import android.content.Context;
import android.net.Uri;
import java.util.List;
import java.util.Collections;
import java.util.ArrayList;
import android.widget.ListAdapter;
import java.sql.Date;
import java.util.Calendar;
import android.widget.CheckBox;
import java.text.DateFormat;
import android.widget.AdapterView$OnItemLongClickListener;
import android.widget.AdapterView$OnItemClickListener;
import android.widget.AdapterView$OnItemSelectedListener;
import android.app.ListActivity;

public class MainActivity extends ListActivity implements AdapterView$OnItemSelectedListener, AdapterView$OnItemClickListener, AdapterView$OnItemLongClickListener
{
    private static final String ALWAYS_GOOGLE_PLAY = "always_link_to_google_play";
    public static final String PREFSFILE = "settings";
    public static final String SELECTED = "selected";
    private static final String TEMPLATEID = "templateid";
    private TemplateData template;
    private TemplateSource templateSource;
    
    private CharSequence buildOutput() {
        if (this.template == null) {
            return this.getString(2131099683);
        }
        final StringBuilder sb = new StringBuilder();
        final DateFormat dateTimeInstance = DateFormat.getDateTimeInstance();
        final boolean checked = ((CheckBox)this.findViewById(2131034117)).isChecked();
        final ListAdapter listAdapter = this.getListAdapter();
        final int count = listAdapter.getCount();
        final String format = DateFormat.getDateTimeInstance().format(Calendar.getInstance().getTime());
        int n = 0;
        for (int i = 0; i < count; ++i) {
            final SortablePackageInfo sortablePackageInfo = (SortablePackageInfo)listAdapter.getItem(i);
            if (sortablePackageInfo.selected) {
                ++n;
                String installer = sortablePackageInfo.installer;
                if (checked) {
                    installer = "com.google.vending";
                }
                sb.append(this.template.item.replace("${comment}", noNull(sortablePackageInfo.comment)).replace("${tags}", noNull(sortablePackageInfo.tags)).replace("${packagename}", noNull(sortablePackageInfo.packageName)).replace("${displayname}", noNull(sortablePackageInfo.displayName)).replace("${source}", noNull(createSourceLink(installer, sortablePackageInfo.packageName))).replace("${versioncode}", "" + sortablePackageInfo.versionCode).replace("${targetsdk}", "" + sortablePackageInfo.targetsdk).replace("${version}", noNull(sortablePackageInfo.version)).replace("${rating}", "" + sortablePackageInfo.rating).replace("${uid}", "" + sortablePackageInfo.uid).replace("${firstinstalled}", dateTimeInstance.format(new Date(sortablePackageInfo.firstInstalled))).replace("${lastupdated}", dateTimeInstance.format(new Date(sortablePackageInfo.lastUpdated))).replace("${datadir}", noNull(sortablePackageInfo.dataDir)).replace("${marketid}", noNull(sortablePackageInfo.installer)));
            }
        }
        sb.insert(0, this.template.header.replace("${now}", format).replace("${count}", "" + n));
        sb.append(this.template.footer.replace("${now}", format).replace("${count}", "" + n));
        return sb;
    }
    
    public static String createSourceLink(final String s, final String s2) {
        if (s == null) {
            return "https://www.google.com/search?q=" + s2;
        }
        if (s.startsWith("com.google")) {
            return "https://play.google.com/store/apps/details?id=" + s2;
        }
        if (s.startsWith("com.android")) {
            return "https://play.google.com/store/apps/details?id=" + s2;
        }
        if (s.startsWith("org.fdroid")) {
            return "https://f-droid.org/repository/browse/?fdid=" + s2;
        }
        if (s.startsWith("com.amazon")) {
            return "http://www.amazon.com/gp/mas/dl/android?p=" + s2;
        }
        return "https://www.google.com/search?q=" + s2;
    }
    
    private void doStumble() {
        final ListAdapter listAdapter = this.getListAdapter();
        final int count = listAdapter.getCount();
        final ArrayList<String> list = new ArrayList<String>();
        for (int i = 0; i < count; ++i) {
            final SortablePackageInfo sortablePackageInfo = (SortablePackageInfo)listAdapter.getItem(i);
            if (sortablePackageInfo.selected) {
                list.add(sortablePackageInfo.packageName);
            }
        }
        Collections.shuffle(list);
        final StringBuilder sb = new StringBuilder();
        for (int j = 0; j < list.size(); ++j) {
            if (sb.length() > 0) {
                sb.append(",");
            }
            sb.append(list.get(j));
            if (sb.length() > 200) {
                break;
            }
        }
        openUri((Context)this, Uri.parse(this.getString(2131099700, new Object[] { sb.toString() })));
    }
    
    public static String noNull(String s) {
        if (s == null) {
            s = "";
        }
        return s;
    }
    
    public static void openUri(final Context context, final Uri uri) {
        try {
            context.startActivity(new Intent("android.intent.action.VIEW", uri));
        }
        catch (ActivityNotFoundException ex) {
            Toast.makeText(context, 2131099697, 0).show();
        }
    }
    
    public boolean isNothingSelected() {
        final ListAdapter listAdapter = this.getListAdapter();
        if (listAdapter != null) {
            for (int count = listAdapter.getCount(), i = 0; i < count; ++i) {
                if (((SortablePackageInfo)listAdapter.getItem(i)).selected) {
                    return false;
                }
            }
        }
        Toast.makeText((Context)this, 2131099685, 1).show();
        return true;
    }
    
    protected void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        this.requestWindowFeature(2);
        this.setContentView(2130903041);
        final ListView listView = this.getListView();
        listView.setOnItemClickListener((AdapterView$OnItemClickListener)this);
        listView.setOnItemLongClickListener((AdapterView$OnItemLongClickListener)this);
        AppRater.appLaunched((Context)this);
    }
    
    public boolean onCreateOptionsMenu(final Menu menu) {
        this.getMenuInflater().inflate(2131296257, menu);
        return true;
    }
    
    public void onItemClick(final AdapterView<?> adapterView, final View view, final int n, final long n2) {
        final AppAdapter appAdapter = (AppAdapter)this.getListAdapter();
        final SortablePackageInfo sortablePackageInfo = (SortablePackageInfo)appAdapter.getItem(n);
        sortablePackageInfo.selected = !sortablePackageInfo.selected;
        appAdapter.notifyDataSetChanged();
    }
    
    public boolean onItemLongClick(final AdapterView<?> adapterView, final View view, final int n, final long n2) {
        final SortablePackageInfo sortablePackageInfo = (SortablePackageInfo)((AppAdapter)this.getListAdapter()).getItem(n);
        try {
            final Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.addCategory("android.intent.category.DEFAULT");
            intent.setData(Uri.parse("package:" + sortablePackageInfo.packageName));
            this.startActivity(intent);
            return true;
        }
        catch (Exception ex) {
            Log.w(this.getClass().getName(), (Throwable)ex);
            return true;
        }
    }
    
    public void onItemSelected(final AdapterView<?> adapterView, final View view, final int n, final long n2) {
        this.template = (TemplateData)adapterView.getAdapter().getItem(n);
    }
    
    public void onNothingSelected(final AdapterView<?> adapterView) {
    }
    
    public boolean onOptionsItemSelected(final MenuItem menuItem) {
        Label_0192: {
            switch (menuItem.getItemId()) {
                case 2131034147: {
                    if (this.isNothingSelected()) {
                        break Label_0192;
                    }
                    final CharSequence buildOutput = this.buildOutput();
                    if (buildOutput.length() < 92160) {
                        final Intent intent = new Intent();
                        intent.setAction("android.intent.action.SEND");
                        intent.putExtra("android.intent.extra.TEXT", buildOutput.toString());
                        intent.setType("text/plain");
                        this.startActivity(Intent.createChooser(intent, this.getResources().getText(2131099676)));
                        break;
                    }
                    Toast.makeText((Context)this, 2131099686, 0).show();
                    break Label_0192;
                }
                case 2131034146: {
                    if (!this.isNothingSelected()) {
                        ((ClipboardManager)this.getSystemService("clipboard")).setText((CharSequence)this.buildOutput().toString());
                        final ListAdapter listAdapter = this.getListAdapter();
                        final int count = listAdapter.getCount();
                        int n = 0;
                        for (int i = 0; i < count; ++i) {
                            if (((SortablePackageInfo)listAdapter.getItem(i)).selected) {
                                ++n;
                            }
                        }
                        Toast.makeText((Context)this, (CharSequence)this.getString(2131099687, new Object[] { n, count }), 0).show();
                        break;
                    }
                    break;
                }
                case 2131034151: {
                    final ListAdapter listAdapter2 = this.getListAdapter();
                    for (int count2 = listAdapter2.getCount(), j = 0; j < count2; ++j) {
                        ((SortablePackageInfo)listAdapter2.getItem(j)).selected = false;
                    }
                    ((AppAdapter)listAdapter2).notifyDataSetChanged();
                    break;
                }
                case 2131034149: {
                    final ListAdapter listAdapter3 = this.getListAdapter();
                    for (int count3 = listAdapter3.getCount(), k = 0; k < count3; ++k) {
                        ((SortablePackageInfo)listAdapter3.getItem(k)).selected = true;
                    }
                    ((AppAdapter)listAdapter3).notifyDataSetChanged();
                    break;
                }
                case 2131034152: {
                    this.startActivity(new Intent((Context)this, (Class)AnnotationsActivity.class));
                    break;
                }
                case 2131034153: {
                    this.startActivity(new Intent((Context)this, (Class)TemplatesActivity.class));
                    break;
                }
                case 2131034150: {
                    final TagSelectionListener tagSelectionListener = new TagSelectionListener(this.getListAdapter());
                    final AlertDialog$Builder alertDialog$Builder = new AlertDialog$Builder((Context)this);
                    if (tagSelectionListener.listTags().length == 0) {
                        alertDialog$Builder.setTitle(2131099695).setMessage(2131099696);
                    }
                    else {
                        alertDialog$Builder.setTitle(2131099695).setMultiChoiceItems((CharSequence[])tagSelectionListener.listTags(), (boolean[])null, (DialogInterface$OnMultiChoiceClickListener)tagSelectionListener).setPositiveButton(17039370, (DialogInterface$OnClickListener)tagSelectionListener);
                    }
                    alertDialog$Builder.show();
                    break;
                }
                case 2131034112: {
                    openUri((Context)this, Uri.parse(this.getString(2131099698)));
                    return true;
                }
                case 2131034148: {
                    if (!this.isNothingSelected()) {
                        this.doStumble();
                        break;
                    }
                    break;
                }
            }
        }
        return true;
    }
    
    public void onPause() {
        super.onPause();
        final SharedPreferences$Editor edit = this.getSharedPreferences("settings", 0).edit();
        edit.putBoolean("always_link_to_google_play", ((CheckBox)this.findViewById(2131034117)).isChecked());
        if (this.template != null) {
            edit.putLong("templateid", this.template.id);
        }
        final ListAdapter listAdapter = this.getListAdapter();
        for (int count = listAdapter.getCount(), i = 0; i < count; ++i) {
            final SortablePackageInfo sortablePackageInfo = (SortablePackageInfo)listAdapter.getItem(i);
            edit.putBoolean("selected." + sortablePackageInfo.packageName, sortablePackageInfo.selected);
        }
        edit.commit();
    }
    
    protected void onResume() {
        super.onResume();
        final CheckBox checkBox = (CheckBox)this.findViewById(2131034117);
        final Spinner spinner = (Spinner)this.findViewById(2131034115);
        (this.templateSource = new TemplateSource((Context)this)).open();
        final List<TemplateData> list = this.templateSource.list();
        final ArrayAdapter adapter = new ArrayAdapter((Context)this, 17367048, (List)list);
        adapter.setDropDownViewResource(17367049);
        spinner.setAdapter((SpinnerAdapter)adapter);
        spinner.setOnItemSelectedListener((AdapterView$OnItemSelectedListener)this);
        final SharedPreferences sharedPreferences = this.getSharedPreferences("settings", 0);
        checkBox.setChecked(sharedPreferences.getBoolean("always_link_to_google_play", false));
        final Iterator<TemplateData> iterator = list.iterator();
        int n = 0;
        int selection;
        while (true) {
            final boolean hasNext = iterator.hasNext();
            selection = 0;
            if (!hasNext) {
                break;
            }
            this.template = iterator.next();
            if (this.template.id == sharedPreferences.getLong("templateid", 0L)) {
                selection = n;
                break;
            }
            this.template = null;
            ++n;
        }
        spinner.setSelection(selection);
        this.setListAdapter((ListAdapter)new AppAdapter((Context)this, 2130903045, new ArrayList<SortablePackageInfo>(), 2130903045));
        new ListTask(this, 2130903045).execute(new Object[] { "" });
    }
}
