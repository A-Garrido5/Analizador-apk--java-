import java.util.Enumeration;
import com.nuance.nmsp.client.sdk.oem.i;
import com.nuance.nmsp.client.sdk.oem.AudioSystemOEM;
import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class dm implements ao, ar, as, at, au, ax, az, ba, bh, cc
{
    private static final be a;
    private am b;
    private an c;
    private bz d;
    private bf e;
    private dd f;
    private long g;
    private ci h;
    private int i;
    private bq j;
    private boolean k;
    private boolean l;
    private boolean m;
    private av n;
    private Vector o;
    private int p;
    
    static {
        a = dh.a(dm.class);
    }
    
    public dm(final bz d, final dn dn, final Vector o, final ak ak) {
        this.e = null;
        this.k = false;
        this.l = false;
        this.m = false;
        this.p = -1;
        a(o);
        this.d = d;
        this.b = ((dt)dn).e();
        this.j = null;
        this.e = ((dt)dn).g_();
        this.o = o;
        this.k = a(o, "ep.enable");
        this.l = a(o, "NMSP_DEFINES_RECORDER_CONTINUES_ON_ENDPOINTER_AND_TIMER_STOPPING");
        this.m = a(o, "NMSP_DEFINES_CAPTURING_CONTINUES_ON_ENDPOINTER");
        this.c = new AudioSystemOEM(this.e, this.b, o);
        if (ak.equals(ak.c)) {
            this.n = av.c;
        }
        else if (ak.equals(ak.a)) {
            this.n = av.a;
        }
        else if (ak.equals(ak.b)) {
            this.n = av.b;
        }
        else if (ak.equals(ak.d)) {
            this.n = av.d;
        }
        final cl cl = (cl)dn.a();
        if (cl != null) {
            final ci b = cl.b();
            if (b != null) {
                this.h = b.a("NMSPRecorder").a();
            }
        }
        this.p = 0;
    }
    
    private void a(final dd f, final int i) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.handleStartRecording(" + f + ") _state:" + this.p);
        }
        if (new i(this.o).a()) {
            this.b = bx.c(this.b);
        }
        this.i = i;
        if (this.p == 0) {
            this.f = f;
            if (this.c.a(this.n, this.k && f != null, this, this, this, this, this, this, this)) {
                if (this.k) {
                    if (f == null) {
                        this.p = 1;
                    }
                    else {
                        this.p = 2;
                    }
                }
                else if (f == null) {
                    this.p = 1;
                }
                else {
                    this.h();
                    this.p = 4;
                }
                this.a("STARTED", null);
                return;
            }
            if (dm.a.e()) {
                dm.a.e("RecorderImpl.handleStartRecording() startRecording() failed!!!");
            }
            this.p = 8;
            this.a("RECORD_ERROR", null);
        }
    }
    
    private void a(final String s) {
        if (this.h != null) {
            this.h.a(s).a();
        }
    }
    
    private void a(final String s, final Object o) {
        if (this.d == null) {
            return;
        }
        try {
            this.d.a(this, s, o);
        }
        catch (Throwable t) {
            if (dm.a.e()) {
                dm.a.e("Got an exp while calling NMSPAudioRecordListener.recorderUpdate(" + s + ", " + o + ")[" + t.getClass().getName() + "] msg [" + t.getMessage() + "]");
            }
        }
    }
    
    private static void a(final Vector vector) {
        if (vector != null) {
            final Enumeration<df> elements = vector.elements();
            while (elements.hasMoreElements()) {
                final df df = elements.nextElement();
                if (df.d() != dg.a) {
                    throw new IllegalArgumentException("Parameter type: " + df.d() + " not allowed. ");
                }
            }
        }
    }
    
    private static boolean a(final Vector vector, final String s) {
        if (vector != null) {
            final Enumeration<df> elements = vector.elements();
            while (elements.hasMoreElements()) {
                final df df = elements.nextElement();
                if (df.d() == dg.a && df.a().equals(s)) {
                    return new String(df.b()).equals("TRUE");
                }
            }
        }
        return false;
    }
    
    private void b(final boolean b) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.handleStopRecording() _state:" + this.p);
        }
        if (this.p == 2 || this.p == 4 || this.p == 5) {
            if (b) {
                this.a("CAPTURE_TIMEOUT", null);
            }
            if (this.p == 4) {
                this.i();
            }
            this.c.a((ba)this);
            this.p = 9;
        }
        else if (this.p == 1 || this.p == 3 || this.p == 6) {
            this.c.a((ba)this);
            this.p = 7;
        }
    }
    
    static /* synthetic */ void c(final dm dm) {
        dm.b(true);
    }
    
    private void h() {
        if (this.i > 0) {
            this.j = new bq() {
                @Override
                public final void run() {
                    dm.this.j = null;
                    if (dm.this.l) {
                        dm.this.a(true);
                        return;
                    }
                    dm.c(dm.this);
                }
            };
            this.e.a(this.j, this.i);
        }
    }
    
    private void i() {
        if (this.j != null) {
            this.e.a(this.j);
            this.j = null;
        }
    }
    
    private void j() {
        while (true) {
            try {
                this.f.a(null, 0, 0, true);
                if (dm.a.b()) {
                    dm.a.b("RecorderImpl::finishAudioSink send the last audio buffer from recorder");
                }
            }
            catch (dk dk) {
                if (dm.a.d()) {
                    dm.a.e("RecorderImpl.finishAudioSink() TransactionProcessingException:" + dk);
                }
                continue;
            }
            break;
        }
    }
    
    @Override
    public final void a() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl::endOfSpeechCallback() _state:" + this.p);
        }
        if (this.p == 4) {
            this.a("END_OF_SPEECH", null);
            if (!this.m) {
                this.a(false);
            }
        }
    }
    
    @Override
    public final void a(final ap ap) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.stopCallback() _state:" + this.p);
        }
        this.a("StreamStop");
        if (this.p == 1 || this.p == 3 || this.p == 7) {
            this.a("STOPPED", null);
            this.p = 8;
        }
        else if (this.p == 2 || this.p == 4 || this.p == 5 || this.p == 6 || this.p == 9) {
            if (this.p == 4) {
                this.i();
            }
            this.j();
            this.a("STOPPED", null);
            this.p = 8;
        }
    }
    
    @Override
    public final void a(final dd dd) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.startCapturing(" + dd + ")");
        }
        if (dd == null) {
            throw new IllegalArgumentException("audioSink cannot be null.");
        }
        final bf e = this.e;
        final bg bg = new bg((byte)4, new Object[] { dd, new Integer(60000) });
        final Thread currentThread = Thread.currentThread();
        this.e.a();
        e.a(bg, this, currentThread);
    }
    
    @Override
    public final void a(final Object o, final Object o2) {
        final bg bg = (bg)o;
        switch (bg.a) {
            case 1: {
                this.a(null, 0);
            }
            case 2: {
                final Object[] array = (Object[])bg.b;
                this.a((dd)array[0], (int)array[1]);
            }
            case 3: {
                this.b(false);
            }
            case 4: {
                final Object[] array2 = (Object[])bg.b;
                final dd f = (dd)array2[0];
                final int intValue = (int)array2[1];
                if (dm.a.b()) {
                    dm.a.b("RecorderImpl.handleStartCapturing(" + f + ") _state:" + this.p);
                }
                this.i = intValue;
                this.f = f;
                if (this.p == 1) {
                    if (this.k) {
                        this.c.a((as)this);
                        this.p = 2;
                        return;
                    }
                    this.h();
                    this.p = 4;
                    return;
                }
                else {
                    if (this.p == 3) {
                        this.p = 2;
                        return;
                    }
                    if (this.p == 6) {
                        this.p = 5;
                        return;
                    }
                    break;
                }
                break;
            }
            case 5: {
                this.a(false);
            }
        }
    }
    
    public final void a(final boolean b) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.handleStopCapturing() _state:" + this.p);
        }
        if (this.p == 2) {
            this.j();
            if (b) {
                this.a("CAPTURE_TIMEOUT", null);
            }
            this.p = 3;
        }
        else if (this.p == 4) {
            this.j();
            if (b) {
                this.a("CAPTURE_TIMEOUT", null);
            }
            if (this.p == 4) {
                this.i();
            }
            if (this.k) {
                this.c.a((at)this);
                this.p = 6;
                return;
            }
            this.p = 1;
        }
        else if (this.p == 5) {
            this.j();
            this.p = 6;
        }
    }
    
    @Override
    public final void a(final byte[] array, final Object o, final aw aw, final aw aw2, final Float n) {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.audioCallback() _state:" + this.p);
        }
        if (this.p != 4) {
            return;
        }
        if (this.g == 0L) {
            this.g = System.currentTimeMillis();
            this.a("StreamStart");
        }
        final am b = this.b;
        bx.a();
        while (true) {
            Label_0162: {
                if (!bx.b(this.b)) {
                    break Label_0162;
                }
                byte[] array2 = (byte[])o;
                int n2 = aw2.a;
                if (dm.a.b()) {
                    dm.a.b("========================= Recorder::audioCallback len[" + n2 + "] ======================");
                }
                try {
                    this.f.a(array2, 0, n2, false);
                    this.a("BUFFER_RECORDED", n);
                    return;
                    // iftrue(Label_0255:, !bx.a(this.b))
                    n2 = aw.a;
                    array2 = array;
                    continue;
                }
                catch (dk dk) {
                    if (dm.a.d()) {
                        dm.a.d("RecorderImpl.audioCallback() TransactionProcessingException:" + dk);
                    }
                    this.a("RECORD_ERROR", null);
                    if (this.p == 4) {
                        this.i();
                    }
                    this.c.a((ba)this);
                    this.p = 7;
                    return;
                }
            }
            Label_0255: {
                final int n2 = 0;
            }
            byte[] array2 = null;
            continue;
        }
    }
    
    @Override
    public final void b() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl::endPointerStartedCallback() _state:" + this.p);
        }
        if (this.p == 2) {
            this.h();
            this.p = 4;
        }
        else if (this.p == 3) {
            this.c.a((at)this);
            this.p = 6;
        }
    }
    
    @Override
    public final void c() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl::endPointerStoppedCallback() _state:" + this.p);
        }
        if (this.p == 5) {
            this.c.a((as)this);
            this.p = 2;
        }
        else if (this.p == 6) {
            this.p = 1;
        }
    }
    
    @Override
    public final void d() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.errorCallback() _state:" + this.p);
        }
        if (this.p == 1 || this.p == 2 || this.p == 3 || this.p == 4 || this.p == 5 || this.p == 6) {
            if (this.p == 4) {
                this.i();
            }
            this.a("RECORD_ERROR", null);
            this.p = 7;
        }
    }
    
    @Override
    public final void e() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl::startOfSpeechCallback() _state:" + this.p);
        }
        if (this.p == 4) {
            this.a("START_OF_SPEECH", null);
        }
    }
    
    @Override
    public final void f() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.startRecording()");
        }
        this.g = 0L;
        this.a("RecorderStart");
        final bf e = this.e;
        final bg bg = new bg((byte)1, null);
        final Thread currentThread = Thread.currentThread();
        this.e.a();
        e.a(bg, this, currentThread);
    }
    
    @Override
    public final void g() {
        if (dm.a.b()) {
            dm.a.b("RecorderImpl.stop()");
        }
        this.a("RecorderStop");
        final bf e = this.e;
        final bg bg = new bg((byte)3, null);
        final Thread currentThread = Thread.currentThread();
        this.e.a();
        e.a(bg, this, currentThread);
    }
}
