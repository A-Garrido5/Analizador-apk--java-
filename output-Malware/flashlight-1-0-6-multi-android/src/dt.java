import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class dt extends de implements dn
{
    private static final be c;
    public String b;
    private du d;
    private Object e;
    private ch f;
    
    static {
        c = dh.a(dt.class);
    }
    
    public dt(final String s, final short n, final String b, final byte[] array, final String s2, final am am, final am am2, final String s3, final Vector vector, final dp dp) {
        super(s, n, s2, am, am2);
        if (b == null) {
            throw new IllegalArgumentException(" application id is null.");
        }
        this.b = b;
        if (array == null) {
            throw new IllegalArgumentException(" application key is null");
        }
        int n2 = 1;
        long long1 = 5242880L;
        int int1 = 7;
        String s4 = null;
        Vector<df> vector2;
        long n3;
        String s5;
        int n4;
        int n5;
        if (vector == null || vector.size() == 0) {
            vector2 = new Vector<df>();
            n3 = long1;
            s5 = null;
            n4 = int1;
            n5 = n2;
        }
        else {
            final Vector<df> vector3 = new Vector<df>(vector.size());
            for (int i = 0; i < vector.size(); ++i) {
                final df df = vector.elementAt(i);
                if (df.d() == dg.a) {
                    if (df.a().equals("DEVICE_CMD_LOG_TO_SERVER_ENABLED")) {
                        this.e = new Vector();
                    }
                    else if (df.a().equals("Calllog_Disable")) {
                        if (new String(df.b()).equals("TRUE") || new String(df.b()).equals("true")) {
                            n2 = 0;
                        }
                        else if (new String(df.b()).equals("FALSE") || new String(df.b()).equals("false")) {
                            n2 = 1;
                        }
                    }
                    else if (df.a().equals("Calllog_Root_Id")) {
                        s4 = new String(df.b());
                    }
                    else if (df.a().equals("Calllog_Size_Limit")) {
                        long1 = Long.parseLong(new String(df.b()));
                    }
                    else if (df.a().equals("Calllog_Retention_Days")) {
                        int1 = Integer.parseInt(new String(df.b()));
                    }
                }
                vector3.addElement(df);
            }
            n3 = long1;
            s5 = s4;
            n4 = int1;
            n5 = n2;
            vector2 = vector3;
        }
        if (s3 == null && n5 != 0) {
            dt.c.e("NullPointerException calllogFileName is NULL.");
            throw new NullPointerException("calllogFileName can not be null!");
        }
        if (n3 < 0L) {
            dt.c.e("NMSP_DEFINES_CALLLOG_FILE_SIZE_LIMIT can not be negative!");
            throw new NullPointerException("NMSP_DEFINES_CALLLOG_FILE_SIZE_LIMIT can not be negative!");
        }
        this.d = new du(this.b(), this.c(), b, array, s2, vector2, this.g_(), dp);
        if (n5 != 0) {
            this.f = new cl(s3, n3, n4, s5, this.a, this.b, this.g_(), this.d.b());
            this.d.a(((cl)this.f).b());
        }
    }
    
    @Override
    public final ch a() {
        return this.f;
    }
    
    @Override
    public final void f_() {
        dt.c.b("shutdown");
        if (this.f != null) {
            final ci b = ((cl)this.f).b();
            if (b != null) {
                b.a("NMSP_ShutDown").a();
            }
        }
        this.d.e();
    }
    
    public final du h() {
        return this.d;
    }
    
    public final Object i() {
        return this.e;
    }
}
