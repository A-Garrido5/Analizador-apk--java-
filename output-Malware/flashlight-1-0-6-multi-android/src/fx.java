import java.io.UnsupportedEncodingException;
import java.util.Hashtable;
import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class fx implements fw
{
    private static final be a;
    private byte[] b;
    private String c;
    private fx$1 d;
    
    static {
        a = dh.a(fx.class);
    }
    
    public fx(final byte[] b) {
        this.c = "Cp1252";
        this.d = null;
        this.b = b;
        final Object d = new Object() {
            public int a = -1;
            public int b = -1;
            public int c = -1;
            public int d = -1;
            public int e = -1;
        };
        final int a = this.a(2, this.b());
        d.e = a;
        final int b2 = this.b(a + 4, this.a(a));
        d.d = b2;
        final int a2 = this.a(b2 + 2, this.e(b2));
        d.b = this.a(3, a2, b.length);
        d.c = this.a(4, a2, b.length);
        d.a = this.a(1, a2, b.length);
        this.d = d;
        final Object d2 = this.d;
        String a3;
        if (d2.c == -1) {
            a3 = "Cp1252";
        }
        else {
            final int n = 4 + d2.c;
            a3 = gh.a(this.b, n + 4, -1 + (int)gh.c(this.b, n), "Cp1252");
            String s;
            if (a3 == "Windows-1252") {
                s = "Cp1252";
            }
            else {
                s = a3;
            }
            if (!a(s)) {
                a3 = "Cp1252";
            }
        }
        this.c = a3;
    }
    
    private int a(final int n) {
        final int b = gh.b(this.b, n);
        if (fx.a.a()) {
            fx.a.a("Number of sentences: " + b);
        }
        return b;
    }
    
    private int a(int n, final int n2) {
        for (int n3 = 0; n < this.b.length && n3 < n2; ++n) {
            if (this.b[n] == 0) {
                ++n3;
            }
        }
        return n;
    }
    
    private int a(final int n, final int n2, final int n3) {
        int n4;
        long c2;
        for (int i = n2; i < n3; i = 4 + (n4 + (int)c2)) {
            final long c = gh.c(this.b, i);
            if (fx.a.a()) {
                fx.a.a("Received extension id=" + c);
            }
            if (c == n) {
                return i;
            }
            n4 = i + 4;
            c2 = gh.c(this.b, n4);
            if (fx.a.a()) {
                fx.a.a("Received payload size: " + c2);
            }
        }
        return -1;
    }
    
    private fy a(final int n, int b, final Vector vector) {
        int i = 0;
        final int b2 = this.b(n);
        int a = n + 4;
        final fu a2 = new fu();
        final fy fy = new fy((byte)0);
        while (i < b2) {
            final fz a3 = this.a(a, b, 2, vector);
            a2.a(a3.c);
            a = a3.a;
            b = a3.b;
            if (fx.a.a()) {
                final fv c = a3.c;
                fx.a.a("Extracted word: startTime [" + c.c() + "] endTime [" + c.d() + "] content [" + c.b() + "]");
            }
            ++i;
        }
        fy.b = a;
        fy.c = b;
        fy.a = a2;
        return fy;
    }
    
    private fz a(final int n, int b, final int n2, final Vector vector) {
        final fz fz = new fz((byte)0);
        final int n3 = -1 + gh.a(this.b, n);
        final int n4 = n + 2;
        final String s = vector.elementAt(n3);
        long d;
        long d2;
        int a;
        if (n2 == 4) {
            d = this.d(n4);
            final int n5 = n4 + n2;
            d2 = this.d(n5);
            a = n5 + n2;
        }
        else {
            d = this.c(n4);
            final int n6 = n4 + n2;
            d2 = this.c(n6);
            a = n6 + n2;
        }
        double n7 = 0.0;
        if (b != -1) {
            n7 = gh.a(this.b, b);
            b += 2;
        }
        fz.c = new fv(s, d, d2, n7, true, (byte)0);
        fz.a = a;
        fz.b = b;
        return fz;
    }
    
    private Vector a(final fx$1 object, final Vector vector) {
        int i = 0;
        boolean b;
        if (object.a != -1) {
            b = true;
        }
        else {
            b = false;
        }
        int n;
        if (b) {
            n = object.a;
        }
        else {
            n = object.e;
        }
        int n2;
        if (object.b != -1) {
            n2 = 1;
        }
        else {
            n2 = 0;
        }
        if (b) {
            n = 4 + (n + 4);
        }
        final int a = this.a(n);
        final int n3 = n + 4;
        int b2 = object.b;
        if (n2 != 0) {
            b2 = 4 + (4 + (4 + (b2 + 4)));
        }
        final Vector<fu> vector2 = new Vector<fu>();
        int n4 = b2;
        int n5 = n3;
        while (i < a) {
            fy fy;
            if (b) {
                fy = this.b(n5, n4, vector);
            }
            else {
                fy = this.a(n5, n4, vector);
            }
            if (fx.a.a()) {
                fx.a.a("Number of words in Sentence " + i + ": [" + fy.a.a() + "]");
            }
            vector2.addElement(fy.a);
            final int b3 = fy.b;
            final int c = fy.c;
            if (fx.a.a()) {
                fx.a.a("Extracted sentence: [" + fy.a + "]");
            }
            ++i;
            n5 = b3;
            n4 = c;
        }
        return vector2;
    }
    
    private static void a(final Hashtable hashtable) {
        for (int n = 0; hashtable.remove("CFD" + n) != null; ++n) {}
        if (hashtable.containsKey("IAL")) {
            hashtable.put("InputAudioLength", hashtable.get("IAL"));
        }
    }
    
    private static void a(final Hashtable hashtable, final Vector vector) {
        int i = 0;
    Label_0057_Outer:
        while (i < vector.size()) {
            final String s = hashtable.get("CFD" + i);
            while (true) {
                if (s != null) {
                    try {
                        vector.elementAt(i).a(Double.parseDouble(s));
                        ++i;
                        continue Label_0057_Outer;
                    }
                    catch (NumberFormatException ex) {
                        continue;
                    }
                    break;
                }
                continue;
            }
        }
    }
    
    private static boolean a(final String s) {
        try {
            (new byte[1])[0] = 20;
            return true;
        }
        catch (UnsupportedEncodingException ex) {
            if (fx.a.d()) {
                fx.a.d(s + " character encoding is not available in your VM. Using the default one.");
            }
            return false;
        }
    }
    
    private int b() {
        final int a = gh.a(this.b, 0);
        if (fx.a.a()) {
            fx.a.a("Number of words: " + a);
        }
        return a;
    }
    
    private int b(final int n) {
        return gh.b(this.b, n);
    }
    
    private int b(int n, final int n2) {
        int n3;
        for (int i = 0; i < n2; ++i, n = n3) {
            final int b = this.b(n);
            n3 = n + 4;
            for (int j = 0; j < b; ++j) {
                n3 += 6;
            }
        }
        return n;
    }
    
    private fy b(final int n, int b, final Vector vector) {
        int i = 0;
        final int b2 = this.b(n);
        int a = n + 4;
        final fy fy = new fy((byte)0);
        while (i < b2) {
            final fz a2 = this.a(a, b, 4, vector);
            fy.a.a(a2.c);
            a = a2.a;
            b = a2.b;
            if (fx.a.a()) {
                final fv c = a2.c;
                fx.a.a("Extracted word: startTime [" + c.c() + "] endTime [" + c.d() + "] content [" + c.b() + "]");
            }
            ++i;
        }
        fy.b = a;
        fy.c = b;
        return fy;
    }
    
    private int c(final int n) {
        return gh.a(this.b, n);
    }
    
    private Vector c(final int n, int n2) {
        final Vector<String> vector = new Vector<String>();
        for (int i = 0; i < n; ++i) {
            final int d = gh.d(this.b, n2);
            final byte[] b = this.b;
            String c;
            if (this.c.equals("Cp1252")) {
                c = "Windows-1252";
            }
            else {
                c = this.c;
            }
            final String a = gh.a(b, n2, d, c);
            vector.addElement(a);
            if (fx.a.a()) {
                fx.a.a("Added a word to the list: [" + a + "] offset [" + n2 + "] len [" + d + "]");
            }
            n2 += d + 1;
        }
        return vector;
    }
    
    private long d(final int n) {
        return gh.c(this.b, n);
    }
    
    private int e(final int n) {
        final int a = gh.a(this.b, n);
        if (fx.a.a()) {
            fx.a.a("Number of key-value pairs: " + a);
        }
        return a;
    }
    
    private Hashtable f(final int n) {
        final int e = this.e(n);
        final int n2 = n + 2;
        final Hashtable<String, String> hashtable = new Hashtable<String, String>();
        final Vector c = this.c(e, n2);
        if (fx.a.a()) {
            fx.a.a("Extracted " + c.size() + " words from the set of key-value pairs.");
        }
        for (int i = 0; i < c.size(); ++i) {
            final String s = c.elementAt(i);
            final int index = s.indexOf(61);
            if (index == -1) {
                throw new IllegalArgumentException("Received an invalid key-value pair: " + c.elementAt(i));
            }
            hashtable.put(s.substring(0, index), s.substring(index + 1, s.length()));
        }
        return hashtable;
    }
    
    @Override
    public final fn a() {
        fx.a.b("Unpacking DNS binary version 3.2 results.");
        final Vector c = this.c(this.b(), 2);
        if (fx.a.b()) {
            fx.a.b("Found " + c.size() + " in word list");
            if (fx.a.a()) {
                for (int i = 0; i < c.size(); ++i) {
                    fx.a.a(c.elementAt(i).toString());
                }
            }
        }
        final Vector a = this.a(this.d, c);
        if (fx.a.b()) {
            fx.a.b("Found " + a.size() + " in n-best list");
            final boolean a2 = fx.a.a();
            int j = 0;
            if (a2) {
                while (j < a.size()) {
                    fx.a.a(a.elementAt(j).toString());
                    ++j;
                }
            }
        }
        final Hashtable f = this.f(this.d.d);
        a(f, a);
        a(f);
        return new ft(a);
    }
}
