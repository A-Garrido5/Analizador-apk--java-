import org.xml.sax.Attributes;
import java.util.StringTokenizer;
import org.xml.sax.SAXException;
import java.util.Hashtable;
import java.util.Vector;
import java.util.Stack;
import org.xml.sax.helpers.DefaultHandler;

// 
// Decompiled by Procyon v0.5.30
// 

public class gg extends DefaultHandler implements ga
{
    private static final be a;
    private Stack b;
    private StringBuffer c;
    private StringBuffer d;
    private String e;
    private String f;
    private double g;
    private Vector h;
    private Hashtable i;
    
    static {
        a = dh.a(gg.class);
    }
    
    public gg() {
        this.b = new Stack();
        this.c = null;
        this.d = null;
        this.e = null;
        this.f = null;
        this.g = 0.0;
        this.h = new Vector();
        this.i = new Hashtable();
    }
    
    private void a(final fu fu) {
        if (!this.h.isEmpty()) {
            for (int i = 0; i < this.h.size(); ++i) {
                if (((fu)this.h.elementAt(i)).b() < fu.b()) {
                    this.h.insertElementAt(fu, i);
                    return;
                }
            }
        }
        this.h.addElement(fu);
    }
    
    private void b() {
        if (this.b.isEmpty() || this.b.peek() != "input") {
            throw new SAXException("End Element> The top of the stack does not contain the token interpretation");
        }
        if (this.e == null) {
            throw new SAXException("Did not get any timings from input");
        }
        if (this.c == null) {
            throw new SAXException("Did not get any character from input");
        }
        final StringTokenizer stringTokenizer = new StringTokenizer(this.c.toString(), " ");
        final StringTokenizer stringTokenizer2 = new StringTokenizer(this.e, ",");
        StringTokenizer stringTokenizer3;
        if (this.f != null) {
            stringTokenizer3 = new StringTokenizer(this.f, ",");
        }
        else {
            stringTokenizer3 = null;
        }
        this.c = null;
        this.e = null;
        this.f = null;
        if (stringTokenizer.countTokens() != stringTokenizer2.countTokens()) {
            throw new SAXException("timing(" + stringTokenizer2.countTokens() + ") and inputs(" + stringTokenizer.countTokens() + ") information does not have the same number of items");
        }
        final fu fu = new fu();
        fu.a(this.g);
        while (stringTokenizer.hasMoreTokens()) {
            final String nextToken = stringTokenizer.nextToken();
            final String nextToken2 = stringTokenizer2.nextToken();
            double double1 = 0.0;
            if (stringTokenizer3 != null) {
                double1 = Double.parseDouble(stringTokenizer3.nextToken());
            }
            fu.a(new fv(nextToken, Long.parseLong(nextToken2.substring(0, nextToken2.indexOf("-"))), Long.parseLong(nextToken2.substring(1 + nextToken2.indexOf("-"))), double1, true, (byte)0));
        }
        this.a(fu);
    }
    
    @Override
    public final fn a() {
        final Vector h = this.h;
        final Hashtable i = this.i;
        return new ft(h);
    }
    
    @Override
    public void characters(final char[] array, final int n, final int n2) {
        if (gg.a.a()) {
            gg.a.a("Received characters: " + new String(array, n, n2));
        }
        if (!this.b.isEmpty() && this.b.peek() == "input") {
            if (this.c == null) {
                this.c = new StringBuffer(n2);
            }
            this.c.append(array, n, n2);
        }
        else if (!this.b.isEmpty() && this.b.peek() == "NSS_Audio_Statistics") {
            if (this.d == null) {
                this.d = new StringBuffer(n2);
            }
            this.d.append(array, n, n2);
        }
    }
    
    @Override
    public void endElement(final String s, final String s2, final String s3) {
        if (gg.a.a()) {
            gg.a.a("Received endElement " + s2);
        }
        if (s2.equals("result")) {
            if (this.b.isEmpty() || this.b.peek() != "result") {
                throw new SAXException("End Element> The top of the stack does not contain the token result");
            }
            this.b.pop();
        }
        else if (s2.equals("interpretation")) {
            if (this.b.isEmpty() || this.b.peek() != "interpretation") {
                throw new SAXException("End Element> The top of the stack does not contain the token interpretation");
            }
            this.b.pop();
        }
        else {
            if (s2.equals("input")) {
                this.b();
                this.b.pop();
                return;
            }
            if (s2.equals("NSS_Audio_Statistics")) {
                if (this.b.isEmpty() || this.b.peek() != "NSS_Audio_Statistics") {
                    throw new SAXException("End Element> The top of the stack does not contain the token NSS_Audio_Statistics");
                }
                this.b.pop();
            }
            else if (!this.b.isEmpty() && this.b.peek() == "NSS_Audio_Statistics") {
                String trim;
                if (this.d == null) {
                    trim = "";
                }
                else {
                    trim = this.d.toString().trim();
                }
                if (s2.equals("InputAudioLength")) {
                    this.i.put("IAL", trim);
                }
                this.i.put(s2, trim);
                this.d = null;
            }
        }
    }
    
    @Override
    public void startElement(final String s, final String s2, final String s3, final Attributes attributes) {
        if (gg.a.a()) {
            gg.a.a("Received startElement " + s2);
        }
        if (s2.equals("result")) {
            if (this.b.size() != 0) {
                throw new SAXException("StartElement> Found result but it is not the first token.");
            }
            this.b.push("result");
        }
        else {
            if (s2.equals("interpretation")) {
                if (this.b.isEmpty() || this.b.peek() != "result") {
                    throw new SAXException("StartElement> The interpretation token was found without a result being opened before.");
                }
                this.b.push("interpretation");
                final String value = attributes.getValue("timing");
                final String value2 = attributes.getValue("confidence");
                final String value3 = attributes.getValue("word_confidence");
                if (value == null) {
                    throw new SAXException("StartElement> There are no timings associated with this interpretation.");
                }
                if (value2 == null) {
                    throw new SAXException("StartElement> There is no confidence associated with this interpretation.");
                }
                this.e = value;
                this.f = value3;
                try {
                    this.g = Double.parseDouble(value2);
                    return;
                }
                catch (NumberFormatException e) {
                    throw new SAXException("StartElement> Could not parse the confidence: " + value2, e);
                }
            }
            if (s2.equals("input")) {
                if (this.b.isEmpty() || this.b.peek() != "interpretation") {
                    throw new SAXException("StartElement> The input token was found without a interpretation being opened before.");
                }
                this.b.push("input");
            }
            else if (s2.equals("NSS_Audio_Statistics")) {
                if (this.b.isEmpty() || this.b.peek() != "result") {
                    throw new SAXException("StartElement> The NSS_Audio_Statistics token was found without a result being opened before.");
                }
                this.b.push("NSS_Audio_Statistics");
            }
        }
    }
}
