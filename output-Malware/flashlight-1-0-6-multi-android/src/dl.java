import java.util.NoSuchElementException;
import com.nuance.nmsp.client.sdk.oem.i;
import com.nuance.nmsp.client.sdk.oem.AudioSystemOEM;
import java.util.LinkedList;
import java.util.Vector;
import java.io.ByteArrayOutputStream;

// 
// Decompiled by Procyon v0.5.30
// 

public class dl implements ao, aq, ba, bh, dd, hb
{
    private static final be a;
    private am b;
    private an c;
    private by d;
    private ByteArrayOutputStream e;
    private Vector f;
    private boolean g;
    private LinkedList h;
    private boolean i;
    private short j;
    private Vector k;
    private bf l;
    private Object m;
    private ay n;
    private ci o;
    
    static {
        a = dh.a(dl.class);
    }
    
    public dl(final by d, final dn dn, final Vector k, final al al) {
        this.j = -1;
        this.l = null;
        this.m = new Object();
        this.b = ((dt)dn).f();
        this.d = d;
        this.l = ((dt)dn).g_();
        this.k = k;
        this.c = new AudioSystemOEM(this.l, this.b, k);
        this.e = new ByteArrayOutputStream();
        this.f = new Vector();
        this.i = false;
        this.g = false;
        if (al.equals(al.d)) {
            this.n = ay.d;
        }
        else if (al.equals(al.c)) {
            this.n = ay.c;
        }
        else if (al.equals(al.b)) {
            this.n = ay.b;
        }
        else if (al.equals(al.a)) {
            this.n = ay.a;
        }
        else if (al.equals(al.e)) {
            this.n = ay.e;
        }
        if (bx.b(this.b)) {
            this.h = new LinkedList();
        }
        final cl cl = (cl)dn.a();
        if (cl != null) {
            final ci b = cl.b();
            if (b != null) {
                this.o = b.a("NMSPPlayer").a();
            }
        }
    }
    
    private void a(final String s) {
        if (this.d == null) {
            return;
        }
        try {
            this.d.a(s);
        }
        catch (Throwable t) {
            if (dl.a.e()) {
                dl.a.e("Got an exp while calling NMSPAudioPlaybackListener.playerUpdate(" + s + ")[" + t.getClass().getName() + "] msg [" + t.getMessage() + "]");
            }
        }
    }
    
    private void b(final String s) {
        if (this.o != null) {
            this.o.a(s).a();
        }
    }
    
    @Override
    public final void a() {
        if (dl.a.b()) {
            dl.a.b("PlayerImpl.start()");
        }
        this.b("PlayerStart");
        final bf l = this.l;
        final bg bg = new bg((byte)1, this);
        final Thread currentThread = Thread.currentThread();
        this.l.a();
        l.a(bg, this, currentThread);
    }
    
    @Override
    public final void a(final ap ap) {
        if (dl.a.b()) {
            dl.a.b("audio stop call back is called");
        }
        this.j = 5;
        String s;
        if (ap.equals(ap.b)) {
            s = "PLAYBACK_ERROR";
        }
        else {
            s = "STOPPED";
        }
        this.a(s);
    }
    
    @Override
    public final void a(final ap ap, final Object o) {
        if (dl.a.b()) {
            dl.a.b("PlayerImpl.doneCallback()");
        }
        final bf l = this.l;
        final bg bg = new bg((byte)7, new Object[] { ap, o });
        final Thread currentThread = Thread.currentThread();
        this.l.a();
        l.a(bg, this, currentThread);
    }
    
    @Override
    public final void a(final Object o, final Object o2) {
        final bg bg = (bg)o;
        if (dl.a.b()) {
            dl.a.b("\nXMode handleMessage - [" + bg.a + "]");
        }
        switch (bg.a) {
            case 1: {
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handleStartPlayback()");
                }
                if (new i(this.k).a()) {
                    this.b = bx.c(this.b);
                }
                if (this.j == -1) {
                    this.j = 0;
                }
                else {
                    if (this.j != 2) {
                        this.j = 5;
                        if (dl.a.e()) {
                            dl.a.e("PlayImpl.handleStartPlayback() wrong state [state != STATE_INIT]!!!");
                        }
                        this.a("PLAYBACK_ERROR");
                        return;
                    }
                    this.j = 3;
                }
                if (this.j != 0 && this.j != 3) {
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() wrong state [state != STATE_STARTING]!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                if (this.j != 0) {
                    this.c.a();
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() audioSys.pausePlayback() return false!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                if (!this.c.a(this.n, this, this)) {
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() audioSys.startPlayback() return false!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                this.b("StreamStart");
            }
            case 2: {
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handleStopPlayback()");
                }
                if (this.j != 5 && this.j != 4) {
                    this.j = 4;
                    this.c.b(this);
                    return;
                }
                break;
            }
            case 3: {
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handlePausePlayback()");
                }
                if (this.j != 5 && this.j != 4) {
                    this.j = 2;
                    this.c.a();
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() audioSys.pausePlayback() return false!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                this.j = 5;
                if (dl.a.e()) {
                    dl.a.e("PlayImpl.handlePausePlayback() wrong state [state == " + this.j + "]!!!");
                }
                this.a("PLAYBACK_ERROR");
            }
            case 4: {
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handlePrevious()");
                }
                if (this.j != 5 && this.j != 4) {
                    this.c.b();
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() audioSys.previousPlayback() return false!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                this.j = 5;
                if (dl.a.e()) {
                    dl.a.e("PlayImpl.handlePausePlayback() wrong state [state == " + this.j + "]!!!");
                }
                this.a("PLAYBACK_ERROR");
            }
            case 5: {
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handleNext()");
                }
                if (this.j != 5 && this.j != 4) {
                    this.c.c();
                    this.j = 5;
                    if (dl.a.e()) {
                        dl.a.e("PlayImpl.handleStartPlayback() audioSys.nextPlayback() return false!!!");
                    }
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                this.j = 5;
                if (dl.a.e()) {
                    dl.a.e("PlayImpl.handlePausePlayback() wrong state [state == " + this.j + "]!!!");
                }
                this.a("PLAYBACK_ERROR");
            }
            case 6: {
                final Object[] array = (Object[])bg.b;
                final byte[] array2 = (byte[])array[0];
                final boolean booleanValue = (boolean)array[1];
                if (dl.a.b()) {
                    dl.a.b("PlayerImpl.handleAddBuffer()");
                }
                final Object m = this.m;
                // monitorenter(m)
            Label_0873:
                while (true) {
                    if (array2 == null) {
                        break Label_0873;
                    }
                    while (true) {
                        try {
                            final am b = this.b;
                            bx.a();
                            if (bx.b(this.b)) {
                                this.h.add(array2);
                                if (booleanValue) {
                                    this.i = true;
                                }
                                return;
                            }
                        }
                        finally {
                        }
                        // monitorexit(m)
                        this.e.write(array2, 0, array2.length);
                        this.f.addElement(array2);
                        continue Label_0873;
                    }
                    break;
                }
                break;
            }
            case 7: {
                final ap ap = (ap)((Object[])bg.b)[0];
                if (dl.a.b()) {
                    dl.a.b("audio done call back is called");
                }
                if (ap.equals(ap.b)) {
                    this.j = 5;
                    this.a("PLAYBACK_ERROR");
                    return;
                }
                this.j = 5;
                this.b("StreamStop");
                this.a("STOPPED");
            }
        }
    }
    
    @Override
    public final void a(final byte[] array, final int n, final int n2, final boolean b) {
        if (dl.a.c()) {
            dl.a.c("addAudioBuf(" + array + ", " + b + ")");
        }
        if (array == null && !b) {
            throw new NullPointerException("buffer is null!");
        }
        if (array != null && n < 0) {
            throw new IllegalArgumentException("offset cannot be negative!!!");
        }
        if (array != null && n2 <= 0) {
            throw new IllegalArgumentException("length can only be positive!!!");
        }
        if ((this.b == am.c || this.b == am.b || this.b == am.a) && n2 > 153600) {
            this.a("PLAYBACK_ERROR");
            this.f();
            return;
        }
        if (this.g) {
            throw new dk("audio player is full, the last buffer has already apended!");
        }
        if (!this.g && b) {
            this.g = true;
        }
        Object o = null;
        if (array != null) {
            o = new byte[n2];
            System.arraycopy(array, n, o, 0, n2);
        }
        final Object[] array2 = { o, new Boolean(b) };
        final bf l = this.l;
        final bg bg = new bg((byte)6, array2);
        final Thread currentThread = Thread.currentThread();
        this.l.a();
        l.a(bg, this, currentThread);
    }
    
    @Override
    public final void a(byte[] array, final Object o, final aw aw, final aw aw2, final Float n) {
        if (dl.a.b()) {
            dl.a.b("audio call back is called time: [" + System.currentTimeMillis() + "]");
        }
        if (this.j == 0) {
            this.j = 1;
            this.a("STARTED");
        }
        final am b = this.b;
        bx.a();
        if (!bx.b(this.b)) {
            final am b2 = this.b;
            bx.b();
            if (!bx.a(this.b)) {
                array = null;
            }
        }
        else {
            array = (byte[])o;
        }
        final int length = array.length;
        int length2 = 0;
        Label_0130: {
            if (bx.b(this.b)) {
                if (this.h.isEmpty()) {
                    if (this.i) {
                        length2 = -1;
                    }
                    else {
                        length2 = 0;
                    }
                }
                else {
                    Label_0576: {
                        try {
                            final byte[] array2 = this.h.removeFirst();
                            if (length < array2.length) {
                                if (dl.a.e()) {
                                    dl.a.e("Buffer is too small to contain the Speex buffer.");
                                }
                                break Label_0576;
                            }
                            else {
                                final int length3 = array2.length;
                                System.arraycopy(array2, 0, array, 0, length3);
                                length2 = length3;
                            }
                        }
                        catch (NoSuchElementException ex2) {
                            length2 = 0;
                        }
                        break Label_0130;
                    }
                    length2 = 0;
                }
            }
            else {
                while (true) {
                Label_0301:
                    while (true) {
                        Label_0315: {
                            Label_0321: {
                                synchronized (this.m) {
                                    if (this.e.size() > 0) {
                                        break Label_0321;
                                    }
                                    if (this.i) {
                                        length2 = -1;
                                        break;
                                    }
                                }
                                break Label_0315;
                            }
                        Label_0384_Outer:
                            while (true) {
                                final byte[] byteArray = this.e.toByteArray();
                                while (true) {
                                    Label_0565: {
                                        while (true) {
                                            try {
                                                this.e.close();
                                                this.e = null;
                                                this.e = new ByteArrayOutputStream();
                                                if (length < byteArray.length) {
                                                    final am b3 = this.b;
                                                    bx.a();
                                                    if (bx.a(this.b)) {
                                                        length2 = length;
                                                        if (length2 < byteArray.length) {
                                                            this.e.write(byteArray, length2, byteArray.length - length2);
                                                        }
                                                        if (dl.a.b()) {
                                                            dl.a.b("feed oem audio data len [" + length2 + "] complete buffer size [" + byteArray.length + "]");
                                                        }
                                                        System.arraycopy(byteArray, 0, array, 0, length2);
                                                        continue Label_0301;
                                                    }
                                                    break Label_0565;
                                                }
                                            }
                                            catch (Exception ex) {
                                                System.out.println("got an exception [" + ex.getClass().getName() + "] message [" + ex.getMessage() + "]");
                                                continue Label_0384_Outer;
                                            }
                                            break;
                                        }
                                        final am b4 = this.b;
                                        bx.a();
                                        if (bx.a(this.b)) {
                                            length2 = byteArray.length;
                                            continue;
                                        }
                                    }
                                    length2 = 0;
                                    continue;
                                }
                            }
                        }
                        length2 = 0;
                        continue Label_0301;
                    }
                }
            }
        }
        if (length2 > 0) {
            this.a("BUFFER_PLAYED");
        }
        final am b5 = this.b;
        bx.a();
        if (!bx.b(this.b)) {
            final am b6 = this.b;
            bx.b();
            if (bx.a(this.b)) {
                aw.a = length2;
            }
            return;
        }
        aw2.a = length2;
    }
    
    @Override
    public final void f() {
        if (dl.a.b()) {
            dl.a.b("PlayerImpl.start()");
        }
        this.b("PlayerStop");
        final bf l = this.l;
        final bg bg = new bg((byte)2, this);
        final Thread currentThread = Thread.currentThread();
        this.l.a();
        l.a(bg, this, currentThread);
    }
}
