import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class do
{
    private static final be a;
    
    static {
        a = dh.a(do.class);
    }
    
    public static dn a(final String s, final short n, final String s2, final byte[] array, final String s3, final am am, final am am2, final String s4, final Vector vector, final dp dp) {
        if (do.a.b()) {
            do.a.b("createManager");
        }
        if (s == null || s.length() == 0) {
            do.a.e("NullPointerException gatewayIP is NULL. ");
            throw new NullPointerException("gatewayIP must be provided!");
        }
        if (n <= 0) {
            do.a.e("IllegalArgumentException gatewayPort is invalid. ");
            throw new IllegalArgumentException("gatewayPort invalid value!");
        }
        if (s2 == null) {
            do.a.e("NullPointerException applicationId is NULL. ");
            throw new NullPointerException("Application id can not be null!");
        }
        if (array == null) {
            do.a.e("NullPointerException appKey is NULL. ");
            throw new NullPointerException("Application key can not be null!");
        }
        if (s3 == null) {
            do.a.e("NullPointerException uid is NULL. ");
            throw new NullPointerException("uid can not be null!");
        }
        if (am == null) {
            do.a.e("NullPointerException inputCodec is NULL. ");
            throw new NullPointerException("inputCodec can not be null!");
        }
        if (am2 == null) {
            do.a.e("NullPointerException outputCodec is NULL. ");
            throw new NullPointerException("outputCodec can not be null!");
        }
        if (dp == null) {
            do.a.e("NullPointerException managerListener is NULL. ");
            throw new NullPointerException("managerListener can not be null!");
        }
        if (vector != null) {
            for (int i = 0; i < vector.size(); ++i) {
                final df df = vector.elementAt(i);
                if (df.d() == dg.e || df.d() == dg.f || df.d() == dg.g || df.d() == dg.h || df.d() == dg.d || df.d() == dg.i || df.d() == dg.j) {
                    do.a.e("IllegalArgumentException Parameter type: " + df.d() + " not allowed. ");
                    throw new IllegalArgumentException("Parameter type: " + df.d() + " not allowed. ");
                }
            }
        }
        return new dt(s, n, s2, array, s3, am, am2, s4, vector, dp);
    }
}
