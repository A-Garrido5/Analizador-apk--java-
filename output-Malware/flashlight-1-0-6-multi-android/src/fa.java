import java.lang.reflect.Proxy;
import java.lang.reflect.InvocationHandler;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;

// 
// Decompiled by Procyon v0.5.30
// 

public final class fa
{
    public static final String a;
    public static final String b;
    public static final int c;
    private static final Constructor d;
    private static final Method e;
    private static final Method f;
    private static final Method g;
    private static final Method h;
    private static final Class i;
    private Object j;
    private fb k;
    
    static {
        new fd();
        final Class a2 = fd.a("android.bluetooth.BluetoothHeadset");
        final Class a3 = fd.a("android.bluetooth.BluetoothHeadset$ServiceListener");
        d = fd.a(a2, Context.class, a3);
        if (fd.b(a2, "getState", new Class[0]) == null) {
            fd.a(a2, "getState", new Class[] { BluetoothDevice.class });
        }
        g = fd.a(a2, "getCurrentHeadset", new Class[0]);
        fd.a(a2, "connectHeadset", new Class[] { BluetoothDevice.class });
        if (fd.b(a2, "disconnectHeadset", new Class[0]) == null) {
            fd.a(a2, "disconnectHeadset", new Class[] { BluetoothDevice.class });
        }
        e = fd.a(a2, "startVoiceRecognition", new Class[0]);
        f = fd.a(a2, "stopVoiceRecognition", new Class[0]);
        h = fd.a(a2, "close", new Class[0]);
        fd.a(a2, "getPriority", new Class[] { BluetoothDevice.class });
        fd.a(a2, "setPriority", BluetoothDevice.class, Integer.TYPE);
        i = a3;
        fd.a(a2, "ACTION_STATE_CHANGED");
        a = (String)fd.a(a2, "ACTION_AUDIO_STATE_CHANGED");
        fd.a(a2, "EXTRA_STATE");
        b = (String)fd.a(a2, "EXTRA_AUDIO_STATE");
        fd.a(a2, "STATE_ERROR");
        fd.a(a2, "STATE_DISCONNECTED");
        fd.a(a2, "STATE_CONNECTING");
        fd.a(a2, "STATE_CONNECTED");
        fd.a(a2, "AUDIO_STATE_DISCONNECTED");
        c = (int)fd.a(a2, "AUDIO_STATE_CONNECTED");
        fd.a(a2, "PRIORITY_OFF");
        fd.a(a2, "PRIORITY_UNDEFINED", (Object)(-1));
    }
    
    public fa(final Context context, final fb k) {
        this.k = k;
        final Object proxyInstance = Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[] { fa.i }, new InvocationHandler() {
            @Override
            public final Object invoke(final Object o, final Method method, final Object[] array) {
                if (method.getName().equals("onServiceConnected")) {
                    if (fa.this.k != null) {
                        fa.this.k.a();
                    }
                }
                else if (method.getName().equals("onServiceDisconnected") && fa.this.k != null) {
                    fa.this.k.b();
                }
                return null;
            }
        });
        try {
            this.j = fa.d.newInstance(context, proxyInstance);
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public final BluetoothDevice a() {
        try {
            if (fa.g != null) {
                return (BluetoothDevice)fa.g.invoke(this.j, new Object[0]);
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
    
    public final boolean b() {
        try {
            return (boolean)fa.e.invoke(this.j, new Object[0]);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
    
    public final boolean c() {
        try {
            return (boolean)fa.f.invoke(this.j, new Object[0]);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
    
    public final void d() {
        try {
            fa.h.invoke(this.j, new Object[0]);
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
