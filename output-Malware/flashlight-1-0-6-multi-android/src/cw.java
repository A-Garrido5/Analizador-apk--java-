import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.util.Enumeration;
import java.util.Hashtable;

// 
// Decompiled by Procyon v0.5.30
// 

public class cw extends cv implements db
{
    private static final be a;
    private Hashtable b;
    
    static {
        a = dh.a(cw.class);
    }
    
    public cw() {
        super((short)224);
        this.b = new Hashtable();
    }
    
    public cw(final byte[] array) {
        super((short)224);
        this.b = new Hashtable();
        if (array.length > 0) {
            if ((0xFF & array[0]) == 0xE0) {
                final int a = cv.a(array, 1);
                final byte[] array2 = new byte[a];
                System.arraycopy(array, array.length - a, array2, 0, array2.length);
                this.b(array2);
                return;
            }
            cw.a.e("PDXDictionary() Expected a dictionary. ");
        }
    }
    
    public cw(final byte[] array, final byte b) {
        super((short)224);
        this.b = new Hashtable();
        this.b(array);
    }
    
    private void b(final byte[] array) {
        int i = 0;
        while (i < array.length) {
            final int n = i + 1;
            final int n2 = 0xFF & array[i];
            if (n2 != 22) {
                cw.a.e("PDXDictionary.setContent() Expected an ASCII string but got " + n2 + ". ");
                break;
            }
            final int a = cv.a(array, n);
            final int n3 = n + cv.a(a);
            final byte[] array2 = new byte[a];
            System.arraycopy(array, n3, array2, 0, array2.length);
            final int n4 = a + n3;
            final String s = new String(array2);
            final int n5 = n4 + 1;
            final int n6 = 0xFF & array[n4];
            final int a2 = cv.a(array, n5);
            final int n7 = n5 + cv.a(a2);
            final byte[] array3 = new byte[a2];
            System.arraycopy(array, n7, array3, 0, array3.length);
            i = a2 + n7;
            switch (n6) {
                default: {
                    cw.a.e("PDXDictionary.setContent() Unknown PDXClass type: " + n6 + ". ");
                    continue;
                }
                case 192: {
                    this.b.put(s, new cx(array3));
                    continue;
                }
                case 4: {
                    this.b.put(s, new cu(array3));
                    continue;
                }
                case 193: {
                    this.b.put(s, new da(array3));
                    continue;
                }
                case 22: {
                    this.b.put(s, new ct(array3));
                    continue;
                }
                case 5: {
                    this.b.put(s, new cy());
                    continue;
                }
                case 224: {
                    this.b.put(s, new cw(array3, (byte)0));
                    continue;
                }
                case 16: {
                    this.b.put(s, new cz(array3));
                    continue;
                }
            }
        }
    }
    
    @Override
    public final Enumeration a() {
        return this.b.keys();
    }
    
    protected final void a(final String s, final int n) {
        this.b.put(s, new cx(n));
    }
    
    @Override
    public final void a(final String s, final db db) {
        if (s == null || db == null) {
            throw new IllegalArgumentException("key is : " + s + " value is : " + db);
        }
        if (((cv)db).c() != 224) {
            cw.a.e("PDXDictionary.addDictionary() value is not a valid dictionary.");
            throw new IllegalArgumentException("value is not a valid dictionary. ");
        }
        this.b.put(s, db);
    }
    
    @Override
    public final void a(final String s, final dc dc) {
        if (s == null || dc == null) {
            throw new IllegalArgumentException("key is : " + s + " value is : " + dc);
        }
        if (((cv)dc).c() != 16) {
            cw.a.e("PDXDictionary.addSequence() value is not a valid sequence.");
            throw new IllegalArgumentException("value is not a valid sequence. ");
        }
        this.b.put(s, dc);
    }
    
    @Override
    public final void a(final String s, final String s2) {
        if (s == null || s2 == null) {
            throw new IllegalArgumentException("key is : " + s + " value is : " + s2);
        }
        this.b.put(s, new ct(s2));
    }
    
    public final void a(final String s, final String s2, final short n) {
        switch (n) {
            default: {}
            case 193: {
                this.b.put(s, new da(s2));
            }
            case 22: {
                this.b.put(s, new ct(s2));
            }
        }
    }
    
    @Override
    public final void a(final String s, final byte[] array) {
        if (s == null || array == null) {
            throw new IllegalArgumentException("key is : " + s + " value is : " + array);
        }
        this.b.put(s, new cu(array));
    }
    
    protected final void a(final String s, final byte[] array, final short n) {
        switch (n) {
            default: {
                cw.a.e("PDXDictionary.put() Unknown PDXClass type: " + n + ". ");
            }
            case 192: {
                this.b.put(s, new cx(array));
            }
            case 4: {
                this.b.put(s, new cu(array));
            }
            case 193: {
                this.b.put(s, new da(array));
            }
            case 22: {
                this.b.put(s, new ct(array));
            }
            case 5: {
                this.b.put(s, new cy());
            }
            case 224: {
                this.b.put(s, new cw(array, (byte)0));
            }
            case 16: {
                this.b.put(s, new cz(array));
            }
        }
    }
    
    @Override
    public final boolean a(final String s) {
        if (s == null) {
            throw new NullPointerException("PDXDictionary.containsKey key is null");
        }
        return this.b.containsKey(s);
    }
    
    public final cv b(final String s) {
        return this.b.get(s);
    }
    
    protected final String b(final int n) {
        int i = 0;
        String s = "";
        while (i < n - 1) {
            final String string = s + "    ";
            ++i;
            s = string;
        }
        String string2;
        if (n > 0) {
            string2 = s + "    ";
        }
        else {
            string2 = "";
        }
        final Enumeration<String> keys = (Enumeration<String>)this.b.keys();
        String s2;
        if (n != 0) {
            s2 = "" + "{ \n";
        }
        else {
            s2 = "";
        }
        while (keys.hasMoreElements()) {
            final String s3 = keys.nextElement();
            final cv cv = this.b.get(s3);
            String string3 = null;
            switch (cv.c()) {
                default: {
                    string3 = s2;
                    break;
                }
                case 192: {
                    s2 = s2 + string2 + s3 + ": <INT> " + ((cx)cv).a() + "\n";
                    continue;
                }
                case 4: {
                    s2 = s2 + string2 + s3 + ": <BYTES> \"" + ((cu)cv).a() + "\"\n";
                    continue;
                }
                case 193: {
                    s2 = s2 + string2 + s3 + ": <UTF8> \"" + ((da)cv).a() + "\"\n";
                    continue;
                }
                case 22: {
                    s2 = s2 + string2 + s3 + ": <ASCII> \"" + ((ct)cv).a() + "\"\n";
                    continue;
                }
                case 5: {
                    s2 = s2 + string2 + s3 + ": <NULL> \n";
                    continue;
                }
                case 224: {
                    s2 = s2 + string2 + s3 + ": " + ((cw)cv).b(n + 1) + "\n";
                    continue;
                }
                case 16: {
                    string3 = s2 + string2 + s3 + ": " + ((cz)cv).j(n + 1) + "\n";
                    break;
                }
            }
            s2 = string3;
        }
        if (n != 0) {
            s2 = s2 + s + "} ";
        }
        return s2;
    }
    
    @Override
    public final void b(final String s, final int n) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        this.b.put(s, new cx(n));
    }
    
    @Override
    public final void b(final String s, final String s2) {
        if (s == null || s2 == null) {
            throw new IllegalArgumentException("key is : " + s + " value is : " + s2);
        }
        this.b.put(s, new da(s2));
    }
    
    public final byte[] b() {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final Enumeration<String> keys = this.b.keys();
        while (keys.hasMoreElements()) {
            final String s = keys.nextElement();
            final ct ct = new ct(s);
            cv cv = null;
            Label_0266: {
                Label_0251: {
                    Label_0236: {
                        Label_0221: {
                            Label_0206: {
                                Label_0191: {
                                    try {
                                        byteArrayOutputStream.write(ct.b());
                                        cv = this.b.get(s);
                                        switch (cv.c()) {
                                            case 4: {
                                                byteArrayOutputStream.write(((cu)cv).b());
                                                continue;
                                            }
                                            case 192: {
                                                break Label_0191;
                                            }
                                            case 193: {
                                                break Label_0206;
                                            }
                                            case 22: {
                                                break Label_0221;
                                            }
                                            case 5: {
                                                break Label_0236;
                                            }
                                            case 224: {
                                                break Label_0251;
                                            }
                                            case 16: {
                                                break Label_0266;
                                            }
                                            default: {
                                                continue;
                                            }
                                        }
                                    }
                                    catch (IOException ex) {
                                        cw.a.e("PDXDictionary.getContent() " + ex.toString() + ". ");
                                    }
                                    continue;
                                }
                                byteArrayOutputStream.write(((cx)cv).b());
                                continue;
                            }
                            byteArrayOutputStream.write(((da)cv).b());
                            continue;
                        }
                        byteArrayOutputStream.write(((ct)cv).b());
                        continue;
                    }
                    byteArrayOutputStream.write(((cy)cv).a());
                    continue;
                }
                byteArrayOutputStream.write(((cw)cv).d());
                continue;
            }
            byteArrayOutputStream.write(((cz)cv).b());
        }
        return byteArrayOutputStream.toByteArray();
    }
    
    @Override
    public final short c(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        return this.b.get(s).c();
    }
    
    @Override
    public final int d(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            if (cw.a.e()) {
                cw.a.e("PDXDictionary.getInteger() " + s + " does not exist. ");
            }
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 192) {
            if (cw.a.e()) {
                cw.a.e("PDXDictionary.getInteger() " + s + " is not a PDXInteger. ");
            }
            throw new RuntimeException("key is of wrong type. ");
        }
        return ((cx)cv).a();
    }
    
    public byte[] d() {
        return super.a(this.b());
    }
    
    @Override
    public final byte[] e(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            cw.a.e("PDXDictionary.getByteString() " + s + " does not exist. ");
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 4) {
            cw.a.e("PDXDictionary.getByteString() " + s + " is not a PDXByteString. ");
            throw new RuntimeException("key is of wrong type. ");
        }
        return ((cu)cv).a();
    }
    
    @Override
    public final String f(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            cw.a.e("PDXDictionary.getUTF8String() " + s + " does not exist. ");
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 193) {
            cw.a.e("PDXDictionary.getUTF8String() " + s + " is not a PDXUTF8String. ");
            throw new RuntimeException("key is of wrong type. ");
        }
        return ((da)cv).a();
    }
    
    @Override
    public final String g(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            cw.a.e("PDXDictionary.getAsciiString() " + s + " does not exist. ");
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 22) {
            cw.a.e("PDXDictionary.getAsciiString() " + s + " is not a PDXAsciiString. ");
            throw new RuntimeException("key is of wrong type. ");
        }
        return ((ct)cv).a();
    }
    
    @Override
    public final db h(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            cw.a.e("PDXDictionary.getDictionary() " + s + " does not exist. ");
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 224) {
            cw.a.e("PDXDictionary.getDictionary() " + s + " is not a PDXDictionary. ");
            throw new RuntimeException("key is of wrong type. ");
        }
        return (cw)cv;
    }
    
    @Override
    public final dc i(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("key is null.");
        }
        final cv cv = this.b.get(s);
        if (cv == null) {
            cw.a.e("PDXDictionary.getSequence() " + s + " does not exist. ");
            throw new RuntimeException("key does not exist. ");
        }
        if (cv.c() != 16) {
            cw.a.e("PDXDictionary.getSequence() " + s + " is not a PDXSequence. ");
            throw new RuntimeException("key is of wrong type. ");
        }
        return (cz)cv;
    }
    
    @Override
    public String toString() {
        return this.b(0);
    }
}
