import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

// 
// Decompiled by Procyon v0.5.30
// 

public final class fi implements X509TrustManager
{
    private static X509TrustManager b;
    private fj a;
    
    public fi(final fj a) {
        this.a = a;
        final TrustManagerFactory instance = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        instance.init((KeyStore)null);
        fi.b = (X509TrustManager)instance.getTrustManagers()[0];
    }
    
    @Override
    public final void checkClientTrusted(final X509Certificate[] array, final String s) {
    }
    
    @Override
    public final void checkServerTrusted(final X509Certificate[] array, final String s) {
        int n = 0;
        String name = null;
        int index;
        int n2 = 0;
        int index2 = 0;
        String s2;
        int n3;
        Label_0023_Outer:Label_0109_Outer:
        while (true) {
            while (true) {
            Label_0236:
                while (true) {
                    Label_0151: {
                        while (true) {
                            while (true) {
                                try {
                                    fi.b.checkServerTrusted(array, s);
                                    if (this.a.b == null) {
                                        break;
                                    }
                                    n = 0;
                                    if (n >= array.length) {
                                        break Label_0236;
                                    }
                                    name = array[n].getSubjectDN().getName();
                                    index = name.indexOf("CN=");
                                    if (index == -1) {
                                        break Label_0151;
                                    }
                                    n2 = index + 3;
                                    index2 = name.indexOf(44, n2);
                                    if (index2 == -1) {
                                        s2 = name.substring(n2);
                                        if (!this.a.b.equals(s2)) {
                                            break Label_0151;
                                        }
                                        n3 = 1;
                                        if (n3 == 0) {
                                            throw new CertificateException("certificate summary is not identical");
                                        }
                                        break;
                                    }
                                }
                                catch (CertificateException ex) {
                                    if (!this.a.a) {
                                        throw ex;
                                    }
                                    continue Label_0023_Outer;
                                }
                                break;
                            }
                            s2 = name.substring(n2, index2);
                            continue Label_0109_Outer;
                        }
                    }
                    ++n;
                    continue Label_0109_Outer;
                }
                n3 = 0;
                continue;
            }
        }
        if (this.a.c != null) {
            int n4 = 0;
            boolean b;
            while (true) {
                final int length = array.length;
                b = false;
                if (n4 >= length) {
                    break;
                }
                if (this.a.c.equals(bt.a(array[n4].getEncoded()))) {
                    b = true;
                    break;
                }
                ++n4;
            }
            if (!b) {
                throw new CertificateException("certificate data is not identical");
            }
        }
    }
    
    @Override
    public final X509Certificate[] getAcceptedIssuers() {
        return fi.b.getAcceptedIssuers();
    }
}
