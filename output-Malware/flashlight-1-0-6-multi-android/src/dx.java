import java.util.Vector;
import android.os.Build$VERSION;

// 
// Decompiled by Procyon v0.5.30
// 

public class dx extends dw implements es
{
    private static final be g;
    private static String k;
    private bf h;
    private ds i;
    private eo j;
    
    static {
        g = dh.a(dx.class);
        dx.k = Build$VERSION.RELEASE;
    }
    
    public dx(final dt dt, final ds i, final Vector vector) {
        super(dt, i, vector);
        this.i = i;
        this.h = dt.g_();
        (this.a = dt.h()).a((dq)this);
        this.j = null;
        final bf h = this.h;
        final bg bg = new bg((byte)0, null);
        final Thread currentThread = Thread.currentThread();
        this.h.a();
        h.a(bg, this, currentThread);
    }
    
    private void a(final byte b) {
        if (b == this.j.a) {
            final Vector vector = (Vector)((dt)this.g()).i();
            if (vector != null && vector.size() > 0) {
                dx.g.b("clearResLogsToServer() before clean the log vector tranId[" + b + "] log list size [" + vector.size() + "]");
                int i = 0;
                while (i < vector.size()) {
                    final ep ep = vector.elementAt(i);
                    if (ep.e()) {
                        vector.removeElement(ep);
                    }
                    else {
                        ++i;
                    }
                }
                dx.g.b("clearResLogsToServer() after clean the log vector tranId[" + b + "] log list size [" + vector.size() + "]");
            }
        }
    }
    
    @Override
    public final ax a(final String s, final db db) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (db == null) {
            throw new NullPointerException("dict can not be null");
        }
        return new dz(s, (cw)db);
    }
    
    @Override
    public final ax a(final String s, final db db, final dd dd) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (db == null) {
            throw new NullPointerException("tts_dict can not be null");
        }
        if (dd == null) {
            throw new NullPointerException("audioSink can not be null");
        }
        return new em(s, this.a, (cw)db, dd);
    }
    
    @Override
    public final ax a(final String s, final String s2) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (s2 == null) {
            throw new NullPointerException("text can not be null");
        }
        return new en(s, s2);
    }
    
    @Override
    public final dd a(final String s) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        return new dy(s, this.a, this.h);
    }
    
    @Override
    public final eq a(final eu eu, final String s, final String s2, final String s3, final String s4, final String s5, final db db) {
        String s6 = "";
        if (eu == null) {
            s6 += "commandListener is invalid; ";
        }
        if (s == null || s.equals("")) {
            s6 += "cmd should be non-null; ";
        }
        if (s2 == null || s2.equals("")) {
            s6 += "scriptVersion should be non-null; ";
        }
        if (s3 == null || s3.equals("")) {
            s6 += "dictationLanguage should be non-null; ";
        }
        if (s5 == null || s5.equals("")) {
            s6 += "phoneModel should be non-null; ";
        }
        if (30000L <= 0L) {
            s6 += "commandTimeout is invalid; ";
        }
        if (!s6.equals("")) {
            dx.g.e("NMASResourceImpl.createCommand() " + s6);
            throw new IllegalArgumentException(s6);
        }
        synchronized (this.e) {
            if (this.j != null) {
                this.j.e();
            }
            final du a = this.a;
            du.d();
            if (this.d == 0) {
                final bf h = this.h;
                final bg bg = new bg((byte)0, null);
                final Thread currentThread = Thread.currentThread();
                this.h.a();
                h.a(bg, this, currentThread);
            }
            this.f = this.a.h();
            return this.j = new eo(this.h, eu, s, ((dt)this.c).b, this.a, ((dt)this.c).d(), "1", dx.k, s2, "enus", "ne", ((dt)this.c).e(), s3, s4, s5, ((dt)this.c).d(), "", db, this, this.i, this.f);
        }
    }
    
    @Override
    public final void a() {
        dx.g.b("freeResource() disconnectTimeout:0");
        if (this.j != null) {
            this.j.e();
        }
        synchronized (this.e) {
            if (this.d == 2) {
                this.d = 0;
                final Integer n = new Integer(0);
                final bf h = this.h;
                final bg bg = new bg((byte)3, n);
                final Thread currentThread = Thread.currentThread();
                this.h.a();
                h.a(bg, this, currentThread);
                return;
            }
            throw new dr("the resource was unloaded. ");
        }
    }
    
    @Override
    public final void a(final byte b, final short n) {
        if (b != this.f) {
            return;
        }
        if (this.j != null) {
            this.j.e();
        }
        super.a(b, n);
    }
    
    @Override
    public final void a(final byte b, final byte[] array) {
        final eb a = ec.a(array);
        switch (a.e()) {
            default: {
                dx.g.e("Session.parseXModeMsgBcpData() Unknown command: " + a.e() + ". ");
                break;
            }
            case 29185: {
                this.a(b);
                if (this.j != null) {
                    this.j.a((ej)a, b);
                    return;
                }
                break;
            }
            case 29186: {
                if (this.j != null) {
                    this.j.a((eg)a, b);
                    return;
                }
                break;
            }
            case 29189: {
                this.a(b);
                if (this.j != null) {
                    this.j.a((ek)a, b);
                    return;
                }
                break;
            }
        }
    }
    
    @Override
    public final void a(final Object o, final Object o2) {
        switch (((bg)o).a) {
            default: {
                super.a(o, o2);
            }
            case 0: {
                super.a(this);
            }
            case 3: {
                this.a.b(this);
                final ds i = this.i;
            }
        }
    }
    
    @Override
    public final void a(final short n) {
        dx.g.b("onSessionDisconnected() reasonCode:" + n);
        if (this.j != null) {
            this.j.a(n);
        }
        super.a(n);
    }
    
    @Override
    public final void a(final byte[] array) {
        super.a(array);
        if (this.j != null) {
            this.j.a(array);
        }
    }
    
    @Override
    public final ax b(final String s, final db db) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (db == null) {
            throw new NullPointerException("dict can not be null");
        }
        return new el(s, (cw)db, (byte)2);
    }
    
    @Override
    public final ax c(final String s, final db db) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (db == null) {
            throw new NullPointerException("dict can not be null");
        }
        return new el(s, (cw)db, (byte)3);
    }
    
    @Override
    public final void c() {
        this.j.f();
    }
    
    @Override
    public final ax d(final String s, final db db) {
        if (s == null) {
            throw new NullPointerException("name can not be null");
        }
        if (db == null) {
            throw new NullPointerException("dict can not be null");
        }
        return new el(s, (cw)db, (byte)1);
    }
    
    @Override
    public final void d() {
        this.j.b();
    }
    
    @Override
    public final void e() {
        this.j.c();
    }
    
    @Override
    public final void f() {
        this.j.d();
    }
    
    public final long h() {
        return super.h();
    }
    
    @Override
    public final db j() {
        return new cw();
    }
    
    @Override
    public final dc k() {
        return new cz();
    }
}
