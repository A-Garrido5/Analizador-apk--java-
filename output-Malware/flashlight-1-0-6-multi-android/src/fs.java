import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class fs implements fk
{
    private static final be a;
    private Vector b;
    
    static {
        a = dh.a(fs.class);
    }
    
    public fs() {
        if (fs.a.b()) {
            fs.a.b("AlternativeImpl()");
        }
        this.b = new Vector();
    }
    
    public fs(final Vector b) {
        if (fs.a.b()) {
            fs.a.b("AlternativeImpl(Vector)");
        }
        this.b = b;
    }
    
    private fv b(final int n) {
        return this.b.elementAt(n);
    }
    
    public static void b() {
    }
    
    @Override
    public final int a() {
        final int size = this.b.size();
        int n = 0;
        if (size != 0) {
            for (int i = 0; i < size; ++i) {
                if (!this.b(i).f()) {
                    ++n;
                }
            }
        }
        return n;
    }
    
    @Override
    public final fq a(final int n) {
        int n2;
        int i = n2 = -1;
        while (i != n) {
            if (++n2 > this.b.size()) {
                return null;
            }
            if (this.b(n2).f()) {
                continue;
            }
            ++i;
        }
        final fq b = this.b(n2);
        if (n2 + 1 < this.b.size() && this.b(n2 + 1).f()) {
            this.b(n2 + 1);
        }
        if (n2 != 0 && this.b(n2 - 1).f()) {
            this.b(n2 - 1);
            return b;
        }
        return b;
    }
    
    @Override
    public String toString() {
        if (this.b.size() == 0) {
            return "";
        }
        final StringBuffer sb = new StringBuffer("");
        for (int i = 0; i < this.b.size(); ++i) {
            sb.append(this.b.elementAt(i));
        }
        return sb.toString();
    }
}
