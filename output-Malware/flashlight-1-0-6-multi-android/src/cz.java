import java.util.Enumeration;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class cz extends cv implements dc
{
    private static final be a;
    private Vector b;
    
    static {
        a = dh.a(cz.class);
    }
    
    public cz() {
        super((short)16);
        this.b = new Vector();
    }
    
    public cz(final byte[] array) {
        super((short)16);
        this.b = new Vector();
        int i = 0;
        while (i < array.length) {
            final int n = i + 1;
            final int n2 = 0xFF & array[i];
            final int a = cv.a(array, n);
            final int n3 = n + cv.a(a);
            final byte[] array2 = new byte[a];
            System.arraycopy(array, n3, array2, 0, array2.length);
            i = a + n3;
            switch (n2) {
                default: {
                    cz.a.e("PDXSequence() Unknown PDXClass type: " + n2 + ". ");
                    continue;
                }
                case 192: {
                    this.b.addElement(new cx(array2));
                    continue;
                }
                case 4: {
                    this.b.addElement(new cu(array2));
                    continue;
                }
                case 193: {
                    this.b.addElement(new da(array2));
                    continue;
                }
                case 22: {
                    this.b.addElement(new ct(array2));
                    continue;
                }
                case 5: {
                    this.b.addElement(new cy());
                    continue;
                }
                case 224: {
                    this.b.addElement(new cw(array2, (byte)0));
                    continue;
                }
                case 16: {
                    this.b.addElement(new cz(array2));
                    continue;
                }
            }
        }
    }
    
    @Override
    public final int a() {
        return this.b.size();
    }
    
    @Override
    public final void a(final db db) {
        if (db == null) {
            throw new IllegalArgumentException("value is null.");
        }
        if (((cv)db).c() != 224) {
            cz.a.e("PDXSequence.addDictionary() value is not a valid dictionary.");
            throw new IllegalArgumentException("value is not a valid dictionary. ");
        }
        this.b.addElement(db);
    }
    
    @Override
    public final void a(final dc dc) {
        if (dc == null) {
            throw new IllegalArgumentException("value is null.");
        }
        if (((cv)dc).c() != 16) {
            cz.a.e("PDXSequence.addSequence() value is not a valid sequence.");
            throw new IllegalArgumentException("value is not a valid sequence. ");
        }
        this.b.addElement(dc);
    }
    
    @Override
    public final void a(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("value is null.");
        }
        this.b.addElement(new da(s));
    }
    
    @Override
    public final short b(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getType() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        return this.b.elementAt(n).c();
    }
    
    @Override
    public final void b(final byte[] array) {
        if (array == null) {
            throw new IllegalArgumentException("value is null.");
        }
        this.b.addElement(new cu(array));
    }
    
    public final byte[] b() {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final Enumeration<cv> elements = this.b.elements();
        while (elements.hasMoreElements()) {
            final cv cv = elements.nextElement();
            Label_0224: {
                Label_0210: {
                    Label_0196: {
                        Label_0182: {
                            Label_0168: {
                                Label_0154: {
                                    try {
                                        switch (cv.c()) {
                                            case 4: {
                                                byteArrayOutputStream.write(((cu)cv).b());
                                                continue;
                                            }
                                            case 192: {
                                                break Label_0154;
                                            }
                                            case 193: {
                                                break Label_0168;
                                            }
                                            case 22: {
                                                break Label_0182;
                                            }
                                            case 5: {
                                                break Label_0196;
                                            }
                                            case 224: {
                                                break Label_0210;
                                            }
                                            case 16: {
                                                break Label_0224;
                                            }
                                            default: {
                                                continue;
                                            }
                                        }
                                    }
                                    catch (IOException ex) {
                                        cz.a.e("PDXSequence.toByteArray() " + ex.toString() + ". ");
                                    }
                                    continue;
                                }
                                byteArrayOutputStream.write(((cx)cv).b());
                                continue;
                            }
                            byteArrayOutputStream.write(((da)cv).b());
                            continue;
                        }
                        byteArrayOutputStream.write(((ct)cv).b());
                        continue;
                    }
                    byteArrayOutputStream.write(((cy)cv).a());
                    continue;
                }
                byteArrayOutputStream.write(((cw)cv).d());
                continue;
            }
            byteArrayOutputStream.write(((cz)cv).b());
        }
        return super.a(byteArrayOutputStream.toByteArray());
    }
    
    @Override
    public final int c(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getInteger() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 192) {
            cz.a.e("PDXSequence.getInteger() index " + n + " is not a PDXInteger. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return ((cx)cv).a();
    }
    
    @Override
    public final byte[] d(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getByteString() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 4) {
            cz.a.e("PDXSequence.getByteString() index " + n + " is not a PDXByteString. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return ((cu)cv).a();
    }
    
    @Override
    public final String e(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getUTF8String() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 193) {
            cz.a.e("PDXSequence.getUTF8String() index " + n + " is not a PDXUTF8String. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return ((da)cv).a();
    }
    
    @Override
    public final String f(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getAsciiString() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 22) {
            cz.a.e("PDXSequence.getAsciiString() index " + n + " is not a PDXAsciiString. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return ((ct)cv).a();
    }
    
    @Override
    public final db g(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getDictionary() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 224) {
            cz.a.e("PDXSequence.getDictionary() index " + n + " is not a PDXDictionary. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return (cw)cv;
    }
    
    @Override
    public final dc h(final int n) {
        if (n >= this.b.size()) {
            cz.a.e("PDXSequence.getSequence() index " + n + " is out of range. ");
            throw new IndexOutOfBoundsException();
        }
        final cv cv = this.b.elementAt(n);
        if (cv.c() != 16) {
            cz.a.e("PDXSequence.getSequence() index " + n + " is not a PDXSequence. ");
            throw new RuntimeException("index is of wrong type.");
        }
        return (cz)cv;
    }
    
    @Override
    public final void i(final int n) {
        this.b.addElement(new cx(n));
    }
    
    protected final String j(final int n) {
        int i = 0;
        String s = "";
        while (i < n - 1) {
            final String string = s + "    ";
            ++i;
            s = string;
        }
        String string2;
        if (n > 0) {
            string2 = s + "    ";
        }
        else {
            string2 = "";
        }
        final Enumeration elements = this.b.elements();
        String s2 = "" + "[ \n";
        while (elements.hasMoreElements()) {
            final cv cv = elements.nextElement();
            switch (cv.c()) {
                case 192: {
                    s2 = s2 + string2 + "<INT> " + ((cx)cv).a();
                    break;
                }
                case 4: {
                    s2 = s2 + string2 + "<BYTES> \"" + ((cu)cv).a() + "\" ";
                    break;
                }
                case 193: {
                    s2 = s2 + string2 + "<UTF8> \"" + ((da)cv).a() + "\" ";
                    break;
                }
                case 22: {
                    s2 = s2 + string2 + "<ASCII> \"" + ((ct)cv).a() + "\" ";
                    break;
                }
                case 5: {
                    s2 = s2 + string2 + "<NULL> ";
                    break;
                }
                case 224: {
                    s2 = s2 + string2 + ((cw)cv).b(n + 1);
                    break;
                }
                case 16: {
                    s2 = s2 + string2 + ((cz)cv).j(n + 1);
                    break;
                }
            }
            if (elements.hasMoreElements()) {
                s2 += ",";
            }
            s2 += "\n";
        }
        return s2 + s + "] ";
    }
    
    @Override
    public String toString() {
        return this.j(0);
    }
}
