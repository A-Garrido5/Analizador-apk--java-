import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public final class fu implements fp
{
    private Vector a;
    private ft b;
    private double c;
    
    public fu() {
        this.a = new Vector();
        this.b = null;
        this.c = 0.0;
    }
    
    private Vector b(final int n, final int n2) {
        final Vector<fv> vector = new Vector<fv>();
        final Vector c = this.c(n, n2);
        for (int i = 0; i < c.size(); ++i) {
            final fv fv = c.elementAt(i);
            if (fv.e()) {
                vector.addElement(fv);
            }
        }
        return vector;
    }
    
    private Vector c(int n) {
        final Vector<fv> vector = new Vector<fv>();
        final int length = this.toString().length();
        int n2;
        if (n > 0) {
            n2 = n - 1;
        }
        else {
            n2 = n;
        }
        if (n < length) {
            ++n;
        }
        final Vector c = this.c(n2, n);
        for (int i = 0; i < c.size(); ++i) {
            final fv fv = c.elementAt(i);
            if (fv.e()) {
                vector.addElement(fv);
            }
        }
        return vector;
    }
    
    private Vector c(final int n, final int n2) {
        int i = 0;
        final Vector<fv> vector = new Vector<fv>();
        final int length = this.toString().length();
        int n3 = -1;
        int j = -1;
        int n4 = 0;
        while (i < this.a.size()) {
            if (n == n4 && n2 == n4) {
                return vector;
            }
            n4 += this.d(i).b().length();
            if (j == -1 && n < n4) {
                j = i;
            }
            if (j != -1 && n3 == -1 && n2 <= n4) {
                n3 = i;
            }
            ++i;
        }
        if (n3 == -1 && n2 == length) {
            n3 = -1 + this.a.size();
        }
        if (j == -1 || n3 == -1) {
            return vector;
        }
        while (j <= n3) {
            vector.addElement(this.d(j));
            ++j;
        }
        return vector;
    }
    
    private fv d(final int n) {
        return this.a.elementAt(n);
    }
    
    @Override
    public final int a() {
        final int size = this.a.size();
        int n = 0;
        if (size != 0) {
            for (int i = 0; i < size; ++i) {
                if (!this.d(i).f()) {
                    ++n;
                }
            }
        }
        return n;
    }
    
    @Override
    public final fl a(final int n, final int n2) {
        final int length = this.toString().length();
        if (n < 0 || n2 > length) {
            throw new IndexOutOfBoundsException();
        }
        if (n2 < n) {
            throw new IllegalArgumentException("Cursor position end is less than begin");
        }
        Vector vector;
        if (n == n2) {
            vector = this.c(n);
        }
        else {
            vector = this.b(n, n2);
        }
        if (vector.isEmpty()) {
            return new fl(new Vector());
        }
        final Vector a = this.b.a(this, vector);
        for (int i = 0; i < this.a.size(); ++i) {
            this.d(i);
            vector.firstElement();
            vector.lastElement();
        }
        return new fl(a);
    }
    
    @Override
    public final fq a(final int n) {
        int n2;
        int i = n2 = -1;
        while (i != n) {
            if (++n2 > this.a.size()) {
                return null;
            }
            if (this.d(n2).f()) {
                continue;
            }
            ++i;
        }
        final fq d = this.d(n2);
        if (n2 + 1 < this.a.size() && this.d(n2 + 1).f()) {
            this.d(n2 + 1);
        }
        if (n2 != 0 && this.d(n2 - 1).f()) {
            this.d(n2 - 1);
            return d;
        }
        return d;
    }
    
    final fs a(final long n, final long n2) {
        final Vector<fv> vector = new Vector<fv>();
        for (int i = 0; i < this.a.size(); ++i) {
            final fv d = this.d(i);
            final long c = d.c();
            final long d2 = d.d();
            if (c < n2 && d2 > n) {
                vector.addElement(d);
            }
            else if (c > n2) {
                break;
            }
        }
        if (vector.size() > 0 && vector.firstElement().f()) {
            vector.removeElementAt(0);
        }
        if (vector.size() > 0 && vector.lastElement().f()) {
            vector.removeElementAt(-1 + vector.size());
        }
        return new fs(vector);
    }
    
    public final void a(final double c) {
        this.c = c;
    }
    
    final void a(final ft b) {
        this.b = b;
    }
    
    public final void a(final fv fv) {
        if (this.a.size() != 0 && !this.a.lastElement().h() && !fv.g()) {
            final int size = this.a.size();
            long n;
            if (this.a.size() == 0) {
                n = 0L;
            }
            else if (size == this.a.size()) {
                n = this.d(size - 1).d();
            }
            else {
                n = this.d(size).c();
            }
            this.a.insertElementAt(new fv(" ", n, n, 0.0, false, (byte)0), size);
        }
        this.a.addElement(fv);
    }
    
    @Override
    public final double b() {
        return this.c;
    }
    
    @Override
    public final fq b(final int n) {
        int n2 = 0;
        final int size = this.a.size();
        fq fq = null;
        if (size > 0) {
            final int length = this.toString().length();
            fq = null;
            if (n <= length) {
                for (int i = 0; i <= n; i += fq.toString().length()) {
                    fq = this.a.get(n2);
                    ++n2;
                    if (fq != null) {}
                }
            }
        }
        return fq;
    }
    
    final void c() {
        String property = System.getProperty("line.separator");
        if (property == null) {
            property = "\n";
        }
        for (int i = 0; i < this.a.size(); ++i) {
            final fv d = this.d(i);
            final StringBuffer sb = new StringBuffer(d.b());
            int index;
            for (int j = 0; j < sb.length(); j = index + 1) {
                index = sb.toString().indexOf("\r\n", j);
                if (index == -1) {
                    break;
                }
                sb.deleteCharAt(index);
                sb.deleteCharAt(index);
                sb.insert(index, '\n');
            }
            int index2;
            for (int k = 0; k < sb.length(); k = index2 + property.length()) {
                index2 = sb.toString().indexOf("\n", k);
                if (index2 == -1) {
                    break;
                }
                sb.deleteCharAt(index2);
                sb.insert(index2, property);
            }
            d.a(sb.toString());
        }
    }
    
    @Override
    public final String toString() {
        if (this.a.size() == 0) {
            return "";
        }
        final StringBuffer sb = new StringBuffer();
        for (int i = 0; i < this.a.size(); ++i) {
            sb.append(this.d(i).toString());
        }
        return sb.toString();
    }
}
