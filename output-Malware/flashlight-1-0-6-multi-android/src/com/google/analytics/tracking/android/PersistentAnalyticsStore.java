// 
// Decompiled by Procyon v0.5.30
// 

package com.google.analytics.tracking.android;

import android.database.Cursor;
import java.util.Collections;
import android.content.ContentValues;
import java.util.List;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.Iterator;
import com.google.android.gms.analytics.internal.Command;
import java.util.Collection;
import java.util.Map;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.HttpClient;
import android.content.Context;
import com.google.android.gms.common.util.VisibleForTesting;

class PersistentAnalyticsStore implements AnalyticsStore
{
    @VisibleForTesting
    static final String BACKEND_LIBRARY_VERSION = "";
    private static final String CREATE_HITS_TABLE;
    private static final String DATABASE_FILENAME = "google_analytics_v2.db";
    @VisibleForTesting
    static final String HITS_TABLE = "hits2";
    @VisibleForTesting
    static final String HIT_APP_ID = "hit_app_id";
    @VisibleForTesting
    static final String HIT_ID = "hit_id";
    @VisibleForTesting
    static final String HIT_STRING = "hit_string";
    @VisibleForTesting
    static final String HIT_TIME = "hit_time";
    @VisibleForTesting
    static final String HIT_URL = "hit_url";
    private Clock mClock;
    private final Context mContext;
    private final String mDatabaseName;
    private final PersistentAnalyticsStore$AnalyticsDatabaseHelper mDbHelper;
    private volatile Dispatcher mDispatcher;
    private long mLastDeleteStaleHitsTime;
    private final AnalyticsStoreStateListener mListener;
    
    static {
        CREATE_HITS_TABLE = String.format("CREATE TABLE IF NOT EXISTS %s ( '%s' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, '%s' INTEGER NOT NULL, '%s' TEXT NOT NULL, '%s' TEXT NOT NULL, '%s' INTEGER);", "hits2", "hit_id", "hit_time", "hit_url", "hit_string", "hit_app_id");
    }
    
    PersistentAnalyticsStore(final AnalyticsStoreStateListener analyticsStoreStateListener, final Context context) {
        this(analyticsStoreStateListener, context, "google_analytics_v2.db");
    }
    
    PersistentAnalyticsStore(final AnalyticsStoreStateListener mListener, final Context context, final String mDatabaseName) {
        this.mContext = context.getApplicationContext();
        this.mDatabaseName = mDatabaseName;
        this.mListener = mListener;
        this.mClock = new Clock() {
            @Override
            public long currentTimeMillis() {
                return System.currentTimeMillis();
            }
        };
        this.mDbHelper = new PersistentAnalyticsStore$AnalyticsDatabaseHelper(this, this.mContext, this.mDatabaseName);
        this.mDispatcher = new SimpleNetworkDispatcher(this, this.createDefaultHttpClientFactory(), this.mContext);
        this.mLastDeleteStaleHitsTime = 0L;
    }
    
    private HttpClientFactory createDefaultHttpClientFactory() {
        return new HttpClientFactory() {
            @Override
            public HttpClient newInstance() {
                return (HttpClient)new DefaultHttpClient();
            }
        };
    }
    
    private void fillVersionParametersIfNecessary(final Map map, final Collection collection) {
        for (final Command command : collection) {
            if (command.getId().equals("appendVersion")) {
                this.storeVersion(map, command.getUrlParam(), command.getValue());
                break;
            }
        }
    }
    
    public static String generateHitString(final Map map) {
        final ArrayList<String> list = new ArrayList<String>(map.size());
        for (final Map.Entry<String, V> entry : map.entrySet()) {
            list.add(entry.getKey() + "=" + HitBuilder.encode((String)entry.getValue()));
        }
        return TextUtils.join((CharSequence)"&", (Iterable)list);
    }
    
    private SQLiteDatabase getWritableDatabase(final String s) {
        try {
            return this.mDbHelper.getWritableDatabase();
        }
        catch (SQLiteException ex) {
            Log.w(s);
            return null;
        }
    }
    
    private void removeOldHitIfFull() {
        final int n = 1 + (-2000 + this.getNumStoredHits());
        if (n > 0) {
            final List peekHits = this.peekHits(n);
            Log.wDebug("Store full, deleting " + peekHits.size() + " hits to make room");
            this.deleteHits(peekHits);
        }
    }
    
    private void storeVersion(final Map map, final String s, final String s2) {
        String string;
        if (s2 == null) {
            string = "";
        }
        else {
            string = new StringBuilder().append(s2).toString();
        }
        if (s != null) {
            map.put(s, string);
        }
    }
    
    private void writeHitToDatabase(final Map map, final long n, String s) {
        final SQLiteDatabase writableDatabase = this.getWritableDatabase("Error opening database for putHit");
        if (writableDatabase == null) {
            return;
        }
        final ContentValues contentValues = new ContentValues();
        contentValues.put("hit_string", generateHitString(map));
        contentValues.put("hit_time", n);
        while (true) {
            Label_0119: {
                if (!map.containsKey("AppUID")) {
                    break Label_0119;
                }
                Label_0125: {
                    try {
                        final long long1 = Long.parseLong(map.get("AppUID"));
                        contentValues.put("hit_app_id", long1);
                        if (s == null) {
                            s = "http://www.google-analytics.com/collect";
                        }
                        if (s.length() == 0) {
                            Log.w("empty path: not sending hit");
                            return;
                        }
                        break Label_0125;
                    }
                    catch (NumberFormatException ex) {}
                    break Label_0119;
                }
                contentValues.put("hit_url", s);
                try {
                    writableDatabase.insert("hits2", (String)null, contentValues);
                    this.mListener.reportStoreIsEmpty(false);
                    return;
                }
                catch (SQLiteException ex2) {
                    Log.w("Error storing hit");
                    return;
                }
            }
            final long long1 = 0L;
            continue;
        }
    }
    
    @Override
    public void clearHits(final long n) {
        int n2 = 1;
        final SQLiteDatabase writableDatabase = this.getWritableDatabase("Error opening database for clearHits");
        if (writableDatabase != null) {
            if (n == 0L) {
                writableDatabase.delete("hits2", (String)null, (String[])null);
            }
            else {
                final String[] array = new String[n2];
                array[0] = Long.valueOf(n).toString();
                writableDatabase.delete("hits2", "hit_app_id = ?", array);
            }
            final AnalyticsStoreStateListener mListener = this.mListener;
            if (this.getNumStoredHits() != 0) {
                n2 = 0;
            }
            mListener.reportStoreIsEmpty(n2 != 0);
        }
    }
    
    @Override
    public void close() {
        try {
            this.mDbHelper.getWritableDatabase().close();
        }
        catch (SQLiteException ex) {
            Log.w("Error opening database for close");
        }
    }
    
    public void deleteHits(final Collection collection) {
        if (collection == null) {
            throw new NullPointerException("hits cannot be null");
        }
        if (!collection.isEmpty()) {
            final SQLiteDatabase writableDatabase = this.getWritableDatabase("Error opening database for deleteHit");
            if (writableDatabase != null) {
                final String[] array = new String[collection.size()];
                final String format = String.format("HIT_ID in (%s)", TextUtils.join((CharSequence)",", (Iterable)Collections.nCopies(array.length, "?")));
                final Iterator<Hit> iterator = collection.iterator();
                int n = 0;
                while (iterator.hasNext()) {
                    final Hit hit = iterator.next();
                    final int n2 = n + 1;
                    array[n] = Long.toString(hit.getHitId());
                    n = n2;
                }
                try {
                    writableDatabase.delete("hits2", format, array);
                    final AnalyticsStoreStateListener mListener = this.mListener;
                    final int numStoredHits = this.getNumStoredHits();
                    boolean b = false;
                    if (numStoredHits == 0) {
                        b = true;
                    }
                    mListener.reportStoreIsEmpty(b);
                }
                catch (SQLiteException ex) {
                    Log.w("Error deleting hit " + collection);
                }
            }
        }
    }
    
    int deleteStaleHits() {
        int n = 1;
        final long currentTimeMillis = this.mClock.currentTimeMillis();
        if (currentTimeMillis > 86400000L + this.mLastDeleteStaleHitsTime) {
            this.mLastDeleteStaleHitsTime = currentTimeMillis;
            final SQLiteDatabase writableDatabase = this.getWritableDatabase("Error opening database for deleteStaleHits");
            if (writableDatabase != null) {
                final long n2 = this.mClock.currentTimeMillis() - 2592000000L;
                final String[] array = new String[n];
                array[0] = Long.toString(n2);
                final int delete = writableDatabase.delete("hits2", "HIT_TIME < ?", array);
                final AnalyticsStoreStateListener mListener = this.mListener;
                if (this.getNumStoredHits() != 0) {
                    n = 0;
                }
                mListener.reportStoreIsEmpty(n != 0);
                return delete;
            }
        }
        return 0;
    }
    
    @Override
    public void dispatch() {
        Log.vDebug("dispatch running...");
        if (this.mDispatcher.okToDispatch()) {
            final List peekHits = this.peekHits(40);
            if (peekHits.isEmpty()) {
                Log.vDebug("...nothing to dispatch");
                this.mListener.reportStoreIsEmpty(true);
                return;
            }
            final int dispatchHits = this.mDispatcher.dispatchHits(peekHits);
            Log.vDebug("sent " + dispatchHits + " of " + peekHits.size() + " hits");
            this.deleteHits(peekHits.subList(0, Math.min(dispatchHits, peekHits.size())));
            if (dispatchHits == peekHits.size() && this.getNumStoredHits() > 0) {
                GAServiceManager.getInstance().dispatch();
            }
        }
    }
    
    @VisibleForTesting
    public PersistentAnalyticsStore$AnalyticsDatabaseHelper getDbHelper() {
        return this.mDbHelper;
    }
    
    @VisibleForTesting
    PersistentAnalyticsStore$AnalyticsDatabaseHelper getHelper() {
        return this.mDbHelper;
    }
    
    int getNumStoredHits() {
        Cursor rawQuery = null;
        final SQLiteDatabase writableDatabase = this.getWritableDatabase("Error opening database for requestNumHitsPending");
        int n = 0;
        if (writableDatabase == null) {
            return n;
        }
        try {
            rawQuery = writableDatabase.rawQuery("SELECT COUNT(*) from hits2", (String[])null);
            final boolean moveToFirst = rawQuery.moveToFirst();
            n = 0;
            if (moveToFirst) {
                n = (int)rawQuery.getLong(0);
            }
            return n;
        }
        catch (SQLiteException ex) {
            Log.w("Error getting numStoredHits");
            n = 0;
            return 0;
        }
        finally {
            if (rawQuery != null) {
                rawQuery.close();
            }
        }
    }
    
    public List peekHits(final int p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: ldc_w           "Error opening database for peekHits"
        //     4: invokespecial   com/google/analytics/tracking/android/PersistentAnalyticsStore.getWritableDatabase:(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase;
        //     7: astore_2       
        //     8: aload_2        
        //     9: ifnonnull       22
        //    12: new             Ljava/util/ArrayList;
        //    15: dup            
        //    16: invokespecial   java/util/ArrayList.<init>:()V
        //    19: astore_3       
        //    20: aload_3        
        //    21: areturn        
        //    22: aconst_null    
        //    23: astore          4
        //    25: new             Ljava/util/ArrayList;
        //    28: dup            
        //    29: invokespecial   java/util/ArrayList.<init>:()V
        //    32: pop            
        //    33: aload_2        
        //    34: ldc             "hits2"
        //    36: iconst_3       
        //    37: anewarray       Ljava/lang/String;
        //    40: dup            
        //    41: iconst_0       
        //    42: ldc             "hit_id"
        //    44: aastore        
        //    45: dup            
        //    46: iconst_1       
        //    47: ldc             "hit_time"
        //    49: aastore        
        //    50: dup            
        //    51: iconst_2       
        //    52: ldc             "hit_url"
        //    54: aastore        
        //    55: aconst_null    
        //    56: aconst_null    
        //    57: aconst_null    
        //    58: aconst_null    
        //    59: ldc_w           "%s ASC, %s ASC"
        //    62: iconst_2       
        //    63: anewarray       Ljava/lang/Object;
        //    66: dup            
        //    67: iconst_0       
        //    68: ldc             "hit_url"
        //    70: aastore        
        //    71: dup            
        //    72: iconst_1       
        //    73: ldc             "hit_id"
        //    75: aastore        
        //    76: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //    79: iload_1        
        //    80: invokestatic    java/lang/Integer.toString:(I)Ljava/lang/String;
        //    83: invokevirtual   android/database/sqlite/SQLiteDatabase.query:(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
        //    86: astore          10
        //    88: aload           10
        //    90: astore          11
        //    92: new             Ljava/util/ArrayList;
        //    95: dup            
        //    96: invokespecial   java/util/ArrayList.<init>:()V
        //    99: astore          12
        //   101: aload           11
        //   103: invokeinterface android/database/Cursor.moveToFirst:()Z
        //   108: ifeq            174
        //   111: new             Lcom/google/analytics/tracking/android/Hit;
        //   114: dup            
        //   115: aconst_null    
        //   116: aload           11
        //   118: iconst_0       
        //   119: invokeinterface android/database/Cursor.getLong:(I)J
        //   124: aload           11
        //   126: iconst_1       
        //   127: invokeinterface android/database/Cursor.getLong:(I)J
        //   132: invokespecial   com/google/analytics/tracking/android/Hit.<init>:(Ljava/lang/String;JJ)V
        //   135: astore          13
        //   137: aload           13
        //   139: aload           11
        //   141: iconst_2       
        //   142: invokeinterface android/database/Cursor.getString:(I)Ljava/lang/String;
        //   147: invokevirtual   com/google/analytics/tracking/android/Hit.setHitUrl:(Ljava/lang/String;)V
        //   150: aload           12
        //   152: aload           13
        //   154: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   159: pop            
        //   160: aload           11
        //   162: invokeinterface android/database/Cursor.moveToNext:()Z
        //   167: istore          15
        //   169: iload           15
        //   171: ifne            111
        //   174: aload           11
        //   176: ifnull          186
        //   179: aload           11
        //   181: invokeinterface android/database/Cursor.close:()V
        //   186: aload_2        
        //   187: ldc             "hits2"
        //   189: iconst_2       
        //   190: anewarray       Ljava/lang/String;
        //   193: dup            
        //   194: iconst_0       
        //   195: ldc             "hit_id"
        //   197: aastore        
        //   198: dup            
        //   199: iconst_1       
        //   200: ldc             "hit_string"
        //   202: aastore        
        //   203: aconst_null    
        //   204: aconst_null    
        //   205: aconst_null    
        //   206: aconst_null    
        //   207: ldc_w           "%s ASC"
        //   210: iconst_1       
        //   211: anewarray       Ljava/lang/Object;
        //   214: dup            
        //   215: iconst_0       
        //   216: ldc             "hit_id"
        //   218: aastore        
        //   219: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   222: iload_1        
        //   223: invokestatic    java/lang/Integer.toString:(I)Ljava/lang/String;
        //   226: invokevirtual   android/database/sqlite/SQLiteDatabase.query:(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
        //   229: astore          24
        //   231: aload           24
        //   233: invokeinterface android/database/Cursor.moveToFirst:()Z
        //   238: ifeq            327
        //   241: iconst_0       
        //   242: istore          25
        //   244: aload           24
        //   246: instanceof      Landroid/database/sqlite/SQLiteCursor;
        //   249: ifeq            411
        //   252: aload           24
        //   254: checkcast       Landroid/database/sqlite/SQLiteCursor;
        //   257: invokevirtual   android/database/sqlite/SQLiteCursor.getWindow:()Landroid/database/CursorWindow;
        //   260: invokevirtual   android/database/CursorWindow.getNumRows:()I
        //   263: ifgt            411
        //   266: new             Ljava/lang/StringBuilder;
        //   269: dup            
        //   270: ldc_w           "hitString for hitId "
        //   273: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   276: aload           12
        //   278: iload           25
        //   280: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   285: checkcast       Lcom/google/analytics/tracking/android/Hit;
        //   288: invokevirtual   com/google/analytics/tracking/android/Hit.getHitId:()J
        //   291: invokevirtual   java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
        //   294: ldc_w           " too large.  Hit will be deleted."
        //   297: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   300: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   303: invokestatic    com/google/analytics/tracking/android/Log.w:(Ljava/lang/String;)I
        //   306: pop            
        //   307: iload           25
        //   309: iconst_1       
        //   310: iadd           
        //   311: istore          26
        //   313: aload           24
        //   315: invokeinterface android/database/Cursor.moveToNext:()Z
        //   320: istore          27
        //   322: iload           27
        //   324: ifne            616
        //   327: aload           24
        //   329: ifnull          339
        //   332: aload           24
        //   334: invokeinterface android/database/Cursor.close:()V
        //   339: aload           12
        //   341: areturn        
        //   342: astore          7
        //   344: aconst_null    
        //   345: astore          8
        //   347: new             Ljava/lang/StringBuilder;
        //   350: dup            
        //   351: ldc_w           "error in peekHits fetching hitIds: "
        //   354: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   357: aload           7
        //   359: invokevirtual   android/database/sqlite/SQLiteException.getMessage:()Ljava/lang/String;
        //   362: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   365: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   368: invokestatic    com/google/analytics/tracking/android/Log.w:(Ljava/lang/String;)I
        //   371: pop            
        //   372: new             Ljava/util/ArrayList;
        //   375: dup            
        //   376: invokespecial   java/util/ArrayList.<init>:()V
        //   379: astore_3       
        //   380: aload           8
        //   382: ifnull          20
        //   385: aload           8
        //   387: invokeinterface android/database/Cursor.close:()V
        //   392: aload_3        
        //   393: areturn        
        //   394: astore          6
        //   396: aload           4
        //   398: ifnull          408
        //   401: aload           4
        //   403: invokeinterface android/database/Cursor.close:()V
        //   408: aload           6
        //   410: athrow         
        //   411: aload           12
        //   413: iload           25
        //   415: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   420: checkcast       Lcom/google/analytics/tracking/android/Hit;
        //   423: aload           24
        //   425: iconst_1       
        //   426: invokeinterface android/database/Cursor.getString:(I)Ljava/lang/String;
        //   431: invokevirtual   com/google/analytics/tracking/android/Hit.setHitString:(Ljava/lang/String;)V
        //   434: goto            307
        //   437: astore          16
        //   439: aload           24
        //   441: astore          11
        //   443: new             Ljava/lang/StringBuilder;
        //   446: dup            
        //   447: ldc_w           "error in peekHits fetching hitString: "
        //   450: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   453: aload           16
        //   455: invokevirtual   android/database/sqlite/SQLiteException.getMessage:()Ljava/lang/String;
        //   458: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   461: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   464: invokestatic    com/google/analytics/tracking/android/Log.w:(Ljava/lang/String;)I
        //   467: pop            
        //   468: new             Ljava/util/ArrayList;
        //   471: dup            
        //   472: invokespecial   java/util/ArrayList.<init>:()V
        //   475: astore          19
        //   477: aload           12
        //   479: invokeinterface java/util/List.iterator:()Ljava/util/Iterator;
        //   484: astore          20
        //   486: iconst_0       
        //   487: istore          21
        //   489: aload           20
        //   491: invokeinterface java/util/Iterator.hasNext:()Z
        //   496: ifeq            560
        //   499: aload           20
        //   501: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   506: checkcast       Lcom/google/analytics/tracking/android/Hit;
        //   509: astore          22
        //   511: aload           22
        //   513: invokevirtual   com/google/analytics/tracking/android/Hit.getHitParams:()Ljava/lang/String;
        //   516: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //   519: ifeq            530
        //   522: iload           21
        //   524: ifne            560
        //   527: iconst_1       
        //   528: istore          21
        //   530: aload           19
        //   532: aload           22
        //   534: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   539: pop            
        //   540: goto            489
        //   543: astore          17
        //   545: aload           11
        //   547: ifnull          557
        //   550: aload           11
        //   552: invokeinterface android/database/Cursor.close:()V
        //   557: aload           17
        //   559: athrow         
        //   560: aload           11
        //   562: ifnull          572
        //   565: aload           11
        //   567: invokeinterface android/database/Cursor.close:()V
        //   572: aload           19
        //   574: areturn        
        //   575: astore          17
        //   577: aload           24
        //   579: astore          11
        //   581: goto            545
        //   584: astore          16
        //   586: goto            443
        //   589: astore          6
        //   591: aload           11
        //   593: astore          4
        //   595: goto            396
        //   598: astore          6
        //   600: aload           8
        //   602: astore          4
        //   604: goto            396
        //   607: astore          7
        //   609: aload           11
        //   611: astore          8
        //   613: goto            347
        //   616: iload           26
        //   618: istore          25
        //   620: goto            244
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                     
        //  -----  -----  -----  -----  -----------------------------------------
        //  33     88     342    347    Landroid/database/sqlite/SQLiteException;
        //  33     88     394    396    Any
        //  92     111    607    616    Landroid/database/sqlite/SQLiteException;
        //  92     111    589    598    Any
        //  111    169    607    616    Landroid/database/sqlite/SQLiteException;
        //  111    169    589    598    Any
        //  186    231    584    589    Landroid/database/sqlite/SQLiteException;
        //  186    231    543    545    Any
        //  231    241    437    443    Landroid/database/sqlite/SQLiteException;
        //  231    241    575    584    Any
        //  244    307    437    443    Landroid/database/sqlite/SQLiteException;
        //  244    307    575    584    Any
        //  313    322    437    443    Landroid/database/sqlite/SQLiteException;
        //  313    322    575    584    Any
        //  347    380    598    607    Any
        //  411    434    437    443    Landroid/database/sqlite/SQLiteException;
        //  411    434    575    584    Any
        //  443    486    543    545    Any
        //  489    522    543    545    Any
        //  530    540    543    545    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 278, Size: 278
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public void putHit(final Map map, final long n, final String s, final Collection collection) {
        this.deleteStaleHits();
        this.fillVersionParametersIfNecessary(map, collection);
        this.removeOldHitIfFull();
        this.writeHitToDatabase(map, n, s);
    }
    
    @VisibleForTesting
    public void setClock(final Clock mClock) {
        this.mClock = mClock;
    }
    
    @Override
    public void setDispatch(final boolean b) {
        Dispatcher mDispatcher;
        if (b) {
            mDispatcher = new SimpleNetworkDispatcher(this, this.createDefaultHttpClientFactory(), this.mContext);
        }
        else {
            mDispatcher = new NoopDispatcher();
        }
        this.mDispatcher = mDispatcher;
    }
    
    @VisibleForTesting
    void setDispatcher(final Dispatcher mDispatcher) {
        this.mDispatcher = mDispatcher;
    }
    
    @VisibleForTesting
    void setLastDeleteStaleHitsTime(final long mLastDeleteStaleHitsTime) {
        this.mLastDeleteStaleHitsTime = mLastDeleteStaleHitsTime;
    }
}
