// 
// Decompiled by Procyon v0.5.30
// 

package com.google.analytics.tracking.android;

import java.util.HashMap;
import java.util.Map;

class EasyTracker$NoopTracker extends Tracker
{
    private String mAppId;
    private String mAppInstallerId;
    private ExceptionParser mExceptionParser;
    private boolean mIsAnonymizeIp;
    private boolean mIsUseSecure;
    private double mSampleRate;
    final /* synthetic */ EasyTracker this$0;
    
    EasyTracker$NoopTracker(final EasyTracker this$0) {
        this.this$0 = this$0;
        this.mSampleRate = 100.0;
    }
    
    @Override
    public void close() {
    }
    
    @Override
    public Map constructEvent(final String s, final String s2, final String s3, final Long n) {
        return new HashMap();
    }
    
    @Override
    public Map constructException(final String s, final boolean b) {
        return new HashMap();
    }
    
    @Override
    public Map constructRawException(final String s, final Throwable t, final boolean b) {
        return new HashMap();
    }
    
    @Override
    public Map constructSocial(final String s, final String s2, final String s3) {
        return new HashMap();
    }
    
    @Override
    public Map constructTiming(final String s, final long n, final String s2, final String s3) {
        return new HashMap();
    }
    
    @Override
    public Map constructTransaction(final Transaction transaction) {
        return new HashMap();
    }
    
    @Override
    public String get(final String s) {
        return "";
    }
    
    @Override
    public String getAppId() {
        return this.mAppId;
    }
    
    @Override
    public String getAppInstallerId() {
        return this.mAppInstallerId;
    }
    
    @Override
    public ExceptionParser getExceptionParser() {
        return this.mExceptionParser;
    }
    
    @Override
    public double getSampleRate() {
        return this.mSampleRate;
    }
    
    @Override
    public String getTrackingId() {
        return "";
    }
    
    @Override
    public boolean isAnonymizeIpEnabled() {
        return this.mIsAnonymizeIp;
    }
    
    @Override
    public boolean isUseSecure() {
        return this.mIsUseSecure;
    }
    
    @Override
    public void send(final String s, final Map map) {
    }
    
    @Override
    public void sendEvent(final String s, final String s2, final String s3, final Long n) {
    }
    
    @Override
    public void sendException(final String s, final Throwable t, final boolean b) {
    }
    
    @Override
    public void sendException(final String s, final boolean b) {
    }
    
    @Override
    public void sendSocial(final String s, final String s2, final String s3) {
    }
    
    @Override
    public void sendTiming(final String s, final long n, final String s2, final String s3) {
    }
    
    @Override
    public void sendTransaction(final Transaction transaction) {
    }
    
    @Override
    public void sendView() {
    }
    
    @Override
    public void sendView(final String s) {
    }
    
    @Override
    public void set(final String s, final String s2) {
    }
    
    @Override
    public void setAnonymizeIp(final boolean mIsAnonymizeIp) {
        this.mIsAnonymizeIp = mIsAnonymizeIp;
    }
    
    @Override
    public void setAppId(final String mAppId) {
        this.mAppId = mAppId;
    }
    
    @Override
    public void setAppInstallerId(final String mAppInstallerId) {
        this.mAppInstallerId = mAppInstallerId;
    }
    
    @Override
    public void setAppName(final String s) {
    }
    
    @Override
    public void setAppScreen(final String s) {
    }
    
    @Override
    public void setAppVersion(final String s) {
    }
    
    @Override
    public void setCampaign(final String s) {
    }
    
    @Override
    public void setCustomDimension(final int n, final String s) {
    }
    
    @Override
    public void setCustomDimensionsAndMetrics(final Map map, final Map map2) {
    }
    
    @Override
    public void setCustomMetric(final int n, final Long n2) {
    }
    
    @Override
    public void setExceptionParser(final ExceptionParser mExceptionParser) {
        this.mExceptionParser = mExceptionParser;
    }
    
    @Override
    public void setReferrer(final String s) {
    }
    
    @Override
    public void setSampleRate(final double mSampleRate) {
        this.mSampleRate = mSampleRate;
    }
    
    @Override
    public void setStartSession(final boolean b) {
    }
    
    @Override
    public void setUseSecure(final boolean mIsUseSecure) {
        this.mIsUseSecure = mIsUseSecure;
    }
}
