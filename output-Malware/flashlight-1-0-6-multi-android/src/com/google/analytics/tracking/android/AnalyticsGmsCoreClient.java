// 
// Decompiled by Procyon v0.5.30
// 

package com.google.analytics.tracking.android;

import java.util.List;
import java.util.Map;
import android.content.Intent;
import android.os.RemoteException;
import com.google.android.gms.analytics.internal.IAnalyticsService;
import android.content.Context;
import android.content.ServiceConnection;

class AnalyticsGmsCoreClient implements AnalyticsClient
{
    private static final int BIND_ADJUST_WITH_ACTIVITY = 128;
    public static final int BIND_FAILED = 1;
    public static final String KEY_APP_PACKAGE_NAME = "app_package_name";
    public static final int REMOTE_EXECUTION_FAILED = 2;
    static final String SERVICE_ACTION = "com.google.android.gms.analytics.service.START";
    private static final String SERVICE_DESCRIPTOR = "com.google.android.gms.analytics.internal.IAnalyticsService";
    private ServiceConnection mConnection;
    private Context mContext;
    private AnalyticsGmsCoreClient$OnConnectedListener mOnConnectedListener;
    private AnalyticsGmsCoreClient$OnConnectionFailedListener mOnConnectionFailedListener;
    private IAnalyticsService mService;
    
    public AnalyticsGmsCoreClient(final Context mContext, final AnalyticsGmsCoreClient$OnConnectedListener mOnConnectedListener, final AnalyticsGmsCoreClient$OnConnectionFailedListener mOnConnectionFailedListener) {
        this.mContext = mContext;
        if (mOnConnectedListener == null) {
            throw new IllegalArgumentException("onConnectedListener cannot be null");
        }
        this.mOnConnectedListener = mOnConnectedListener;
        if (mOnConnectionFailedListener == null) {
            throw new IllegalArgumentException("onConnectionFailedListener cannot be null");
        }
        this.mOnConnectionFailedListener = mOnConnectionFailedListener;
    }
    
    private IAnalyticsService getService() {
        this.checkConnected();
        return this.mService;
    }
    
    private void onConnectionSuccess() {
        this.mOnConnectedListener.onConnected();
    }
    
    private void onServiceBound() {
        this.onConnectionSuccess();
    }
    
    protected void checkConnected() {
        if (!this.isConnected()) {
            throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
        }
    }
    
    @Override
    public void clearHits() {
        try {
            this.getService().clearHits();
        }
        catch (RemoteException ex) {
            Log.e("clear hits failed: " + ex);
        }
    }
    
    @Override
    public void connect() {
        final Intent intent = new Intent("com.google.android.gms.analytics.service.START");
        intent.putExtra("app_package_name", this.mContext.getPackageName());
        if (this.mConnection != null) {
            Log.e("Calling connect() while still connected, missing disconnect().");
        }
        else {
            this.mConnection = (ServiceConnection)new AnalyticsGmsCoreClient$AnalyticsServiceConnection(this);
            final boolean bindService = this.mContext.bindService(intent, this.mConnection, 129);
            Log.iDebug("connect: bindService returned " + bindService + " for " + intent);
            if (!bindService) {
                this.mConnection = null;
                this.mOnConnectionFailedListener.onConnectionFailed(1, null);
            }
        }
    }
    
    @Override
    public void disconnect() {
        this.mService = null;
        if (this.mConnection == null) {
            return;
        }
        while (true) {
            try {
                this.mContext.unbindService(this.mConnection);
                this.mConnection = null;
                this.mOnConnectedListener.onDisconnected();
            }
            catch (IllegalArgumentException ex) {
                continue;
            }
            catch (IllegalStateException ex2) {
                continue;
            }
            break;
        }
    }
    
    public boolean isConnected() {
        return this.mService != null;
    }
    
    @Override
    public void sendHit(final Map map, final long n, final String s, final List list) {
        try {
            this.getService().sendHit(map, n, s, list);
        }
        catch (RemoteException ex) {
            Log.e("sendHit failed: " + ex);
        }
    }
}
