// 
// Decompiled by Procyon v0.5.30
// 

package com.google.ads.mediation.flurry;

import com.google.ads.mediation.flurry.impl.ac;
import com.google.ads.mediation.flurry.impl.d;
import com.google.ads.mediation.flurry.impl.y;
import com.google.ads.mediation.flurry.impl.a;
import com.google.ads.mediation.flurry.impl.b;
import com.google.ads.mediation.flurry.impl.g;
import com.google.ads.AdRequest$ErrorCode;
import com.google.ads.mediation.NetworkExtras;
import com.google.ads.mediation.MediationServerParameters;
import android.view.View;
import android.app.Activity;
import com.google.ads.mediation.flurry.impl.q;
import com.google.ads.mediation.MediationAdRequest;
import com.google.ads.mediation.flurry.impl.aj;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import android.widget.FrameLayout;
import com.google.ads.AdSize;
import android.content.Context;
import com.google.ads.mediation.flurry.impl.e;
import com.google.ads.mediation.flurry.impl.f;
import com.google.ads.mediation.flurry.impl.z;
import com.google.ads.mediation.flurry.impl.v;
import android.view.ViewGroup;
import com.google.ads.mediation.MediationInterstitialListener;
import com.google.ads.mediation.MediationBannerListener;
import com.google.ads.mediation.MediationInterstitialAdapter;
import com.google.ads.mediation.MediationBannerAdapter;

public final class FlurryAdapter implements MediationBannerAdapter, MediationInterstitialAdapter
{
    private static final String a;
    private MediationBannerListener b;
    private MediationInterstitialListener c;
    private ViewGroup d;
    private v e;
    private z f;
    private final f g;
    private final e h;
    
    static {
        a = FlurryAdapter.class.getSimpleName();
    }
    
    public FlurryAdapter() {
        this.g = new f();
        this.h = new e();
    }
    
    private ViewGroup a(final Context context, final AdSize adSize) {
        int widthInPixels = -1;
        int heightInPixels = -2;
        if (!adSize.isFullWidth()) {
            widthInPixels = adSize.getWidthInPixels(context);
        }
        if (!adSize.isAutoHeight()) {
            heightInPixels = adSize.getHeightInPixels(context);
        }
        final FrameLayout frameLayout = new FrameLayout(context);
        ((ViewGroup)frameLayout).setLayoutParams((ViewGroup$LayoutParams)new FrameLayout$LayoutParams(widthInPixels, heightInPixels, 1));
        aj.a(FlurryAdapter.a, "banner view is created for {width = " + widthInPixels + "px, height = " + heightInPixels + "px}");
        return (ViewGroup)frameLayout;
    }
    
    private q a(final String s, final boolean b, final MediationAdRequest mediationAdRequest, final FlurryAdapterExtras flurryAdapterExtras) {
        final q q = new q(s, b);
        q.a(mediationAdRequest.getAgeInYears());
        q.a(this.g.a(mediationAdRequest.getGender()));
        q.a(mediationAdRequest.getLocation());
        q.a(mediationAdRequest.getKeywords());
        q.a(mediationAdRequest.isTesting());
        q.b(flurryAdapterExtras != null && flurryAdapterExtras.isLogEnabled());
        return q;
    }
    
    private String a(final Activity activity, final FlurryAdapterServerParameters flurryAdapterServerParameters, final MediationAdRequest mediationAdRequest, final FlurryAdapterExtras flurryAdapterExtras) {
        String adSpace;
        if (flurryAdapterExtras != null && flurryAdapterExtras.getAdSpace() != null) {
            adSpace = flurryAdapterExtras.getAdSpace();
        }
        else {
            adSpace = null;
            if (flurryAdapterServerParameters != null) {
                return flurryAdapterServerParameters.adSpaceName;
            }
        }
        return adSpace;
    }
    
    private void a(final MediationAdRequest mediationAdRequest, final FlurryAdapterExtras flurryAdapterExtras) {
        int n;
        if (flurryAdapterExtras != null && flurryAdapterExtras.isLogEnabled()) {
            n = 1;
        }
        else {
            n = 0;
        }
        int n2;
        if (n != 0) {
            n2 = 4;
        }
        else {
            n2 = 8;
        }
        aj.a(n2);
    }
    
    @Override
    public final void destroy() {
        if (this.e != null) {
            aj.a(FlurryAdapter.a, "destroy provider for banner ad request");
            this.e.d();
            this.e.b();
            this.e = null;
        }
        if (this.f != null) {
            aj.a(FlurryAdapter.a, "destroy provider for interstitial ad request");
            this.f.d();
            this.f.b();
            this.f = null;
        }
        this.d = null;
        this.b = null;
        this.c = null;
    }
    
    @Override
    protected final void finalize() {
        this.destroy();
        super.finalize();
    }
    
    @Override
    public final Class getAdditionalParametersType() {
        return FlurryAdapterExtras.class;
    }
    
    @Override
    public final View getBannerView() {
        aj.a(FlurryAdapter.a, "get banner view");
        return (View)this.d;
    }
    
    @Override
    public final Class getServerParametersType() {
        return FlurryAdapterServerParameters.class;
    }
    
    public final void requestBannerAd(final MediationBannerListener b, final Activity activity, final FlurryAdapterServerParameters flurryAdapterServerParameters, final AdSize adSize, final MediationAdRequest mediationAdRequest, final FlurryAdapterExtras flurryAdapterExtras) {
        this.destroy();
        this.a(mediationAdRequest, flurryAdapterExtras);
        aj.a(FlurryAdapter.a, "request banner ad");
        if ((activity == null || flurryAdapterServerParameters == null || adSize == null || mediationAdRequest == null) && b != null) {
            aj.b(FlurryAdapter.a, "invalide parameters for banner ad request");
            b.onFailedToReceiveAd(this, AdRequest$ErrorCode.INVALID_REQUEST);
            return;
        }
        aj.a(FlurryAdapter.a, "request has explicit ad size: " + adSize);
        final g g = new g((Context)activity);
        final AdSize b2 = g.b(adSize);
        if (b2 == null) {
            aj.b(FlurryAdapter.a, "request size: " + adSize + " for banner ad is not supported by ad network");
            b.onFailedToReceiveAd(this, AdRequest$ErrorCode.NO_FILL);
            return;
        }
        aj.a(FlurryAdapter.a, "request ad size: " + adSize + " is mapped to preferred ad size: " + b2);
        String s = this.a(activity, flurryAdapterServerParameters, mediationAdRequest, flurryAdapterExtras);
        if (s != null) {
            aj.a(FlurryAdapter.a, "request has explicit ad space: " + s);
        }
        else {
            aj.a(FlurryAdapter.a, "request has no explicit ad space, try to find best ad size and ad space based on explicit ad size");
            s = g.a(b2);
            if (s == null) {
                aj.b(FlurryAdapter.a, "preferred ad size: " + b2 + " for banner ad is not supported by ad network");
                b.onFailedToReceiveAd(this, AdRequest$ErrorCode.NO_FILL);
                return;
            }
            aj.a(FlurryAdapter.a, "preferred ad size: " + b2 + " is mapped to preferred ad space: " + s);
        }
        final q a = this.a(s, false, mediationAdRequest, flurryAdapterExtras);
        if (a == null && b != null) {
            aj.b(FlurryAdapter.a, "request parameters for banner ad are not supported by ad network");
            b.onFailedToReceiveAd(this, AdRequest$ErrorCode.NO_FILL);
            return;
        }
        final ViewGroup a2 = this.a((Context)activity, b2);
        if (a2 == null && b != null) {
            aj.b(FlurryAdapter.a, "request size for banner ad is not supported by ad network");
            b.onFailedToReceiveAd(this, AdRequest$ErrorCode.NO_FILL);
            return;
        }
        this.b = b;
        this.d = a2;
        this.e = new v((Context)activity, flurryAdapterServerParameters.projectApiKey, a, this.d, new b(this, null));
        aj.a(FlurryAdapter.a, "start provider for banner ad request");
        this.e.a();
    }
    
    public final void requestInterstitialAd(final MediationInterstitialListener c, final Activity activity, final FlurryAdapterServerParameters flurryAdapterServerParameters, final MediationAdRequest mediationAdRequest, final FlurryAdapterExtras flurryAdapterExtras) {
        this.destroy();
        this.a(mediationAdRequest, flurryAdapterExtras);
        aj.a(FlurryAdapter.a, "request interstitial ad");
        if ((activity == null || flurryAdapterServerParameters == null || mediationAdRequest == null) && c != null) {
            aj.b(FlurryAdapter.a, "invalide parameters for interstitial ad request");
            c.onFailedToReceiveAd(this, AdRequest$ErrorCode.INVALID_REQUEST);
            return;
        }
        String a = this.a(activity, flurryAdapterServerParameters, mediationAdRequest, flurryAdapterExtras);
        if (a != null) {
            aj.a(FlurryAdapter.a, "request has explicit ad space: " + a);
        }
        else {
            a = "FULL_SCREEN_ANDROID";
            aj.a(FlurryAdapter.a, "request has no explicit ad space, preferred ad space: " + a + " will be used");
        }
        final q a2 = this.a(a, true, mediationAdRequest, flurryAdapterExtras);
        if (a2 == null && c != null) {
            aj.b(FlurryAdapter.a, "request parameters for interstitial ad are not supported by ad network");
            c.onFailedToReceiveAd(this, AdRequest$ErrorCode.NO_FILL);
            return;
        }
        this.c = c;
        this.f = new z((Context)activity, flurryAdapterServerParameters.projectApiKey, a2, new d(this, null));
        aj.a(FlurryAdapter.a, "start provider for interstitial ad request");
        this.f.a();
    }
    
    @Override
    public final void showInterstitial() {
        if (this.f != null) {
            aj.a(FlurryAdapter.a, "show interstitial");
            this.f.c();
        }
    }
}
