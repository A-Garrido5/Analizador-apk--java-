// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.wallet;

import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.internal.ji;
import com.google.android.gms.internal.jj;
import com.google.android.gms.internal.jf;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.internal.fq;
import android.app.Activity;
import com.google.android.gms.internal.jg;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener;
import com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks;
import com.google.android.gms.internal.fc;
import android.os.Looper;
import android.content.Context;
import com.google.android.gms.common.api.Api$b;
import com.google.android.gms.common.api.Api$c;
import com.google.android.gms.internal.iu;
import com.google.android.gms.internal.ka;
import com.google.android.gms.common.api.Api;

public final class Wallet
{
    public static final Api API;
    public static final Payments Payments;
    public static final ka aco;
    public static final iu acp;
    private static final Api$c wx;
    private static final Api$b wy;
    
    static {
        wx = new Api$c();
        wy = new Api$b() {
            public final jg a(final Context context, final Looper looper, final fc fc, Wallet$WalletOptions wallet$WalletOptions, final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks, final GoogleApiClient$OnConnectionFailedListener googleApiClient$OnConnectionFailedListener) {
                fq.b(context instanceof Activity, "An Activity must be used for Wallet APIs");
                final Activity activity = (Activity)context;
                if (wallet$WalletOptions == null) {
                    wallet$WalletOptions = new Wallet$WalletOptions((Wallet$1)null);
                }
                return new jg(activity, looper, googleApiClient$ConnectionCallbacks, googleApiClient$OnConnectionFailedListener, wallet$WalletOptions.environment, fc.getAccountName(), wallet$WalletOptions.theme);
            }
            
            @Override
            public final int getPriority() {
                return Integer.MAX_VALUE;
            }
        };
        API = new Api(Wallet.wy, Wallet.wx, new Scope[0]);
        Payments = new jf();
        aco = new jj();
        acp = new ji();
    }
    
    @Deprecated
    public static void changeMaskedWallet(final GoogleApiClient googleApiClient, final String s, final String s2, final int n) {
        Wallet.Payments.changeMaskedWallet(googleApiClient, s, s2, n);
    }
    
    @Deprecated
    public static void checkForPreAuthorization(final GoogleApiClient googleApiClient, final int n) {
        Wallet.Payments.checkForPreAuthorization(googleApiClient, n);
    }
    
    @Deprecated
    public static void loadFullWallet(final GoogleApiClient googleApiClient, final FullWalletRequest fullWalletRequest, final int n) {
        Wallet.Payments.loadFullWallet(googleApiClient, fullWalletRequest, n);
    }
    
    @Deprecated
    public static void loadMaskedWallet(final GoogleApiClient googleApiClient, final MaskedWalletRequest maskedWalletRequest, final int n) {
        Wallet.Payments.loadMaskedWallet(googleApiClient, maskedWalletRequest, n);
    }
    
    @Deprecated
    public static void notifyTransactionStatus(final GoogleApiClient googleApiClient, final NotifyTransactionStatusRequest notifyTransactionStatusRequest) {
        Wallet.Payments.notifyTransactionStatus(googleApiClient, notifyTransactionStatusRequest);
    }
}
