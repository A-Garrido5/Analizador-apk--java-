// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.tagmanager;

import java.io.OutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import com.google.android.gms.internal.c$g;
import com.google.android.gms.internal.b;
import com.google.android.gms.internal.c$e;
import com.google.android.gms.internal.c$b;
import com.google.android.gms.internal.c$h;
import java.util.Set;
import com.google.android.gms.internal.d$a;
import com.google.android.gms.internal.c$f;

class cq
{
    private static d$a a(final int n, final c$f c$f, final d$a[] array, final Set set) {
        int i = 0;
        if (set.contains(n)) {
            bL("Value cycle detected.  Current value reference: " + n + ".  Previous value references: " + set + ".");
        }
        final d$a d$a = (d$a)a(c$f.eX, n, "values");
        if (array[n] != null) {
            return array[n];
        }
        set.add(n);
        final int type = d$a.type;
        d$a d$a2 = null;
        switch (type) {
            case 2: {
                final c$h h = h(d$a);
                d$a2 = g(d$a);
                d$a2.fO = new d$a[h.fz.length];
                final int[] fz = h.fz;
                final int length = fz.length;
                int n2 = 0;
                while (i < length) {
                    final int n3 = fz[i];
                    final d$a[] fo = d$a2.fO;
                    final int n4 = n2 + 1;
                    fo[n2] = a(n3, c$f, array, set);
                    ++i;
                    n2 = n4;
                }
                break;
            }
            case 3: {
                d$a2 = g(d$a);
                final c$h h2 = h(d$a);
                if (h2.fA.length != h2.fB.length) {
                    bL("Uneven map keys (" + h2.fA.length + ") and map values (" + h2.fB.length + ")");
                }
                d$a2.fP = new d$a[h2.fA.length];
                d$a2.fQ = new d$a[h2.fA.length];
                final int[] fa = h2.fA;
                final int length2 = fa.length;
                int j = 0;
                int n5 = 0;
                while (j < length2) {
                    final int n6 = fa[j];
                    final d$a[] fp = d$a2.fP;
                    final int n7 = n5 + 1;
                    fp[n5] = a(n6, c$f, array, set);
                    ++j;
                    n5 = n7;
                }
                final int[] fb = h2.fB;
                final int length3 = fb.length;
                int n8 = 0;
                while (i < length3) {
                    final int n9 = fb[i];
                    final d$a[] fq = d$a2.fQ;
                    final int n10 = n8 + 1;
                    fq[n8] = a(n9, c$f, array, set);
                    ++i;
                    n8 = n10;
                }
                break;
            }
            case 4: {
                d$a2 = g(d$a);
                d$a2.fR = dh.j(a(h(d$a).fE, c$f, array, set));
                break;
            }
            case 7: {
                d$a2 = g(d$a);
                final c$h h3 = h(d$a);
                d$a2.fV = new d$a[h3.fD.length];
                final int[] fd = h3.fD;
                final int length4 = fd.length;
                int n11 = 0;
                while (i < length4) {
                    final int n12 = fd[i];
                    final d$a[] fv = d$a2.fV;
                    final int n13 = n11 + 1;
                    fv[n11] = a(n12, c$f, array, set);
                    ++i;
                    n11 = n13;
                }
                break;
            }
            case 1:
            case 5:
            case 6:
            case 8: {
                d$a2 = d$a;
                break;
            }
        }
        if (d$a2 == null) {
            bL("Invalid value: " + d$a);
        }
        array[n] = d$a2;
        set.remove(n);
        return d$a2;
    }
    
    private static cq$a a(final c$b c$b, final c$f c$f, final d$a[] array, final int n) {
        final cq$b ld = cq$a.ld();
        final int[] eh = c$b.eH;
        for (int length = eh.length, i = 0; i < length; ++i) {
            final c$e c$e = (c$e)a(c$f.eY, Integer.valueOf(eh[i]), "properties");
            final String s = (String)a(c$f.eW, c$e.key, "keys");
            final d$a d$a = (d$a)a(array, c$e.value, "values");
            if (b.dB.toString().equals(s)) {
                ld.i(d$a);
            }
            else {
                ld.b(s, d$a);
            }
        }
        return ld.lg();
    }
    
    private static cq$e a(final c$g c$g, final List list, final List list2, final List list3, final c$f c$f) {
        final cq$f ll = cq$e.ll();
        final int[] fn = c$g.fn;
        for (int length = fn.length, i = 0; i < length; ++i) {
            ll.b(list3.get(Integer.valueOf(fn[i])));
        }
        final int[] fo = c$g.fo;
        for (int length2 = fo.length, j = 0; j < length2; ++j) {
            ll.c(list3.get(Integer.valueOf(fo[j])));
        }
        final int[] fp = c$g.fp;
        for (int length3 = fp.length, k = 0; k < length3; ++k) {
            ll.d(list.get(Integer.valueOf(fp[k])));
        }
        final int[] fr = c$g.fr;
        for (int length4 = fr.length, l = 0; l < length4; ++l) {
            ll.bN(c$f.eX[Integer.valueOf(fr[l])].fN);
        }
        final int[] fq = c$g.fq;
        for (int length5 = fq.length, n = 0; n < length5; ++n) {
            ll.e(list.get(Integer.valueOf(fq[n])));
        }
        final int[] fs = c$g.fs;
        for (int length6 = fs.length, n2 = 0; n2 < length6; ++n2) {
            ll.bO(c$f.eX[Integer.valueOf(fs[n2])].fN);
        }
        final int[] ft = c$g.ft;
        for (int length7 = ft.length, n3 = 0; n3 < length7; ++n3) {
            ll.f(list2.get(Integer.valueOf(ft[n3])));
        }
        final int[] fv = c$g.fv;
        for (int length8 = fv.length, n4 = 0; n4 < length8; ++n4) {
            ll.bP(c$f.eX[Integer.valueOf(fv[n4])].fN);
        }
        final int[] fu = c$g.fu;
        for (int length9 = fu.length, n5 = 0; n5 < length9; ++n5) {
            ll.g(list2.get(Integer.valueOf(fu[n5])));
        }
        final int[] fw = c$g.fw;
        for (int length10 = fw.length, n6 = 0; n6 < length10; ++n6) {
            ll.bQ(c$f.eX[Integer.valueOf(fw[n6])].fN);
        }
        return ll.lw();
    }
    
    private static Object a(final Object[] array, final int n, final String s) {
        if (n < 0 || n >= array.length) {
            bL("Index out of bounds detected: " + n + " in " + s);
        }
        return array[n];
    }
    
    public static cq$c b(final c$f c$f) {
        int i = 0;
        final d$a[] array = new d$a[c$f.eX.length];
        for (int j = 0; j < c$f.eX.length; ++j) {
            a(j, c$f, array, new HashSet(0));
        }
        final cq$d lh = cq$c.lh();
        final ArrayList<cq$a> list = new ArrayList<cq$a>();
        for (int k = 0; k < c$f.fa.length; ++k) {
            list.add(a(c$f.fa[k], c$f, array, k));
        }
        final ArrayList<cq$a> list2 = new ArrayList<cq$a>();
        for (int l = 0; l < c$f.fb.length; ++l) {
            list2.add(a(c$f.fb[l], c$f, array, l));
        }
        final ArrayList<cq$a> list3 = new ArrayList<cq$a>();
        for (int n = 0; n < c$f.eZ.length; ++n) {
            final cq$a a = a(c$f.eZ[n], c$f, array, n);
            lh.a(a);
            list3.add(a);
        }
        for (c$g[] fc = c$f.fc; i < fc.length; ++i) {
            lh.a(a(fc[i], list, list3, list2, c$f));
        }
        lh.bM(c$f.fg);
        lh.ch(c$f.fl);
        return lh.lk();
    }
    
    public static void b(final InputStream inputStream, final OutputStream outputStream) {
        final byte[] array = new byte[1024];
        while (true) {
            final int read = inputStream.read(array);
            if (read == -1) {
                break;
            }
            outputStream.write(array, 0, read);
        }
    }
    
    private static void bL(final String s) {
        bh.w(s);
        throw new cq$g(s);
    }
    
    public static d$a g(final d$a d$a) {
        final d$a d$a2 = new d$a();
        d$a2.type = d$a.type;
        d$a2.fW = d$a.fW.clone();
        if (d$a.fX) {
            d$a2.fX = d$a.fX;
        }
        return d$a2;
    }
    
    private static c$h h(final d$a d$a) {
        if (d$a.a(c$h.fx) == null) {
            bL("Expected a ServingValue and didn't get one. Value is: " + d$a);
        }
        return (c$h)d$a.a(c$h.fx);
    }
}
