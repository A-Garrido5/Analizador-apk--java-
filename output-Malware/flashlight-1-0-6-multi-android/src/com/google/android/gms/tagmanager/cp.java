// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.tagmanager;

import java.io.File;
import java.io.InputStream;
import android.content.res.Resources$NotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import com.google.android.gms.internal.it$a;
import com.google.android.gms.internal.ks;
import com.google.android.gms.internal.c$f;
import org.json.JSONException;
import java.io.UnsupportedEncodingException;
import java.io.ByteArrayOutputStream;
import java.util.concurrent.Executors;
import android.content.Context;
import java.util.concurrent.ExecutorService;

class cp implements o$f
{
    private final String WJ;
    private bg Zf;
    private final ExecutorService Zm;
    private final Context mContext;
    
    cp(final Context mContext, final String wj) {
        this.mContext = mContext;
        this.WJ = wj;
        this.Zm = Executors.newSingleThreadExecutor();
    }
    
    private cq$c a(final ByteArrayOutputStream byteArrayOutputStream) {
        try {
            return ba.bG(byteArrayOutputStream.toString("UTF-8"));
        }
        catch (UnsupportedEncodingException ex) {
            bh.v("Tried to convert binary resource to string for JSON parsing; not UTF-8 format");
            return null;
        }
        catch (JSONException ex2) {
            bh.z("Resource is a UTF-8 encoded string but doesn't contain a JSON container");
            return null;
        }
    }
    
    private cq$c k(final byte[] array) {
        try {
            return cq.b(c$f.a(array));
        }
        catch (ks ks) {
            bh.z("Resource doesn't contain a binary container");
            return null;
        }
        catch (cq$g cq$g) {
            bh.z("Resource doesn't contain a binary container");
            return null;
        }
    }
    
    @Override
    public void a(final bg zf) {
        this.Zf = zf;
    }
    
    @Override
    public void b(final it$a it$a) {
        this.Zm.execute(new Runnable() {
            @Override
            public void run() {
                cp.this.c(it$a);
            }
        });
    }
    
    boolean c(final it$a p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: invokevirtual   com/google/android/gms/tagmanager/cp.lc:()Ljava/io/File;
        //     4: astore_2       
        //     5: new             Ljava/io/FileOutputStream;
        //     8: dup            
        //     9: aload_2        
        //    10: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //    13: astore_3       
        //    14: aload_3        
        //    15: aload_1        
        //    16: invokestatic    com/google/android/gms/internal/kt.d:(Lcom/google/android/gms/internal/kt;)[B
        //    19: invokevirtual   java/io/FileOutputStream.write:([B)V
        //    22: aload_3        
        //    23: invokevirtual   java/io/FileOutputStream.close:()V
        //    26: iconst_1       
        //    27: ireturn        
        //    28: astore          10
        //    30: ldc             "Error opening resource file for writing"
        //    32: invokestatic    com/google/android/gms/tagmanager/bh.w:(Ljava/lang/String;)V
        //    35: iconst_0       
        //    36: ireturn        
        //    37: astore          9
        //    39: ldc             "error closing stream for writing resource to disk"
        //    41: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //    44: goto            26
        //    47: astore          6
        //    49: ldc             "Error writing resource to disk. Removing resource from disk."
        //    51: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //    54: aload_2        
        //    55: invokevirtual   java/io/File.delete:()Z
        //    58: pop            
        //    59: aload_3        
        //    60: invokevirtual   java/io/FileOutputStream.close:()V
        //    63: iconst_0       
        //    64: ireturn        
        //    65: astore          8
        //    67: ldc             "error closing stream for writing resource to disk"
        //    69: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //    72: iconst_0       
        //    73: ireturn        
        //    74: astore          4
        //    76: aload_3        
        //    77: invokevirtual   java/io/FileOutputStream.close:()V
        //    80: aload           4
        //    82: athrow         
        //    83: astore          5
        //    85: ldc             "error closing stream for writing resource to disk"
        //    87: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //    90: goto            80
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                           
        //  -----  -----  -----  -----  -------------------------------
        //  5      14     28     37     Ljava/io/FileNotFoundException;
        //  14     22     47     74     Ljava/io/IOException;
        //  14     22     74     93     Any
        //  22     26     37     47     Ljava/io/IOException;
        //  49     59     74     93     Any
        //  59     63     65     74     Ljava/io/IOException;
        //  76     80     83     93     Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0026:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public cq$c ca(final int n) {
        bh.y("Atttempting to load container from resource ID " + n);
        try {
            final InputStream openRawResource = this.mContext.getResources().openRawResource(n);
            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            cq.b(openRawResource, byteArrayOutputStream);
            final cq$c a = this.a(byteArrayOutputStream);
            if (a != null) {
                return a;
            }
            return this.k(byteArrayOutputStream.toByteArray());
        }
        catch (IOException ex) {
            bh.z("Error reading default container resource with ID " + n);
            return null;
        }
        catch (Resources$NotFoundException ex2) {
            bh.z("No default container resource found.");
            return null;
        }
    }
    
    @Override
    public void km() {
        this.Zm.execute(new Runnable() {
            @Override
            public void run() {
                cp.this.lb();
            }
        });
    }
    
    void lb() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //     4: ifnonnull       17
        //     7: new             Ljava/lang/IllegalStateException;
        //    10: dup            
        //    11: ldc             "callback must be set before execute"
        //    13: invokespecial   java/lang/IllegalStateException.<init>:(Ljava/lang/String;)V
        //    16: athrow         
        //    17: aload_0        
        //    18: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //    21: invokeinterface com/google/android/gms/tagmanager/bg.kl:()V
        //    26: ldc             "Start loading resource from disk ..."
        //    28: invokestatic    com/google/android/gms/tagmanager/bh.y:(Ljava/lang/String;)V
        //    31: invokestatic    com/google/android/gms/tagmanager/cd.kT:()Lcom/google/android/gms/tagmanager/cd;
        //    34: invokevirtual   com/google/android/gms/tagmanager/cd.kU:()Lcom/google/android/gms/tagmanager/cd$a;
        //    37: getstatic       com/google/android/gms/tagmanager/cd$a.YU:Lcom/google/android/gms/tagmanager/cd$a;
        //    40: if_acmpeq       55
        //    43: invokestatic    com/google/android/gms/tagmanager/cd.kT:()Lcom/google/android/gms/tagmanager/cd;
        //    46: invokevirtual   com/google/android/gms/tagmanager/cd.kU:()Lcom/google/android/gms/tagmanager/cd$a;
        //    49: getstatic       com/google/android/gms/tagmanager/cd$a.YV:Lcom/google/android/gms/tagmanager/cd$a;
        //    52: if_acmpne       84
        //    55: aload_0        
        //    56: getfield        com/google/android/gms/tagmanager/cp.WJ:Ljava/lang/String;
        //    59: invokestatic    com/google/android/gms/tagmanager/cd.kT:()Lcom/google/android/gms/tagmanager/cd;
        //    62: invokevirtual   com/google/android/gms/tagmanager/cd.getContainerId:()Ljava/lang/String;
        //    65: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //    68: ifeq            84
        //    71: aload_0        
        //    72: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //    75: getstatic       com/google/android/gms/tagmanager/bg$a.Yy:Lcom/google/android/gms/tagmanager/bg$a;
        //    78: invokeinterface com/google/android/gms/tagmanager/bg.a:(Lcom/google/android/gms/tagmanager/bg$a;)V
        //    83: return         
        //    84: new             Ljava/io/FileInputStream;
        //    87: dup            
        //    88: aload_0        
        //    89: invokevirtual   com/google/android/gms/tagmanager/cp.lc:()Ljava/io/File;
        //    92: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //    95: astore_1       
        //    96: new             Ljava/io/ByteArrayOutputStream;
        //    99: dup            
        //   100: invokespecial   java/io/ByteArrayOutputStream.<init>:()V
        //   103: astore_2       
        //   104: aload_1        
        //   105: aload_2        
        //   106: invokestatic    com/google/android/gms/tagmanager/cq.b:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
        //   109: aload_0        
        //   110: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //   113: aload_2        
        //   114: invokevirtual   java/io/ByteArrayOutputStream.toByteArray:()[B
        //   117: invokestatic    com/google/android/gms/internal/it$a.l:([B)Lcom/google/android/gms/internal/it$a;
        //   120: invokeinterface com/google/android/gms/tagmanager/bg.i:(Ljava/lang/Object;)V
        //   125: aload_1        
        //   126: invokevirtual   java/io/FileInputStream.close:()V
        //   129: ldc_w           "Load resource from disk finished."
        //   132: invokestatic    com/google/android/gms/tagmanager/bh.y:(Ljava/lang/String;)V
        //   135: return         
        //   136: astore          8
        //   138: ldc_w           "resource not on disk"
        //   141: invokestatic    com/google/android/gms/tagmanager/bh.v:(Ljava/lang/String;)V
        //   144: aload_0        
        //   145: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //   148: getstatic       com/google/android/gms/tagmanager/bg$a.Yy:Lcom/google/android/gms/tagmanager/bg$a;
        //   151: invokeinterface com/google/android/gms/tagmanager/bg.a:(Lcom/google/android/gms/tagmanager/bg$a;)V
        //   156: return         
        //   157: astore          7
        //   159: ldc_w           "error closing stream for reading resource from disk"
        //   162: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //   165: goto            129
        //   168: astore          5
        //   170: ldc_w           "error reading resource from disk"
        //   173: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //   176: aload_0        
        //   177: getfield        com/google/android/gms/tagmanager/cp.Zf:Lcom/google/android/gms/tagmanager/bg;
        //   180: getstatic       com/google/android/gms/tagmanager/bg$a.Yz:Lcom/google/android/gms/tagmanager/bg$a;
        //   183: invokeinterface com/google/android/gms/tagmanager/bg.a:(Lcom/google/android/gms/tagmanager/bg$a;)V
        //   188: aload_1        
        //   189: invokevirtual   java/io/FileInputStream.close:()V
        //   192: goto            129
        //   195: astore          6
        //   197: ldc_w           "error closing stream for reading resource from disk"
        //   200: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //   203: goto            129
        //   206: astore_3       
        //   207: aload_1        
        //   208: invokevirtual   java/io/FileInputStream.close:()V
        //   211: aload_3        
        //   212: athrow         
        //   213: astore          4
        //   215: ldc_w           "error closing stream for reading resource from disk"
        //   218: invokestatic    com/google/android/gms/tagmanager/bh.z:(Ljava/lang/String;)V
        //   221: goto            211
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                           
        //  -----  -----  -----  -----  -------------------------------
        //  84     96     136    157    Ljava/io/FileNotFoundException;
        //  96     125    168    206    Ljava/io/IOException;
        //  96     125    206    224    Any
        //  125    129    157    168    Ljava/io/IOException;
        //  170    188    206    224    Any
        //  188    192    195    206    Ljava/io/IOException;
        //  207    211    213    224    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0129:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    File lc() {
        return new File(this.mContext.getDir("google_tagmanager", 0), "resource_" + this.WJ);
    }
    
    @Override
    public void release() {
        synchronized (this) {
            this.Zm.shutdown();
        }
    }
}
