// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.tagmanager;

import com.google.android.gms.internal.d$a;
import java.util.List;
import java.util.ArrayList;
import com.google.android.gms.internal.c$i;
import com.google.android.gms.internal.c$f;
import java.util.HashMap;
import com.google.android.gms.internal.c$j;
import android.content.Context;
import java.util.Map;

public class Container
{
    private final String WJ;
    private final DataLayer WK;
    private cs WL;
    private Map WM;
    private Map WN;
    private volatile long WO;
    private volatile String WP;
    private final Context mContext;
    
    Container(final Context mContext, final DataLayer wk, final String wj, final long wo, final c$j c$j) {
        this.WM = new HashMap();
        this.WN = new HashMap();
        this.WP = "";
        this.mContext = mContext;
        this.WK = wk;
        this.WJ = wj;
        this.WO = wo;
        this.a(c$j.fK);
        if (c$j.fJ != null) {
            this.a(c$j.fJ);
        }
    }
    
    Container(final Context mContext, final DataLayer wk, final String wj, final long wo, final cq$c cq$c) {
        this.WM = new HashMap();
        this.WN = new HashMap();
        this.WP = "";
        this.mContext = mContext;
        this.WK = wk;
        this.WJ = wj;
        this.WO = wo;
        this.a(cq$c);
    }
    
    private void a(final c$f c$f) {
        if (c$f == null) {
            throw new NullPointerException();
        }
        try {
            this.a(cq.b(c$f));
        }
        catch (cq$g cq$g) {
            bh.w("Not loading resource: " + c$f + " because it is invalid: " + cq$g.toString());
        }
    }
    
    private void a(final cq$c cq$c) {
        this.WP = cq$c.getVersion();
        this.a(new cs(this.mContext, cq$c, this.WK, new Container$a(this, null), new Container$b(this, null), this.bq(this.WP)));
    }
    
    private void a(final cs wl) {
        synchronized (this) {
            this.WL = wl;
        }
    }
    
    private void a(final c$i[] array) {
        final ArrayList<c$i> list = new ArrayList<c$i>();
        for (int length = array.length, i = 0; i < length; ++i) {
            list.add(array[i]);
        }
        this.kd().e(list);
    }
    
    private cs kd() {
        synchronized (this) {
            return this.WL;
        }
    }
    
    Container$FunctionCallMacroCallback bn(final String s) {
        synchronized (this.WM) {
            return this.WM.get(s);
        }
    }
    
    Container$FunctionCallTagCallback bo(final String s) {
        synchronized (this.WN) {
            return this.WN.get(s);
        }
    }
    
    void bp(final String s) {
        this.kd().bp(s);
    }
    
    ag bq(final String s) {
        cd.kT().kU().equals(cd$a.YV);
        return new bq();
    }
    
    public boolean getBoolean(final String s) {
        final cs kd = this.kd();
        if (kd == null) {
            bh.w("getBoolean called for closed container.");
            return dh.lQ();
        }
        try {
            return dh.n((d$a)kd.bR(s).getObject());
        }
        catch (Exception ex) {
            bh.w("Calling getBoolean() threw an exception: " + ex.getMessage() + " Returning default value.");
            return dh.lQ();
        }
    }
    
    public String getContainerId() {
        return this.WJ;
    }
    
    public double getDouble(final String s) {
        final cs kd = this.kd();
        if (kd == null) {
            bh.w("getDouble called for closed container.");
            return dh.lP();
        }
        try {
            return dh.m((d$a)kd.bR(s).getObject());
        }
        catch (Exception ex) {
            bh.w("Calling getDouble() threw an exception: " + ex.getMessage() + " Returning default value.");
            return dh.lP();
        }
    }
    
    public long getLastRefreshTime() {
        return this.WO;
    }
    
    public long getLong(final String s) {
        final cs kd = this.kd();
        if (kd == null) {
            bh.w("getLong called for closed container.");
            return dh.lO();
        }
        try {
            return dh.l((d$a)kd.bR(s).getObject());
        }
        catch (Exception ex) {
            bh.w("Calling getLong() threw an exception: " + ex.getMessage() + " Returning default value.");
            return dh.lO();
        }
    }
    
    public String getString(final String s) {
        final cs kd = this.kd();
        if (kd == null) {
            bh.w("getString called for closed container.");
            return dh.lS();
        }
        try {
            return dh.j((d$a)kd.bR(s).getObject());
        }
        catch (Exception ex) {
            bh.w("Calling getString() threw an exception: " + ex.getMessage() + " Returning default value.");
            return dh.lS();
        }
    }
    
    public boolean isDefault() {
        return this.getLastRefreshTime() == 0L;
    }
    
    String kc() {
        return this.WP;
    }
    
    public void registerFunctionCallMacroCallback(final String s, final Container$FunctionCallMacroCallback container$FunctionCallMacroCallback) {
        if (container$FunctionCallMacroCallback == null) {
            throw new NullPointerException("Macro handler must be non-null");
        }
        synchronized (this.WM) {
            this.WM.put(s, container$FunctionCallMacroCallback);
        }
    }
    
    public void registerFunctionCallTagCallback(final String s, final Container$FunctionCallTagCallback container$FunctionCallTagCallback) {
        if (container$FunctionCallTagCallback == null) {
            throw new NullPointerException("Tag callback must be non-null");
        }
        synchronized (this.WN) {
            this.WN.put(s, container$FunctionCallTagCallback);
        }
    }
    
    void release() {
        this.WL = null;
    }
    
    public void unregisterFunctionCallMacroCallback(final String s) {
        synchronized (this.WM) {
            this.WM.remove(s);
        }
    }
    
    public void unregisterFunctionCallTagCallback(final String s) {
        synchronized (this.WN) {
            this.WN.remove(s);
        }
    }
}
