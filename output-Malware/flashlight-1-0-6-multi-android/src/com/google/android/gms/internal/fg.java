// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.internal;

import android.util.Log;
import android.os.Bundle;
import com.google.android.gms.common.GooglePlayServicesClient$OnConnectionFailedListener;
import com.google.android.gms.common.ConnectionResult;
import java.util.Iterator;
import java.util.Collection;
import com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks;
import android.os.Looper;
import android.content.Context;
import android.os.Handler;
import java.util.ArrayList;

public final class fg
{
    private final fg$b Do;
    private final ArrayList Dp;
    final ArrayList Dq;
    private boolean Dr;
    private final ArrayList Ds;
    private final Handler mHandler;
    
    public fg(final Context context, final Looper looper, final fg$b do1) {
        this.Dp = new ArrayList();
        this.Dq = new ArrayList();
        this.Dr = false;
        this.Ds = new ArrayList();
        this.Do = do1;
        this.mHandler = new fg$a(this, looper);
    }
    
    public final void O(final int n) {
        this.mHandler.removeMessages(1);
        synchronized (this.Dp) {
            this.Dr = true;
            for (final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks : new ArrayList<GoogleApiClient$ConnectionCallbacks>(this.Dp)) {
                if (!this.Do.em()) {
                    break;
                }
                if (!this.Dp.contains(googleApiClient$ConnectionCallbacks)) {
                    continue;
                }
                googleApiClient$ConnectionCallbacks.onConnectionSuspended(n);
            }
        }
        this.Dr = false;
    }
    // monitorexit(list)
    
    public final void a(final ConnectionResult connectionResult) {
        this.mHandler.removeMessages(1);
        synchronized (this.Ds) {
            for (final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener : new ArrayList<GooglePlayServicesClient$OnConnectionFailedListener>(this.Ds)) {
                if (!this.Do.em()) {
                    return;
                }
                if (!this.Ds.contains(googlePlayServicesClient$OnConnectionFailedListener)) {
                    continue;
                }
                googlePlayServicesClient$OnConnectionFailedListener.onConnectionFailed(connectionResult);
            }
        }
    }
    // monitorexit(list)
    
    public final void b(final Bundle bundle) {
        boolean b;
        boolean b2;
        Label_0019_Outer:Label_0047_Outer:
        while (true) {
            b = true;
            while (true) {
            Label_0149:
                while (true) {
                    synchronized (this.Dp) {
                        if (!this.Dr) {
                            b2 = b;
                            fq.x(b2);
                            this.mHandler.removeMessages(1);
                            this.Dr = true;
                            if (this.Dq.size() == 0) {
                                fq.x(b);
                                for (final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks : new ArrayList<GoogleApiClient$ConnectionCallbacks>(this.Dp)) {
                                    if (!this.Do.em() || !this.Do.isConnected()) {
                                        break;
                                    }
                                    if (this.Dq.contains(googleApiClient$ConnectionCallbacks)) {
                                        continue Label_0019_Outer;
                                    }
                                    googleApiClient$ConnectionCallbacks.onConnected(bundle);
                                }
                                break;
                            }
                            break Label_0149;
                        }
                    }
                    b2 = false;
                    continue Label_0047_Outer;
                }
                b = false;
                continue;
            }
        }
        this.Dq.clear();
        this.Dr = false;
    }
    // monitorexit(list)
    
    protected final void bV() {
        synchronized (this.Dp) {
            this.b(this.Do.dG());
        }
    }
    
    public final boolean isConnectionCallbacksRegistered(final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks) {
        fq.f(googleApiClient$ConnectionCallbacks);
        synchronized (this.Dp) {
            return this.Dp.contains(googleApiClient$ConnectionCallbacks);
        }
    }
    
    public final boolean isConnectionFailedListenerRegistered(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        fq.f(googlePlayServicesClient$OnConnectionFailedListener);
        synchronized (this.Ds) {
            return this.Ds.contains(googlePlayServicesClient$OnConnectionFailedListener);
        }
    }
    
    public final void registerConnectionCallbacks(final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks) {
        fq.f(googleApiClient$ConnectionCallbacks);
        synchronized (this.Dp) {
            if (this.Dp.contains(googleApiClient$ConnectionCallbacks)) {
                Log.w("GmsClientEvents", "registerConnectionCallbacks(): listener " + googleApiClient$ConnectionCallbacks + " is already registered");
            }
            else {
                this.Dp.add(googleApiClient$ConnectionCallbacks);
            }
            // monitorexit(this.Dp)
            if (this.Do.isConnected()) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(1, (Object)googleApiClient$ConnectionCallbacks));
            }
        }
    }
    
    public final void registerConnectionFailedListener(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        fq.f(googlePlayServicesClient$OnConnectionFailedListener);
        synchronized (this.Ds) {
            if (this.Ds.contains(googlePlayServicesClient$OnConnectionFailedListener)) {
                Log.w("GmsClientEvents", "registerConnectionFailedListener(): listener " + googlePlayServicesClient$OnConnectionFailedListener + " is already registered");
            }
            else {
                this.Ds.add(googlePlayServicesClient$OnConnectionFailedListener);
            }
        }
    }
    
    public final void unregisterConnectionCallbacks(final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks) {
        fq.f(googleApiClient$ConnectionCallbacks);
        synchronized (this.Dp) {
            if (this.Dp != null) {
                if (!this.Dp.remove(googleApiClient$ConnectionCallbacks)) {
                    Log.w("GmsClientEvents", "unregisterConnectionCallbacks(): listener " + googleApiClient$ConnectionCallbacks + " not found");
                }
                else if (this.Dr) {
                    this.Dq.add(googleApiClient$ConnectionCallbacks);
                }
            }
        }
    }
    
    public final void unregisterConnectionFailedListener(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        fq.f(googlePlayServicesClient$OnConnectionFailedListener);
        synchronized (this.Ds) {
            if (this.Ds != null && !this.Ds.remove(googlePlayServicesClient$OnConnectionFailedListener)) {
                Log.w("GmsClientEvents", "unregisterConnectionFailedListener(): listener " + googlePlayServicesClient$OnConnectionFailedListener + " not found");
            }
        }
    }
}
