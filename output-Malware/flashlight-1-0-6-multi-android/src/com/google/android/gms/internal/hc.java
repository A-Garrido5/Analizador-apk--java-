// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.internal;

import android.os.Looper;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationClient$OnRemoveGeofencesResultListener;
import android.location.Location;
import android.os.RemoteException;
import com.google.android.gms.location.LocationClient$OnAddGeofencesResultListener;
import android.app.PendingIntent;
import java.util.List;
import android.os.Bundle;
import android.os.IBinder;
import android.os.IInterface;
import com.google.android.gms.common.GooglePlayServicesClient$OnConnectionFailedListener;
import com.google.android.gms.common.GooglePlayServicesClient$ConnectionCallbacks;
import android.content.Context;

public class hc extends ff
{
    private final hf Ok;
    private final hb Oq;
    private final hr Or;
    private final String Os;
    private final Context mContext;
    private final String wG;
    
    public hc(final Context mContext, final GooglePlayServicesClient$ConnectionCallbacks googlePlayServicesClient$ConnectionCallbacks, final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener, final String os) {
        super(mContext, googlePlayServicesClient$ConnectionCallbacks, googlePlayServicesClient$OnConnectionFailedListener, new String[0]);
        this.Ok = new hc$c(this, null);
        this.mContext = mContext;
        this.Oq = new hb(mContext, this.Ok);
        this.Os = os;
        this.wG = null;
        this.Or = new hr(this.getContext(), mContext.getPackageName(), this.Ok);
    }
    
    protected ha X(final IBinder binder) {
        return ha$a.W(binder);
    }
    
    @Override
    protected void a(final fm fm, final ff$e ff$e) {
        final Bundle bundle = new Bundle();
        bundle.putString("client_name", this.Os);
        fm.e(ff$e, 4452000, this.getContext().getPackageName(), bundle);
    }
    
    public void addGeofences(final List list, final PendingIntent pendingIntent, final LocationClient$OnAddGeofencesResultListener locationClient$OnAddGeofencesResultListener) {
        this.bT();
        while (true) {
            Label_0102: {
                if (list == null || list.size() <= 0) {
                    break Label_0102;
                }
                final boolean b = true;
                fq.b(b, "At least one geofence must be specified.");
                fq.b(pendingIntent, "PendingIntent must be specified.");
                fq.b(locationClient$OnAddGeofencesResultListener, "OnAddGeofencesResultListener not provided.");
                Label_0072: {
                    if (locationClient$OnAddGeofencesResultListener != null) {
                        break Label_0072;
                    }
                    gz gz = null;
                    try {
                        while (true) {
                            ((ha)this.eM()).a(list, pendingIntent, gz, this.getContext().getPackageName());
                            return;
                            gz = new hc$b(locationClient$OnAddGeofencesResultListener, this);
                            continue;
                        }
                    }
                    catch (RemoteException ex) {
                        throw new IllegalStateException((Throwable)ex);
                    }
                }
            }
            final boolean b = false;
            continue;
        }
    }
    
    @Override
    protected String bg() {
        return "com.google.android.location.internal.GoogleLocationManagerService.START";
    }
    
    @Override
    protected String bh() {
        return "com.google.android.gms.location.internal.IGoogleLocationManagerService";
    }
    
    @Override
    public void disconnect() {
        synchronized (this.Oq) {
            if (this.isConnected()) {
                this.Oq.removeAllListeners();
                this.Oq.hQ();
            }
            super.disconnect();
        }
    }
    
    public Location getLastLocation() {
        return this.Oq.getLastLocation();
    }
    
    public void removeActivityUpdates(final PendingIntent pendingIntent) {
        this.bT();
        fq.f(pendingIntent);
        try {
            ((ha)this.eM()).removeActivityUpdates(pendingIntent);
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
    
    public void removeGeofences(final PendingIntent pendingIntent, final LocationClient$OnRemoveGeofencesResultListener locationClient$OnRemoveGeofencesResultListener) {
        this.bT();
        fq.b(pendingIntent, "PendingIntent must be specified.");
        fq.b(locationClient$OnRemoveGeofencesResultListener, "OnRemoveGeofencesResultListener not provided.");
        Label_0048: {
            if (locationClient$OnRemoveGeofencesResultListener != null) {
                break Label_0048;
            }
            gz gz = null;
            try {
                while (true) {
                    ((ha)this.eM()).a(pendingIntent, gz, this.getContext().getPackageName());
                    return;
                    gz = new hc$b(locationClient$OnRemoveGeofencesResultListener, this);
                    continue;
                }
            }
            catch (RemoteException ex) {
                throw new IllegalStateException((Throwable)ex);
            }
        }
    }
    
    public void removeGeofences(final List list, final LocationClient$OnRemoveGeofencesResultListener locationClient$OnRemoveGeofencesResultListener) {
        this.bT();
        while (true) {
            Label_0108: {
                if (list == null || list.size() <= 0) {
                    break Label_0108;
                }
                final boolean b = true;
                fq.b(b, "geofenceRequestIds can't be null nor empty.");
                fq.b(locationClient$OnRemoveGeofencesResultListener, "OnRemoveGeofencesResultListener not provided.");
                final String[] array = list.toArray(new String[0]);
                Label_0078: {
                    if (locationClient$OnRemoveGeofencesResultListener != null) {
                        break Label_0078;
                    }
                    gz gz = null;
                    try {
                        while (true) {
                            ((ha)this.eM()).a(array, gz, this.getContext().getPackageName());
                            return;
                            gz = new hc$b(locationClient$OnRemoveGeofencesResultListener, this);
                            continue;
                        }
                    }
                    catch (RemoteException ex) {
                        throw new IllegalStateException((Throwable)ex);
                    }
                }
            }
            final boolean b = false;
            continue;
        }
    }
    
    public void removeLocationUpdates(final PendingIntent pendingIntent) {
        this.Oq.removeLocationUpdates(pendingIntent);
    }
    
    public void removeLocationUpdates(final LocationListener locationListener) {
        this.Oq.removeLocationUpdates(locationListener);
    }
    
    public void requestActivityUpdates(final long n, final PendingIntent pendingIntent) {
        boolean b = true;
        this.bT();
        fq.f(pendingIntent);
        Label_0041: {
            if (n < 0L) {
                break Label_0041;
            }
            while (true) {
                fq.b(b, "detectionIntervalMillis must be >= 0");
                try {
                    ((ha)this.eM()).a(n, true, pendingIntent);
                    return;
                    b = false;
                }
                catch (RemoteException ex) {
                    throw new IllegalStateException((Throwable)ex);
                }
            }
        }
    }
    
    public void requestLocationUpdates(final LocationRequest locationRequest, final PendingIntent pendingIntent) {
        this.Oq.requestLocationUpdates(locationRequest, pendingIntent);
    }
    
    public void requestLocationUpdates(final LocationRequest locationRequest, final LocationListener locationListener) {
        this.requestLocationUpdates(locationRequest, locationListener, null);
    }
    
    public void requestLocationUpdates(final LocationRequest locationRequest, final LocationListener locationListener, final Looper looper) {
        synchronized (this.Oq) {
            this.Oq.requestLocationUpdates(locationRequest, locationListener, looper);
        }
    }
    
    public void setMockLocation(final Location mockLocation) {
        this.Oq.setMockLocation(mockLocation);
    }
    
    public void setMockMode(final boolean mockMode) {
        this.Oq.setMockMode(mockMode);
    }
}
