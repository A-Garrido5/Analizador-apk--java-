// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.internal;

import android.os.Looper;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationListener;
import android.app.PendingIntent;
import java.util.Iterator;
import com.google.android.gms.location.a;
import android.os.RemoteException;
import android.location.Location;
import android.content.Context;
import java.util.HashMap;
import android.content.ContentProviderClient;

public class hb
{
    private final hf Ok;
    private ContentProviderClient Ol;
    private boolean Om;
    private HashMap On;
    private final Context mContext;
    
    public hb(final Context mContext, final hf ok) {
        this.Ol = null;
        this.Om = false;
        this.On = new HashMap();
        this.mContext = mContext;
        this.Ok = ok;
    }
    
    public Location getLastLocation() {
        this.Ok.bT();
        try {
            return ((ha)this.Ok.eM()).aW(this.mContext.getPackageName());
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
    
    public void hQ() {
        if (this.Om) {
            this.setMockMode(false);
        }
    }
    
    public void removeAllListeners() {
        try {
            synchronized (this.On) {
                for (final hb$b hb$b : this.On.values()) {
                    if (hb$b != null) {
                        ((ha)this.Ok.eM()).a(hb$b);
                    }
                }
            }
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
        this.On.clear();
    }
    // monitorexit(hashMap)
    
    public void removeLocationUpdates(final PendingIntent pendingIntent) {
        this.Ok.bT();
        try {
            ((ha)this.Ok.eM()).a(pendingIntent);
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
    
    public void removeLocationUpdates(final LocationListener locationListener) {
        this.Ok.bT();
        fq.b(locationListener, "Invalid null listener");
        synchronized (this.On) {
            final hb$b hb$b = this.On.remove(locationListener);
            if (this.Ol != null && this.On.isEmpty()) {
                this.Ol.release();
                this.Ol = null;
            }
            if (hb$b == null) {
                return;
            }
            hb$b.release();
            try {
                ((ha)this.Ok.eM()).a(hb$b);
            }
            catch (RemoteException ex) {
                throw new IllegalStateException((Throwable)ex);
            }
        }
    }
    
    public void requestLocationUpdates(final LocationRequest locationRequest, final PendingIntent pendingIntent) {
        this.Ok.bT();
        try {
            ((ha)this.Ok.eM()).a(locationRequest, pendingIntent);
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
    
    public void requestLocationUpdates(final LocationRequest locationRequest, final LocationListener locationListener, final Looper looper) {
        this.Ok.bT();
        if (looper == null) {
            fq.b(Looper.myLooper(), "Can't create handler inside thread that has not called Looper.prepare()");
        }
        while (true) {
            while (true) {
                final hb$b hb$b;
                synchronized (this.On) {
                    hb$b = this.On.get(locationListener);
                    if (hb$b == null) {
                        final hb$b hb$b2 = new hb$b(locationListener, looper);
                        this.On.put(locationListener, hb$b2);
                        try {
                            ((ha)this.Ok.eM()).a(locationRequest, hb$b2, this.mContext.getPackageName());
                            return;
                        }
                        catch (RemoteException ex) {
                            throw new IllegalStateException((Throwable)ex);
                        }
                    }
                }
                final hb$b hb$b2 = hb$b;
                continue;
            }
        }
    }
    
    public void setMockLocation(final Location mockLocation) {
        this.Ok.bT();
        try {
            ((ha)this.Ok.eM()).setMockLocation(mockLocation);
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
    
    public void setMockMode(final boolean b) {
        this.Ok.bT();
        try {
            ((ha)this.Ok.eM()).setMockMode(b);
            this.Om = b;
        }
        catch (RemoteException ex) {
            throw new IllegalStateException((Throwable)ex);
        }
    }
}
