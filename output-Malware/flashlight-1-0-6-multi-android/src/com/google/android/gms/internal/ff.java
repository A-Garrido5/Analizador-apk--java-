// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.internal;

import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesUtil;
import android.os.Bundle;
import android.os.IBinder;
import com.google.android.gms.common.GooglePlayServicesClient$OnConnectionFailedListener;
import com.google.android.gms.common.GooglePlayServicesClient$ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener;
import com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks;
import android.os.Handler;
import android.content.Context;
import java.util.ArrayList;
import android.os.IInterface;
import android.os.Looper;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.GooglePlayServicesClient;

public abstract class ff implements GooglePlayServicesClient, Api$a, fg$b
{
    public static final String[] Dg;
    private final Looper AS;
    private final fg Bc;
    private IInterface Da;
    private final ArrayList Db;
    private ff$f Dc;
    private volatile int Dd;
    private final String[] De;
    boolean Df;
    private final Context mContext;
    final Handler mHandler;
    
    static {
        Dg = new String[] { "service_esmobile", "service_googleme" };
    }
    
    protected ff(final Context context, final Looper looper, final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks, final GoogleApiClient$OnConnectionFailedListener googleApiClient$OnConnectionFailedListener, final String... de) {
        this.Db = new ArrayList();
        this.Dd = 1;
        this.Df = false;
        this.mContext = (Context)fq.f(context);
        this.AS = (Looper)fq.b(looper, "Looper must not be null");
        this.Bc = new fg(context, looper, this);
        this.mHandler = new ff$a(this, looper);
        this.b(de);
        this.De = de;
        this.registerConnectionCallbacks((GoogleApiClient$ConnectionCallbacks)fq.f(googleApiClient$ConnectionCallbacks));
        this.registerConnectionFailedListener((GoogleApiClient$OnConnectionFailedListener)fq.f(googleApiClient$OnConnectionFailedListener));
    }
    
    protected ff(final Context context, final GooglePlayServicesClient$ConnectionCallbacks googlePlayServicesClient$ConnectionCallbacks, final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener, final String... array) {
        this(context, context.getMainLooper(), new ff$c(googlePlayServicesClient$ConnectionCallbacks), new ff$g(googlePlayServicesClient$OnConnectionFailedListener), array);
    }
    
    private void M(final int dd) {
        final int dd2 = this.Dd;
        this.Dd = dd;
        if (dd2 != dd) {
            if (dd == 3) {
                this.onConnected();
            }
            else if (dd2 == 3 && dd == 1) {
                this.onDisconnected();
            }
        }
    }
    
    public void N(final int n) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(4, (Object)n));
    }
    
    protected void a(final int n, final IBinder binder, final Bundle bundle) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(1, (Object)new ff$h(this, n, binder, bundle)));
    }
    
    public final void a(final ff$b ff$b) {
        synchronized (this.Db) {
            this.Db.add(ff$b);
            // monitorexit(this.Db)
            this.mHandler.sendMessage(this.mHandler.obtainMessage(2, (Object)ff$b));
        }
    }
    
    protected abstract void a(final fm p0, final ff$e p1);
    
    protected void b(final String... array) {
    }
    
    protected final void bT() {
        if (!this.isConnected()) {
            throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
        }
    }
    
    protected abstract String bg();
    
    protected abstract String bh();
    
    @Override
    public void connect() {
        this.Df = true;
        this.M(2);
        final int googlePlayServicesAvailable = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this.mContext);
        if (googlePlayServicesAvailable != 0) {
            this.M(1);
            this.mHandler.sendMessage(this.mHandler.obtainMessage(3, (Object)googlePlayServicesAvailable));
        }
        else {
            if (this.Dc != null) {
                Log.e("GmsClient", "Calling connect() while still connected, missing disconnect().");
                this.Da = null;
                fh.x(this.mContext).b(this.bg(), this.Dc);
            }
            this.Dc = new ff$f(this);
            if (!fh.x(this.mContext).a(this.bg(), this.Dc)) {
                Log.e("GmsClient", "unable to connect to service: " + this.bg());
                this.mHandler.sendMessage(this.mHandler.obtainMessage(3, (Object)9));
            }
        }
    }
    
    @Override
    public Bundle dG() {
        return null;
    }
    
    @Override
    public void disconnect() {
        this.Df = false;
        synchronized (this.Db) {
            for (int size = this.Db.size(), i = 0; i < size; ++i) {
                ((ff$b)this.Db.get(i)).eO();
            }
            this.Db.clear();
            // monitorexit(this.Db)
            this.M(1);
            this.Da = null;
            if (this.Dc != null) {
                fh.x(this.mContext).b(this.bg(), this.Dc);
                this.Dc = null;
            }
        }
    }
    
    public final String[] eL() {
        return this.De;
    }
    
    protected final IInterface eM() {
        this.bT();
        return this.Da;
    }
    
    @Override
    public boolean em() {
        return this.Df;
    }
    
    public final Context getContext() {
        return this.mContext;
    }
    
    @Override
    public final Looper getLooper() {
        return this.AS;
    }
    
    @Override
    public boolean isConnected() {
        return this.Dd == 3;
    }
    
    @Override
    public boolean isConnecting() {
        return this.Dd == 2;
    }
    
    @Override
    public boolean isConnectionCallbacksRegistered(final GooglePlayServicesClient$ConnectionCallbacks googlePlayServicesClient$ConnectionCallbacks) {
        return this.Bc.isConnectionCallbacksRegistered(new ff$c(googlePlayServicesClient$ConnectionCallbacks));
    }
    
    @Override
    public boolean isConnectionFailedListenerRegistered(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        return this.Bc.isConnectionFailedListenerRegistered(googlePlayServicesClient$OnConnectionFailedListener);
    }
    
    protected void onConnected() {
    }
    
    protected void onDisconnected() {
    }
    
    protected abstract IInterface r(final IBinder p0);
    
    @Override
    public void registerConnectionCallbacks(final GooglePlayServicesClient$ConnectionCallbacks googlePlayServicesClient$ConnectionCallbacks) {
        this.Bc.registerConnectionCallbacks(new ff$c(googlePlayServicesClient$ConnectionCallbacks));
    }
    
    public void registerConnectionCallbacks(final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks) {
        this.Bc.registerConnectionCallbacks(googleApiClient$ConnectionCallbacks);
    }
    
    @Override
    public void registerConnectionFailedListener(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        this.Bc.registerConnectionFailedListener(googlePlayServicesClient$OnConnectionFailedListener);
    }
    
    public void registerConnectionFailedListener(final GoogleApiClient$OnConnectionFailedListener googleApiClient$OnConnectionFailedListener) {
        this.Bc.registerConnectionFailedListener(googleApiClient$OnConnectionFailedListener);
    }
    
    @Override
    public void unregisterConnectionCallbacks(final GooglePlayServicesClient$ConnectionCallbacks googlePlayServicesClient$ConnectionCallbacks) {
        this.Bc.unregisterConnectionCallbacks(new ff$c(googlePlayServicesClient$ConnectionCallbacks));
    }
    
    @Override
    public void unregisterConnectionFailedListener(final GooglePlayServicesClient$OnConnectionFailedListener googlePlayServicesClient$OnConnectionFailedListener) {
        this.Bc.unregisterConnectionFailedListener(googlePlayServicesClient$OnConnectionFailedListener);
    }
    
    protected final void z(final IBinder binder) {
        try {
            this.a(fm$a.C(binder), new ff$e(this));
        }
        catch (RemoteException ex) {
            Log.w("GmsClient", "service died");
        }
    }
}
