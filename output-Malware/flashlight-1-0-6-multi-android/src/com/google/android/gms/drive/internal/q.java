// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.drive.internal;

import com.google.android.gms.drive.query.Filters;
import com.google.android.gms.drive.query.SearchableField;
import com.google.android.gms.drive.query.Query$Builder;
import com.google.android.gms.drive.query.Query;
import com.google.android.gms.common.api.a$b;
import com.google.android.gms.drive.DriveFile;
import com.google.android.gms.drive.DriveFolder$DriveFileResult;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.a$d;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.drive.Contents;
import com.google.android.gms.drive.MetadataChangeSet;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.drive.DriveId;
import com.google.android.gms.drive.DriveFolder;

public class q extends r implements DriveFolder
{
    public q(final DriveId driveId) {
        super(driveId);
    }
    
    @Override
    public PendingResult createFile(final GoogleApiClient googleApiClient, final MetadataChangeSet set, final Contents contents) {
        if (set == null) {
            throw new IllegalArgumentException("MetatadataChangeSet must be provided.");
        }
        if (contents == null) {
            throw new IllegalArgumentException("Contents must be provided.");
        }
        if ("application/vnd.google-apps.folder".equals(set.getMimeType())) {
            throw new IllegalArgumentException("May not create folders (mimetype: application/vnd.google-apps.folder) using this method. Use DriveFolder.createFolder() instead.");
        }
        return googleApiClient.b(new m() {
            protected void a(final n n) {
                contents.close();
                n.fE().a(new CreateFileRequest(q.this.getDriveId(), set.fD(), contents), new q$a(this));
            }
            
            public DriveFolder$DriveFileResult q(final Status status) {
                return new q$d(status, null);
            }
        });
    }
    
    @Override
    public PendingResult createFolder(final GoogleApiClient googleApiClient, final MetadataChangeSet set) {
        if (set == null) {
            throw new IllegalArgumentException("MetatadataChangeSet must be provided.");
        }
        if (set.getMimeType() != null && !set.getMimeType().equals("application/vnd.google-apps.folder")) {
            throw new IllegalArgumentException("The mimetype must be of type application/vnd.google-apps.folder");
        }
        return googleApiClient.b(new q$c() {
            protected void a(final n n) {
                n.fE().a(new CreateFolderRequest(q.this.getDriveId(), set.fD()), new q$b(this));
            }
        });
    }
    
    @Override
    public PendingResult listChildren(final GoogleApiClient googleApiClient) {
        return this.queryChildren(googleApiClient, null);
    }
    
    @Override
    public PendingResult queryChildren(final GoogleApiClient googleApiClient, final Query query) {
        final Query$Builder addFilter = new Query$Builder().addFilter(Filters.in(SearchableField.PARENTS, this.getDriveId()));
        if (query != null) {
            if (query.getFilter() != null) {
                addFilter.addFilter(query.getFilter());
            }
            addFilter.setPageToken(query.getPageToken());
            addFilter.a(query.fV());
        }
        return new l().query(googleApiClient, addFilter.build());
    }
}
