// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.drive.internal;

import com.google.android.gms.drive.query.Query;
import com.google.android.gms.drive.OpenFileActivityBuilder;
import com.google.android.gms.drive.CreateFileActivityBuilder;
import com.google.android.gms.drive.DriveFile;
import com.google.android.gms.drive.Drive;
import com.google.android.gms.drive.DriveFolder;
import com.google.android.gms.drive.DriveId;
import com.google.android.gms.common.api.a$b;
import com.google.android.gms.common.api.a$d;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.drive.Contents;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.drive.DriveApi;

public class l implements DriveApi
{
    @Override
    public PendingResult discardContents(final GoogleApiClient googleApiClient, final Contents contents) {
        return googleApiClient.b(new l$j() {
            protected void a(final n n) {
                n.fE().a(new CloseContentsRequest(contents, false), new al(this));
            }
        });
    }
    
    @Override
    public PendingResult fetchDriveId(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.a(new l$d() {
            protected void a(final n n) {
                n.fE().a(new GetMetadataRequest(DriveId.aw(s)), new l$b(this));
            }
        });
    }
    
    @Override
    public DriveFolder getAppFolder(final GoogleApiClient googleApiClient) {
        if (!googleApiClient.isConnected()) {
            throw new IllegalStateException("Client must be connected");
        }
        final DriveId fg = ((n)googleApiClient.a(Drive.wx)).fG();
        if (fg != null) {
            return new q(fg);
        }
        return null;
    }
    
    @Override
    public DriveFile getFile(final GoogleApiClient googleApiClient, final DriveId driveId) {
        if (driveId == null) {
            throw new IllegalArgumentException("Id must be provided.");
        }
        if (!googleApiClient.isConnected()) {
            throw new IllegalStateException("Client must be connected");
        }
        return new o(driveId);
    }
    
    @Override
    public DriveFolder getFolder(final GoogleApiClient googleApiClient, final DriveId driveId) {
        if (driveId == null) {
            throw new IllegalArgumentException("Id must be provided.");
        }
        if (!googleApiClient.isConnected()) {
            throw new IllegalStateException("Client must be connected");
        }
        return new q(driveId);
    }
    
    @Override
    public DriveFolder getRootFolder(final GoogleApiClient googleApiClient) {
        if (!googleApiClient.isConnected()) {
            throw new IllegalStateException("Client must be connected");
        }
        return new q(((n)googleApiClient.a(Drive.wx)).fF());
    }
    
    @Override
    public PendingResult newContents(final GoogleApiClient googleApiClient) {
        return googleApiClient.a(new l$g() {
            protected void a(final n n) {
                n.fE().a(new CreateContentsRequest(), new l$f(this));
            }
        });
    }
    
    @Override
    public CreateFileActivityBuilder newCreateFileActivityBuilder() {
        return new CreateFileActivityBuilder();
    }
    
    @Override
    public OpenFileActivityBuilder newOpenFileActivityBuilder() {
        return new OpenFileActivityBuilder();
    }
    
    @Override
    public PendingResult query(final GoogleApiClient googleApiClient, final Query query) {
        if (query == null) {
            throw new IllegalArgumentException("Query must be provided.");
        }
        return googleApiClient.a(new l$i() {
            protected void a(final n n) {
                n.fE().a(new QueryRequest(query), new l$h(this));
            }
        });
    }
    
    @Override
    public PendingResult requestSync(final GoogleApiClient googleApiClient) {
        return googleApiClient.b(new l$l() {
            protected void a(final n n) {
                n.fE().a(new al(this));
            }
        });
    }
}
