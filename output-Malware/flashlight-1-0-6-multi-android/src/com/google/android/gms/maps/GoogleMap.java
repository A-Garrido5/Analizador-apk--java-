// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.maps;

import com.google.android.gms.maps.internal.s;
import com.google.android.gms.maps.internal.s$a;
import android.graphics.Bitmap;
import com.google.android.gms.maps.internal.o$a;
import com.google.android.gms.maps.internal.o;
import com.google.android.gms.maps.internal.n$a;
import com.google.android.gms.maps.internal.n;
import com.google.android.gms.maps.internal.m$a;
import com.google.android.gms.maps.internal.m;
import com.google.android.gms.maps.internal.l$a;
import com.google.android.gms.maps.internal.l;
import com.google.android.gms.maps.internal.k$a;
import com.google.android.gms.maps.internal.k;
import com.google.android.gms.maps.internal.j$a;
import com.google.android.gms.maps.internal.j;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.internal.i$a;
import com.google.android.gms.maps.internal.i;
import com.google.android.gms.maps.internal.g$a;
import com.google.android.gms.maps.internal.g;
import com.google.android.gms.maps.internal.f$a;
import com.google.android.gms.maps.internal.e$a;
import com.google.android.gms.maps.internal.ILocationSourceDelegate$a;
import com.google.android.gms.maps.internal.ILocationSourceDelegate;
import com.google.android.gms.dynamic.e;
import com.google.android.gms.maps.internal.d$a;
import android.location.Location;
import com.google.android.gms.maps.model.IndoorBuilding;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.internal.b;
import com.google.android.gms.dynamic.d;
import com.google.android.gms.maps.model.internal.h;
import com.google.android.gms.maps.model.TileOverlay;
import com.google.android.gms.maps.model.TileOverlayOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.maps.model.Polygon;
import com.google.android.gms.maps.model.PolygonOptions;
import com.google.android.gms.maps.model.internal.f;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.internal.c;
import com.google.android.gms.maps.model.GroundOverlay;
import com.google.android.gms.maps.model.GroundOverlayOptions;
import android.os.RemoteException;
import com.google.android.gms.maps.model.RuntimeRemoteException;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.internal.fq;
import com.google.android.gms.maps.internal.IGoogleMapDelegate;

public final class GoogleMap
{
    public static final int MAP_TYPE_HYBRID = 4;
    public static final int MAP_TYPE_NONE = 0;
    public static final int MAP_TYPE_NORMAL = 1;
    public static final int MAP_TYPE_SATELLITE = 2;
    public static final int MAP_TYPE_TERRAIN = 3;
    private final IGoogleMapDelegate Rp;
    private UiSettings Rq;
    
    protected GoogleMap(final IGoogleMapDelegate googleMapDelegate) {
        this.Rp = (IGoogleMapDelegate)fq.f(googleMapDelegate);
    }
    
    public final Circle addCircle(final CircleOptions circleOptions) {
        try {
            return new Circle(this.Rp.addCircle(circleOptions));
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final GroundOverlay addGroundOverlay(final GroundOverlayOptions groundOverlayOptions) {
        try {
            final c addGroundOverlay = this.Rp.addGroundOverlay(groundOverlayOptions);
            if (addGroundOverlay != null) {
                return new GroundOverlay(addGroundOverlay);
            }
            return null;
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final Marker addMarker(final MarkerOptions markerOptions) {
        try {
            final f addMarker = this.Rp.addMarker(markerOptions);
            if (addMarker != null) {
                return new Marker(addMarker);
            }
            return null;
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final Polygon addPolygon(final PolygonOptions polygonOptions) {
        try {
            return new Polygon(this.Rp.addPolygon(polygonOptions));
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final Polyline addPolyline(final PolylineOptions polylineOptions) {
        try {
            return new Polyline(this.Rp.addPolyline(polylineOptions));
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final TileOverlay addTileOverlay(final TileOverlayOptions tileOverlayOptions) {
        try {
            final h addTileOverlay = this.Rp.addTileOverlay(tileOverlayOptions);
            if (addTileOverlay != null) {
                return new TileOverlay(addTileOverlay);
            }
            return null;
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void animateCamera(final CameraUpdate cameraUpdate) {
        try {
            this.Rp.animateCamera(cameraUpdate.id());
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void animateCamera(final CameraUpdate cameraUpdate, final int n, final GoogleMap$CancelableCallback googleMap$CancelableCallback) {
        try {
            final IGoogleMapDelegate rp = this.Rp;
            final d id = cameraUpdate.id();
            b b;
            if (googleMap$CancelableCallback == null) {
                b = null;
            }
            else {
                b = new GoogleMap$a(googleMap$CancelableCallback);
            }
            rp.animateCameraWithDurationAndCallback(id, n, b);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void animateCamera(final CameraUpdate cameraUpdate, final GoogleMap$CancelableCallback googleMap$CancelableCallback) {
        try {
            final IGoogleMapDelegate rp = this.Rp;
            final d id = cameraUpdate.id();
            b b;
            if (googleMap$CancelableCallback == null) {
                b = null;
            }
            else {
                b = new GoogleMap$a(googleMap$CancelableCallback);
            }
            rp.animateCameraWithCallback(id, b);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void clear() {
        try {
            this.Rp.clear();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final CameraPosition getCameraPosition() {
        try {
            return this.Rp.getCameraPosition();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final IndoorBuilding getFocusedBuilding() {
        try {
            final com.google.android.gms.maps.model.internal.d focusedBuilding = this.Rp.getFocusedBuilding();
            if (focusedBuilding != null) {
                return new IndoorBuilding(focusedBuilding);
            }
            return null;
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final int getMapType() {
        try {
            return this.Rp.getMapType();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final float getMaxZoomLevel() {
        try {
            return this.Rp.getMaxZoomLevel();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final float getMinZoomLevel() {
        try {
            return this.Rp.getMinZoomLevel();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    @Deprecated
    public final Location getMyLocation() {
        try {
            return this.Rp.getMyLocation();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final Projection getProjection() {
        try {
            return new Projection(this.Rp.getProjection());
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final UiSettings getUiSettings() {
        try {
            if (this.Rq == null) {
                this.Rq = new UiSettings(this.Rp.getUiSettings());
            }
            return this.Rq;
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    final IGoogleMapDelegate if() {
        return this.Rp;
    }
    
    public final boolean isBuildingsEnabled() {
        try {
            return this.Rp.isBuildingsEnabled();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final boolean isIndoorEnabled() {
        try {
            return this.Rp.isIndoorEnabled();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final boolean isMyLocationEnabled() {
        try {
            return this.Rp.isMyLocationEnabled();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final boolean isTrafficEnabled() {
        try {
            return this.Rp.isTrafficEnabled();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void moveCamera(final CameraUpdate cameraUpdate) {
        try {
            this.Rp.moveCamera(cameraUpdate.id());
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void setBuildingsEnabled(final boolean buildingsEnabled) {
        try {
            this.Rp.setBuildingsEnabled(buildingsEnabled);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final boolean setIndoorEnabled(final boolean indoorEnabled) {
        try {
            return this.Rp.setIndoorEnabled(indoorEnabled);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void setInfoWindowAdapter(final GoogleMap$InfoWindowAdapter googleMap$InfoWindowAdapter) {
        Label_0015: {
            if (googleMap$InfoWindowAdapter != null) {
                break Label_0015;
            }
            try {
                this.Rp.setInfoWindowAdapter(null);
                return;
                this.Rp.setInfoWindowAdapter(new d$a() {
                    public com.google.android.gms.dynamic.d f(final f f) {
                        return e.h(googleMap$InfoWindowAdapter.getInfoWindow(new Marker(f)));
                    }
                    
                    public com.google.android.gms.dynamic.d g(final f f) {
                        return e.h(googleMap$InfoWindowAdapter.getInfoContents(new Marker(f)));
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setLocationSource(final LocationSource locationSource) {
        Label_0015: {
            if (locationSource != null) {
                break Label_0015;
            }
            try {
                this.Rp.setLocationSource(null);
                return;
                this.Rp.setLocationSource(new ILocationSourceDelegate$a() {
                    public void activate(final com.google.android.gms.maps.internal.h h) {
                        locationSource.activate(new LocationSource$OnLocationChangedListener() {
                            @Override
                            public void onLocationChanged(final Location location) {
                                try {
                                    h.j(e.h(location));
                                }
                                catch (RemoteException ex) {
                                    throw new RuntimeRemoteException(ex);
                                }
                            }
                        });
                    }
                    
                    public void deactivate() {
                        locationSource.deactivate();
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setMapType(final int mapType) {
        try {
            this.Rp.setMapType(mapType);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void setMyLocationEnabled(final boolean myLocationEnabled) {
        try {
            this.Rp.setMyLocationEnabled(myLocationEnabled);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void setOnCameraChangeListener(final GoogleMap$OnCameraChangeListener googleMap$OnCameraChangeListener) {
        Label_0015: {
            if (googleMap$OnCameraChangeListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnCameraChangeListener(null);
                return;
                this.Rp.setOnCameraChangeListener(new e$a() {
                    public void onCameraChange(final CameraPosition cameraPosition) {
                        googleMap$OnCameraChangeListener.onCameraChange(cameraPosition);
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnIndoorStateChangeListener(final GoogleMap$OnIndoorStateChangeListener googleMap$OnIndoorStateChangeListener) {
        Label_0015: {
            if (googleMap$OnIndoorStateChangeListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnIndoorStateChangeListener(null);
                return;
                this.Rp.setOnIndoorStateChangeListener(new f$a() {
                    public void a(final com.google.android.gms.maps.model.internal.d d) {
                        googleMap$OnIndoorStateChangeListener.onIndoorLevelActivated(new IndoorBuilding(d));
                    }
                    
                    public void onIndoorBuildingFocused() {
                        googleMap$OnIndoorStateChangeListener.onIndoorBuildingFocused();
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnInfoWindowClickListener(final GoogleMap$OnInfoWindowClickListener googleMap$OnInfoWindowClickListener) {
        Label_0015: {
            if (googleMap$OnInfoWindowClickListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnInfoWindowClickListener(null);
                return;
                this.Rp.setOnInfoWindowClickListener(new g$a() {
                    public void e(final f f) {
                        googleMap$OnInfoWindowClickListener.onInfoWindowClick(new Marker(f));
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMapClickListener(final GoogleMap$OnMapClickListener googleMap$OnMapClickListener) {
        Label_0015: {
            if (googleMap$OnMapClickListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMapClickListener(null);
                return;
                this.Rp.setOnMapClickListener(new i$a() {
                    public void onMapClick(final LatLng latLng) {
                        googleMap$OnMapClickListener.onMapClick(latLng);
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMapLoadedCallback(final GoogleMap$OnMapLoadedCallback googleMap$OnMapLoadedCallback) {
        Label_0015: {
            if (googleMap$OnMapLoadedCallback != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMapLoadedCallback(null);
                return;
                this.Rp.setOnMapLoadedCallback(new j$a() {
                    public void onMapLoaded() {
                        googleMap$OnMapLoadedCallback.onMapLoaded();
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMapLongClickListener(final GoogleMap$OnMapLongClickListener googleMap$OnMapLongClickListener) {
        Label_0015: {
            if (googleMap$OnMapLongClickListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMapLongClickListener(null);
                return;
                this.Rp.setOnMapLongClickListener(new k$a() {
                    public void onMapLongClick(final LatLng latLng) {
                        googleMap$OnMapLongClickListener.onMapLongClick(latLng);
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMarkerClickListener(final GoogleMap$OnMarkerClickListener googleMap$OnMarkerClickListener) {
        Label_0015: {
            if (googleMap$OnMarkerClickListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMarkerClickListener(null);
                return;
                this.Rp.setOnMarkerClickListener(new l$a() {
                    public boolean a(final f f) {
                        return googleMap$OnMarkerClickListener.onMarkerClick(new Marker(f));
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMarkerDragListener(final GoogleMap$OnMarkerDragListener googleMap$OnMarkerDragListener) {
        Label_0015: {
            if (googleMap$OnMarkerDragListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMarkerDragListener(null);
                return;
                this.Rp.setOnMarkerDragListener(new m$a() {
                    public void b(final f f) {
                        googleMap$OnMarkerDragListener.onMarkerDragStart(new Marker(f));
                    }
                    
                    public void c(final f f) {
                        googleMap$OnMarkerDragListener.onMarkerDragEnd(new Marker(f));
                    }
                    
                    public void d(final f f) {
                        googleMap$OnMarkerDragListener.onMarkerDrag(new Marker(f));
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setOnMyLocationButtonClickListener(final GoogleMap$OnMyLocationButtonClickListener googleMap$OnMyLocationButtonClickListener) {
        Label_0015: {
            if (googleMap$OnMyLocationButtonClickListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMyLocationButtonClickListener(null);
                return;
                this.Rp.setOnMyLocationButtonClickListener(new n$a() {
                    public boolean onMyLocationButtonClick() {
                        return googleMap$OnMyLocationButtonClickListener.onMyLocationButtonClick();
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    @Deprecated
    public final void setOnMyLocationChangeListener(final GoogleMap$OnMyLocationChangeListener googleMap$OnMyLocationChangeListener) {
        Label_0015: {
            if (googleMap$OnMyLocationChangeListener != null) {
                break Label_0015;
            }
            try {
                this.Rp.setOnMyLocationChangeListener(null);
                return;
                this.Rp.setOnMyLocationChangeListener(new o$a() {
                    public void e(final d d) {
                        googleMap$OnMyLocationChangeListener.onMyLocationChange((Location)e.d(d));
                    }
                });
            }
            catch (RemoteException ex) {
                throw new RuntimeRemoteException(ex);
            }
        }
    }
    
    public final void setPadding(final int n, final int n2, final int n3, final int n4) {
        try {
            this.Rp.setPadding(n, n2, n3, n4);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void setTrafficEnabled(final boolean trafficEnabled) {
        try {
            this.Rp.setTrafficEnabled(trafficEnabled);
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
    
    public final void snapshot(final GoogleMap$SnapshotReadyCallback googleMap$SnapshotReadyCallback) {
        this.snapshot(googleMap$SnapshotReadyCallback, null);
    }
    
    public final void snapshot(final GoogleMap$SnapshotReadyCallback googleMap$SnapshotReadyCallback, final Bitmap bitmap) {
        Label_0036: {
            if (bitmap == null) {
                break Label_0036;
            }
            d h = e.h(bitmap);
            while (true) {
                final e e = (e)h;
                try {
                    this.Rp.snapshot(new s$a() {
                        public void f(final d d) {
                            googleMap$SnapshotReadyCallback.onSnapshotReady((Bitmap)com.google.android.gms.dynamic.e.d(d));
                        }
                        
                        public void onSnapshotReady(final Bitmap bitmap) {
                            googleMap$SnapshotReadyCallback.onSnapshotReady(bitmap);
                        }
                    }, e);
                    return;
                    h = null;
                }
                catch (RemoteException ex) {
                    throw new RuntimeRemoteException(ex);
                }
            }
        }
    }
    
    public final void stopAnimation() {
        try {
            this.Rp.stopAnimation();
        }
        catch (RemoteException ex) {
            throw new RuntimeRemoteException(ex);
        }
    }
}
