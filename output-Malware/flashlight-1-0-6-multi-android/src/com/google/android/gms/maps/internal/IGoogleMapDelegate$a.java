// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.maps.internal;

import com.google.android.gms.maps.model.internal.b;
import com.google.android.gms.dynamic.d;
import android.location.Location;
import com.google.android.gms.maps.model.internal.h;
import com.google.android.gms.maps.model.internal.c;
import com.google.android.gms.maps.model.internal.f;
import com.google.android.gms.maps.model.internal.g;
import com.google.android.gms.maps.model.internal.IPolylineDelegate;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.TileOverlayOptions;
import com.google.android.gms.maps.model.GroundOverlayOptions;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolygonOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.dynamic.d$a;
import android.os.Parcel;
import android.os.IInterface;
import android.os.IBinder;
import android.os.Binder;

public abstract class IGoogleMapDelegate$a extends Binder implements IGoogleMapDelegate
{
    public static IGoogleMapDelegate ac(final IBinder binder) {
        if (binder == null) {
            return null;
        }
        final IInterface queryLocalInterface = binder.queryLocalInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
        if (queryLocalInterface != null && queryLocalInterface instanceof IGoogleMapDelegate) {
            return (IGoogleMapDelegate)queryLocalInterface;
        }
        return new IGoogleMapDelegate$a$a(binder);
    }
    
    public boolean onTransact(final int n, final Parcel parcel, final Parcel parcel2, final int n2) {
        switch (n) {
            default: {
                return super.onTransact(n, parcel, parcel2, n2);
            }
            case 1598968902: {
                parcel2.writeString("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                return true;
            }
            case 1: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final CameraPosition cameraPosition = this.getCameraPosition();
                parcel2.writeNoException();
                if (cameraPosition != null) {
                    parcel2.writeInt(1);
                    cameraPosition.writeToParcel(parcel2, 1);
                    return true;
                }
                parcel2.writeInt(0);
                return true;
            }
            case 2: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final float maxZoomLevel = this.getMaxZoomLevel();
                parcel2.writeNoException();
                parcel2.writeFloat(maxZoomLevel);
                return true;
            }
            case 3: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final float minZoomLevel = this.getMinZoomLevel();
                parcel2.writeNoException();
                parcel2.writeFloat(minZoomLevel);
                return true;
            }
            case 4: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.moveCamera(d$a.K(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 5: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.animateCamera(d$a.K(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 6: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.animateCameraWithCallback(d$a.K(parcel.readStrongBinder()), b$a.aa(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 7: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.animateCameraWithDurationAndCallback(d$a.K(parcel.readStrongBinder()), parcel.readInt(), b$a.aa(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 8: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.stopAnimation();
                parcel2.writeNoException();
                return true;
            }
            case 9: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                PolylineOptions fromParcel;
                if (parcel.readInt() != 0) {
                    fromParcel = PolylineOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel = null;
                }
                final IPolylineDelegate addPolyline = this.addPolyline(fromParcel);
                parcel2.writeNoException();
                IBinder binder = null;
                if (addPolyline != null) {
                    binder = addPolyline.asBinder();
                }
                parcel2.writeStrongBinder(binder);
                return true;
            }
            case 10: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                PolygonOptions fromParcel2;
                if (parcel.readInt() != 0) {
                    fromParcel2 = PolygonOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel2 = null;
                }
                final g addPolygon = this.addPolygon(fromParcel2);
                parcel2.writeNoException();
                IBinder binder2 = null;
                if (addPolygon != null) {
                    binder2 = addPolygon.asBinder();
                }
                parcel2.writeStrongBinder(binder2);
                return true;
            }
            case 11: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                MarkerOptions fromParcel3;
                if (parcel.readInt() != 0) {
                    fromParcel3 = MarkerOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel3 = null;
                }
                final f addMarker = this.addMarker(fromParcel3);
                parcel2.writeNoException();
                IBinder binder3 = null;
                if (addMarker != null) {
                    binder3 = addMarker.asBinder();
                }
                parcel2.writeStrongBinder(binder3);
                return true;
            }
            case 12: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                GroundOverlayOptions fromParcel4;
                if (parcel.readInt() != 0) {
                    fromParcel4 = GroundOverlayOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel4 = null;
                }
                final c addGroundOverlay = this.addGroundOverlay(fromParcel4);
                parcel2.writeNoException();
                IBinder binder4 = null;
                if (addGroundOverlay != null) {
                    binder4 = addGroundOverlay.asBinder();
                }
                parcel2.writeStrongBinder(binder4);
                return true;
            }
            case 13: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                TileOverlayOptions fromParcel5;
                if (parcel.readInt() != 0) {
                    fromParcel5 = TileOverlayOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel5 = null;
                }
                final h addTileOverlay = this.addTileOverlay(fromParcel5);
                parcel2.writeNoException();
                IBinder binder5 = null;
                if (addTileOverlay != null) {
                    binder5 = addTileOverlay.asBinder();
                }
                parcel2.writeStrongBinder(binder5);
                return true;
            }
            case 14: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.clear();
                parcel2.writeNoException();
                return true;
            }
            case 15: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final int mapType = this.getMapType();
                parcel2.writeNoException();
                parcel2.writeInt(mapType);
                return true;
            }
            case 16: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setMapType(parcel.readInt());
                parcel2.writeNoException();
                return true;
            }
            case 17: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final boolean trafficEnabled = this.isTrafficEnabled();
                parcel2.writeNoException();
                int n3 = 0;
                if (trafficEnabled) {
                    n3 = 1;
                }
                parcel2.writeInt(n3);
                return true;
            }
            case 18: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final int int1 = parcel.readInt();
                boolean trafficEnabled2 = false;
                if (int1 != 0) {
                    trafficEnabled2 = true;
                }
                this.setTrafficEnabled(trafficEnabled2);
                parcel2.writeNoException();
                return true;
            }
            case 19: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final boolean indoorEnabled = this.isIndoorEnabled();
                parcel2.writeNoException();
                int n4 = 0;
                if (indoorEnabled) {
                    n4 = 1;
                }
                parcel2.writeInt(n4);
                return true;
            }
            case 20: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final boolean setIndoorEnabled = this.setIndoorEnabled(parcel.readInt() != 0);
                parcel2.writeNoException();
                int n5 = 0;
                if (setIndoorEnabled) {
                    n5 = 1;
                }
                parcel2.writeInt(n5);
                return true;
            }
            case 21: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final boolean myLocationEnabled = this.isMyLocationEnabled();
                parcel2.writeNoException();
                int n6 = 0;
                if (myLocationEnabled) {
                    n6 = 1;
                }
                parcel2.writeInt(n6);
                return true;
            }
            case 22: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final int int2 = parcel.readInt();
                boolean myLocationEnabled2 = false;
                if (int2 != 0) {
                    myLocationEnabled2 = true;
                }
                this.setMyLocationEnabled(myLocationEnabled2);
                parcel2.writeNoException();
                return true;
            }
            case 23: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final Location myLocation = this.getMyLocation();
                parcel2.writeNoException();
                if (myLocation != null) {
                    parcel2.writeInt(1);
                    myLocation.writeToParcel(parcel2, 1);
                    return true;
                }
                parcel2.writeInt(0);
                return true;
            }
            case 24: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setLocationSource(ILocationSourceDelegate$a.ae(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 25: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final IUiSettingsDelegate uiSettings = this.getUiSettings();
                parcel2.writeNoException();
                IBinder binder6 = null;
                if (uiSettings != null) {
                    binder6 = uiSettings.asBinder();
                }
                parcel2.writeStrongBinder(binder6);
                return true;
            }
            case 26: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final IProjectionDelegate projection = this.getProjection();
                parcel2.writeNoException();
                IBinder binder7 = null;
                if (projection != null) {
                    binder7 = projection.asBinder();
                }
                parcel2.writeStrongBinder(binder7);
                return true;
            }
            case 27: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnCameraChangeListener(e$a.ah(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 28: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMapClickListener(i$a.al(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 29: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMapLongClickListener(k$a.an(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 30: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMarkerClickListener(l$a.ao(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 31: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMarkerDragListener(m$a.ap(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 32: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnInfoWindowClickListener(g$a.aj(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 33: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setInfoWindowAdapter(com.google.android.gms.maps.internal.d$a.ad(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 34: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final d testingHelper = this.getTestingHelper();
                parcel2.writeNoException();
                IBinder binder8 = null;
                if (testingHelper != null) {
                    binder8 = testingHelper.asBinder();
                }
                parcel2.writeStrongBinder(binder8);
                return true;
            }
            case 35: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                CircleOptions fromParcel6;
                if (parcel.readInt() != 0) {
                    fromParcel6 = CircleOptions.CREATOR.createFromParcel(parcel);
                }
                else {
                    fromParcel6 = null;
                }
                final b addCircle = this.addCircle(fromParcel6);
                parcel2.writeNoException();
                IBinder binder9 = null;
                if (addCircle != null) {
                    binder9 = addCircle.asBinder();
                }
                parcel2.writeStrongBinder(binder9);
                return true;
            }
            case 36: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMyLocationChangeListener(o$a.ar(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 37: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMyLocationButtonClickListener(n$a.aq(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 38: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.snapshot(s$a.aw(parcel.readStrongBinder()), d$a.K(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 39: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setPadding(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
                parcel2.writeNoException();
                return true;
            }
            case 40: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final boolean buildingsEnabled = this.isBuildingsEnabled();
                parcel2.writeNoException();
                int n7 = 0;
                if (buildingsEnabled) {
                    n7 = 1;
                }
                parcel2.writeInt(n7);
                return true;
            }
            case 41: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final int int3 = parcel.readInt();
                boolean buildingsEnabled2 = false;
                if (int3 != 0) {
                    buildingsEnabled2 = true;
                }
                this.setBuildingsEnabled(buildingsEnabled2);
                parcel2.writeNoException();
                return true;
            }
            case 42: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnMapLoadedCallback(j$a.am(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 44: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final com.google.android.gms.maps.model.internal.d focusedBuilding = this.getFocusedBuilding();
                parcel2.writeNoException();
                IBinder binder10 = null;
                if (focusedBuilding != null) {
                    binder10 = focusedBuilding.asBinder();
                }
                parcel2.writeStrongBinder(binder10);
                return true;
            }
            case 45: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                this.setOnIndoorStateChangeListener(f$a.ai(parcel.readStrongBinder()));
                parcel2.writeNoException();
                return true;
            }
            case 51: {
                parcel.enforceInterface("com.google.android.gms.maps.internal.IGoogleMapDelegate");
                final int int4 = parcel.readInt();
                boolean watermarkEnabled = false;
                if (int4 != 0) {
                    watermarkEnabled = true;
                }
                this.setWatermarkEnabled(watermarkEnabled);
                parcel2.writeNoException();
                return true;
            }
        }
    }
}
