// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games.internal;

import android.os.IInterface;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.games.multiplayer.ParticipantUtils;
import com.google.android.gms.games.GameBuffer;
import com.google.android.gms.games.Game;
import com.google.android.gms.games.PlayerBuffer;
import com.google.android.gms.games.Player;
import com.google.android.gms.internal.fl;
import com.google.android.gms.internal.ff$e;
import com.google.android.gms.internal.fm;
import com.google.android.gms.games.request.OnRequestReceivedListener;
import com.google.android.gms.games.multiplayer.turnbased.OnTurnBasedMatchUpdateReceivedListener;
import com.google.android.gms.games.multiplayer.realtime.RoomUpdateListener;
import com.google.android.gms.games.multiplayer.realtime.RoomConfig;
import com.google.android.gms.games.multiplayer.OnInvitationReceivedListener;
import com.google.android.gms.games.multiplayer.ParticipantResult;
import com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchConfig;
import com.google.android.gms.games.leaderboard.LeaderboardScoreBuffer;
import com.google.android.gms.common.api.a$d;
import android.os.Bundle;
import com.google.android.gms.games.multiplayer.realtime.RoomEntity;
import android.os.Parcelable;
import android.graphics.Bitmap;
import android.content.Intent;
import com.google.android.gms.games.multiplayer.realtime.RealTimeMultiplayer$ReliableMessageSentCallback;
import android.os.IBinder;
import java.util.Iterator;
import android.os.ParcelFileDescriptor;
import java.io.IOException;
import android.os.RemoteException;
import android.net.LocalSocketAddress;
import android.net.LocalSocket;
import com.google.android.gms.games.multiplayer.realtime.RealTimeSocket;
import com.google.android.gms.games.multiplayer.realtime.RoomBuffer;
import com.google.android.gms.games.multiplayer.realtime.Room;
import com.google.android.gms.common.data.DataHolder;
import java.util.HashMap;
import com.google.android.gms.internal.fq;
import android.view.View;
import android.os.Looper;
import android.content.Context;
import com.google.android.gms.games.GameEntity;
import com.google.android.gms.games.PlayerEntity;
import java.util.Map;
import android.os.Binder;
import com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener;
import com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks;
import com.google.android.gms.internal.ff;

public final class GamesClientImpl extends ff implements GoogleApiClient$ConnectionCallbacks, GoogleApiClient$OnConnectionFailedListener
{
    private boolean IA;
    private int IB;
    private final Binder IC;
    private final long IE;
    private final boolean IF;
    private final int IG;
    private final boolean IH;
    private final String Iu;
    private final Map Iv;
    private PlayerEntity Iw;
    private GameEntity Ix;
    private final PopupManager Iy;
    private boolean Iz;
    private final String wG;
    
    public GamesClientImpl(final Context context, final Looper looper, final String iu, final String s, final GoogleApiClient$ConnectionCallbacks googleApiClient$ConnectionCallbacks, final GoogleApiClient$OnConnectionFailedListener googleApiClient$OnConnectionFailedListener, final String[] array, final int n, final View view, final boolean if1, final boolean ia, final int ib, final boolean ih, final int ig) {
        super(context, looper, googleApiClient$ConnectionCallbacks, googleApiClient$OnConnectionFailedListener, array);
        this.Iz = false;
        this.IA = false;
        this.Iu = iu;
        this.wG = (String)fq.f(s);
        this.IC = new Binder();
        this.Iv = new HashMap();
        this.Iy = PopupManager.a(this, n);
        this.f(view);
        this.IA = ia;
        this.IB = ib;
        this.IE = this.hashCode();
        this.IF = if1;
        this.IH = ih;
        this.IG = ig;
        this.registerConnectionCallbacks(this);
        this.registerConnectionFailedListener(this);
    }
    
    private Room G(final DataHolder dataHolder) {
        final RoomBuffer roomBuffer = new RoomBuffer(dataHolder);
        try {
            final int count = roomBuffer.getCount();
            Room room = null;
            if (count > 0) {
                room = (Room)((Room)roomBuffer.get(0)).freeze();
            }
            return room;
        }
        finally {
            roomBuffer.close();
        }
    }
    
    private RealTimeSocket aC(final String s) {
        String ae;
        LocalSocket localSocket;
        try {
            final ParcelFileDescriptor aj = ((IGamesService)this.eM()).aJ(s);
            if (aj != null) {
                GamesLog.f("GamesClientImpl", "Created native libjingle socket.");
                final LibjingleNativeSocket libjingleNativeSocket = new LibjingleNativeSocket(aj);
                this.Iv.put(s, libjingleNativeSocket);
                return libjingleNativeSocket;
            }
            GamesLog.f("GamesClientImpl", "Unable to create native libjingle socket, resorting to old socket.");
            ae = ((IGamesService)this.eM()).aE(s);
            if (ae == null) {
                return null;
            }
            final LocalSocket localSocket2;
            localSocket = (localSocket2 = new LocalSocket());
            final String s2 = ae;
            final LocalSocketAddress localSocketAddress = new LocalSocketAddress(s2);
            localSocket2.connect(localSocketAddress);
            final LocalSocket localSocket3 = localSocket;
            final String s3 = s;
            final RealTimeSocketImpl realTimeSocketImpl = new RealTimeSocketImpl(localSocket3, s3);
            final GamesClientImpl gamesClientImpl = this;
            final Map map = gamesClientImpl.Iv;
            final String s4 = s;
            final RealTimeSocketImpl realTimeSocketImpl2 = realTimeSocketImpl;
            map.put(s4, realTimeSocketImpl2);
            return realTimeSocketImpl;
        }
        catch (RemoteException ex2) {
            GamesLog.h("GamesClientImpl", "Unable to create socket. Service died.");
            return null;
        }
        try {
            final LocalSocket localSocket2 = localSocket;
            final String s2 = ae;
            final LocalSocketAddress localSocketAddress = new LocalSocketAddress(s2);
            localSocket2.connect(localSocketAddress);
            final LocalSocket localSocket3 = localSocket;
            final String s3 = s;
            final RealTimeSocketImpl realTimeSocketImpl = new RealTimeSocketImpl(localSocket3, s3);
            final GamesClientImpl gamesClientImpl = this;
            final Map map = gamesClientImpl.Iv;
            final String s4 = s;
            final RealTimeSocketImpl realTimeSocketImpl2 = realTimeSocketImpl;
            map.put(s4, realTimeSocketImpl2);
            return realTimeSocketImpl;
        }
        catch (IOException ex) {
            GamesLog.h("GamesClientImpl", "connect() call failed on socket: " + ex.getMessage());
            return null;
        }
    }
    
    private void gE() {
        for (final RealTimeSocket realTimeSocket : this.Iv.values()) {
            try {
                realTimeSocket.close();
            }
            catch (IOException ex) {
                GamesLog.a("GamesClientImpl", "IOException:", ex);
            }
        }
        this.Iv.clear();
    }
    
    private void gk() {
        this.Iw = null;
    }
    
    protected final IGamesService L(final IBinder binder) {
        return IGamesService$Stub.N(binder);
    }
    
    public final int a(final RealTimeMultiplayer$ReliableMessageSentCallback realTimeMultiplayer$ReliableMessageSentCallback, final byte[] array, final String s, final String s2) {
        try {
            return ((IGamesService)this.eM()).a(new GamesClientImpl$RealTimeReliableMessageBinderCallbacks(this, realTimeMultiplayer$ReliableMessageSentCallback), array, s, s2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return -1;
        }
    }
    
    public final int a(final byte[] array, final String s, final String[] array2) {
        fq.b(array2, "Participant IDs must not be null");
        try {
            return ((IGamesService)this.eM()).b(array, s, array2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return -1;
        }
    }
    
    public final Intent a(final int n, final int n2, final boolean b) {
        try {
            return ((IGamesService)this.eM()).a(n, n2, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent a(final int n, final byte[] array, final int n2, final Bitmap bitmap, final String s) {
        try {
            final Intent a = ((IGamesService)this.eM()).a(n, array, n2, s);
            fq.b(bitmap, "Must provide a non null icon");
            a.putExtra("com.google.android.gms.games.REQUEST_ITEM_ICON", (Parcelable)bitmap);
            return a;
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent a(final Room room, final int n) {
        try {
            return ((IGamesService)this.eM()).a((RoomEntity)room.freeze(), n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    @Override
    protected final void a(final int n, final IBinder binder, final Bundle bundle) {
        if (n == 0 && bundle != null) {
            this.Iz = bundle.getBoolean("show_welcome_popup");
        }
        super.a(n, binder, bundle);
    }
    
    public final void a(final IBinder binder, final Bundle bundle) {
        if (!this.isConnected()) {
            return;
        }
        try {
            ((IGamesService)this.eM()).a(binder, bundle);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final int n, final int n2, final int n3) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestsLoadedBinderCallbacks(this, a$d), n, n2, n3);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final int n, final int n2, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$ExtendedGamesLoadedBinderCallback(this, a$d), n, n2, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final int n, final int[] array) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$TurnBasedMatchesLoadedBinderCallbacks(this, a$d), n, array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final LeaderboardScoreBuffer leaderboardScoreBuffer, final int n, final int n2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$LeaderboardScoresLoadedBinderCallback(this, a$d), leaderboardScoreBuffer.hD().hE(), n, n2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final TurnBasedMatchConfig turnBasedMatchConfig) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$TurnBasedMatchInitiatedBinderCallbacks(this, a$d), turnBasedMatchConfig.getVariant(), turnBasedMatchConfig.getMinPlayers(), turnBasedMatchConfig.getInvitedPlayerIds(), turnBasedMatchConfig.getAutoMatchCriteria());
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n) {
        Label_0038: {
            if (a$d != null) {
                break Label_0038;
            }
            IGamesCallbacks gamesCallbacks = null;
            try {
                while (true) {
                    ((IGamesService)this.eM()).a(gamesCallbacks, s, n, this.Iy.gU(), this.Iy.gT());
                    return;
                    gamesCallbacks = new GamesClientImpl$AchievementUpdatedBinderCallback(this, a$d);
                    continue;
                }
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "service died");
            }
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n, final int n2, final int n3, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$LeaderboardScoresLoadedBinderCallback(this, a$d), s, n, n2, n3, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), s, n, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n, final boolean b, final boolean b2) {
        if (!s.equals("playedWith")) {
            throw new IllegalArgumentException("Invalid player collection: " + s);
        }
        try {
            ((IGamesService)this.eM()).d(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), s, n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n, final boolean b, final boolean b2, final boolean b3, final boolean b4) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$ExtendedGamesLoadedBinderCallback(this, a$d), s, n, b, b2, b3, b4);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final int n, final int[] array) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$TurnBasedMatchesLoadedBinderCallbacks(this, a$d), s, n, array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final long n, final String s2) {
        Label_0026: {
            if (a$d != null) {
                break Label_0026;
            }
            IGamesCallbacks gamesCallbacks = null;
            try {
                while (true) {
                    ((IGamesService)this.eM()).a(gamesCallbacks, s, n, s2);
                    return;
                    gamesCallbacks = new GamesClientImpl$SubmitScoreBinderCallbacks(this, a$d);
                    continue;
                }
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "service died");
            }
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$TurnBasedMatchLeftBinderCallbacks(this, a$d), s, s2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final int n, final int n2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$PlayerLeaderboardScoreLoadedBinderCallback(this, a$d), s, s2, n, n2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final int n, final int n2, final int n3) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestsLoadedBinderCallbacks(this, a$d), s, s2, n, n2, n3);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final int n, final int n2, final int n3, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$LeaderboardScoresLoadedBinderCallback(this, a$d), s, s2, n, n2, n3, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final int n, final boolean b, final boolean b2) {
        if (!s.equals("playedWith") && !s.equals("circled")) {
            throw new IllegalArgumentException("Invalid player collection: " + s);
        }
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), s, s2, n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final boolean b) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$LeaderboardsLoadedBinderCallback(this, a$d), s, s2, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String s2, final String[] array) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestsUpdatedBinderCallbacks(this, a$d), s, s2, array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final boolean b) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$LeaderboardsLoadedBinderCallback(this, a$d), s, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final byte[] array, final String s2, final ParticipantResult[] array2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$TurnBasedMatchUpdatedBinderCallbacks(this, a$d), s, array, s2, array2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final byte[] array, final ParticipantResult[] array2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$TurnBasedMatchUpdatedBinderCallbacks(this, a$d), s, array, array2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String s, final String[] array, final int n, final byte[] array2, final int n2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestSentBinderCallbacks(this, a$d), s, array, n, array2, n2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final boolean b) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final boolean b, final Bundle bundle) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$ContactSettingsUpdatedBinderCallback(this, a$d), b, bundle);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final a$d a$d, final String[] array) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final OnInvitationReceivedListener onInvitationReceivedListener) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$InvitationReceivedBinderCallback(this, onInvitationReceivedListener), this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final RoomConfig roomConfig) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RoomBinderCallbacks(this, roomConfig.getRoomUpdateListener(), roomConfig.getRoomStatusUpdateListener(), roomConfig.getMessageReceivedListener()), (IBinder)this.IC, roomConfig.getVariant(), roomConfig.getInvitedPlayerIds(), roomConfig.getAutoMatchCriteria(), roomConfig.isSocketEnabled(), this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final RoomUpdateListener roomUpdateListener, final String s) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$RoomBinderCallbacks(this, roomUpdateListener), s);
            this.gE();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final OnTurnBasedMatchUpdateReceivedListener onTurnBasedMatchUpdateReceivedListener) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$MatchUpdateReceivedBinderCallback(this, onTurnBasedMatchUpdateReceivedListener), this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void a(final OnRequestReceivedListener onRequestReceivedListener) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$RequestReceivedBinderCallback(this, onRequestReceivedListener), this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    @Override
    protected final void a(final fm fm, final ff$e ff$e) {
        final String string = this.getContext().getResources().getConfiguration().locale.toString();
        final Bundle bundle = new Bundle();
        bundle.putBoolean("com.google.android.gms.games.key.isHeadless", this.IF);
        bundle.putBoolean("com.google.android.gms.games.key.showConnectingPopup", this.IA);
        bundle.putInt("com.google.android.gms.games.key.connectingPopupGravity", this.IB);
        bundle.putBoolean("com.google.android.gms.games.key.retryingSignIn", this.IH);
        bundle.putInt("com.google.android.gms.games.key.sdkVariant", this.IG);
        fm.a(ff$e, 4452000, this.getContext().getPackageName(), this.wG, this.eL(), this.Iu, this.Iy.gU(), string, bundle);
    }
    
    public final Intent aA(final String s) {
        try {
            return ((IGamesService)this.eM()).aA(s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final void aB(final String s) {
        try {
            ((IGamesService)this.eM()).aI(s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void aX(final int gravity) {
        this.Iy.setGravity(gravity);
    }
    
    public final void aY(final int n) {
        try {
            ((IGamesService)this.eM()).aY(n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final Intent b(final int n, final int n2, final boolean b) {
        try {
            return ((IGamesService)this.eM()).b(n, n2, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final void b(final a$d a$d) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$SignOutCompleteBinderCallbacks(this, a$d));
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s) {
        Label_0037: {
            if (a$d != null) {
                break Label_0037;
            }
            IGamesCallbacks gamesCallbacks = null;
            try {
                while (true) {
                    ((IGamesService)this.eM()).a(gamesCallbacks, s, this.Iy.gU(), this.Iy.gT());
                    return;
                    gamesCallbacks = new GamesClientImpl$AchievementUpdatedBinderCallback(this, a$d);
                    continue;
                }
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "service died");
            }
        }
    }
    
    public final void b(final a$d a$d, final String s, final int n) {
        Label_0038: {
            if (a$d != null) {
                break Label_0038;
            }
            IGamesCallbacks gamesCallbacks = null;
            try {
                while (true) {
                    ((IGamesService)this.eM()).b(gamesCallbacks, s, n, this.Iy.gU(), this.Iy.gT());
                    return;
                    gamesCallbacks = new GamesClientImpl$AchievementUpdatedBinderCallback(this, a$d);
                    continue;
                }
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "service died");
            }
        }
    }
    
    public final void b(final a$d a$d, final String s, final int n, final int n2, final int n3, final boolean b) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$LeaderboardScoresLoadedBinderCallback(this, a$d), s, n, n2, n3, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$ExtendedGamesLoadedBinderCallback(this, a$d), s, n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s, final String s2) {
        try {
            ((IGamesService)this.eM()).d(new GamesClientImpl$TurnBasedMatchInitiatedBinderCallbacks(this, a$d), s, s2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s, final String s2, final int n, final int n2, final int n3, final boolean b) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$LeaderboardScoresLoadedBinderCallback(this, a$d), s, s2, n, n2, n3, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s, final String s2, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$AchievementsLoadedBinderCallback(this, a$d), s, s2, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String s, final boolean b) {
        try {
            ((IGamesService)this.eM()).d(new GamesClientImpl$LeaderboardsLoadedBinderCallback(this, a$d), s, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final boolean b) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$LeaderboardsLoadedBinderCallback(this, a$d), b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final a$d a$d, final String[] array) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestsUpdatedBinderCallbacks(this, a$d), array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void b(final RoomConfig roomConfig) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RoomBinderCallbacks(this, roomConfig.getRoomUpdateListener(), roomConfig.getRoomStatusUpdateListener(), roomConfig.getMessageReceivedListener()), (IBinder)this.IC, roomConfig.getInvitationId(), roomConfig.isSocketEnabled(), this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    @Override
    protected final void b(final String... array) {
        int i = 0;
        boolean b = false;
        boolean b2 = false;
        while (i < array.length) {
            final String s = array[i];
            if (s.equals("https://www.googleapis.com/auth/games")) {
                b2 = true;
            }
            else if (s.equals("https://www.googleapis.com/auth/games.firstparty")) {
                b = true;
            }
            ++i;
        }
        if (b) {
            fq.a(!b2, (Object)String.format("Cannot have both %s and %s!", "https://www.googleapis.com/auth/games", "https://www.googleapis.com/auth/games.firstparty"));
            return;
        }
        fq.a(b2, (Object)String.format("Games APIs requires %s to function.", "https://www.googleapis.com/auth/games"));
    }
    
    @Override
    protected final String bg() {
        return "com.google.android.gms.games.service.START";
    }
    
    @Override
    protected final String bh() {
        return "com.google.android.gms.games.internal.IGamesService";
    }
    
    public final void c(final a$d a$d, final int n) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$InvitationsLoadedBinderCallback(this, a$d), n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final String s) {
        Label_0037: {
            if (a$d != null) {
                break Label_0037;
            }
            IGamesCallbacks gamesCallbacks = null;
            try {
                while (true) {
                    ((IGamesService)this.eM()).b(gamesCallbacks, s, this.Iy.gU(), this.Iy.gT());
                    return;
                    gamesCallbacks = new GamesClientImpl$AchievementUpdatedBinderCallback(this, a$d);
                    continue;
                }
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "service died");
            }
        }
    }
    
    public final void c(final a$d a$d, final String s, final int n) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$InvitationsLoadedBinderCallback(this, a$d), s, n, false);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final String s, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).c(new GamesClientImpl$ExtendedGamesLoadedBinderCallback(this, a$d), s, n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final String s, final String s2) {
        try {
            ((IGamesService)this.eM()).e(new GamesClientImpl$TurnBasedMatchInitiatedBinderCallbacks(this, a$d), s, s2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final String s, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$GameMuteStatusChangedBinderCallback(this, a$d), s, b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final boolean b) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$AchievementsLoadedBinderCallback(this, a$d), b);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void c(final a$d a$d, final String[] array) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$RequestsUpdatedBinderCallbacks(this, a$d), array);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    @Override
    public final void connect() {
        this.Iw = null;
        super.connect();
    }
    
    public final int d(final byte[] array, final String s) {
        try {
            return ((IGamesService)this.eM()).b(array, s, null);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return -1;
        }
    }
    
    public final void d(final a$d a$d, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).e(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void d(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).l(new GamesClientImpl$TurnBasedMatchInitiatedBinderCallbacks(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void d(final a$d a$d, final String s, final int n) {
        try {
            ((IGamesService)this.eM()).a(new GamesClientImpl$RequestSummariesLoadedBinderCallbacks(this, a$d), s, n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void d(final a$d a$d, final String s, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).b(new GamesClientImpl$PlayersLoadedBinderCallback(this, a$d), s, n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    @Override
    public final Bundle dG() {
        try {
            final Bundle dg = ((IGamesService)this.eM()).dG();
            if (dg != null) {
                dg.setClassLoader(GamesClientImpl.class.getClassLoader());
            }
            return dg;
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    @Override
    public final void disconnect() {
        this.Iz = false;
        while (true) {
            if (!this.isConnected()) {
                break Label_0036;
            }
            try {
                final IGamesService gamesService = (IGamesService)this.eM();
                gamesService.gF();
                gamesService.o(this.IE);
                this.gE();
                super.disconnect();
            }
            catch (RemoteException ex) {
                GamesLog.g("GamesClientImpl", "Failed to notify client disconnect.");
                continue;
            }
            break;
        }
    }
    
    public final void e(final a$d a$d, final int n, final boolean b, final boolean b2) {
        try {
            ((IGamesService)this.eM()).d(new GamesClientImpl$ExtendedPlayersLoadedBinderCallback(this, a$d), n, b, b2);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void e(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).m(new GamesClientImpl$TurnBasedMatchInitiatedBinderCallbacks(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void f(final View view) {
        this.Iy.g(view);
    }
    
    public final void f(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).o(new GamesClientImpl$TurnBasedMatchLeftBinderCallbacks(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void g(final a$d a$d) {
        try {
            ((IGamesService)this.eM()).d(new GamesClientImpl$GamesLoadedBinderCallback(this, a$d));
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void g(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).n(new GamesClientImpl$TurnBasedMatchCanceledBinderCallbacks(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final int gA() {
        try {
            return ((IGamesService)this.eM()).gA();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return 2;
        }
    }
    
    public final Intent gB() {
        try {
            return ((IGamesService)this.eM()).gB();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final int gC() {
        try {
            return ((IGamesService)this.eM()).gC();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return 2;
        }
    }
    
    public final int gD() {
        try {
            return ((IGamesService)this.eM()).gD();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return 2;
        }
    }
    
    public final void gF() {
        if (!this.isConnected()) {
            return;
        }
        try {
            ((IGamesService)this.eM()).gF();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final String gl() {
        try {
            return ((IGamesService)this.eM()).gl();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final String gm() {
        try {
            return ((IGamesService)this.eM()).gm();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Player gn() {
        this.bT();
        synchronized (this) {
            Label_0063: {
                if (this.Iw != null) {
                    break Label_0063;
                }
                try {
                    final PlayerBuffer playerBuffer = new PlayerBuffer(((IGamesService)this.eM()).gG());
                    try {
                        if (playerBuffer.getCount() > 0) {
                            this.Iw = (PlayerEntity)playerBuffer.get(0).freeze();
                        }
                        playerBuffer.close();
                        // monitorexit(this)
                        return this.Iw;
                    }
                    finally {
                        playerBuffer.close();
                    }
                }
                catch (RemoteException ex) {
                    GamesLog.g("GamesClientImpl", "service died");
                }
            }
        }
    }
    
    public final Game go() {
        this.bT();
        synchronized (this) {
            Label_0063: {
                if (this.Ix != null) {
                    break Label_0063;
                }
                try {
                    final GameBuffer gameBuffer = new GameBuffer(((IGamesService)this.eM()).gI());
                    try {
                        if (gameBuffer.getCount() > 0) {
                            this.Ix = (GameEntity)gameBuffer.get(0).freeze();
                        }
                        gameBuffer.close();
                        // monitorexit(this)
                        return this.Ix;
                    }
                    finally {
                        gameBuffer.close();
                    }
                }
                catch (RemoteException ex) {
                    GamesLog.g("GamesClientImpl", "service died");
                }
            }
        }
    }
    
    public final Intent gp() {
        try {
            return ((IGamesService)this.eM()).gp();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent gq() {
        try {
            return ((IGamesService)this.eM()).gq();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent gr() {
        try {
            return ((IGamesService)this.eM()).gr();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent gs() {
        try {
            return ((IGamesService)this.eM()).gs();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final void gt() {
        try {
            ((IGamesService)this.eM()).p(this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void gu() {
        try {
            ((IGamesService)this.eM()).q(this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void gv() {
        try {
            ((IGamesService)this.eM()).r(this.IE);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final Intent gw() {
        try {
            return ((IGamesService)this.eM()).gw();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final Intent gx() {
        try {
            return ((IGamesService)this.eM()).gx();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final int gy() {
        try {
            return ((IGamesService)this.eM()).gy();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return 4368;
        }
    }
    
    public final String gz() {
        try {
            return ((IGamesService)this.eM()).gz();
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
            return null;
        }
    }
    
    public final void h(final a$d a$d) {
        try {
            ((IGamesService)this.eM()).j(new GamesClientImpl$OwnerCoverPhotoUrisLoadedBinderCallback(this, a$d));
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void h(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).p(new GamesClientImpl$TurnBasedMatchLoadedBinderCallbacks(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final RealTimeSocket i(final String s, final String s2) {
        if (s2 == null || !ParticipantUtils.aV(s2)) {
            throw new IllegalArgumentException("Bad participant ID");
        }
        RealTimeSocket ac = this.Iv.get(s2);
        if (ac == null || ac.isClosed()) {
            ac = this.aC(s2);
        }
        return ac;
    }
    
    public final void i(final a$d a$d) {
        try {
            ((IGamesService)this.eM()).h(new GamesClientImpl$NotifyAclLoadedBinderCallback(this, a$d));
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void i(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).e(new GamesClientImpl$ExtendedGamesLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void j(final a$d a$d) {
        try {
            ((IGamesService)this.eM()).i(new GamesClientImpl$ContactSettingsLoadedBinderCallback(this, a$d));
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void j(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).f(new GamesClientImpl$GameInstancesLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void k(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).q(new GamesClientImpl$GameSearchSuggestionsLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void l(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).k(new GamesClientImpl$InvitationsLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void l(final String s, final int n) {
        try {
            ((IGamesService)this.eM()).l(s, n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void m(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).j(new GamesClientImpl$NotifyAclUpdatedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void m(final String s, final int n) {
        try {
            ((IGamesService)this.eM()).m(s, n);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    public final void n(final a$d a$d, final String s) {
        try {
            ((IGamesService)this.eM()).i(new GamesClientImpl$GameMuteStatusLoadedBinderCallback(this, a$d), s);
        }
        catch (RemoteException ex) {
            GamesLog.g("GamesClientImpl", "service died");
        }
    }
    
    @Override
    public final void onConnected(final Bundle bundle) {
        if (this.Iz) {
            this.Iy.gS();
            this.Iz = false;
        }
    }
    
    @Override
    public final void onConnectionFailed(final ConnectionResult connectionResult) {
        this.Iz = false;
    }
    
    @Override
    public final void onConnectionSuspended(final int n) {
    }
}
