// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games.internal.game;

import android.os.Parcel;
import java.util.Collection;
import com.google.android.gms.internal.fe;
import com.google.android.gms.internal.fo;
import com.google.android.gms.games.Game;
import com.google.android.gms.games.GameEntity;
import java.util.ArrayList;
import com.google.android.gms.games.internal.GamesDowngradeableSafeParcel;

public final class ExtendedGameEntity extends GamesDowngradeableSafeParcel implements ExtendedGame
{
    public static final ExtendedGameEntityCreator CREATOR;
    private final long LA;
    private final String LB;
    private final ArrayList LC;
    private final GameEntity Lt;
    private final int Lu;
    private final boolean Lv;
    private final int Lw;
    private final long Lx;
    private final long Ly;
    private final String Lz;
    private final int xH;
    
    static {
        CREATOR = new ExtendedGameEntity$ExtendedGameEntityCreatorCompat();
    }
    
    ExtendedGameEntity(final int xh, final GameEntity lt, final int lu, final boolean lv, final int lw, final long lx, final long ly, final String lz, final long la, final String lb, final ArrayList lc) {
        this.xH = xh;
        this.Lt = lt;
        this.Lu = lu;
        this.Lv = lv;
        this.Lw = lw;
        this.Lx = lx;
        this.Ly = ly;
        this.Lz = lz;
        this.LA = la;
        this.LB = lb;
        this.LC = lc;
    }
    
    public ExtendedGameEntity(final ExtendedGame extendedGame) {
        this.xH = 1;
        final Game game = extendedGame.getGame();
        GameEntity lt;
        if (game == null) {
            lt = null;
        }
        else {
            lt = new GameEntity(game);
        }
        this.Lt = lt;
        this.Lu = extendedGame.gX();
        this.Lv = extendedGame.gY();
        this.Lw = extendedGame.gZ();
        this.Lx = extendedGame.ha();
        this.Ly = extendedGame.hb();
        this.Lz = extendedGame.hc();
        this.LA = extendedGame.hd();
        this.LB = extendedGame.he();
        final ArrayList gw = extendedGame.gW();
        final int size = gw.size();
        this.LC = new ArrayList(size);
        for (int i = 0; i < size; ++i) {
            this.LC.add(gw.get(i).freeze());
        }
    }
    
    static int a(final ExtendedGame extendedGame) {
        return fo.hashCode(extendedGame.getGame(), extendedGame.gX(), extendedGame.gY(), extendedGame.gZ(), extendedGame.ha(), extendedGame.hb(), extendedGame.hc(), extendedGame.hd(), extendedGame.he());
    }
    
    static boolean a(final ExtendedGame extendedGame, final Object o) {
        if (o instanceof ExtendedGame) {
            if (extendedGame == o) {
                return true;
            }
            final ExtendedGame extendedGame2 = (ExtendedGame)o;
            if (fo.equal(extendedGame2.getGame(), extendedGame.getGame()) && fo.equal(extendedGame2.gX(), extendedGame.gX()) && fo.equal(extendedGame2.gY(), extendedGame.gY()) && fo.equal(extendedGame2.gZ(), extendedGame.gZ()) && fo.equal(extendedGame2.ha(), extendedGame.ha()) && fo.equal(extendedGame2.hb(), extendedGame.hb()) && fo.equal(extendedGame2.hc(), extendedGame.hc()) && fo.equal(extendedGame2.hd(), extendedGame.hd()) && fo.equal(extendedGame2.he(), extendedGame.he())) {
                return true;
            }
        }
        return false;
    }
    
    static String b(final ExtendedGame extendedGame) {
        return fo.e(extendedGame).a("Game", extendedGame.getGame()).a("Availability", extendedGame.gX()).a("Owned", extendedGame.gY()).a("AchievementUnlockedCount", extendedGame.gZ()).a("LastPlayedServerTimestamp", extendedGame.ha()).a("PriceMicros", extendedGame.hb()).a("FormattedPrice", extendedGame.hc()).a("FullPriceMicros", extendedGame.hd()).a("FormattedFullPrice", extendedGame.he()).toString();
    }
    
    public final int describeContents() {
        return 0;
    }
    
    @Override
    public final boolean equals(final Object o) {
        return a(this, o);
    }
    
    @Override
    public final ArrayList gW() {
        return new ArrayList(this.LC);
    }
    
    @Override
    public final int gX() {
        return this.Lu;
    }
    
    @Override
    public final boolean gY() {
        return this.Lv;
    }
    
    @Override
    public final int gZ() {
        return this.Lw;
    }
    
    public final int getVersionCode() {
        return this.xH;
    }
    
    @Override
    public final long ha() {
        return this.Lx;
    }
    
    @Override
    public final int hashCode() {
        return a(this);
    }
    
    @Override
    public final long hb() {
        return this.Ly;
    }
    
    @Override
    public final String hc() {
        return this.Lz;
    }
    
    @Override
    public final long hd() {
        return this.LA;
    }
    
    @Override
    public final String he() {
        return this.LB;
    }
    
    public final GameEntity hf() {
        return this.Lt;
    }
    
    public final ExtendedGame hg() {
        return this;
    }
    
    public final boolean isDataValid() {
        return true;
    }
    
    @Override
    public final String toString() {
        return b(this);
    }
    
    public final void writeToParcel(final Parcel parcel, final int n) {
        int i = 0;
        if (!this.eK()) {
            ExtendedGameEntityCreator.a(this, parcel, n);
        }
        else {
            this.Lt.writeToParcel(parcel, n);
            parcel.writeInt(this.Lu);
            int n2;
            if (this.Lv) {
                n2 = 1;
            }
            else {
                n2 = 0;
            }
            parcel.writeInt(n2);
            parcel.writeInt(this.Lw);
            parcel.writeLong(this.Lx);
            parcel.writeLong(this.Ly);
            parcel.writeString(this.Lz);
            parcel.writeLong(this.LA);
            parcel.writeString(this.LB);
            final int size = this.LC.size();
            parcel.writeInt(size);
            while (i < size) {
                ((GameBadgeEntity)this.LC.get(i)).writeToParcel(parcel, n);
                ++i;
            }
        }
    }
}
