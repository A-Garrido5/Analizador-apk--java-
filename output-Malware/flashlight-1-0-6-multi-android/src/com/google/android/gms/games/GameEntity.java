// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games;

import android.os.Parcel;
import com.google.android.gms.internal.gm;
import android.database.CharArrayBuffer;
import com.google.android.gms.internal.fe;
import com.google.android.gms.internal.fo;
import android.net.Uri;
import android.os.Parcelable$Creator;
import com.google.android.gms.games.internal.GamesDowngradeableSafeParcel;

public final class GameEntity extends GamesDowngradeableSafeParcel implements Game
{
    public static final Parcelable$Creator CREATOR;
    private final String HA;
    private final String HB;
    private final String HC;
    private final String HD;
    private final String HE;
    private final Uri HF;
    private final Uri HG;
    private final Uri HH;
    private final boolean HI;
    private final boolean HJ;
    private final String HK;
    private final int HL;
    private final int HM;
    private final int HN;
    private final boolean HO;
    private final boolean HP;
    private final String HQ;
    private final String HR;
    private final String HS;
    private final boolean HT;
    private final boolean HU;
    private final int xH;
    private final String xI;
    
    static {
        CREATOR = (Parcelable$Creator)new GameEntity$GameEntityCreatorCompat();
    }
    
    GameEntity(final int xh, final String xi, final String ha, final String hb, final String hc, final String hd, final String he, final Uri hf, final Uri hg, final Uri hh, final boolean hi, final boolean hj, final String hk, final int hl, final int hm, final int hn, final boolean ho, final boolean hp, final String hq, final String hr, final String hs, final boolean ht, final boolean hu) {
        this.xH = xh;
        this.xI = xi;
        this.HA = ha;
        this.HB = hb;
        this.HC = hc;
        this.HD = hd;
        this.HE = he;
        this.HF = hf;
        this.HQ = hq;
        this.HG = hg;
        this.HR = hr;
        this.HH = hh;
        this.HS = hs;
        this.HI = hi;
        this.HJ = hj;
        this.HK = hk;
        this.HL = hl;
        this.HM = hm;
        this.HN = hn;
        this.HO = ho;
        this.HP = hp;
        this.HT = ht;
        this.HU = hu;
    }
    
    public GameEntity(final Game game) {
        this.xH = 3;
        this.xI = game.getApplicationId();
        this.HB = game.getPrimaryCategory();
        this.HC = game.getSecondaryCategory();
        this.HD = game.getDescription();
        this.HE = game.getDeveloperName();
        this.HA = game.getDisplayName();
        this.HF = game.getIconImageUri();
        this.HQ = game.getIconImageUrl();
        this.HG = game.getHiResImageUri();
        this.HR = game.getHiResImageUrl();
        this.HH = game.getFeaturedImageUri();
        this.HS = game.getFeaturedImageUrl();
        this.HI = game.gb();
        this.HJ = game.gd();
        this.HK = game.ge();
        this.HL = game.gf();
        this.HM = game.getAchievementTotalCount();
        this.HN = game.getLeaderboardCount();
        this.HO = game.isRealTimeMultiplayerEnabled();
        this.HP = game.isTurnBasedMultiplayerEnabled();
        this.HT = game.isMuted();
        this.HU = game.gc();
    }
    
    static int a(final Game game) {
        return fo.hashCode(game.getApplicationId(), game.getDisplayName(), game.getPrimaryCategory(), game.getSecondaryCategory(), game.getDescription(), game.getDeveloperName(), game.getIconImageUri(), game.getHiResImageUri(), game.getFeaturedImageUri(), game.gb(), game.gd(), game.ge(), game.gf(), game.getAchievementTotalCount(), game.getLeaderboardCount(), game.isRealTimeMultiplayerEnabled(), game.isTurnBasedMultiplayerEnabled(), game.isMuted(), game.gc());
    }
    
    static boolean a(final Game game, final Object o) {
        if (o instanceof Game) {
            if (game == o) {
                return true;
            }
            final Game game2 = (Game)o;
            if (fo.equal(game2.getApplicationId(), game.getApplicationId()) && fo.equal(game2.getDisplayName(), game.getDisplayName()) && fo.equal(game2.getPrimaryCategory(), game.getPrimaryCategory()) && fo.equal(game2.getSecondaryCategory(), game.getSecondaryCategory()) && fo.equal(game2.getDescription(), game.getDescription()) && fo.equal(game2.getDeveloperName(), game.getDeveloperName()) && fo.equal(game2.getIconImageUri(), game.getIconImageUri()) && fo.equal(game2.getHiResImageUri(), game.getHiResImageUri()) && fo.equal(game2.getFeaturedImageUri(), game.getFeaturedImageUri()) && fo.equal(game2.gb(), game.gb()) && fo.equal(game2.gd(), game.gd()) && fo.equal(game2.ge(), game.ge()) && fo.equal(game2.gf(), game.gf()) && fo.equal(game2.getAchievementTotalCount(), game.getAchievementTotalCount()) && fo.equal(game2.getLeaderboardCount(), game.getLeaderboardCount()) && fo.equal(game2.isRealTimeMultiplayerEnabled(), game.isRealTimeMultiplayerEnabled()) && fo.equal(game2.isTurnBasedMultiplayerEnabled(), game.isTurnBasedMultiplayerEnabled() && fo.equal(game2.isMuted(), game.isMuted()) && fo.equal(game2.gc(), game.gc()))) {
                return true;
            }
        }
        return false;
    }
    
    static String b(final Game game) {
        return fo.e(game).a("ApplicationId", game.getApplicationId()).a("DisplayName", game.getDisplayName()).a("PrimaryCategory", game.getPrimaryCategory()).a("SecondaryCategory", game.getSecondaryCategory()).a("Description", game.getDescription()).a("DeveloperName", game.getDeveloperName()).a("IconImageUri", game.getIconImageUri()).a("IconImageUrl", game.getIconImageUrl()).a("HiResImageUri", game.getHiResImageUri()).a("HiResImageUrl", game.getHiResImageUrl()).a("FeaturedImageUri", game.getFeaturedImageUri()).a("FeaturedImageUrl", game.getFeaturedImageUrl()).a("PlayEnabledGame", game.gb()).a("InstanceInstalled", game.gd()).a("InstancePackageName", game.ge()).a("AchievementTotalCount", game.getAchievementTotalCount()).a("LeaderboardCount", game.getLeaderboardCount()).a("RealTimeMultiplayerEnabled", game.isRealTimeMultiplayerEnabled()).a("TurnBasedMultiplayerEnabled", game.isTurnBasedMultiplayerEnabled()).toString();
    }
    
    public final int describeContents() {
        return 0;
    }
    
    @Override
    public final boolean equals(final Object o) {
        return a(this, o);
    }
    
    public final Game freeze() {
        return this;
    }
    
    @Override
    public final boolean gb() {
        return this.HI;
    }
    
    @Override
    public final boolean gc() {
        return this.HU;
    }
    
    @Override
    public final boolean gd() {
        return this.HJ;
    }
    
    @Override
    public final String ge() {
        return this.HK;
    }
    
    @Override
    public final int getAchievementTotalCount() {
        return this.HM;
    }
    
    @Override
    public final String getApplicationId() {
        return this.xI;
    }
    
    @Override
    public final String getDescription() {
        return this.HD;
    }
    
    @Override
    public final void getDescription(final CharArrayBuffer charArrayBuffer) {
        gm.b(this.HD, charArrayBuffer);
    }
    
    @Override
    public final String getDeveloperName() {
        return this.HE;
    }
    
    @Override
    public final void getDeveloperName(final CharArrayBuffer charArrayBuffer) {
        gm.b(this.HE, charArrayBuffer);
    }
    
    @Override
    public final String getDisplayName() {
        return this.HA;
    }
    
    @Override
    public final void getDisplayName(final CharArrayBuffer charArrayBuffer) {
        gm.b(this.HA, charArrayBuffer);
    }
    
    @Override
    public final Uri getFeaturedImageUri() {
        return this.HH;
    }
    
    @Override
    public final String getFeaturedImageUrl() {
        return this.HS;
    }
    
    @Override
    public final Uri getHiResImageUri() {
        return this.HG;
    }
    
    @Override
    public final String getHiResImageUrl() {
        return this.HR;
    }
    
    @Override
    public final Uri getIconImageUri() {
        return this.HF;
    }
    
    @Override
    public final String getIconImageUrl() {
        return this.HQ;
    }
    
    @Override
    public final int getLeaderboardCount() {
        return this.HN;
    }
    
    @Override
    public final String getPrimaryCategory() {
        return this.HB;
    }
    
    @Override
    public final String getSecondaryCategory() {
        return this.HC;
    }
    
    public final int getVersionCode() {
        return this.xH;
    }
    
    @Override
    public final int gf() {
        return this.HL;
    }
    
    @Override
    public final int hashCode() {
        return a(this);
    }
    
    public final boolean isDataValid() {
        return true;
    }
    
    @Override
    public final boolean isMuted() {
        return this.HT;
    }
    
    @Override
    public final boolean isRealTimeMultiplayerEnabled() {
        return this.HO;
    }
    
    @Override
    public final boolean isTurnBasedMultiplayerEnabled() {
        return this.HP;
    }
    
    @Override
    public final String toString() {
        return b(this);
    }
    
    public final void writeToParcel(final Parcel parcel, final int n) {
        int n2 = 1;
        if (!this.eK()) {
            GameEntityCreator.a(this, parcel, n);
            return;
        }
        parcel.writeString(this.xI);
        parcel.writeString(this.HA);
        parcel.writeString(this.HB);
        parcel.writeString(this.HC);
        parcel.writeString(this.HD);
        parcel.writeString(this.HE);
        String string;
        if (this.HF == null) {
            string = null;
        }
        else {
            string = this.HF.toString();
        }
        parcel.writeString(string);
        String string2;
        if (this.HG == null) {
            string2 = null;
        }
        else {
            string2 = this.HG.toString();
        }
        parcel.writeString(string2);
        final Uri hh = this.HH;
        String string3 = null;
        if (hh != null) {
            string3 = this.HH.toString();
        }
        parcel.writeString(string3);
        int n3;
        if (this.HI) {
            n3 = n2;
        }
        else {
            n3 = 0;
        }
        parcel.writeInt(n3);
        if (!this.HJ) {
            n2 = 0;
        }
        parcel.writeInt(n2);
        parcel.writeString(this.HK);
        parcel.writeInt(this.HL);
        parcel.writeInt(this.HM);
        parcel.writeInt(this.HN);
    }
}
