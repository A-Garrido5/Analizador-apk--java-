// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games.internal;

import android.view.ViewTreeObserver;
import android.content.Context;
import android.app.Activity;
import android.os.IBinder;
import android.view.Display;
import com.google.android.gms.internal.gr;
import android.view.View;
import java.lang.ref.WeakReference;
import android.view.ViewTreeObserver$OnGlobalLayoutListener;
import android.view.View$OnAttachStateChangeListener;

final class PopupManager$PopupManagerHCMR1 extends PopupManager implements View$OnAttachStateChangeListener, ViewTreeObserver$OnGlobalLayoutListener
{
    private boolean Iz;
    private WeakReference JO;
    
    protected PopupManager$PopupManagerHCMR1(final GamesClientImpl gamesClientImpl, final int n) {
        super(gamesClientImpl, n, null);
        this.Iz = false;
    }
    
    private void h(final View view) {
        int displayId = -1;
        if (gr.fz()) {
            final Display display = view.getDisplay();
            if (display != null) {
                displayId = display.getDisplayId();
            }
        }
        final IBinder windowToken = view.getWindowToken();
        final int[] array = new int[2];
        view.getLocationInWindow(array);
        final int width = view.getWidth();
        final int height = view.getHeight();
        this.JL.JN = displayId;
        this.JL.JM = windowToken;
        this.JL.left = array[0];
        this.JL.top = array[1];
        this.JL.right = width + array[0];
        this.JL.bottom = height + array[1];
        if (this.Iz) {
            this.gS();
            this.Iz = false;
        }
    }
    
    @Override
    protected final void bc(final int n) {
        this.JL = new PopupManager$PopupLocationInfo(n, null, null);
    }
    
    @Override
    public final void g(View view) {
        this.JK.gF();
        if (this.JO != null) {
            View decorView = (View)this.JO.get();
            final Context context = this.JK.getContext();
            if (decorView == null && context instanceof Activity) {
                decorView = ((Activity)context).getWindow().getDecorView();
            }
            if (decorView != null) {
                decorView.removeOnAttachStateChangeListener((View$OnAttachStateChangeListener)this);
                final ViewTreeObserver viewTreeObserver = decorView.getViewTreeObserver();
                if (gr.fy()) {
                    viewTreeObserver.removeOnGlobalLayoutListener((ViewTreeObserver$OnGlobalLayoutListener)this);
                }
                else {
                    viewTreeObserver.removeGlobalOnLayoutListener((ViewTreeObserver$OnGlobalLayoutListener)this);
                }
            }
        }
        this.JO = null;
        final Context context2 = this.JK.getContext();
        if (view == null && context2 instanceof Activity) {
            View view2 = ((Activity)context2).findViewById(16908290);
            if (view2 == null) {
                view2 = ((Activity)context2).getWindow().getDecorView();
            }
            GamesLog.g("PopupManager", "You have not specified a View to use as content view for popups. Falling back to the Activity content view which may not work properly in future versions of the API. Use setViewForPopups() to set your content view.");
            view = view2;
        }
        if (view != null) {
            this.h(view);
            this.JO = new WeakReference((T)view);
            view.addOnAttachStateChangeListener((View$OnAttachStateChangeListener)this);
            view.getViewTreeObserver().addOnGlobalLayoutListener((ViewTreeObserver$OnGlobalLayoutListener)this);
            return;
        }
        GamesLog.h("PopupManager", "No content view usable to display popups. Popups will not be displayed in response to this client's calls. Use setViewForPopups() to set your content view.");
    }
    
    @Override
    public final void gS() {
        if (this.JL.JM != null) {
            super.gS();
            return;
        }
        this.Iz = (this.JO != null);
    }
    
    public final void onGlobalLayout() {
        if (this.JO != null) {
            final View view = (View)this.JO.get();
            if (view != null) {
                this.h(view);
            }
        }
    }
    
    public final void onViewAttachedToWindow(final View view) {
        this.h(view);
    }
    
    public final void onViewDetachedFromWindow(final View view) {
        this.JK.gF();
        view.removeOnAttachStateChangeListener((View$OnAttachStateChangeListener)this);
    }
}
