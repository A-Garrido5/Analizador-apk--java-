// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games.multiplayer;

import android.os.Parcel;
import java.util.Collection;
import com.google.android.gms.games.Game;
import com.google.android.gms.internal.fe;
import com.google.android.gms.internal.fo;
import com.google.android.gms.common.data.Freezable;
import com.google.android.gms.internal.fq;
import java.util.ArrayList;
import com.google.android.gms.games.GameEntity;
import android.os.Parcelable$Creator;
import com.google.android.gms.games.internal.GamesDowngradeableSafeParcel;

public final class InvitationEntity extends GamesDowngradeableSafeParcel implements Invitation
{
    public static final Parcelable$Creator CREATOR;
    private final String IV;
    private final GameEntity Lt;
    private final long Mu;
    private final int Mv;
    private final ParticipantEntity Mw;
    private final ArrayList Mx;
    private final int My;
    private final int Mz;
    private final int xH;
    
    static {
        CREATOR = (Parcelable$Creator)new InvitationEntity$InvitationEntityCreatorCompat();
    }
    
    InvitationEntity(final int xh, final GameEntity lt, final String iv, final long mu, final int mv, final ParticipantEntity mw, final ArrayList mx, final int my, final int mz) {
        this.xH = xh;
        this.Lt = lt;
        this.IV = iv;
        this.Mu = mu;
        this.Mv = mv;
        this.Mw = mw;
        this.Mx = mx;
        this.My = my;
        this.Mz = mz;
    }
    
    InvitationEntity(final Invitation invitation) {
        this.xH = 2;
        this.Lt = new GameEntity(invitation.getGame());
        this.IV = invitation.getInvitationId();
        this.Mu = invitation.getCreationTimestamp();
        this.Mv = invitation.getInvitationType();
        this.My = invitation.getVariant();
        this.Mz = invitation.getAvailableAutoMatchSlots();
        final String participantId = invitation.getInviter().getParticipantId();
        Freezable freezable = null;
        final ArrayList participants = invitation.getParticipants();
        final int size = participants.size();
        this.Mx = new ArrayList(size);
        for (int i = 0; i < size; ++i) {
            final Participant participant = participants.get(i);
            if (participant.getParticipantId().equals(participantId)) {
                freezable = participant;
            }
            this.Mx.add(participant.freeze());
        }
        fq.b(freezable, "Must have a valid inviter!");
        this.Mw = (ParticipantEntity)freezable.freeze();
    }
    
    static int a(final Invitation invitation) {
        return fo.hashCode(invitation.getGame(), invitation.getInvitationId(), invitation.getCreationTimestamp(), invitation.getInvitationType(), invitation.getInviter(), invitation.getParticipants(), invitation.getVariant(), invitation.getAvailableAutoMatchSlots());
    }
    
    static boolean a(final Invitation invitation, final Object o) {
        if (o instanceof Invitation) {
            if (invitation == o) {
                return true;
            }
            final Invitation invitation2 = (Invitation)o;
            if (fo.equal(invitation2.getGame(), invitation.getGame()) && fo.equal(invitation2.getInvitationId(), invitation.getInvitationId()) && fo.equal(invitation2.getCreationTimestamp(), invitation.getCreationTimestamp()) && fo.equal(invitation2.getInvitationType(), invitation.getInvitationType()) && fo.equal(invitation2.getInviter(), invitation.getInviter()) && fo.equal(invitation2.getParticipants(), invitation.getParticipants()) && fo.equal(invitation2.getVariant(), invitation.getVariant()) && fo.equal(invitation2.getAvailableAutoMatchSlots(), invitation.getAvailableAutoMatchSlots())) {
                return true;
            }
        }
        return false;
    }
    
    static String b(final Invitation invitation) {
        return fo.e(invitation).a("Game", invitation.getGame()).a("InvitationId", invitation.getInvitationId()).a("CreationTimestamp", invitation.getCreationTimestamp()).a("InvitationType", invitation.getInvitationType()).a("Inviter", invitation.getInviter()).a("Participants", invitation.getParticipants()).a("Variant", invitation.getVariant()).a("AvailableAutoMatchSlots", invitation.getAvailableAutoMatchSlots()).toString();
    }
    
    public final int describeContents() {
        return 0;
    }
    
    @Override
    public final boolean equals(final Object o) {
        return a(this, o);
    }
    
    public final Invitation freeze() {
        return this;
    }
    
    @Override
    public final int getAvailableAutoMatchSlots() {
        return this.Mz;
    }
    
    @Override
    public final long getCreationTimestamp() {
        return this.Mu;
    }
    
    @Override
    public final Game getGame() {
        return this.Lt;
    }
    
    @Override
    public final String getInvitationId() {
        return this.IV;
    }
    
    @Override
    public final int getInvitationType() {
        return this.Mv;
    }
    
    @Override
    public final Participant getInviter() {
        return this.Mw;
    }
    
    public final ArrayList getParticipants() {
        return new ArrayList(this.Mx);
    }
    
    @Override
    public final int getVariant() {
        return this.My;
    }
    
    public final int getVersionCode() {
        return this.xH;
    }
    
    @Override
    public final int hashCode() {
        return a(this);
    }
    
    public final boolean isDataValid() {
        return true;
    }
    
    @Override
    public final String toString() {
        return b(this);
    }
    
    public final void writeToParcel(final Parcel parcel, final int n) {
        if (!this.eK()) {
            InvitationEntityCreator.a(this, parcel, n);
        }
        else {
            this.Lt.writeToParcel(parcel, n);
            parcel.writeString(this.IV);
            parcel.writeLong(this.Mu);
            parcel.writeInt(this.Mv);
            this.Mw.writeToParcel(parcel, n);
            final int size = this.Mx.size();
            parcel.writeInt(size);
            for (int i = 0; i < size; ++i) {
                ((ParticipantEntity)this.Mx.get(i)).writeToParcel(parcel, n);
            }
        }
    }
}
