// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.games.internal.api;

import com.google.android.gms.games.multiplayer.turnbased.OnTurnBasedMatchUpdateReceivedListener;
import android.content.Intent;
import java.util.List;
import com.google.android.gms.games.multiplayer.ParticipantResult;
import com.google.android.gms.games.Games;
import com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchConfig;
import com.google.android.gms.common.api.a$b;
import com.google.android.gms.common.api.a$d;
import com.google.android.gms.games.internal.GamesClientImpl;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.games.multiplayer.turnbased.TurnBasedMultiplayer;

public final class TurnBasedMultiplayerImpl implements TurnBasedMultiplayer
{
    @Override
    public final PendingResult acceptInvitation(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$InitiateMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.e(this, s);
            }
        });
    }
    
    @Override
    public final PendingResult cancelMatch(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$CancelMatchImpl(s) {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.g(this, s);
            }
        });
    }
    
    @Override
    public final PendingResult createMatch(final GoogleApiClient googleApiClient, final TurnBasedMatchConfig turnBasedMatchConfig) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$InitiateMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.a(this, turnBasedMatchConfig);
            }
        });
    }
    
    @Override
    public final void declineInvitation(final GoogleApiClient googleApiClient, final String s) {
        Games.c(googleApiClient).m(s, 1);
    }
    
    @Override
    public final void dismissInvitation(final GoogleApiClient googleApiClient, final String s) {
        Games.c(googleApiClient).l(s, 1);
    }
    
    @Override
    public final void dismissMatch(final GoogleApiClient googleApiClient, final String s) {
        Games.c(googleApiClient).aB(s);
    }
    
    @Override
    public final PendingResult finishMatch(final GoogleApiClient googleApiClient, final String s) {
        return this.finishMatch(googleApiClient, s, null, (ParticipantResult[])null);
    }
    
    @Override
    public final PendingResult finishMatch(final GoogleApiClient googleApiClient, final String s, final byte[] array, final List list) {
        ParticipantResult[] array2;
        if (list == null) {
            array2 = null;
        }
        else {
            array2 = list.toArray(new ParticipantResult[list.size()]);
        }
        return this.finishMatch(googleApiClient, s, array, array2);
    }
    
    @Override
    public final PendingResult finishMatch(final GoogleApiClient googleApiClient, final String s, final byte[] array, final ParticipantResult... array2) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$UpdateMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.a(this, s, array, array2);
            }
        });
    }
    
    @Override
    public final Intent getInboxIntent(final GoogleApiClient googleApiClient) {
        return Games.c(googleApiClient).gr();
    }
    
    @Override
    public final int getMaxMatchDataSize(final GoogleApiClient googleApiClient) {
        return Games.c(googleApiClient).gA();
    }
    
    @Override
    public final Intent getSelectOpponentsIntent(final GoogleApiClient googleApiClient, final int n, final int n2) {
        return Games.c(googleApiClient).a(n, n2, true);
    }
    
    @Override
    public final Intent getSelectOpponentsIntent(final GoogleApiClient googleApiClient, final int n, final int n2, final boolean b) {
        return Games.c(googleApiClient).a(n, n2, b);
    }
    
    @Override
    public final PendingResult leaveMatch(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$LeaveMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.f(this, s);
            }
        });
    }
    
    @Override
    public final PendingResult leaveMatchDuringTurn(final GoogleApiClient googleApiClient, final String s, final String s2) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$LeaveMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.a(this, s, s2);
            }
        });
    }
    
    @Override
    public final PendingResult loadMatch(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.a(new TurnBasedMultiplayerImpl$LoadMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.h(this, s);
            }
        });
    }
    
    @Override
    public final PendingResult loadMatchesByStatus(final GoogleApiClient googleApiClient, final int n, final int[] array) {
        return googleApiClient.a(new TurnBasedMultiplayerImpl$LoadMatchesImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.a(this, n, array);
            }
        });
    }
    
    @Override
    public final PendingResult loadMatchesByStatus(final GoogleApiClient googleApiClient, final int[] array) {
        return this.loadMatchesByStatus(googleApiClient, 0, array);
    }
    
    @Override
    public final void registerMatchUpdateListener(final GoogleApiClient googleApiClient, final OnTurnBasedMatchUpdateReceivedListener onTurnBasedMatchUpdateReceivedListener) {
        Games.c(googleApiClient).a(onTurnBasedMatchUpdateReceivedListener);
    }
    
    @Override
    public final PendingResult rematch(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$InitiateMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.d(this, s);
            }
        });
    }
    
    @Override
    public final PendingResult takeTurn(final GoogleApiClient googleApiClient, final String s, final byte[] array, final String s2) {
        return this.takeTurn(googleApiClient, s, array, s2, (ParticipantResult[])null);
    }
    
    @Override
    public final PendingResult takeTurn(final GoogleApiClient googleApiClient, final String s, final byte[] array, final String s2, final List list) {
        ParticipantResult[] array2;
        if (list == null) {
            array2 = null;
        }
        else {
            array2 = list.toArray(new ParticipantResult[list.size()]);
        }
        return this.takeTurn(googleApiClient, s, array, s2, array2);
    }
    
    @Override
    public final PendingResult takeTurn(final GoogleApiClient googleApiClient, final String s, final byte[] array, final String s2, final ParticipantResult... array2) {
        return googleApiClient.b(new TurnBasedMultiplayerImpl$UpdateMatchImpl() {
            protected void a(final GamesClientImpl gamesClientImpl) {
                gamesClientImpl.a(this, s, array, s2, array2);
            }
        });
    }
    
    @Override
    public final void unregisterMatchUpdateListener(final GoogleApiClient googleApiClient) {
        Games.c(googleApiClient).gu();
    }
}
