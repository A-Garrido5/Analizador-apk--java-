// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.common.api;

import java.util.concurrent.TimeUnit;
import com.google.android.gms.internal.fq;
import android.util.Log;
import java.util.Iterator;
import android.os.Looper;
import com.google.android.gms.internal.fk;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;

public abstract class a$a implements PendingResult, a$d
{
    private final Object AB;
    private a$c AC;
    private final CountDownLatch AD;
    private final ArrayList AE;
    private ResultCallback AF;
    private volatile Result AG;
    private volatile boolean AH;
    private boolean AI;
    private boolean AJ;
    private fk AK;
    
    a$a() {
        this.AB = new Object();
        this.AD = new CountDownLatch(1);
        this.AE = new ArrayList();
    }
    
    public a$a(final Looper looper) {
        this.AB = new Object();
        this.AD = new CountDownLatch(1);
        this.AE = new ArrayList();
        this.AC = new a$c(looper);
    }
    
    public a$a(final a$c ac) {
        this.AB = new Object();
        this.AD = new CountDownLatch(1);
        this.AE = new ArrayList();
        this.AC = ac;
    }
    
    private void b(final Result ag) {
        this.AG = ag;
        this.AK = null;
        this.AD.countDown();
        final Status status = this.AG.getStatus();
        if (this.AF != null) {
            this.AC.eg();
            if (!this.AI) {
                this.AC.a(this.AF, this.eb());
            }
        }
        final Iterator<PendingResult$a> iterator = (Iterator<PendingResult$a>)this.AE.iterator();
        while (iterator.hasNext()) {
            iterator.next().l(status);
        }
        this.AE.clear();
    }
    
    private void c(final Result result) {
        if (!(result instanceof Releasable)) {
            return;
        }
        try {
            ((Releasable)result).release();
        }
        catch (Exception ex) {
            Log.w("AbstractPendingResult", "Unable to release " + this, (Throwable)ex);
        }
    }
    
    private Result eb() {
        synchronized (this.AB) {
            fq.a(!this.AH, (Object)"Result has already been consumed.");
            fq.a(this.isReady(), (Object)"Result is not ready.");
            final Result ag = this.AG;
            this.ec();
            return ag;
        }
    }
    
    private void ed() {
        synchronized (this.AB) {
            if (!this.isReady()) {
                this.a(this.d(Status.Bw));
                this.AJ = true;
            }
        }
    }
    
    private void ee() {
        synchronized (this.AB) {
            if (!this.isReady()) {
                this.a(this.d(Status.By));
                this.AJ = true;
            }
        }
    }
    
    @Override
    public final void a(final PendingResult$a pendingResult$a) {
        while (true) {
            Label_0066: {
                if (this.AH) {
                    break Label_0066;
                }
                final boolean b = true;
                fq.a(b, (Object)"Result has already been consumed.");
                synchronized (this.AB) {
                    if (this.isReady()) {
                        pendingResult$a.l(this.AG.getStatus());
                    }
                    else {
                        this.AE.add(pendingResult$a);
                    }
                    return;
                }
            }
            final boolean b = false;
            continue;
        }
    }
    
    public final void a(final Result result) {
    Label_0055_Outer:
        while (true) {
            boolean b = true;
            while (true) {
            Label_0082:
                while (true) {
                    synchronized (this.AB) {
                        if (this.AJ || this.AI) {
                            this.c(result);
                            return;
                        }
                        if (!this.isReady()) {
                            final boolean b2 = b;
                            fq.a(b2, (Object)"Results have already been set");
                            if (!this.AH) {
                                fq.a(b, (Object)"Result has already been consumed");
                                this.b(result);
                                return;
                            }
                            break Label_0082;
                        }
                    }
                    final boolean b2 = false;
                    continue Label_0055_Outer;
                }
                b = false;
                continue;
            }
        }
    }
    
    protected void a(final a$c ac) {
        this.AC = ac;
    }
    
    protected final void a(final fk ak) {
        synchronized (this.AB) {
            this.AK = ak;
        }
    }
    
    @Override
    public final Result await() {
        Label_0070: {
            if (this.AH) {
                break Label_0070;
            }
            boolean b = true;
        Label_0056_Outer:
            while (true) {
                fq.a(b, (Object)"Result has already been consumed");
                boolean b2 = false;
                Label_0043: {
                    if (!this.isReady()) {
                        final Looper myLooper = Looper.myLooper();
                        final Looper mainLooper = Looper.getMainLooper();
                        b2 = false;
                        if (myLooper == mainLooper) {
                            break Label_0043;
                        }
                    }
                    b2 = true;
                }
                fq.a(b2, (Object)"await must not be called on the UI thread");
                while (true) {
                    try {
                        this.AD.await();
                        fq.a(this.isReady(), (Object)"Result is not ready.");
                        return this.eb();
                        b = false;
                        continue Label_0056_Outer;
                    }
                    catch (InterruptedException ex) {
                        this.ed();
                        continue;
                    }
                    break;
                }
                break;
            }
        }
    }
    
    @Override
    public final Result await(final long n, final TimeUnit timeUnit) {
        Label_0084: {
            if (this.AH) {
                break Label_0084;
            }
            boolean b = true;
        Label_0070_Outer:
            while (true) {
                fq.a(b, (Object)"Result has already been consumed.");
                boolean b2 = false;
                Label_0047: {
                    if (!this.isReady()) {
                        final Looper myLooper = Looper.myLooper();
                        final Looper mainLooper = Looper.getMainLooper();
                        b2 = false;
                        if (myLooper == mainLooper) {
                            break Label_0047;
                        }
                    }
                    b2 = true;
                }
                fq.a(b2, (Object)"await must not be called on the UI thread");
                while (true) {
                    try {
                        if (!this.AD.await(n, timeUnit)) {
                            this.ee();
                        }
                        fq.a(this.isReady(), (Object)"Result is not ready.");
                        return this.eb();
                        b = false;
                        continue Label_0070_Outer;
                    }
                    catch (InterruptedException ex) {
                        this.ed();
                        continue;
                    }
                    break;
                }
                break;
            }
        }
    }
    
    @Override
    public void cancel() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/google/android/gms/common/api/a$a.AB:Ljava/lang/Object;
        //     4: astore_1       
        //     5: aload_1        
        //     6: monitorenter   
        //     7: aload_0        
        //     8: getfield        com/google/android/gms/common/api/a$a.AI:Z
        //    11: ifeq            17
        //    14: aload_1        
        //    15: monitorexit    
        //    16: return         
        //    17: aload_0        
        //    18: getfield        com/google/android/gms/common/api/a$a.AK:Lcom/google/android/gms/internal/fk;
        //    21: astore_3       
        //    22: aload_3        
        //    23: ifnull          35
        //    26: aload_0        
        //    27: getfield        com/google/android/gms/common/api/a$a.AK:Lcom/google/android/gms/internal/fk;
        //    30: invokeinterface com/google/android/gms/internal/fk.cancel:()V
        //    35: aload_0        
        //    36: aload_0        
        //    37: getfield        com/google/android/gms/common/api/a$a.AG:Lcom/google/android/gms/common/api/Result;
        //    40: invokespecial   com/google/android/gms/common/api/a$a.c:(Lcom/google/android/gms/common/api/Result;)V
        //    43: aload_0        
        //    44: aconst_null    
        //    45: putfield        com/google/android/gms/common/api/a$a.AF:Lcom/google/android/gms/common/api/ResultCallback;
        //    48: aload_0        
        //    49: iconst_1       
        //    50: putfield        com/google/android/gms/common/api/a$a.AI:Z
        //    53: aload_0        
        //    54: aload_0        
        //    55: getstatic       com/google/android/gms/common/api/Status.Bz:Lcom/google/android/gms/common/api/Status;
        //    58: invokevirtual   com/google/android/gms/common/api/a$a.d:(Lcom/google/android/gms/common/api/Status;)Lcom/google/android/gms/common/api/Result;
        //    61: invokespecial   com/google/android/gms/common/api/a$a.b:(Lcom/google/android/gms/common/api/Result;)V
        //    64: aload_1        
        //    65: monitorexit    
        //    66: return         
        //    67: astore_2       
        //    68: aload_1        
        //    69: monitorexit    
        //    70: aload_2        
        //    71: athrow         
        //    72: astore          4
        //    74: goto            35
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                        
        //  -----  -----  -----  -----  ----------------------------
        //  7      16     67     72     Any
        //  17     22     67     72     Any
        //  26     35     72     77     Landroid/os/RemoteException;
        //  26     35     67     72     Any
        //  35     66     67     72     Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0035:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    protected abstract Result d(final Status p0);
    
    protected void ec() {
        this.AH = true;
        this.AG = null;
        this.AF = null;
    }
    
    @Override
    public boolean isCanceled() {
        synchronized (this.AB) {
            return this.AI;
        }
    }
    
    public final boolean isReady() {
        return this.AD.getCount() == 0L;
    }
    
    @Override
    public final void setResultCallback(final ResultCallback af) {
        while (true) {
            fq.a(!this.AH, (Object)"Result has already been consumed.");
            synchronized (this.AB) {
                if (this.isCanceled()) {
                    return;
                }
                if (this.isReady()) {
                    this.AC.a(af, this.eb());
                    return;
                }
            }
            this.AF = af;
        }
    }
    
    @Override
    public final void setResultCallback(final ResultCallback af, final long n, final TimeUnit timeUnit) {
        while (true) {
            fq.a(!this.AH, (Object)"Result has already been consumed.");
            synchronized (this.AB) {
                if (this.isCanceled()) {
                    return;
                }
                if (this.isReady()) {
                    this.AC.a(af, this.eb());
                    return;
                }
            }
            this.AF = af;
            this.AC.a(this, timeUnit.toMillis(n));
        }
    }
}
