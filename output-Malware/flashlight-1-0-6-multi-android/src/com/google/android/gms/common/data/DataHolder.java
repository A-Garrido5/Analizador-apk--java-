// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.common.data;

import java.util.Iterator;
import java.util.Comparator;
import java.util.Collections;
import com.google.android.gms.internal.fb;
import com.google.android.gms.internal.fo;
import android.os.Parcel;
import android.net.Uri;
import android.database.CharArrayBuffer;
import android.database.CursorIndexOutOfBoundsException;
import java.util.List;
import java.util.Map;
import android.util.Log;
import java.util.ArrayList;
import com.google.android.gms.internal.fq;
import android.database.AbstractWindowedCursor;
import java.util.HashMap;
import android.content.ContentValues;
import android.database.CursorWindow;
import android.os.Bundle;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;

public final class DataHolder implements SafeParcelable
{
    private static final DataHolder$Builder BP;
    public static final DataHolderCreator CREATOR;
    private final int Ah;
    private final String[] BH;
    Bundle BI;
    private final CursorWindow[] BJ;
    private final Bundle BK;
    int[] BL;
    int BM;
    private Object BN;
    private boolean BO;
    boolean mClosed;
    private final int xH;
    
    static {
        CREATOR = new DataHolderCreator();
        BP = new DataHolder$Builder((String)null) {
            @Override
            public final DataHolder$Builder withRow(final ContentValues contentValues) {
                throw new UnsupportedOperationException("Cannot add data to empty builder");
            }
            
            @Override
            public final DataHolder$Builder withRow(final HashMap hashMap) {
                throw new UnsupportedOperationException("Cannot add data to empty builder");
            }
        };
    }
    
    DataHolder(final int xh, final String[] bh, final CursorWindow[] bj, final int ah, final Bundle bk) {
        this.mClosed = false;
        this.BO = true;
        this.xH = xh;
        this.BH = bh;
        this.BJ = bj;
        this.Ah = ah;
        this.BK = bk;
    }
    
    public DataHolder(final AbstractWindowedCursor abstractWindowedCursor, final int n, final Bundle bundle) {
        this(abstractWindowedCursor.getColumnNames(), a(abstractWindowedCursor), n, bundle);
    }
    
    private DataHolder(final DataHolder$Builder dataHolder$Builder, final int n, final Bundle bundle) {
        this(dataHolder$Builder.BH, a(dataHolder$Builder, -1), n, bundle);
    }
    
    private DataHolder(final DataHolder$Builder dataHolder$Builder, final int n, final Bundle bundle, final int n2) {
        this(dataHolder$Builder.BH, a(dataHolder$Builder, n2), n, bundle);
    }
    
    public DataHolder(final String[] array, final CursorWindow[] array2, final int ah, final Bundle bk) {
        this.mClosed = false;
        this.BO = true;
        this.xH = 1;
        this.BH = (String[])fq.f(array);
        this.BJ = (CursorWindow[])fq.f(array2);
        this.Ah = ah;
        this.BK = bk;
        this.validateContents();
    }
    
    private static CursorWindow[] a(final AbstractWindowedCursor abstractWindowedCursor) {
        ArrayList<CursorWindow> list;
        while (true) {
            list = new ArrayList<CursorWindow>();
            while (true) {
                Label_0177: {
                    try {
                        final int count = abstractWindowedCursor.getCount();
                        final CursorWindow window = abstractWindowedCursor.getWindow();
                        if (window == null || window.getStartPosition() != 0) {
                            break Label_0177;
                        }
                        window.acquireReference();
                        abstractWindowedCursor.setWindow((CursorWindow)null);
                        list.add(window);
                        int numRows = window.getNumRows();
                        while (numRows < count && abstractWindowedCursor.moveToPosition(numRows)) {
                            CursorWindow window2 = abstractWindowedCursor.getWindow();
                            if (window2 != null) {
                                window2.acquireReference();
                                abstractWindowedCursor.setWindow((CursorWindow)null);
                            }
                            else {
                                window2 = new CursorWindow(false);
                                window2.setStartPosition(numRows);
                                abstractWindowedCursor.fillWindow(numRows, window2);
                            }
                            if (window2.getNumRows() == 0) {
                                break;
                            }
                            list.add(window2);
                            numRows = window2.getStartPosition() + window2.getNumRows();
                        }
                    }
                    finally {
                        abstractWindowedCursor.close();
                    }
                    break;
                }
                int numRows = 0;
                continue;
            }
        }
        abstractWindowedCursor.close();
        return list.toArray(new CursorWindow[list.size()]);
    }
    
    private static CursorWindow[] a(final DataHolder$Builder dataHolder$Builder, final int n) {
        int i = 0;
        if (dataHolder$Builder.BH.length == 0) {
            return new CursorWindow[0];
        }
        ArrayList<CursorWindow> list2 = null;
        while (true) {
            int startPosition = 0;
            final int size;
            Label_0087: {
                List<Map<K, String>> list = null;
                Label_0035: {
                    if (n < 0 || n >= dataHolder$Builder.BQ.size()) {
                        list = (List<Map<K, String>>)dataHolder$Builder.BQ;
                        break Label_0035;
                    }
                    CursorWindow cursorWindow = null;
                    int n2 = 0;
                    boolean b = false;
                    Label_0211: {
                        break Label_0211;
                        Map<K, String> map;
                        int n3 = 0;
                        String s;
                        String value;
                        long n4;
                        final int n5;
                        Label_0246_Outer:Label_0410_Outer:
                        while (true) {
                            while (true) {
                            Label_0706:
                                while (true) {
                                Label_0700:
                                    while (true) {
                                        Label_0693: {
                                            try {
                                                if (cursorWindow.allocRow()) {
                                                    break Label_0693;
                                                }
                                                Log.d("DataHolder", "Allocating additional cursor window for large data set (row " + startPosition + ")");
                                                cursorWindow = new CursorWindow(false);
                                                cursorWindow.setStartPosition(startPosition);
                                                cursorWindow.setNumColumns(dataHolder$Builder.BH.length);
                                                list2.add(cursorWindow);
                                                if (!cursorWindow.allocRow()) {
                                                    Log.e("DataHolder", "Unable to allocate row to hold data.");
                                                    list2.remove(cursorWindow);
                                                    return list2.toArray(new CursorWindow[list2.size()]);
                                                }
                                                n2 = 0;
                                                map = list.get(startPosition);
                                                b = true;
                                                n3 = 0;
                                                if (n3 >= dataHolder$Builder.BH.length || !b) {
                                                    break;
                                                }
                                                s = dataHolder$Builder.BH[n3];
                                                value = map.get(s);
                                                if (value == null) {
                                                    b = cursorWindow.putNull(n2, n3);
                                                    break Label_0700;
                                                }
                                                if (value instanceof String) {
                                                    b = cursorWindow.putString((String)value, n2, n3);
                                                    break Label_0700;
                                                }
                                                if (value instanceof Long) {
                                                    b = cursorWindow.putLong((long)value, n2, n3);
                                                    break Label_0700;
                                                }
                                                if (value instanceof Integer) {
                                                    b = cursorWindow.putLong((long)(int)value, n2, n3);
                                                    break Label_0700;
                                                }
                                                if (value instanceof Boolean) {
                                                    if (value) {
                                                        n4 = 1L;
                                                        b = cursorWindow.putLong(n4, n2, n3);
                                                        break Label_0700;
                                                    }
                                                    break Label_0706;
                                                }
                                                else {
                                                    if (value instanceof byte[]) {
                                                        b = cursorWindow.putBlob((byte[])(Object)value, n2, n3);
                                                        break Label_0700;
                                                    }
                                                    if (value instanceof Double) {
                                                        b = cursorWindow.putDouble((double)value, n2, n3);
                                                        break Label_0700;
                                                    }
                                                    throw new IllegalArgumentException("Unsupported object for column " + s + ": " + (Object)value);
                                                }
                                                list = dataHolder$Builder.BQ.subList(0, n);
                                                break Label_0035;
                                            }
                                            catch (RuntimeException ex) {
                                                while (i < list2.size()) {
                                                    list2.get(i).close();
                                                    ++i;
                                                }
                                                throw ex;
                                            }
                                            break;
                                        }
                                        n2 = n5;
                                        continue Label_0246_Outer;
                                    }
                                    ++n3;
                                    continue Label_0410_Outer;
                                }
                                n4 = 0L;
                                continue;
                            }
                        }
                    }
                    int n6;
                    CursorWindow cursorWindow3;
                    int n7;
                    if (!b) {
                        Log.d("DataHolder", "Couldn't populate window data for row " + startPosition + " - allocating new window.");
                        cursorWindow.freeLastRow();
                        final CursorWindow cursorWindow2 = new CursorWindow(false);
                        cursorWindow2.setNumColumns(dataHolder$Builder.BH.length);
                        list2.add(cursorWindow2);
                        n6 = startPosition - 1;
                        cursorWindow3 = cursorWindow2;
                        n7 = 0;
                    }
                    else {
                        n7 = n2 + 1;
                        n6 = startPosition;
                        cursorWindow3 = cursorWindow;
                    }
                    final int n8 = n6 + 1;
                    cursorWindow = cursorWindow3;
                    startPosition = n8;
                    final int n5 = n7;
                    break Label_0087;
                }
                size = list.size();
                CursorWindow cursorWindow = new CursorWindow(false);
                list2 = new ArrayList<CursorWindow>();
                list2.add(cursorWindow);
                cursorWindow.setNumColumns(dataHolder$Builder.BH.length);
                startPosition = 0;
                final int n5 = 0;
            }
            if (startPosition < size) {
                continue;
            }
            break;
        }
        return list2.toArray(new CursorWindow[list2.size()]);
    }
    
    public static DataHolder$Builder builder(final String[] array) {
        return new DataHolder$Builder(array, null, null);
    }
    
    public static DataHolder$Builder builder(final String[] array, final String s) {
        fq.f(s);
        return new DataHolder$Builder(array, s, null);
    }
    
    private void e(final String s, final int n) {
        if (this.BI == null || !this.BI.containsKey(s)) {
            throw new IllegalArgumentException("No such column: " + s);
        }
        if (this.isClosed()) {
            throw new IllegalArgumentException("Buffer is closed.");
        }
        if (n < 0 || n >= this.BM) {
            throw new CursorIndexOutOfBoundsException(n, this.BM);
        }
    }
    
    public static DataHolder empty(final int n) {
        return empty(n, null);
    }
    
    public static DataHolder empty(final int n, final Bundle bundle) {
        return new DataHolder(DataHolder.BP, n, bundle);
    }
    
    public final int G(final int n) {
        int i = 0;
        fq.x(n >= 0 && n < this.BM);
        while (i < this.BL.length) {
            if (n < this.BL[i]) {
                --i;
                break;
            }
            ++i;
        }
        if (i == this.BL.length) {
            --i;
        }
        return i;
    }
    
    public final void c(final Object bn) {
        this.BN = bn;
    }
    
    public final void close() {
        synchronized (this) {
            if (!this.mClosed) {
                this.mClosed = true;
                for (int i = 0; i < this.BJ.length; ++i) {
                    this.BJ[i].close();
                }
            }
        }
    }
    
    public final void copyToBuffer(final String s, final int n, final int n2, final CharArrayBuffer charArrayBuffer) {
        this.e(s, n);
        this.BJ[n2].copyStringToBuffer(n, this.BI.getInt(s), charArrayBuffer);
    }
    
    public final int describeContents() {
        return 0;
    }
    
    final String[] er() {
        return this.BH;
    }
    
    final CursorWindow[] es() {
        return this.BJ;
    }
    
    @Override
    protected final void finalize() {
        try {
            if (this.BO && this.BJ.length > 0 && !this.isClosed()) {
                String s;
                if (this.BN == null) {
                    s = "internal object: " + this.toString();
                }
                else {
                    s = this.BN.toString();
                }
                Log.e("DataBuffer", "Internal data leak within a DataBuffer object detected!  Be sure to explicitly call close() on all DataBuffer extending objects when you are done with them. (" + s + ")");
                this.close();
            }
        }
        finally {
            super.finalize();
        }
    }
    
    public final boolean getBoolean(final String s, final int n, final int n2) {
        this.e(s, n);
        return Long.valueOf(this.BJ[n2].getLong(n, this.BI.getInt(s))) == 1L;
    }
    
    public final byte[] getByteArray(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].getBlob(n, this.BI.getInt(s));
    }
    
    public final int getCount() {
        return this.BM;
    }
    
    public final double getDouble(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].getDouble(n, this.BI.getInt(s));
    }
    
    public final int getInteger(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].getInt(n, this.BI.getInt(s));
    }
    
    public final long getLong(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].getLong(n, this.BI.getInt(s));
    }
    
    public final Bundle getMetadata() {
        return this.BK;
    }
    
    public final int getStatusCode() {
        return this.Ah;
    }
    
    public final String getString(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].getString(n, this.BI.getInt(s));
    }
    
    final int getVersionCode() {
        return this.xH;
    }
    
    public final boolean hasColumn(final String s) {
        return this.BI.containsKey(s);
    }
    
    public final boolean hasNull(final String s, final int n, final int n2) {
        this.e(s, n);
        return this.BJ[n2].isNull(n, this.BI.getInt(s));
    }
    
    public final boolean isClosed() {
        synchronized (this) {
            return this.mClosed;
        }
    }
    
    public final Uri parseUri(final String s, final int n, final int n2) {
        final String string = this.getString(s, n, n2);
        if (string == null) {
            return null;
        }
        return Uri.parse(string);
    }
    
    public final void validateContents() {
        int i = 0;
        this.BI = new Bundle();
        for (int j = 0; j < this.BH.length; ++j) {
            this.BI.putInt(this.BH[j], j);
        }
        this.BL = new int[this.BJ.length];
        int bm = 0;
        while (i < this.BJ.length) {
            this.BL[i] = bm;
            bm += this.BJ[i].getNumRows() - (bm - this.BJ[i].getStartPosition());
            ++i;
        }
        this.BM = bm;
    }
    
    public final void writeToParcel(final Parcel parcel, final int n) {
        DataHolderCreator.a(this, parcel, n);
    }
}
