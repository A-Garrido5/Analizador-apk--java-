// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.common.data;

import java.util.Iterator;
import java.util.Map;
import android.content.ContentValues;
import java.util.Comparator;
import java.util.List;
import java.util.Collections;
import com.google.android.gms.internal.fb;
import com.google.android.gms.internal.fo;
import android.os.Bundle;
import com.google.android.gms.internal.fq;
import java.util.HashMap;
import java.util.ArrayList;

public class DataHolder$Builder
{
    private final String[] BH;
    private final ArrayList BQ;
    private final String BR;
    private final HashMap BS;
    private boolean BT;
    private String BU;
    
    private DataHolder$Builder(final String[] array, final String br) {
        this.BH = (String[])fq.f(array);
        this.BQ = new ArrayList();
        this.BR = br;
        this.BS = new HashMap();
        this.BT = false;
        this.BU = null;
    }
    
    private void a(final HashMap hashMap) {
        final Object value = hashMap.get(this.BR);
        if (value == null) {
            return;
        }
        final Integer n = this.BS.remove(value);
        if (n != null) {
            this.BQ.remove((int)n);
        }
        this.BS.put(value, this.BQ.size());
    }
    
    private void et() {
        if (this.BR != null) {
            this.BS.clear();
            for (int size = this.BQ.size(), i = 0; i < size; ++i) {
                final Object value = this.BQ.get(i).get(this.BR);
                if (value != null) {
                    this.BS.put(value, i);
                }
            }
        }
    }
    
    public DataHolder build(final int n) {
        return new DataHolder(this, n, null, null);
    }
    
    public DataHolder build(final int n, final Bundle bundle) {
        return new DataHolder(this, n, bundle, -1, null);
    }
    
    public DataHolder build(final int n, final Bundle bundle, final int n2) {
        return new DataHolder(this, n, bundle, n2, null);
    }
    
    public int getCount() {
        return this.BQ.size();
    }
    
    public DataHolder$Builder removeRowsWithValue(final String s, final Object o) {
        for (int i = -1 + this.BQ.size(); i >= 0; --i) {
            if (fo.equal(((HashMap<K, Object>)this.BQ.get(i)).get(s), o)) {
                this.BQ.remove(i);
            }
        }
        return this;
    }
    
    public DataHolder$Builder sort(final String bu) {
        fb.d(bu);
        if (this.BT && bu.equals(this.BU)) {
            return this;
        }
        Collections.sort((List<Object>)this.BQ, new DataHolder$a(bu));
        this.et();
        this.BT = true;
        this.BU = bu;
        return this;
    }
    
    public DataHolder$Builder withRow(final ContentValues contentValues) {
        fb.d(contentValues);
        final HashMap<Object, Object> hashMap = new HashMap<Object, Object>(contentValues.size());
        for (final Map.Entry<Object, V> entry : contentValues.valueSet()) {
            hashMap.put(entry.getKey(), entry.getValue());
        }
        return this.withRow(hashMap);
    }
    
    public DataHolder$Builder withRow(final HashMap hashMap) {
        fb.d(hashMap);
        if (this.BR != null) {
            this.a(hashMap);
        }
        this.BQ.add(hashMap);
        this.BT = false;
        return this;
    }
}
