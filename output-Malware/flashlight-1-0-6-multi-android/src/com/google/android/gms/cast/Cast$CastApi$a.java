// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.cast;

import android.text.TextUtils;
import android.os.RemoteException;
import java.io.IOException;
import com.google.android.gms.common.api.a$b;
import com.google.android.gms.common.api.a$d;
import com.google.android.gms.common.api.Api$a;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.internal.en;
import com.google.android.gms.common.api.GoogleApiClient;

public final class Cast$CastApi$a implements Cast$CastApi
{
    @Override
    public final ApplicationMetadata getApplicationMetadata(final GoogleApiClient googleApiClient) {
        return ((en)googleApiClient.a(Cast.wx)).getApplicationMetadata();
    }
    
    @Override
    public final String getApplicationStatus(final GoogleApiClient googleApiClient) {
        return ((en)googleApiClient.a(Cast.wx)).getApplicationStatus();
    }
    
    @Override
    public final double getVolume(final GoogleApiClient googleApiClient) {
        return ((en)googleApiClient.a(Cast.wx)).dI();
    }
    
    @Override
    public final boolean isMute(final GoogleApiClient googleApiClient) {
        return ((en)googleApiClient.a(Cast.wx)).isMute();
    }
    
    @Override
    public final PendingResult joinApplication(final GoogleApiClient googleApiClient) {
        return googleApiClient.b(new Cast$c() {
            protected void a(final en en) {
                try {
                    en.b(null, null, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult joinApplication(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new Cast$c() {
            protected void a(final en en) {
                try {
                    en.b(s, null, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult joinApplication(final GoogleApiClient googleApiClient, final String s, final String s2) {
        return googleApiClient.b(new Cast$c() {
            protected void a(final en en) {
                try {
                    en.b(s, s2, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult launchApplication(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new Cast$c() {
            protected void a(final en en) {
                try {
                    en.a(s, false, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult launchApplication(final GoogleApiClient googleApiClient, final String s, final boolean b) {
        return googleApiClient.b(new Cast$c() {
            protected void a(final en en) {
                try {
                    en.a(s, b, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult leaveApplication(final GoogleApiClient googleApiClient) {
        return googleApiClient.b(new Cast$b() {
            protected void a(final en en) {
                try {
                    en.e(this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final void removeMessageReceivedCallbacks(final GoogleApiClient googleApiClient, final String s) {
        try {
            ((en)googleApiClient.a(Cast.wx)).V(s);
        }
        catch (RemoteException ex) {
            throw new IOException("service error");
        }
    }
    
    @Override
    public final void requestStatus(final GoogleApiClient googleApiClient) {
        try {
            ((en)googleApiClient.a(Cast.wx)).dH();
        }
        catch (RemoteException ex) {
            throw new IOException("service error");
        }
    }
    
    @Override
    public final PendingResult sendMessage(final GoogleApiClient googleApiClient, final String s, final String s2) {
        return googleApiClient.b(new Cast$b() {
            protected void a(final en en) {
                try {
                    en.a(s, s2, this);
                }
                catch (IllegalArgumentException ex) {
                    this.x(2001);
                }
                catch (IllegalStateException ex2) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final void setMessageReceivedCallbacks(final GoogleApiClient googleApiClient, final String s, final Cast$MessageReceivedCallback cast$MessageReceivedCallback) {
        try {
            ((en)googleApiClient.a(Cast.wx)).a(s, cast$MessageReceivedCallback);
        }
        catch (RemoteException ex) {
            throw new IOException("service error");
        }
    }
    
    @Override
    public final void setMute(final GoogleApiClient googleApiClient, final boolean b) {
        try {
            ((en)googleApiClient.a(Cast.wx)).v(b);
        }
        catch (RemoteException ex) {
            throw new IOException("service error");
        }
    }
    
    @Override
    public final void setVolume(final GoogleApiClient googleApiClient, final double n) {
        try {
            ((en)googleApiClient.a(Cast.wx)).a(n);
        }
        catch (RemoteException ex) {
            throw new IOException("service error");
        }
    }
    
    @Override
    public final PendingResult stopApplication(final GoogleApiClient googleApiClient) {
        return googleApiClient.b(new Cast$b() {
            protected void a(final en en) {
                try {
                    en.a("", this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
    
    @Override
    public final PendingResult stopApplication(final GoogleApiClient googleApiClient, final String s) {
        return googleApiClient.b(new Cast$b() {
            protected void a(final en en) {
                if (TextUtils.isEmpty((CharSequence)s)) {
                    this.c(2001, "IllegalArgument: sessionId cannot be null or empty");
                    return;
                }
                try {
                    en.a(s, this);
                }
                catch (IllegalStateException ex) {
                    this.x(2001);
                }
            }
        });
    }
}
