// 
// Decompiled by Procyon v0.5.30
// 

package com.amazon.device.ads;

public class Base64
{
    private static final String ENCODE_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    
    public static byte[] decode(final String s) {
        int n = 0;
        if (Utils.isNullOrWhiteSpace(s)) {
            throw new IllegalArgumentException("Encoded String must not be null or white space");
        }
        final int decodedLength = getDecodedLength(s);
        if (decodedLength <= 0) {
            throw new IllegalArgumentException("Encoded String decodes to zero bytes");
        }
        final byte[] array = new byte[decodedLength];
        int n2 = 0;
    Label_0128_Outer:
        while (n < s.length() && n2 < decodedLength && (n % 4 != 0 || s.length() >= n + 4)) {
            final int index = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(s.charAt(n));
            if (index != -1) {
                while (true) {
                    int n3 = 0;
                    Label_0260: {
                        switch (n % 4) {
                            case 0: {
                                array[n2] = (byte)(index << 2);
                                break;
                            }
                            case 1: {
                                n3 = n2 + 1;
                                array[n2] |= (byte)(0x3 & index >> 4);
                                if (n3 < decodedLength) {
                                    array[n3] = (byte)(index << 4);
                                    n2 = n3;
                                    break;
                                }
                                break Label_0260;
                            }
                            case 2: {
                                n3 = n2 + 1;
                                array[n2] |= (byte)(0xF & index >> 2);
                                if (n3 < decodedLength) {
                                    array[n3] = (byte)(index << 6);
                                    n2 = n3;
                                    break;
                                }
                                break Label_0260;
                            }
                            case 3: {
                                n3 = n2 + 1;
                                array[n2] |= (byte)(index & 0x3F);
                                break Label_0260;
                            }
                        }
                        ++n;
                        continue Label_0128_Outer;
                    }
                    n2 = n3;
                    continue;
                }
            }
            break;
        }
        return array;
    }
    
    private static int getDecodedLength(final String s) {
        final int index = s.indexOf("=");
        int n = 0;
        if (index >= 0) {
            n = s.length() - index;
        }
        return 3 * ((3 + s.length()) / 4) - n;
    }
}
