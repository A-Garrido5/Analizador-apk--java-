// 
// Decompiled by Procyon v0.5.30
// 

package com.tapjoy;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import android.net.Uri;
import java.io.File;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import java.util.Iterator;
import java.util.Map;
import android.content.Context;
import java.security.MessageDigest;
import java.util.HashMap;

public class ae
{
    private static String a;
    private static HashMap b;
    
    static {
        ae.a = null;
        ae.b = new HashMap();
    }
    
    public static String a(final String s) {
        final MessageDigest instance = MessageDigest.getInstance("SHA-256");
        instance.update(s.getBytes("iso-8859-1"), 0, s.length());
        final byte[] digest = instance.digest();
        final StringBuffer sb = new StringBuffer();
        for (int i = 0; i < digest.length; ++i) {
            int n = 0xF & digest[i] >>> 4;
            int n2 = 0;
            while (true) {
                if (n >= 0 && n <= 9) {
                    sb.append((char)(n + 48));
                }
                else {
                    sb.append((char)(97 + (n - 10)));
                }
                final byte b = (byte)(0xF & digest[i]);
                final int n3 = n2 + 1;
                if (n2 > 0) {
                    break;
                }
                n2 = n3;
                n = b;
            }
        }
        return sb.toString();
    }
    
    public static String a(final String p0, final Context p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: sipush          1024
        //     3: newarray        B
        //     5: astore_2       
        //     6: new             Ljava/lang/StringBuffer;
        //     9: dup            
        //    10: invokespecial   java/lang/StringBuffer.<init>:()V
        //    13: astore_3       
        //    14: ldc             Lcom/tapjoy/ae;.class
        //    16: invokevirtual   java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
        //    19: aload_0        
        //    20: invokevirtual   java/lang/ClassLoader.getResource:(Ljava/lang/String;)Ljava/net/URL;
        //    23: astore          4
        //    25: aload_1        
        //    26: ifnull          131
        //    29: aload           4
        //    31: ifnonnull       131
        //    34: aload_1        
        //    35: invokevirtual   android/content/Context.getAssets:()Landroid/content/res/AssetManager;
        //    38: aload_0        
        //    39: invokevirtual   android/content/res/AssetManager.open:(Ljava/lang/String;)Ljava/io/InputStream;
        //    42: astore          20
        //    44: aload           20
        //    46: astore          6
        //    48: aload           6
        //    50: aload_2        
        //    51: invokevirtual   java/io/InputStream.read:([B)I
        //    54: istore          16
        //    56: iload           16
        //    58: ifle            229
        //    61: aload_3        
        //    62: new             Ljava/lang/String;
        //    65: dup            
        //    66: aload_2        
        //    67: invokespecial   java/lang/String.<init>:([B)V
        //    70: iconst_0       
        //    71: iload           16
        //    73: invokevirtual   java/lang/String.substring:(II)Ljava/lang/String;
        //    76: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //    79: pop            
        //    80: goto            48
        //    83: astore          5
        //    85: ldc             "TapjoyUtil"
        //    87: new             Ljava/lang/StringBuilder;
        //    90: dup            
        //    91: ldc             "file exception: "
        //    93: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    96: aload           5
        //    98: invokevirtual   java/lang/Exception.toString:()Ljava/lang/String;
        //   101: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   104: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   107: invokestatic    com/tapjoy/ab.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   110: aload           5
        //   112: invokevirtual   java/lang/Exception.printStackTrace:()V
        //   115: aconst_null    
        //   116: astore          9
        //   118: aload           6
        //   120: ifnull          128
        //   123: aload           6
        //   125: invokevirtual   java/io/InputStream.close:()V
        //   128: aload           9
        //   130: areturn        
        //   131: aload           4
        //   133: invokevirtual   java/net/URL.getFile:()Ljava/lang/String;
        //   136: astore          12
        //   138: aload           12
        //   140: ldc             "jar:"
        //   142: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   145: ifeq            156
        //   148: aload           12
        //   150: iconst_4       
        //   151: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   154: astore          12
        //   156: aload           12
        //   158: ldc             "file:"
        //   160: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   163: ifeq            174
        //   166: aload           12
        //   168: iconst_5       
        //   169: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   172: astore          12
        //   174: aload           12
        //   176: ldc             "!"
        //   178: invokevirtual   java/lang/String.indexOf:(Ljava/lang/String;)I
        //   181: istore          13
        //   183: iload           13
        //   185: ifle            198
        //   188: aload           12
        //   190: iconst_0       
        //   191: iload           13
        //   193: invokevirtual   java/lang/String.substring:(II)Ljava/lang/String;
        //   196: astore          12
        //   198: new             Ljava/util/jar/JarFile;
        //   201: dup            
        //   202: aload           12
        //   204: invokespecial   java/util/jar/JarFile.<init>:(Ljava/lang/String;)V
        //   207: astore          14
        //   209: aload           14
        //   211: aload           14
        //   213: aload_0        
        //   214: invokevirtual   java/util/jar/JarFile.getJarEntry:(Ljava/lang/String;)Ljava/util/jar/JarEntry;
        //   217: invokevirtual   java/util/jar/JarFile.getInputStream:(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;
        //   220: astore          15
        //   222: aload           15
        //   224: astore          6
        //   226: goto            48
        //   229: aload_3        
        //   230: invokevirtual   java/lang/StringBuffer.toString:()Ljava/lang/String;
        //   233: astore          18
        //   235: aload           18
        //   237: astore          9
        //   239: aload           6
        //   241: ifnull          128
        //   244: aload           6
        //   246: invokevirtual   java/io/InputStream.close:()V
        //   249: aload           9
        //   251: areturn        
        //   252: astore          19
        //   254: aload           9
        //   256: areturn        
        //   257: astore          11
        //   259: aconst_null    
        //   260: astore          6
        //   262: aload           11
        //   264: astore          7
        //   266: aload           6
        //   268: ifnull          276
        //   271: aload           6
        //   273: invokevirtual   java/io/InputStream.close:()V
        //   276: aload           7
        //   278: athrow         
        //   279: astore          10
        //   281: aconst_null    
        //   282: areturn        
        //   283: astore          8
        //   285: goto            276
        //   288: astore          7
        //   290: goto            266
        //   293: astore          5
        //   295: aconst_null    
        //   296: astore          6
        //   298: goto            85
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  34     44     293    301    Ljava/lang/Exception;
        //  34     44     257    266    Any
        //  48     56     83     85     Ljava/lang/Exception;
        //  48     56     288    293    Any
        //  61     80     83     85     Ljava/lang/Exception;
        //  61     80     288    293    Any
        //  85     115    288    293    Any
        //  123    128    279    283    Ljava/lang/Exception;
        //  131    156    293    301    Ljava/lang/Exception;
        //  131    156    257    266    Any
        //  156    174    293    301    Ljava/lang/Exception;
        //  156    174    257    266    Any
        //  174    183    293    301    Ljava/lang/Exception;
        //  174    183    257    266    Any
        //  188    198    293    301    Ljava/lang/Exception;
        //  188    198    257    266    Any
        //  198    222    293    301    Ljava/lang/Exception;
        //  198    222    257    266    Any
        //  229    235    83     85     Ljava/lang/Exception;
        //  229    235    288    293    Any
        //  244    249    252    257    Ljava/lang/Exception;
        //  271    276    283    288    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 141, Size: 141
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static String a(final Map map) {
        String string = "";
        for (final Map.Entry<String, V> entry : map.entrySet()) {
            String string2;
            if (string.length() > 0) {
                string2 = string + "&";
            }
            else {
                string2 = string;
            }
            string = string2 + entry.getKey() + "=" + (String)entry.getValue();
        }
        return string;
    }
    
    public static String a(final NodeList list) {
        int i = 0;
        final Element element = (Element)list.item(0);
        if (element == null) {
            return null;
        }
        final NodeList childNodes = element.getChildNodes();
        final int length = childNodes.getLength();
        String string = "";
        while (i < length) {
            final Node item = childNodes.item(i);
            if (item != null) {
                string += item.getNodeValue();
            }
            ++i;
        }
        if (string != null && !string.equals("")) {
            return string.trim();
        }
        return null;
    }
    
    public static void a(final File file) {
        if (file.isDirectory()) {
            final File[] listFiles = file.listFiles();
            for (int length = listFiles.length, i = 0; i < length; ++i) {
                a(listFiles[i]);
            }
        }
        ab.a("TapjoyUtil", "****************************************");
        ab.a("TapjoyUtil", "deleteFileOrDirectory: " + file.getAbsolutePath());
        ab.a("TapjoyUtil", "****************************************");
        file.delete();
    }
    
    public static void a(final Map map, final String s, final String s2) {
        if (s != null && s.length() > 0 && s2 != null && s2.length() > 0) {
            map.put(Uri.encode(s), Uri.encode(s2));
        }
    }
    
    public static Document b(final String s) {
        try {
            return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(s.getBytes("UTF-8")));
        }
        catch (Exception ex) {
            ab.b("TapjoyUtil", "buildDocument exception: " + ex.toString());
            return null;
        }
    }
    
    public static Map c(final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        String s2 = "";
        String decode = "";
        int n = 0;
        for (int n2 = 0; n2 < s.length() && n2 != -1; ++n2) {
            final char char1 = s.charAt(n2);
            if (n == 0) {
                if (char1 == '=') {
                    decode = Uri.decode(s2);
                    s2 = "";
                    n = 1;
                }
                else {
                    s2 += char1;
                }
            }
            else if (n == 1) {
                if (char1 == '&') {
                    final String decode2 = Uri.decode(s2);
                    s2 = "";
                    hashMap.put(decode, decode2);
                    n = 0;
                }
                else {
                    s2 += char1;
                }
            }
        }
        if (n == 1 && s2.length() > 0) {
            hashMap.put(decode, Uri.decode(s2));
        }
        return hashMap;
    }
    
    public static Object d(final String s) {
        return ae.b.get(s);
    }
    
    public static String e(final String s) {
        String substring = "";
        if (s != null) {
            substring = s.substring(2 + s.indexOf("//"), s.lastIndexOf("/"));
        }
        return substring;
    }
}
