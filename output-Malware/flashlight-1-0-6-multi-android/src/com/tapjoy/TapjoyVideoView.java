// 
// Decompiled by Procyon v0.5.30
// 

package com.tapjoy;

import android.view.KeyEvent;
import android.content.DialogInterface$OnCancelListener;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import android.os.Build$VERSION;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.view.View;
import java.util.TimerTask;
import android.graphics.Typeface;
import android.net.Uri;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.content.Context;
import android.content.Intent;
import org.json.JSONArray;
import java.util.HashMap;
import android.graphics.Bitmap;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.VideoView;
import android.os.Handler;
import java.util.Timer;
import android.app.Dialog;
import android.widget.ImageView;
import android.media.MediaPlayer$OnPreparedListener;
import android.media.MediaPlayer$OnInfoListener;
import android.media.MediaPlayer$OnErrorListener;
import android.media.MediaPlayer$OnCompletionListener;
import android.app.Activity;

public class TapjoyVideoView extends Activity implements MediaPlayer$OnCompletionListener, MediaPlayer$OnErrorListener, MediaPlayer$OnInfoListener, MediaPlayer$OnPreparedListener
{
    static int d;
    private static boolean t;
    private static boolean u;
    private static ah v;
    private boolean A;
    private int B;
    private int C;
    private ImageView D;
    Dialog a;
    Timer b;
    final Handler c;
    final Runnable e;
    private VideoView f;
    private TextView g;
    private String h;
    private String i;
    private String j;
    private String k;
    private RelativeLayout l;
    private Bitmap m;
    private aj n;
    private HashMap o;
    private boolean p;
    private boolean q;
    private boolean r;
    private boolean s;
    private boolean w;
    private boolean x;
    private boolean y;
    private boolean z;
    
    static {
        TapjoyVideoView.t = false;
        TapjoyVideoView.u = false;
        TapjoyVideoView.d = 16;
    }
    
    public TapjoyVideoView() {
        this.f = null;
        this.g = null;
        this.h = null;
        this.i = null;
        this.j = "Currency will not be awarded, are you sure you want to cancel the video?";
        this.k = "A network connection is necessary to view videos. You will be able to complete the offer and receive your reward on the next connect.";
        this.o = null;
        this.p = false;
        this.q = false;
        this.r = false;
        this.s = false;
        this.b = null;
        this.w = false;
        this.x = false;
        this.y = false;
        this.z = false;
        this.A = false;
        this.B = 0;
        this.C = 0;
        this.c = new Handler();
        this.e = new Runnable() {
            @Override
            public final void run() {
                TapjoyVideoView.this.g.setText((CharSequence)(TapjoyVideoView.b(TapjoyVideoView.this) + " seconds"));
                final float n = TapjoyVideoView.this.f.getDuration();
                if (n > 0.0f) {
                    if (!TapjoyVideoView.this.s) {
                        TapjoyVideoView.this.a("start");
                        TapjoyVideoView.this.s = true;
                    }
                    final float n2 = TapjoyVideoView.this.f.getCurrentPosition();
                    if (n2 >= n / 4.0f && !TapjoyVideoView.this.p) {
                        ab.a("VideoView", "Video 1st quartile: " + n2);
                        TapjoyVideoView.this.a("firstQuartile");
                        TapjoyVideoView.this.p = true;
                    }
                    if (n2 >= n / 2.0f && !TapjoyVideoView.this.q) {
                        ab.a("VideoView", "Video midpoint: " + n2);
                        TapjoyVideoView.this.a("midpoint");
                        TapjoyVideoView.this.q = true;
                    }
                    if (n2 >= n * 3.0f / 4.0f && !TapjoyVideoView.this.r) {
                        ab.a("VideoView", "Video 3rd quartile: " + n2);
                        TapjoyVideoView.this.a("thirdQuartile");
                        TapjoyVideoView.this.r = true;
                    }
                }
            }
        };
    }
    
    private void a(final String s) {
        try {
            final String s2 = this.o.get(s);
            if (s2 != null) {
                final JSONArray jsonArray = new JSONArray(s2);
                for (int i = 0; i < jsonArray.length(); ++i) {
                    final String optString = jsonArray.optString(i);
                    if (optString != null && !optString.equals("")) {
                        new Thread(new Runnable() {
                            @Override
                            public final void run() {
                                ab.a("VideoView", "Sending video tracking event...");
                                new ad();
                                final z a = ad.a(optString);
                                if (a.c != null && a.a == 200) {
                                    ab.a("VideoView", "Video tracking event success: " + s);
                                }
                            }
                        }).start();
                    }
                }
            }
        }
        catch (Exception ex) {
            ab.c("VideoView", "Bad video tracking urls array");
        }
    }
    
    private void a(final boolean b) {
        final Intent intent = new Intent();
        intent.putExtra("result", b);
        intent.putExtra("result_string1", Float.toString(this.f.getCurrentPosition() / 1000.0f));
        intent.putExtra("result_string2", Float.toString(this.f.getDuration() / 1000.0f));
        intent.putExtra("callback_id", this.getIntent().getStringExtra("callback_id"));
        this.setResult(-1, intent);
        this.finish();
    }
    
    static /* synthetic */ int b(final TapjoyVideoView tapjoyVideoView) {
        int n = (tapjoyVideoView.f.getDuration() - tapjoyVideoView.f.getCurrentPosition()) / 1000;
        if (n < 0) {
            n = 0;
        }
        return n;
    }
    
    private void b() {
        this.l.removeAllViews();
        this.l.setBackgroundColor(-16777216);
        if (this.f == null && this.g == null) {
            this.D = new ImageView((Context)this);
            this.m = af.f();
            if (this.m != null) {
                this.D.setImageBitmap(this.m);
            }
            final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-2, -2);
            layoutParams.addRule(12);
            layoutParams.addRule(11);
            this.D.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
            (this.f = new VideoView((Context)this)).setOnCompletionListener((MediaPlayer$OnCompletionListener)this);
            this.f.setOnErrorListener((MediaPlayer$OnErrorListener)this);
            this.f.setOnPreparedListener((MediaPlayer$OnPreparedListener)this);
            if (TapjoyVideoView.u) {
                ab.a("VideoView", "streaming video: " + this.h);
                this.f.setVideoURI(Uri.parse(this.h));
            }
            else {
                ab.a("VideoView", "cached video: " + this.h);
                this.f.setVideoPath(this.h);
            }
            final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(-1, -1);
            layoutParams2.addRule(13);
            this.f.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
            this.B = this.f.getDuration() / 1000;
            ab.a("VideoView", "videoView.getDuration(): " + this.f.getDuration());
            ab.a("VideoView", "timeRemaining: " + this.B);
            (this.g = new TextView((Context)this)).setTextSize((float)TapjoyVideoView.d);
            this.g.setTypeface(Typeface.create("default", 1), 1);
            final RelativeLayout$LayoutParams layoutParams3 = new RelativeLayout$LayoutParams(-2, -2);
            layoutParams3.addRule(12);
            this.g.setLayoutParams((ViewGroup$LayoutParams)layoutParams3);
        }
        this.f.requestFocus();
        if (this.w) {
            this.f.seekTo(this.C);
            ab.a("VideoView", "dialog is showing -- don't start");
        }
        else {
            ab.a("VideoView", "start");
            this.f.seekTo(0);
            this.f.start();
            af.d();
        }
        if (this.b != null) {
            this.b.cancel();
        }
        (this.b = new Timer()).schedule(new ai(this, (byte)0), 500L, 100L);
        this.y = false;
        if (this.x) {
            new Thread(new Runnable() {
                @Override
                public final void run() {
                    ab.a("VideoView", "SENDING CLICK...");
                    new ad();
                    final z a = ad.a(TapjoyVideoView.v.b);
                    if (a.c != null && a.c.contains("OK")) {
                        ab.a("VideoView", "CLICK REQUEST SUCCESS!");
                        TapjoyVideoView.this.y = true;
                    }
                }
            }).start();
            this.x = false;
        }
        this.l.addView((View)this.f);
        this.l.addView((View)this.D);
        this.l.addView((View)this.g);
    }
    
    private void c() {
        if (this.A) {
            this.a(true);
            return;
        }
        final Intent intent = new Intent((Context)this, (Class)TJAdUnitView.class);
        intent.putExtra("view_type", 4);
        intent.putExtra("url", this.i);
        intent.putExtra("legacy_view", true);
        this.startActivityForResult(intent, 0);
    }
    
    static /* synthetic */ void o(final TapjoyVideoView tapjoyVideoView) {
        tapjoyVideoView.a(false);
    }
    
    protected void onActivityResult(final int n, final int n2, final Intent intent) {
        super.onActivityResult(n, n2, intent);
        ab.a("VideoView", "onActivityResult requestCode:" + n + ", resultCode: " + n2);
        Bundle extras;
        if (intent != null) {
            extras = intent.getExtras();
        }
        else {
            extras = null;
        }
        String string = null;
        if (extras != null) {
            string = extras.getString("result");
        }
        if (string == null || string.length() == 0 || string.equals("offer_wall")) {
            this.a(true);
        }
        else if (string.equals("tjvideo")) {
            this.b();
        }
    }
    
    public void onCompletion(final MediaPlayer mediaPlayer) {
        ab.a("VideoView", "onCompletion");
        if (this.b != null) {
            this.b.cancel();
        }
        this.c();
        if (!TapjoyVideoView.t) {
            af.e();
            this.a("complete");
            new Thread(new Runnable() {
                @Override
                public final void run() {
                    if (TapjoyVideoView.this.y) {
                        com.tapjoy.m.a().d(TapjoyVideoView.v.a);
                    }
                }
            }).start();
        }
        TapjoyVideoView.t = false;
        this.z = true;
    }
    
    protected void onCreate(final Bundle bundle) {
        ab.a("VideoView", "onCreate");
        super.onCreate(bundle);
        com.tapjoy.m.k();
        if (bundle != null) {
            ab.a("VideoView", "*** Loading saved data from bundle ***");
            this.C = bundle.getInt("seek_time");
            this.w = bundle.getBoolean("dialog_showing");
        }
        final Bundle extras = this.getIntent().getExtras();
        if (extras != null) {
            TapjoyVideoView.v = (ah)extras.getSerializable("VIDEO_DATA");
            this.h = extras.getString("VIDEO_URL");
            if (extras.containsKey("VIDEO_CANCEL_MESSAGE")) {
                this.j = extras.getString("VIDEO_CANCEL_MESSAGE");
            }
            if (extras.containsKey("VIDEO_SHOULD_DISMISS")) {
                this.A = extras.getBoolean("VIDEO_SHOULD_DISMISS");
            }
            if (extras.containsKey("VIDEO_TRACKING_URLS")) {
                this.o = (HashMap)extras.getSerializable("VIDEO_TRACKING_URLS");
            }
        }
        ab.a("VideoView", "dialogShowing: " + this.w + ", seekTime: " + this.C);
        if (TapjoyVideoView.v != null) {
            this.x = true;
            TapjoyVideoView.u = false;
            if (af.a() == null) {
                ab.a("VideoView", "null video");
                this.a(false);
                return;
            }
            this.h = TapjoyVideoView.v.i;
            this.i = TapjoyVideoView.v.h;
            if (this.h == null || this.h.length() == 0) {
                ab.a("VideoView", "no cached video, try streaming video at location: " + TapjoyVideoView.v.c);
                this.h = TapjoyVideoView.v.c;
                TapjoyVideoView.u = true;
            }
            ab.a("VideoView", "videoPath: " + this.h);
        }
        else if (this.h != null) {
            TapjoyVideoView.u = true;
            this.x = false;
            ab.a("VideoView", "playing video only: " + this.h);
        }
        this.requestWindowFeature(1);
        (this.l = new RelativeLayout((Context)this)).setLayoutParams((ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
        this.setContentView((View)this.l);
        if (Build$VERSION.SDK_INT > 3) {
            final int c = new v((Context)this).c();
            ab.a("VideoView", "deviceScreenLayoutSize: " + c);
            if (c == 4) {
                TapjoyVideoView.d = 32;
            }
        }
        this.registerReceiver((BroadcastReceiver)(this.n = new aj(this, (byte)0)), new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        this.b();
        ab.a("VideoView", "onCreate DONE");
        com.tapjoy.m.l();
    }
    
    protected Dialog onCreateDialog(final int n) {
        ab.a("VideoView", "dialog onCreateDialog");
        if (!this.w) {
            return this.a;
        }
        switch (n) {
            default: {
                this.a = null;
                break;
            }
            case 0: {
                (this.a = (Dialog)new AlertDialog$Builder((Context)this).setTitle((CharSequence)"Cancel Video?").setMessage((CharSequence)this.j).setNegativeButton((CharSequence)"End", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                    public final void onClick(final DialogInterface dialogInterface, final int n) {
                        TapjoyVideoView.o(TapjoyVideoView.this);
                    }
                }).setPositiveButton((CharSequence)"Resume", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                    public final void onClick(final DialogInterface dialogInterface, final int n) {
                        dialogInterface.dismiss();
                        TapjoyVideoView.this.f.seekTo(TapjoyVideoView.this.C);
                        TapjoyVideoView.this.f.start();
                        TapjoyVideoView.this.w = false;
                        ab.a("VideoView", "RESUME VIDEO time: " + TapjoyVideoView.this.C);
                        ab.a("VideoView", "currentPosition: " + TapjoyVideoView.this.f.getCurrentPosition());
                        ab.a("VideoView", "duration: " + TapjoyVideoView.this.f.getDuration() + ", elapsed: " + (TapjoyVideoView.this.f.getDuration() - TapjoyVideoView.this.f.getCurrentPosition()));
                    }
                }).create()).setOnCancelListener((DialogInterface$OnCancelListener)new DialogInterface$OnCancelListener() {
                    public final void onCancel(final DialogInterface dialogInterface) {
                        ab.a("VideoView", "dialog onCancel");
                        dialogInterface.dismiss();
                        TapjoyVideoView.this.f.seekTo(TapjoyVideoView.this.C);
                        TapjoyVideoView.this.f.start();
                        TapjoyVideoView.this.w = false;
                    }
                });
                this.a.show();
                this.w = true;
                break;
            }
            case 1: {
                (this.a = (Dialog)new AlertDialog$Builder((Context)this).setTitle((CharSequence)"Network Connection Lost").setMessage((CharSequence)this.k).setPositiveButton((CharSequence)"Okay", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                    public final void onClick(final DialogInterface dialogInterface, final int n) {
                        dialogInterface.dismiss();
                        TapjoyVideoView.this.w = false;
                        TapjoyVideoView.o(TapjoyVideoView.this);
                    }
                }).create()).setOnCancelListener((DialogInterface$OnCancelListener)new DialogInterface$OnCancelListener() {
                    public final void onCancel(final DialogInterface dialogInterface) {
                        ab.a("VideoView", "dialog onCancel");
                        dialogInterface.dismiss();
                        TapjoyVideoView.this.w = false;
                        TapjoyVideoView.o(TapjoyVideoView.this);
                    }
                });
                this.a.show();
                this.w = true;
                break;
            }
        }
        return this.a;
    }
    
    protected void onDestroy() {
        super.onDestroy();
        if (this.isFinishing()) {
            this.unregisterReceiver((BroadcastReceiver)this.n);
            com.tapjoy.m.i();
            com.tapjoy.m.j();
        }
    }
    
    public boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
        TapjoyVideoView.t = true;
        ab.a("VideoView", "onError, what: " + n + "extra: " + n2);
        af.c();
        this.z = true;
        if (this.b != null) {
            this.b.cancel();
        }
        return n == 1 && n2 == -1004;
    }
    
    public boolean onInfo(final MediaPlayer mediaPlayer, final int n, final int n2) {
        if (this.s) {
            if (n == 701) {
                this.a("stall");
            }
            else if (n == 702) {
                this.a("resume");
            }
        }
        return false;
    }
    
    public boolean onKeyDown(final int n, final KeyEvent keyEvent) {
        if (n == 4) {
            if (!this.z && this.j != null && this.j.length() > 0) {
                this.C = this.f.getCurrentPosition();
                this.f.pause();
                this.w = true;
                this.showDialog(0);
                ab.a("VideoView", "PAUSE VIDEO time: " + this.C);
                ab.a("VideoView", "currentPosition: " + this.f.getCurrentPosition());
                ab.a("VideoView", "duration: " + this.f.getDuration() + ", elapsed: " + (this.f.getDuration() - this.f.getCurrentPosition()));
            }
            else {
                if (!this.f.isPlaying()) {
                    return super.onKeyDown(n, keyEvent);
                }
                this.f.stopPlayback();
                this.c();
                if (this.b != null) {
                    this.b.cancel();
                    return true;
                }
            }
            return true;
        }
        return super.onKeyDown(n, keyEvent);
    }
    
    protected void onPause() {
        super.onPause();
        if (this.f.isPlaying()) {
            ab.a("VideoView", "onPause");
            this.f.pause();
            this.C = this.f.getCurrentPosition();
            ab.a("VideoView", "seekTime: " + this.C);
        }
    }
    
    public void onPrepared(final MediaPlayer mediaPlayer) {
        mediaPlayer.setOnInfoListener((MediaPlayer$OnInfoListener)this);
        ab.a("VideoView", "onPrepared");
    }
    
    protected void onResume() {
        ab.a("VideoView", "onResume");
        super.onResume();
        this.setRequestedOrientation(0);
        if (this.C > 0) {
            ab.a("VideoView", "seekTime: " + this.C);
            this.f.seekTo(this.C);
            if (!this.w || this.a == null || !this.a.isShowing()) {
                this.f.start();
            }
        }
    }
    
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        ab.a("VideoView", "*** onSaveInstanceState ***");
        ab.a("VideoView", "dialogShowing: " + this.w + ", seekTime: " + this.C);
        bundle.putBoolean("dialog_showing", this.w);
        bundle.putInt("seek_time", this.C);
    }
    
    public void onWindowFocusChanged(final boolean b) {
        ab.a("VideoView", "onWindowFocusChanged");
        super.onWindowFocusChanged(b);
    }
}
