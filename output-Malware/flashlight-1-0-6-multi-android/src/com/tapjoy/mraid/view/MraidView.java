// 
// Decompiled by Procyon v0.5.30
// 

package com.tapjoy.mraid.view;

import android.webkit.WebBackForwardList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.tapjoy.mraid.controller.Abstract$PlayerProperties;
import com.tapjoy.ae;
import android.annotation.SuppressLint;
import android.view.WindowManager;
import android.util.DisplayMetrics;
import android.view.GestureDetector$OnGestureListener;
import android.view.MotionEvent;
import android.view.View$OnTouchListener;
import android.widget.FrameLayout$LayoutParams;
import android.view.ViewGroup;
import android.webkit.URLUtil;
import com.tapjoy.mraid.controller.Abstract$Properties;
import com.tapjoy.mraid.controller.Abstract$Dimensions;
import android.content.res.TypedArray;
import android.media.MediaPlayer$OnErrorListener;
import android.media.MediaPlayer$OnCompletionListener;
import android.media.MediaPlayer;
import android.media.MediaPlayer$OnPreparedListener;
import android.util.AttributeSet;
import android.widget.RelativeLayout$LayoutParams;
import android.view.ViewGroup$LayoutParams;
import android.app.Activity;
import android.widget.FrameLayout;
import android.view.View;
import android.webkit.JsResult;
import android.webkit.ConsoleMessage;
import android.content.Intent;
import android.net.Uri;
import android.graphics.Bitmap;
import android.os.Bundle;
import com.tapjoy.ab;
import android.view.ViewGroup$MarginLayoutParams;
import android.os.Message;
import java.util.HashSet;
import com.tapjoy.mraid.a.c;
import android.view.GestureDetector;
import com.tapjoy.mraid.controller.f;
import android.webkit.WebChromeClient;
import android.webkit.WebViewClient;
import android.os.Handler;
import android.widget.ProgressBar;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.widget.VideoView;
import android.widget.RelativeLayout;
import android.content.Context;
import com.tapjoy.mraid.util.a;
import android.view.ViewTreeObserver$OnGlobalLayoutListener;
import android.webkit.WebView;

public class MraidView extends WebView implements ViewTreeObserver$OnGlobalLayoutListener
{
    private static int[] c;
    private static final String[] d;
    private static String f;
    private static a x;
    private int A;
    private Thread B;
    private boolean C;
    private int D;
    private Context E;
    private RelativeLayout F;
    private VideoView G;
    private WebChromeClient$CustomViewCallback H;
    private ProgressBar I;
    private Handler J;
    private boolean K;
    WebViewClient a;
    WebChromeClient b;
    private i e;
    private String g;
    private boolean h;
    private boolean i;
    private boolean j;
    private f k;
    private float l;
    private int m;
    private boolean n;
    private int o;
    private int p;
    private int q;
    private int r;
    private int s;
    private d t;
    private GestureDetector u;
    private com.tapjoy.mraid.view.f v;
    private c w;
    private final HashSet y;
    private int z;
    
    static {
        MraidView.c = new int[] { 16843039, 16843040 };
        d = new String[] { ".mp4", ".3gp", ".mpg" };
    }
    
    public MraidView(final Context e) {
        super(e);
        this.e = com.tapjoy.mraid.view.i.c;
        this.g = null;
        this.h = true;
        this.i = false;
        this.v = com.tapjoy.mraid.view.f.a;
        this.y = new HashSet();
        this.z = 0;
        this.A = 0;
        this.B = null;
        this.C = false;
        this.J = new Handler() {
            public final void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            final ViewGroup$MarginLayoutParams viewGroup$MarginLayoutParams = (ViewGroup$MarginLayoutParams)MraidView.this.getLayoutParams();
                            if (viewGroup$MarginLayoutParams != null) {
                                MraidView.this.c();
                                MraidView.this.v = com.tapjoy.mraid.view.f.b;
                                viewGroup$MarginLayoutParams.height = data.getInt("resize_height", viewGroup$MarginLayoutParams.height);
                                viewGroup$MarginLayoutParams.width = data.getInt("resize_width", viewGroup$MarginLayoutParams.width);
                                viewGroup$MarginLayoutParams.leftMargin = data.getInt("resize_x", viewGroup$MarginLayoutParams.leftMargin);
                                viewGroup$MarginLayoutParams.topMargin = data.getInt("resize_y", viewGroup$MarginLayoutParams.topMargin);
                                MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'resized', size: { width: " + viewGroup$MarginLayoutParams.width + ", height: " + viewGroup$MarginLayoutParams.height + ", x: " + viewGroup$MarginLayoutParams.leftMargin + ", y: " + viewGroup$MarginLayoutParams.topMargin + "}});");
                                MraidView.this.requestLayout();
                                MraidView.this.c(data.getString("resize_customClosePostition"));
                                MraidView.this.d();
                            }
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1010: {
                            final ViewGroup$MarginLayoutParams viewGroup$MarginLayoutParams2 = (ViewGroup$MarginLayoutParams)MraidView.this.getLayoutParams();
                            if (viewGroup$MarginLayoutParams2 != null) {
                                MraidView.this.c();
                                viewGroup$MarginLayoutParams2.height = data.getInt("resize_height", viewGroup$MarginLayoutParams2.height);
                                viewGroup$MarginLayoutParams2.width = data.getInt("resize_width", viewGroup$MarginLayoutParams2.width);
                                final String string = "window.mraidview.fireChangeEvent({ state: '" + MraidView.this.i() + "', size: { width: " + (int)(viewGroup$MarginLayoutParams2.width / MraidView.this.l) + ", height: " + (int)(viewGroup$MarginLayoutParams2.height / MraidView.this.l) + "}});";
                                ab.a("MRAIDView", "resize: injection: " + string);
                                MraidView.this.a(string);
                                MraidView.this.requestLayout();
                                MraidView.this.c(data.getString("resize_customClosePostition"));
                                if (MraidView.this.t != com.tapjoy.mraid.view.d.a && MraidView.this.e == com.tapjoy.mraid.view.i.b) {
                                    MraidView.this.d();
                                }
                            }
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (MraidView$7.a[MraidView.this.v.ordinal()]) {
                                default: {
                                    break Label_0068;
                                }
                                case 1: {
                                    MraidView.this.k();
                                    break Label_0068;
                                }
                                case 2: {
                                    MraidView.this.h();
                                    break Label_0068;
                                }
                                case 3: {
                                    if (MraidView.this.t != com.tapjoy.mraid.view.d.a) {
                                        MraidView.g(MraidView.this);
                                        break Label_0068;
                                    }
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            MraidView.this.setVisibility(4);
                            MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'hidden' });");
                            break;
                        }
                        case 1003: {
                            MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'default' });");
                            MraidView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            MraidView.a(MraidView.this, data);
                            break;
                        }
                        case 1006: {
                            MraidView.this.v = com.tapjoy.mraid.view.f.e;
                            break;
                        }
                        case 1008: {
                            MraidView.this.a(data);
                            break;
                        }
                        case 1007: {
                            MraidView.this.b(data);
                            break;
                        }
                        case 1009: {
                            MraidView.this.a("window.mraidview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.a = new WebViewClient() {
            public final void onLoadResource(final WebView webView, final String s) {
            }
            
            public final void onPageFinished(final WebView webView, final String s) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(webView, s);
                }
                MraidView.this.o = (int)(MraidView.this.getHeight() / MraidView.this.l);
                MraidView.this.p = (int)(MraidView.this.getWidth() / MraidView.this.l);
                MraidView.this.k.a(MraidView.this.l);
                MraidView.this.b();
                if (MraidView.this.t == com.tapjoy.mraid.view.d.a) {
                    MraidView.this.c();
                }
            }
            
            public final void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(s);
                }
            }
            
            public final void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(webView, n, s, s2);
                }
                ab.d("MRAIDView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public final boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                ab.a("MRAIDView", "shouldOverrideUrlLoading: " + s);
                if (MraidView.this.w != null && MraidView.this.w.b(webView, s)) {
                    return true;
                }
                final Uri parse = Uri.parse(s);
                try {
                    if (s.startsWith("mraid")) {
                        return super.shouldOverrideUrlLoading(webView, s);
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        MraidView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(parse);
                        intent2.addFlags(268435456);
                        MraidView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    MraidView.this.getContext().startActivity(intent3);
                    return true;
                }
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(parse);
                intent4.addFlags(268435456);
                MraidView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.b = new WebChromeClient() {
            public final void onCloseWindow(final WebView webView) {
                super.onCloseWindow(webView);
                MraidView.g(MraidView.this);
            }
            
            public final boolean onConsoleMessage(final ConsoleMessage consoleMessage) {
                if (MraidView.this.w != null) {
                    return MraidView.this.w.a(consoleMessage);
                }
                return super.onConsoleMessage(consoleMessage);
            }
            
            public final void onHideCustomView() {
                super.onHideCustomView();
            }
            
            public final boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                ab.d("MRAIDView", s2);
                return false;
            }
            
            public final void onShowCustomView(final View view, final WebChromeClient$CustomViewCallback webChromeClient$CustomViewCallback) {
                ab.a("MRAIDView", "-- onShowCustomView --");
                super.onShowCustomView(view, webChromeClient$CustomViewCallback);
                MraidView.this.H = webChromeClient$CustomViewCallback;
                if (view instanceof FrameLayout) {
                    final FrameLayout frameLayout = (FrameLayout)view;
                    if (frameLayout.getFocusedChild() instanceof VideoView && MraidView.this.E instanceof Activity) {
                        final Activity activity = (Activity)MraidView.this.E;
                        MraidView.this.G = (VideoView)frameLayout.getFocusedChild();
                        frameLayout.removeView((View)MraidView.this.G);
                        if (MraidView.this.F == null) {
                            MraidView.this.F = new RelativeLayout(MraidView.this.E);
                            MraidView.this.F.setLayoutParams(new ViewGroup$LayoutParams(-1, -1));
                            MraidView.this.F.setBackgroundColor(-16777216);
                        }
                        final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-1, -1);
                        layoutParams.addRule(13);
                        MraidView.this.G.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                        MraidView.this.I = new ProgressBar(MraidView.this.E, (AttributeSet)null, 16842874);
                        MraidView.this.I.setVisibility(0);
                        final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(-2, -2);
                        layoutParams2.addRule(13);
                        MraidView.this.I.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                        MraidView.this.F.addView((View)MraidView.this.G);
                        MraidView.this.F.addView((View)MraidView.this.I);
                        activity.getWindow().addContentView((View)MraidView.this.F, new ViewGroup$LayoutParams(-1, -1));
                        new Thread(new g(MraidView.this)).start();
                        MraidView.this.setVisibility(8);
                        MraidView.this.G.setOnPreparedListener((MediaPlayer$OnPreparedListener)new MediaPlayer$OnPreparedListener() {
                            public final void onPrepared(final MediaPlayer mediaPlayer) {
                                ab.a("MRAIDView", "** ON PREPARED **");
                                ab.a("MRAIDView", "isPlaying: " + mediaPlayer.isPlaying());
                                if (!mediaPlayer.isPlaying()) {
                                    mediaPlayer.start();
                                }
                            }
                        });
                        MraidView.this.G.setOnCompletionListener((MediaPlayer$OnCompletionListener)new MediaPlayer$OnCompletionListener() {
                            public final void onCompletion(final MediaPlayer mediaPlayer) {
                                ab.a("MRAIDView", "** ON COMPLETION **");
                                MraidView.this.g();
                            }
                        });
                        MraidView.this.G.setOnErrorListener((MediaPlayer$OnErrorListener)new MediaPlayer$OnErrorListener() {
                            public final boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
                                ab.a("MRAIDView", "** ON ERROR **");
                                MraidView.this.g();
                                return false;
                            }
                        });
                        MraidView.this.G.start();
                    }
                }
            }
        };
        this.E = e;
        this.l();
    }
    
    public MraidView(final Context context, final AttributeSet set) {
        super(context, set);
        this.e = com.tapjoy.mraid.view.i.c;
        this.g = null;
        this.h = true;
        this.i = false;
        this.v = com.tapjoy.mraid.view.f.a;
        this.y = new HashSet();
        this.z = 0;
        this.A = 0;
        this.B = null;
        this.C = false;
        this.J = new Handler() {
            public final void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            final ViewGroup$MarginLayoutParams viewGroup$MarginLayoutParams = (ViewGroup$MarginLayoutParams)MraidView.this.getLayoutParams();
                            if (viewGroup$MarginLayoutParams != null) {
                                MraidView.this.c();
                                MraidView.this.v = com.tapjoy.mraid.view.f.b;
                                viewGroup$MarginLayoutParams.height = data.getInt("resize_height", viewGroup$MarginLayoutParams.height);
                                viewGroup$MarginLayoutParams.width = data.getInt("resize_width", viewGroup$MarginLayoutParams.width);
                                viewGroup$MarginLayoutParams.leftMargin = data.getInt("resize_x", viewGroup$MarginLayoutParams.leftMargin);
                                viewGroup$MarginLayoutParams.topMargin = data.getInt("resize_y", viewGroup$MarginLayoutParams.topMargin);
                                MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'resized', size: { width: " + viewGroup$MarginLayoutParams.width + ", height: " + viewGroup$MarginLayoutParams.height + ", x: " + viewGroup$MarginLayoutParams.leftMargin + ", y: " + viewGroup$MarginLayoutParams.topMargin + "}});");
                                MraidView.this.requestLayout();
                                MraidView.this.c(data.getString("resize_customClosePostition"));
                                MraidView.this.d();
                            }
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1010: {
                            final ViewGroup$MarginLayoutParams viewGroup$MarginLayoutParams2 = (ViewGroup$MarginLayoutParams)MraidView.this.getLayoutParams();
                            if (viewGroup$MarginLayoutParams2 != null) {
                                MraidView.this.c();
                                viewGroup$MarginLayoutParams2.height = data.getInt("resize_height", viewGroup$MarginLayoutParams2.height);
                                viewGroup$MarginLayoutParams2.width = data.getInt("resize_width", viewGroup$MarginLayoutParams2.width);
                                final String string = "window.mraidview.fireChangeEvent({ state: '" + MraidView.this.i() + "', size: { width: " + (int)(viewGroup$MarginLayoutParams2.width / MraidView.this.l) + ", height: " + (int)(viewGroup$MarginLayoutParams2.height / MraidView.this.l) + "}});";
                                ab.a("MRAIDView", "resize: injection: " + string);
                                MraidView.this.a(string);
                                MraidView.this.requestLayout();
                                MraidView.this.c(data.getString("resize_customClosePostition"));
                                if (MraidView.this.t != com.tapjoy.mraid.view.d.a && MraidView.this.e == com.tapjoy.mraid.view.i.b) {
                                    MraidView.this.d();
                                }
                            }
                            if (MraidView.this.w != null) {
                                MraidView.this.w;
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (MraidView$7.a[MraidView.this.v.ordinal()]) {
                                default: {
                                    break Label_0068;
                                }
                                case 1: {
                                    MraidView.this.k();
                                    break Label_0068;
                                }
                                case 2: {
                                    MraidView.this.h();
                                    break Label_0068;
                                }
                                case 3: {
                                    if (MraidView.this.t != com.tapjoy.mraid.view.d.a) {
                                        MraidView.g(MraidView.this);
                                        break Label_0068;
                                    }
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            MraidView.this.setVisibility(4);
                            MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'hidden' });");
                            break;
                        }
                        case 1003: {
                            MraidView.this.a("window.mraidview.fireChangeEvent({ state: 'default' });");
                            MraidView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            MraidView.a(MraidView.this, data);
                            break;
                        }
                        case 1006: {
                            MraidView.this.v = com.tapjoy.mraid.view.f.e;
                            break;
                        }
                        case 1008: {
                            MraidView.this.a(data);
                            break;
                        }
                        case 1007: {
                            MraidView.this.b(data);
                            break;
                        }
                        case 1009: {
                            MraidView.this.a("window.mraidview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.a = new WebViewClient() {
            public final void onLoadResource(final WebView webView, final String s) {
            }
            
            public final void onPageFinished(final WebView webView, final String s) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(webView, s);
                }
                MraidView.this.o = (int)(MraidView.this.getHeight() / MraidView.this.l);
                MraidView.this.p = (int)(MraidView.this.getWidth() / MraidView.this.l);
                MraidView.this.k.a(MraidView.this.l);
                MraidView.this.b();
                if (MraidView.this.t == com.tapjoy.mraid.view.d.a) {
                    MraidView.this.c();
                }
            }
            
            public final void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(s);
                }
            }
            
            public final void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                if (MraidView.this.w != null) {
                    MraidView.this.w.a(webView, n, s, s2);
                }
                ab.d("MRAIDView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public final boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                ab.a("MRAIDView", "shouldOverrideUrlLoading: " + s);
                if (MraidView.this.w != null && MraidView.this.w.b(webView, s)) {
                    return true;
                }
                final Uri parse = Uri.parse(s);
                try {
                    if (s.startsWith("mraid")) {
                        return super.shouldOverrideUrlLoading(webView, s);
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        MraidView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(parse);
                        intent2.addFlags(268435456);
                        MraidView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    MraidView.this.getContext().startActivity(intent3);
                    return true;
                }
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(parse);
                intent4.addFlags(268435456);
                MraidView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.b = new WebChromeClient() {
            public final void onCloseWindow(final WebView webView) {
                super.onCloseWindow(webView);
                MraidView.g(MraidView.this);
            }
            
            public final boolean onConsoleMessage(final ConsoleMessage consoleMessage) {
                if (MraidView.this.w != null) {
                    return MraidView.this.w.a(consoleMessage);
                }
                return super.onConsoleMessage(consoleMessage);
            }
            
            public final void onHideCustomView() {
                super.onHideCustomView();
            }
            
            public final boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                ab.d("MRAIDView", s2);
                return false;
            }
            
            public final void onShowCustomView(final View view, final WebChromeClient$CustomViewCallback webChromeClient$CustomViewCallback) {
                ab.a("MRAIDView", "-- onShowCustomView --");
                super.onShowCustomView(view, webChromeClient$CustomViewCallback);
                MraidView.this.H = webChromeClient$CustomViewCallback;
                if (view instanceof FrameLayout) {
                    final FrameLayout frameLayout = (FrameLayout)view;
                    if (frameLayout.getFocusedChild() instanceof VideoView && MraidView.this.E instanceof Activity) {
                        final Activity activity = (Activity)MraidView.this.E;
                        MraidView.this.G = (VideoView)frameLayout.getFocusedChild();
                        frameLayout.removeView((View)MraidView.this.G);
                        if (MraidView.this.F == null) {
                            MraidView.this.F = new RelativeLayout(MraidView.this.E);
                            MraidView.this.F.setLayoutParams(new ViewGroup$LayoutParams(-1, -1));
                            MraidView.this.F.setBackgroundColor(-16777216);
                        }
                        final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-1, -1);
                        layoutParams.addRule(13);
                        MraidView.this.G.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                        MraidView.this.I = new ProgressBar(MraidView.this.E, (AttributeSet)null, 16842874);
                        MraidView.this.I.setVisibility(0);
                        final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(-2, -2);
                        layoutParams2.addRule(13);
                        MraidView.this.I.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                        MraidView.this.F.addView((View)MraidView.this.G);
                        MraidView.this.F.addView((View)MraidView.this.I);
                        activity.getWindow().addContentView((View)MraidView.this.F, new ViewGroup$LayoutParams(-1, -1));
                        new Thread(new g(MraidView.this)).start();
                        MraidView.this.setVisibility(8);
                        MraidView.this.G.setOnPreparedListener((MediaPlayer$OnPreparedListener)new MediaPlayer$OnPreparedListener() {
                            public final void onPrepared(final MediaPlayer mediaPlayer) {
                                ab.a("MRAIDView", "** ON PREPARED **");
                                ab.a("MRAIDView", "isPlaying: " + mediaPlayer.isPlaying());
                                if (!mediaPlayer.isPlaying()) {
                                    mediaPlayer.start();
                                }
                            }
                        });
                        MraidView.this.G.setOnCompletionListener((MediaPlayer$OnCompletionListener)new MediaPlayer$OnCompletionListener() {
                            public final void onCompletion(final MediaPlayer mediaPlayer) {
                                ab.a("MRAIDView", "** ON COMPLETION **");
                                MraidView.this.g();
                            }
                        });
                        MraidView.this.G.setOnErrorListener((MediaPlayer$OnErrorListener)new MediaPlayer$OnErrorListener() {
                            public final boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
                                ab.a("MRAIDView", "** ON ERROR **");
                                MraidView.this.g();
                                return false;
                            }
                        });
                        MraidView.this.G.start();
                    }
                }
            }
        };
        this.l();
        final TypedArray obtainStyledAttributes = this.getContext().obtainStyledAttributes(set, MraidView.c);
        final int dimensionPixelSize = obtainStyledAttributes.getDimensionPixelSize(0, -1);
        final int dimensionPixelSize2 = obtainStyledAttributes.getDimensionPixelSize(1, -1);
        if (dimensionPixelSize > 0 && dimensionPixelSize2 > 0) {
            this.k.a(dimensionPixelSize, dimensionPixelSize2);
        }
        obtainStyledAttributes.recycle();
    }
    
    static /* synthetic */ void a(final MraidView mraidView, final Bundle bundle) {
        if (mraidView.v != com.tapjoy.mraid.view.f.c) {
            final Abstract$Dimensions abstract$Dimensions = (Abstract$Dimensions)bundle.getParcelable("expand_dimensions");
            final String string = bundle.getString("expand_url");
            final Abstract$Properties abstract$Properties = (Abstract$Properties)bundle.getParcelable("expand_properties");
            if (URLUtil.isValidUrl(string)) {
                mraidView.loadUrl(string);
            }
            final FrameLayout frameLayout = (FrameLayout)mraidView.getRootView().findViewById(16908290);
            final ViewGroup viewGroup = (ViewGroup)mraidView.getParent();
            final FrameLayout$LayoutParams frameLayout$LayoutParams = new FrameLayout$LayoutParams(abstract$Dimensions.c, abstract$Dimensions.d);
            frameLayout$LayoutParams.topMargin = abstract$Dimensions.a;
            frameLayout$LayoutParams.leftMargin = abstract$Dimensions.b;
            int childCount;
            int s;
            for (childCount = viewGroup.getChildCount(), s = 0; s < childCount && viewGroup.getChildAt(s) != mraidView; ++s) {}
            mraidView.s = s;
            final FrameLayout frameLayout2 = new FrameLayout(mraidView.getContext());
            frameLayout2.setId(100);
            viewGroup.addView((View)frameLayout2, s, new ViewGroup$LayoutParams(mraidView.getWidth(), mraidView.getHeight()));
            viewGroup.removeView((View)mraidView);
            final FrameLayout frameLayout3 = new FrameLayout(mraidView.getContext());
            frameLayout3.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                public final boolean onTouch(final View view, final MotionEvent motionEvent) {
                    ab.a("MRAIDView", "background touch called");
                    return true;
                }
            });
            final FrameLayout$LayoutParams frameLayout$LayoutParams2 = new FrameLayout$LayoutParams(-1, -1);
            frameLayout3.setId(101);
            frameLayout3.setPadding(abstract$Dimensions.a, abstract$Dimensions.b, 0, 0);
            frameLayout3.addView((View)mraidView, (ViewGroup$LayoutParams)frameLayout$LayoutParams);
            frameLayout.addView((View)frameLayout3, (ViewGroup$LayoutParams)frameLayout$LayoutParams2);
            if (abstract$Properties.a) {
                frameLayout3.setBackgroundColor(abstract$Properties.b | 268435456 * (int)(255.0f * abstract$Properties.c));
            }
            if (!abstract$Properties.f) {
                mraidView.d();
            }
            final String string2 = "window.mraidview.fireChangeEvent({ state: 'expanded', size: { width: " + (int)(abstract$Dimensions.c / mraidView.l) + ", height: " + (int)(abstract$Dimensions.d / mraidView.l) + ",x:0,y:0} });";
            ab.d("MRAIDView", "doExpand: injection: " + string2);
            mraidView.a(string2);
            mraidView.v = com.tapjoy.mraid.view.f.c;
            mraidView.m();
            if (mraidView.w != null) {
                final c w = mraidView.w;
            }
        }
    }
    
    static /* synthetic */ void a(final MraidView mraidView, final String s) {
        mraidView.loadUrl(s);
    }
    
    private void c(final String s) {
        if (s == null) {
            return;
        }
        String s2;
        if (s.equals("top-right")) {
            s2 = "document.getElementById(\"closeButton\").style.right = 1;document.getElementById(\"closeButton\").style.top = 1;document.getElementById(\"closeButton\").style.bottom = mraid.getSize().height -36;document.getElementById(\"closeButton\").style.left = mraid.getSize().width -36";
        }
        else if (s.equals("top-center")) {
            s2 = "document.getElementById(\"closeButton\").style.right = mraid.getSize().width/2 - 18;document.getElementById(\"closeButton\").style.top = 1;document.getElementById(\"closeButton\").style.bottom = mraid.getSize().height -36;document.getElementById(\"closeButton\").style.left = mraid.getSize().width/2 -18";
        }
        else if (s.equals("top-left")) {
            s2 = "document.getElementById(\"closeButton\").style.right = mraid.getSize().width -36;document.getElementById(\"closeButton\").style.top = 1;document.getElementById(\"closeButton\").style.bottom = mraid.getSize().height -36;document.getElementById(\"closeButton\").style.left = 1";
        }
        else if (s.equals("center")) {
            s2 = "document.getElementById(\"closeButton\").style.right = mraid.getSize().width/2 - 18;document.getElementById(\"closeButton\").style.top = mraid.getSize().height/2 -18;document.getElementById(\"closeButton\").style.bottom = mraid.getSize().height/2 -18;document.getElementById(\"closeButton\").style.left = mraid.getSize().width/2 -18";
        }
        else if (s.equals("bottom-right")) {
            s2 = "document.getElementById(\"closeButton\").style.right = 1;document.getElementById(\"closeButton\").style.top = mraid.getSize().height -36;document.getElementById(\"closeButton\").style.bottom = 1;document.getElementById(\"closeButton\").style.left = mraid.getSize().width -36";
        }
        else if (s.equals("bottom-left")) {
            s2 = "document.getElementById(\"closeButton\").style.left = 1;document.getElementById(\"closeButton\").style.bottom = 1;document.getElementById(\"closeButton\").style.right = mraid.getSize().width -36;document.getElementById(\"closeButton\").style.top = mraid.getSize().height-36;";
        }
        else {
            final boolean equals = s.equals("bottom-center");
            s2 = null;
            if (equals) {
                s2 = "document.getElementById(\"closeButton\").style.bottom = 1;document.getElementById(\"closeButton\").style.right = mraid.getSize().width -36document.getElementById(\"closeButton\").style.right = mraid.getSize().width/2 -18;document.getElementById(\"closeButton\").style.top = mraid.getSize().height-36;";
            }
        }
        if (s2 != null) {
            this.a(s2);
            return;
        }
        ab.d("MRAIDView", "Reposition of close button failed.");
    }
    
    static /* synthetic */ void g(final MraidView mraidView) {
        if (mraidView.w != null) {
            mraidView.w.a();
        }
        ((ViewGroup)mraidView.getParent()).removeView((View)mraidView);
    }
    
    private void k() {
        this.v = com.tapjoy.mraid.view.f.a;
        if (this.w != null) {
            final c w = this.w;
        }
        final String string = "window.mraidview.fireChangeEvent({ state: 'default', size: { width: " + this.p + ", height: " + this.o + ", x:0,y:0}});";
        ab.d("MRAIDView", "closeResized: injection: " + string);
        this.a(string);
        this.c("top-right");
        this.p();
    }
    
    @SuppressLint({ "SetJavaScriptEnabled" })
    private void l() {
        final d b = com.tapjoy.mraid.view.d.b;
        if (b.equals(com.tapjoy.mraid.view.d.a) || b.equals(com.tapjoy.mraid.view.d.b)) {
            this.t = b;
        }
        else {
            ab.d("MRAIDView", "Incorrect placement type.");
        }
        if (b.equals(com.tapjoy.mraid.view.d.a) && (this.B == null || !this.B.isAlive())) {
            (this.B = new Thread(new com.tapjoy.mraid.view.c(this))).start();
        }
        this.setScrollContainer(false);
        this.setVerticalScrollBarEnabled(false);
        this.setHorizontalScrollBarEnabled(false);
        this.u = new GestureDetector((GestureDetector$OnGestureListener)new e(this));
        this.setBackgroundColor(0);
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)this.getContext().getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.l = displayMetrics.density;
        this.j = false;
        if (this.getSettings() != null) {
            this.getSettings().setJavaScriptEnabled(true);
        }
        this.addJavascriptInterface((Object)(this.k = new f(this, this.getContext())), "MRAIDUtilityControllerBridge");
        this.setWebViewClient(this.a);
        this.setWebChromeClient(this.b);
        this.o();
        this.m = this.n();
        if (this.getViewTreeObserver() != null) {
            this.getViewTreeObserver().addOnGlobalLayoutListener((ViewTreeObserver$OnGlobalLayoutListener)this);
        }
        final WindowManager windowManager = (WindowManager)this.getContext().getSystemService("window");
        this.z = windowManager.getDefaultDisplay().getWidth();
        this.A = windowManager.getDefaultDisplay().getHeight();
        this.D = ((Activity)this.getContext()).getRequestedOrientation();
    }
    
    private void m() {
        final WindowManager windowManager = (WindowManager)this.getContext().getSystemService("window");
        final int width = windowManager.getDefaultDisplay().getWidth();
        final int height = windowManager.getDefaultDisplay().getHeight();
        if ((width != this.z || height != this.A) && ((this.t == com.tapjoy.mraid.view.d.a && this.v == com.tapjoy.mraid.view.f.c) || this.t == com.tapjoy.mraid.view.d.b)) {
            this.z = width;
            this.A = height;
            ab.a("MRAIDView", "resizeOrientation to dimensions: " + width + "x" + height);
            final Message obtainMessage = this.J.obtainMessage(1010);
            final Bundle data = new Bundle();
            data.putInt("resize_width", width);
            data.putInt("resize_height", height);
            data.putBoolean("resize_allowOffScreen", true);
            data.putString("resize_customClosePostition", "top-right");
            obtainMessage.setData(data);
            this.J.sendMessage(obtainMessage);
        }
    }
    
    private int n() {
        final View viewById = this.getRootView().findViewById(16908290);
        if (viewById != null) {
            return viewById.getHeight();
        }
        return -1;
    }
    
    private void o() {
        synchronized (this) {
            ab.d("MRAIDView", " paths" + MraidView.f);
            if (MraidView.f == null && ae.d("mraid.js") == null) {
                MraidView.f = this.k.a("/js/mraid.js", "js/mraid.js");
            }
        }
    }
    
    private void p() {
        final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
        if (this.K) {
            layoutParams.height = this.q;
            layoutParams.width = this.r;
        }
        this.setVisibility(0);
        this.requestLayout();
    }
    
    private a q() {
        if (MraidView.x != null) {
            MraidView.x.c();
        }
        return MraidView.x = new a(this.getContext());
    }
    
    public final d a() {
        return this.t;
    }
    
    public final void a(final Bundle bundle) {
        final Abstract$PlayerProperties abstract$PlayerProperties = (Abstract$PlayerProperties)bundle.getParcelable("player_properties");
        final String string = bundle.getString("expand_url");
        final a q = this.q();
        q.a(abstract$PlayerProperties, string);
        q.setLayoutParams(new ViewGroup$LayoutParams(1, 1));
        ((ViewGroup)this.getParent()).addView((View)q);
        q.a();
    }
    
    public final void a(final c w) {
        this.w = w;
    }
    
    public final void a(final String s) {
        if (s != null && this.i) {
            super.loadUrl("javascript:" + s);
        }
    }
    
    public final void b() {
        this.a("window.mraidview.createCss();");
        ab.d("MRAIDView", "Creating close button.");
    }
    
    public final void b(final Bundle bundle) {
        final Abstract$PlayerProperties abstract$PlayerProperties = (Abstract$PlayerProperties)bundle.getParcelable("player_properties");
        final Abstract$Dimensions abstract$Dimensions = (Abstract$Dimensions)bundle.getParcelable("expand_dimensions");
        final String string = bundle.getString("expand_url");
        final a q = this.q();
        q.a(abstract$PlayerProperties, string);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(abstract$Dimensions.c, abstract$Dimensions.d);
        layoutParams.topMargin = abstract$Dimensions.a;
        layoutParams.leftMargin = abstract$Dimensions.b;
        q.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        final FrameLayout frameLayout = new FrameLayout(this.getContext());
        frameLayout.setId(101);
        frameLayout.setPadding(abstract$Dimensions.a, abstract$Dimensions.b, 0, 0);
        ((FrameLayout)this.getRootView().findViewById(16908290)).addView((View)frameLayout, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-1, -1));
        frameLayout.addView((View)q);
        this.setVisibility(4);
        q.a(new com.tapjoy.mraid.a.d() {
            @Override
            public final void a() {
                final FrameLayout frameLayout = (FrameLayout)MraidView.this.getRootView().findViewById(101);
                ((ViewGroup)frameLayout.getParent()).removeView((View)frameLayout);
                MraidView.this.setVisibility(0);
            }
            
            @Override
            public final void b() {
                this.a();
            }
        });
        q.b();
    }
    
    public final void b(final String s) {
        super.loadUrl(s);
    }
    
    public final void c() {
        this.a("document.getElementById(\"closeButton\").style.visibility=\"hidden\";");
        ab.d("MRAIDView", "Removing close button.");
        this.e = com.tapjoy.mraid.view.i.a;
    }
    
    public void clearView() {
        if (this.v == com.tapjoy.mraid.view.f.c) {
            this.h();
        }
        else if (this.v == com.tapjoy.mraid.view.f.b) {
            this.k();
        }
        this.invalidate();
        this.k.a();
        this.k.b();
        this.p();
        super.clearView();
    }
    
    public final void d() {
        this.a("document.getElementById(\"closeButton\").style.visibility=\"visible\";");
        ab.d("MRAIDView", "Showing close button.");
        this.e = com.tapjoy.mraid.view.i.b;
    }
    
    public final boolean e() {
        return this.i;
    }
    
    public final boolean f() {
        return this.G != null;
    }
    
    public final void g() {
        if (this.F != null) {
            ((ViewGroup)this.F.getParent()).removeView((View)this.F);
            this.F.setVisibility(8);
            this.F = null;
        }
        while (true) {
            try {
                if (this.G != null) {
                    this.G.stopPlayback();
                }
                if (this.H != null) {
                    this.H.onCustomViewHidden();
                }
                this.G = null;
                this.H = null;
                if (this != null) {
                    this.setVisibility(0);
                }
                this.loadUrl("javascript:try{Tapjoy.AdUnit.dispatchEvent('videoend')}catch(e){}");
            }
            catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    protected final void h() {
        synchronized (this) {
            final FrameLayout frameLayout = (FrameLayout)this.getRootView().findViewById(16908290);
            final FrameLayout frameLayout2 = (FrameLayout)this.getRootView().findViewById(100);
            final FrameLayout frameLayout3 = (FrameLayout)this.getRootView().findViewById(101);
            frameLayout3.removeView((View)this);
            frameLayout.removeView((View)frameLayout3);
            this.p();
            if (frameLayout2 != null) {
                final ViewGroup viewGroup = (ViewGroup)frameLayout2.getParent();
                if (viewGroup != null) {
                    viewGroup.addView((View)this, this.s);
                    viewGroup.removeView((View)frameLayout2);
                    viewGroup.invalidate();
                }
            }
            final String string = "window.mraidview.fireChangeEvent({ state: 'default', size: { width: " + this.p + ", height: " + this.o + "}});";
            ab.d("MRAIDView", "closeExpanded: injection: " + string);
            this.a(string);
            this.v = com.tapjoy.mraid.view.f.a;
            this.J.sendEmptyMessage(1005);
            this.setVisibility(0);
            this.c();
            ((Activity)this.getContext()).setRequestedOrientation(this.D);
        }
    }
    
    public final String i() {
        return this.v.toString().toLowerCase();
    }
    
    public final String j() {
        return "{ width: " + (int)Math.ceil(this.getWidth() / this.l) + ", height: " + (int)Math.ceil(this.getHeight() / this.l) + "}";
    }
    
    public void loadDataWithBaseURL(final String s, final String s2, final String s3, final String s4, final String s5) {
        if (s2 == null) {
            return;
        }
        final StringBuffer sb = new StringBuffer();
        final int index = s2.indexOf("<html>");
        this.i = false;
        int n = s2.indexOf("mraid.js");
        if (n < 0) {
            n = s2.indexOf("ormma.js");
        }
    Label_0353:
        while (true) {
            Label_0529: {
                if (n <= 0) {
                    break Label_0529;
                }
                final Pattern compile = Pattern.compile("<\\s*script[^>]+ormma\\.js");
                final Matcher matcher = Pattern.compile("<\\s*script[^>]+mraid\\.js").matcher(s2);
                final Matcher matcher2 = compile.matcher(s2);
                int n2;
                if (matcher.find() || matcher2.find()) {
                    n2 = 1;
                }
                else {
                    n2 = 0;
                }
                if (n2 != 0) {
                    this.i = true;
                    while (true) {
                        for (int i = n; i >= 0; --i) {
                            if (s2.substring(i, i + 7).equals("<script")) {
                                for (int j = 0; j < s2.length(); ++j) {
                                    if (s2.substring(n + j, 2 + (n + j)).equalsIgnoreCase("/>")) {
                                        n = 2 + (n + j);
                                        break;
                                    }
                                    if (s2.substring(n + j, 9 + (n + j)).equalsIgnoreCase("</script>")) {
                                        n = 9 + (n + j);
                                        break;
                                    }
                                }
                                if (index < 0) {
                                    ab.d("MRAIDView", "wrapping fragment");
                                    sb.append("<html>");
                                    sb.append("<head>");
                                    sb.append("<meta name='viewport' content='user-scalable=no initial-scale=1.0' />");
                                    sb.append("<title>Advertisement</title>");
                                    sb.append("</head>");
                                    sb.append("<body style=\"margin:0; padding:0; overflow:hidden; background-color:transparent;\">");
                                    sb.append("<div align=\"center\"> ");
                                    sb.append(s2.substring(0, i));
                                    sb.append("<script type=text/javascript>");
                                    String a = (String)ae.d("mraid.js");
                                    if (a == null) {
                                        a = ae.a("js/mraid.js", this.getContext());
                                    }
                                    sb.append(a);
                                    sb.append("</script>");
                                    sb.append(s2.substring(n));
                                }
                                else {
                                    final int index2 = s2.indexOf("<head>");
                                    if (index2 != -1) {
                                        String a2 = (String)ae.d("mraid.js");
                                        if (a2 == null) {
                                            a2 = ae.a("js/mraid.js", this.getContext());
                                        }
                                        sb.append(s2.substring(0, index2 + 6));
                                        sb.append("<script type='text/javascript'>");
                                        sb.append(a2);
                                        sb.append("</script>");
                                        sb.append(s2.substring(index2 + 6));
                                    }
                                }
                                ab.d("MRAIDView", "injected js/mraid.js");
                                break Label_0353;
                            }
                        }
                        int i = n;
                        continue;
                    }
                }
                break Label_0529;
                super.loadDataWithBaseURL(s, sb.toString(), s3, s4, s5);
                return;
            }
            sb.append(s2);
            continue Label_0353;
        }
    }
    
    public void loadUrl(final String s) {
        ((Activity)this.E).runOnUiThread((Runnable)new Runnable() {
            @Override
            public final void run() {
                if (!URLUtil.isValidUrl(s)) {
                    MraidView.this.loadDataWithBaseURL(null, "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"><title>Connection not Established</title></head><h2>Connection Not Properly Established</h2><body></body></html>", "text/html", "utf-8", null);
                    return;
                }
                if (s.startsWith("javascript")) {
                    MraidView.a(MraidView.this, s);
                    return;
                }
                new b(MraidView.this, (byte)0).execute((Object[])new String[] { s });
            }
        });
    }
    
    protected void onAttachedToWindow() {
        if (!this.K) {
            final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
            this.q = layoutParams.height;
            this.r = layoutParams.width;
            this.K = true;
        }
        this.C = false;
        if (this.B == null || !this.B.isAlive()) {
            (this.B = new Thread(new com.tapjoy.mraid.view.c(this))).start();
        }
        super.onAttachedToWindow();
    }
    
    protected void onDetachedFromWindow() {
        this.C = true;
        this.k.b();
        while (true) {
            try {
                if (this.G != null) {
                    this.G.stopPlayback();
                }
                if (this.H != null) {
                    this.H.onCustomViewHidden();
                }
                super.onDetachedFromWindow();
            }
            catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    public void onGlobalLayout() {
        boolean n = this.n;
        if (!this.n && this.m >= 0 && this.n() >= 0 && this.m != this.n()) {
            n = true;
            this.a("window.mraidview.fireChangeEvent({ keyboardState: true});");
        }
        if (this.n && this.m >= 0 && this.n() >= 0 && this.m == this.n()) {
            n = false;
            this.a("window.mraidview.fireChangeEvent({ keyboardState: false});");
        }
        if (this.m < 0) {
            this.m = this.n();
        }
        this.n = n;
    }
    
    public WebBackForwardList restoreState(final Bundle bundle) {
        return super.restoreState(bundle);
    }
    
    public WebBackForwardList saveState(final Bundle bundle) {
        return super.saveState(bundle);
    }
}
