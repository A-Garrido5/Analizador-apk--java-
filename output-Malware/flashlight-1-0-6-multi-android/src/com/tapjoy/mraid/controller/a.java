// 
// Decompiled by Procyon v0.5.30
// 

package com.tapjoy.mraid.controller;

import java.io.FileOutputStream;
import java.io.File;
import java.io.InputStream;
import android.content.Context;
import com.tapjoy.mraid.view.MraidView;

public class a extends Abstract
{
    private static final char[] d;
    private int c;
    
    static {
        d = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
    }
    
    public a(final MraidView mraidView, final Context context) {
        super(mraidView, context);
        this.c = 0;
    }
    
    private String a(final InputStream inputStream, final String s) {
        while (true) {
            final byte[] array = new byte[1024];
            while (true) {
                while (true) {
                    try {
                        final int lastIndex = s.lastIndexOf(File.separatorChar);
                        String substring = "/";
                        if (lastIndex >= 0) {
                            substring = s.substring(0, s.lastIndexOf(File.separatorChar));
                        }
                        final File file = new File(this.b.getFilesDir().getPath() + File.separator + substring);
                        file.mkdirs();
                        if (s.lastIndexOf(File.separatorChar) >= 0) {
                            final String substring2 = s.substring(1 + s.lastIndexOf(File.separatorChar));
                            final FileOutputStream fileOutputStream = new FileOutputStream(new File(file, substring2));
                            Label_0179: {
                                FileOutputStream fileOutputStream2;
                                try {
                                    while (true) {
                                        final int read = inputStream.read(array);
                                        if (read <= 0) {
                                            break Label_0179;
                                        }
                                        fileOutputStream.write(array, 0, read);
                                    }
                                }
                                finally {
                                    fileOutputStream2 = fileOutputStream;
                                }
                                Label_0176: {
                                    if (fileOutputStream2 == null) {
                                        break Label_0176;
                                    }
                                    try {
                                        fileOutputStream2.close();
                                        throw;
                                        fileOutputStream.flush();
                                        try {
                                            fileOutputStream.close();
                                            return this.c() + s;
                                        }
                                        catch (Exception ex) {}
                                    }
                                    catch (Exception ex2) {}
                                }
                            }
                        }
                    }
                    finally {
                        final FileOutputStream fileOutputStream2 = null;
                        continue;
                    }
                    break;
                }
                final String substring2 = s;
                continue;
            }
        }
    }
    
    private static boolean a(final File file) {
        if (file.exists()) {
            final File[] listFiles = file.listFiles();
            for (int i = 0; i < listFiles.length; ++i) {
                if (listFiles[i].isDirectory()) {
                    a(listFiles[i]);
                }
                else {
                    listFiles[i].delete();
                }
            }
        }
        return file.delete();
    }
    
    public static void b() {
    }
    
    private String c() {
        return this.b.getFilesDir().getPath();
    }
    
    public final String a(final String p0, final String p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             Lcom/tapjoy/mraid/controller/a;.class
        //     2: invokevirtual   java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
        //     5: aload_2        
        //     6: invokevirtual   java/lang/ClassLoader.getResource:(Ljava/lang/String;)Ljava/net/URL;
        //     9: astore          10
        //    11: aload           10
        //    13: ifnonnull       59
        //    16: aload_0        
        //    17: getfield        com/tapjoy/mraid/controller/a.b:Landroid/content/Context;
        //    20: invokevirtual   android/content/Context.getAssets:()Landroid/content/res/AssetManager;
        //    23: aload_2        
        //    24: invokevirtual   android/content/res/AssetManager.open:(Ljava/lang/String;)Ljava/io/InputStream;
        //    27: astore          11
        //    29: aload           11
        //    31: astore          4
        //    33: aload_0        
        //    34: aload           4
        //    36: aload_1        
        //    37: invokespecial   com/tapjoy/mraid/controller/a.a:(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;
        //    40: astore          12
        //    42: aload           12
        //    44: astore          8
        //    46: aload           4
        //    48: ifnull          56
        //    51: aload           4
        //    53: invokevirtual   java/io/InputStream.close:()V
        //    56: aload           8
        //    58: areturn        
        //    59: aload           10
        //    61: invokevirtual   java/net/URL.getFile:()Ljava/lang/String;
        //    64: astore          14
        //    66: aload           14
        //    68: ldc             "jar:"
        //    70: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //    73: ifeq            84
        //    76: aload           14
        //    78: iconst_4       
        //    79: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //    82: astore          14
        //    84: aload           14
        //    86: ldc             "file:"
        //    88: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //    91: ifeq            102
        //    94: aload           14
        //    96: iconst_5       
        //    97: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   100: astore          14
        //   102: aload           14
        //   104: ldc             "!"
        //   106: invokevirtual   java/lang/String.indexOf:(Ljava/lang/String;)I
        //   109: istore          15
        //   111: iload           15
        //   113: ifle            126
        //   116: aload           14
        //   118: iconst_0       
        //   119: iload           15
        //   121: invokevirtual   java/lang/String.substring:(II)Ljava/lang/String;
        //   124: astore          14
        //   126: new             Ljava/util/jar/JarFile;
        //   129: dup            
        //   130: aload           14
        //   132: invokespecial   java/util/jar/JarFile.<init>:(Ljava/lang/String;)V
        //   135: astore          16
        //   137: aload           16
        //   139: aload           16
        //   141: aload_2        
        //   142: invokevirtual   java/util/jar/JarFile.getJarEntry:(Ljava/lang/String;)Ljava/util/jar/JarEntry;
        //   145: invokevirtual   java/util/jar/JarFile.getInputStream:(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;
        //   148: astore          17
        //   150: aload           17
        //   152: astore          4
        //   154: goto            33
        //   157: astore          7
        //   159: aconst_null    
        //   160: astore          4
        //   162: ldc             "MRAID Assets"
        //   164: new             Ljava/lang/StringBuilder;
        //   167: dup            
        //   168: ldc             "copyTextFromJarIntoAssetDir: "
        //   170: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   173: aload           7
        //   175: invokevirtual   java/lang/Exception.toString:()Ljava/lang/String;
        //   178: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   181: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   184: invokestatic    com/tapjoy/ab.b:(Ljava/lang/String;Ljava/lang/String;)V
        //   187: aconst_null    
        //   188: astore          8
        //   190: aload           4
        //   192: ifnull          56
        //   195: aload           4
        //   197: invokevirtual   java/io/InputStream.close:()V
        //   200: aconst_null    
        //   201: areturn        
        //   202: astore          9
        //   204: aconst_null    
        //   205: areturn        
        //   206: astore_3       
        //   207: aconst_null    
        //   208: astore          4
        //   210: aload_3        
        //   211: astore          5
        //   213: aload           4
        //   215: ifnull          223
        //   218: aload           4
        //   220: invokevirtual   java/io/InputStream.close:()V
        //   223: aload           5
        //   225: athrow         
        //   226: astore          13
        //   228: aload           8
        //   230: areturn        
        //   231: astore          6
        //   233: goto            223
        //   236: astore          5
        //   238: goto            213
        //   241: astore          7
        //   243: goto            162
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  0      11     157    162    Ljava/lang/Exception;
        //  0      11     206    213    Any
        //  16     29     157    162    Ljava/lang/Exception;
        //  16     29     206    213    Any
        //  33     42     241    246    Ljava/lang/Exception;
        //  33     42     236    241    Any
        //  51     56     226    231    Ljava/lang/Exception;
        //  59     84     157    162    Ljava/lang/Exception;
        //  59     84     206    213    Any
        //  84     102    157    162    Ljava/lang/Exception;
        //  84     102    206    213    Any
        //  102    111    157    162    Ljava/lang/Exception;
        //  102    111    206    213    Any
        //  116    126    157    162    Ljava/lang/Exception;
        //  116    126    206    213    Any
        //  126    150    157    162    Ljava/lang/Exception;
        //  126    150    206    213    Any
        //  162    187    236    241    Any
        //  195    200    202    206    Ljava/lang/Exception;
        //  218    223    231    236    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0033:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final void a() {
        a(new File(this.c() + File.separator + "ad"));
    }
}
