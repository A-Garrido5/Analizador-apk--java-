// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.ormma.view;

import android.webkit.WebBackForwardList;
import com.nexage.ormma.controller.util.OrmmaPlayerListener;
import com.nexage.ormma.controller.OrmmaController$PlayerProperties;
import android.content.ActivityNotFoundException;
import com.nexage.ormma.controller.util.OrmmaUtils;
import java.net.MalformedURLException;
import java.io.IOException;
import java.net.URL;
import java.io.FileInputStream;
import java.io.File;
import java.io.ByteArrayInputStream;
import android.net.ConnectivityManager;
import android.os.Parcelable;
import android.app.Activity;
import android.webkit.WebSettings$RenderPriority;
import java.io.InputStream;
import java.util.Iterator;
import android.view.WindowManager;
import android.util.DisplayMetrics;
import android.view.GestureDetector$OnGestureListener;
import android.webkit.URLUtil;
import com.nexage.ormma.controller.OrmmaController$Properties;
import android.view.MotionEvent;
import android.view.View$OnTouchListener;
import android.view.View;
import android.widget.FrameLayout$LayoutParams;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import com.nexage.ormma.controller.OrmmaController$Dimensions;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.webkit.JsPromptResult;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.NexageAdManager;
import android.webkit.JsResult;
import android.content.Intent;
import android.net.Uri;
import android.view.ViewGroup$LayoutParams;
import android.os.Bundle;
import android.util.Log;
import android.os.Message;
import java.util.HashSet;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import com.nexage.ormma.controller.OrmmaUtilityController;
import android.os.Handler;
import android.view.GestureDetector;
import android.content.Context;
import com.nexage.ormma.controller.util.OrmmaPlayer;
import android.view.ViewTreeObserver$OnGlobalLayoutListener;
import android.webkit.WebView;

public class OrmmaView extends WebView implements ViewTreeObserver$OnGlobalLayoutListener
{
    public static final String ACTION_KEY = "action";
    private static final String AD_PATH = "AD_PATH";
    protected static final int BACKGROUND_ID = 101;
    private static final String CURRENT_FILE = "_ormma_current";
    public static final String DIMENSIONS = "expand_dimensions";
    private static final String ERROR_ACTION = "action";
    private static final String ERROR_MESSAGE = "message";
    private static final String EXPAND_PROPERTIES = "expand_properties";
    public static final String EXPAND_URL = "expand_url";
    private static final String LOG_TAG = "OrmmaView";
    private static final int MESSAGE_CHANGE_VIEWABLE = 1010;
    private static final int MESSAGE_CLOSE = 1001;
    private static final int MESSAGE_EXPAND = 1004;
    private static final int MESSAGE_HIDE = 1002;
    private static final int MESSAGE_OPEN = 1006;
    private static final int MESSAGE_PLAY_AUDIO = 1008;
    private static final int MESSAGE_PLAY_VIDEO = 1007;
    private static final int MESSAGE_RAISE_ERROR = 1009;
    private static final int MESSAGE_RESIZE = 1000;
    private static final int MESSAGE_SEND_EXPAND_CLOSE = 1005;
    private static final int MESSAGE_SHOW = 1003;
    public static final int ORMMA_ID = 102;
    protected static final int PLACEHOLDER_ID = 100;
    public static final String PLAYER_PROPERTIES = "player_properties";
    private static final String RESIZE_HEIGHT = "resize_height";
    private static final String RESIZE_WIDTH = "resize_width";
    private static final String TAG = "OrmmaView";
    private static int[] attrs;
    private static String mBridgeScriptPath;
    private static String mScriptPath;
    private static OrmmaPlayer player;
    private boolean bGotLayoutParams;
    private boolean bKeyboardOut;
    private boolean bPageFinished;
    private int mContentViewHeight;
    public Context mContext;
    private int mDefaultHeight;
    private int mDefaultWidth;
    private float mDensity;
    private GestureDetector mGestureDetector;
    private Handler mHandler;
    private int mIndex;
    private int mInitLayoutHeight;
    private int mInitLayoutWidth;
    private OrmmaView$OrmmaViewListener mListener;
    private String mLocalFilePath;
    private OrmmaView$TimeOut mTimeOut;
    private OrmmaUtilityController mUtilityController;
    private OrmmaView$ViewState mViewState;
    WebChromeClient mWebChromeClient;
    WebViewClient mWebViewClient;
    private String mapAPIKey;
    private final HashSet registeredProtocols;
    
    static {
        OrmmaView.attrs = new int[] { 16843039, 16843040 };
    }
    
    public OrmmaView(final Context mContext) {
        super(mContext);
        this.mViewState = OrmmaView$ViewState.DEFAULT;
        this.registeredProtocols = new HashSet();
        this.mHandler = new Handler() {
            public void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onExpandClose();
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.RESIZED;
                            final ViewGroup$LayoutParams layoutParams = OrmmaView.this.getLayoutParams();
                            layoutParams.height = data.getInt("resize_height", layoutParams.height);
                            layoutParams.width = data.getInt("resize_width", layoutParams.width);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'resized', size: { width: " + layoutParams.width + ", height: " + layoutParams.height + "}});");
                            OrmmaView.this.requestLayout();
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onResize();
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (OrmmaView.this.mViewState) {
                                default: {
                                    break Label_0068;
                                }
                                case RESIZED: {
                                    OrmmaView.this.closeResized();
                                    break Label_0068;
                                }
                                case EXPANDED: {
                                    OrmmaView.this.closeExpanded();
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            OrmmaView.this.setVisibility(4);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'hidden' });");
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onHide();
                                break;
                            }
                            break;
                        }
                        case 1003: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'default' });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            OrmmaView.this.doExpand(data);
                            break;
                        }
                        case 1006: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.LEFT_BEHIND;
                            break;
                        }
                        case 1008: {
                            OrmmaView.this.playAudioImpl(data);
                            break;
                        }
                        case 1007: {
                            OrmmaView.this.playVideoImpl(data);
                            break;
                        }
                        case 1010: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ viewable:true });");
                            Log.d("OrmmaView", "viewableChange: injection: " + "window.ormmaview.fireChangeEvent({ viewable:true });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1009: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.mWebViewClient = new WebViewClient() {
            public void onLoadResource(final WebView webView, final String s) {
                if (s.indexOf("mm4rm=click") > 0) {
                    OrmmaView.this.mListener.onBillableEvent();
                }
            }
            
            public void onPageFinished(final WebView webView, final String s) {
                OrmmaView.this.mDefaultHeight = (int)(OrmmaView.this.getHeight() / OrmmaView.this.mDensity);
                OrmmaView.this.mDefaultWidth = (int)(OrmmaView.this.getWidth() / OrmmaView.this.mDensity);
                OrmmaView.this.mUtilityController.init(OrmmaView.this.mDensity);
                if (OrmmaView.this.mListener != null) {
                    OrmmaView.this.mListener.onFinishedLoading();
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Log.d("OrmmaView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                try {
                    if (OrmmaView.this.mListener != null && OrmmaView.this.isRegisteredProtocol(Uri.parse(s))) {
                        OrmmaView.this.mListener.handleRequest(s);
                        return true;
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(Uri.parse(s));
                        intent2.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    OrmmaView.this.getContext().startActivity(intent3);
                    return true;
                }
                OrmmaView.this.mListener.onClick();
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(Uri.parse(s));
                intent4.addFlags(268435456);
                OrmmaView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.mWebChromeClient = new WebChromeClient() {
            private boolean handlePopups(final JsResult jsResult) {
                if (NexageAdManager.areJavascriptPromptsAndAlertsAllowed()) {
                    NexageAdManager.setIsPopupDisplayed(true);
                    return false;
                }
                jsResult.cancel();
                return true;
            }
            
            public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS alert", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS confirm", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
                NexageLog.d("JS prompt", s2);
                return this.handlePopups((JsResult)jsPromptResult);
            }
        };
        this.mContext = mContext;
        this.initialize();
    }
    
    public OrmmaView(final Context context, final AttributeSet set) {
        super(context, set);
        this.mViewState = OrmmaView$ViewState.DEFAULT;
        this.registeredProtocols = new HashSet();
        this.mHandler = new Handler() {
            public void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onExpandClose();
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.RESIZED;
                            final ViewGroup$LayoutParams layoutParams = OrmmaView.this.getLayoutParams();
                            layoutParams.height = data.getInt("resize_height", layoutParams.height);
                            layoutParams.width = data.getInt("resize_width", layoutParams.width);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'resized', size: { width: " + layoutParams.width + ", height: " + layoutParams.height + "}});");
                            OrmmaView.this.requestLayout();
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onResize();
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (OrmmaView.this.mViewState) {
                                default: {
                                    break Label_0068;
                                }
                                case RESIZED: {
                                    OrmmaView.this.closeResized();
                                    break Label_0068;
                                }
                                case EXPANDED: {
                                    OrmmaView.this.closeExpanded();
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            OrmmaView.this.setVisibility(4);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'hidden' });");
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onHide();
                                break;
                            }
                            break;
                        }
                        case 1003: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'default' });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            OrmmaView.this.doExpand(data);
                            break;
                        }
                        case 1006: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.LEFT_BEHIND;
                            break;
                        }
                        case 1008: {
                            OrmmaView.this.playAudioImpl(data);
                            break;
                        }
                        case 1007: {
                            OrmmaView.this.playVideoImpl(data);
                            break;
                        }
                        case 1010: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ viewable:true });");
                            Log.d("OrmmaView", "viewableChange: injection: " + "window.ormmaview.fireChangeEvent({ viewable:true });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1009: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.mWebViewClient = new WebViewClient() {
            public void onLoadResource(final WebView webView, final String s) {
                if (s.indexOf("mm4rm=click") > 0) {
                    OrmmaView.this.mListener.onBillableEvent();
                }
            }
            
            public void onPageFinished(final WebView webView, final String s) {
                OrmmaView.this.mDefaultHeight = (int)(OrmmaView.this.getHeight() / OrmmaView.this.mDensity);
                OrmmaView.this.mDefaultWidth = (int)(OrmmaView.this.getWidth() / OrmmaView.this.mDensity);
                OrmmaView.this.mUtilityController.init(OrmmaView.this.mDensity);
                if (OrmmaView.this.mListener != null) {
                    OrmmaView.this.mListener.onFinishedLoading();
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Log.d("OrmmaView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                try {
                    if (OrmmaView.this.mListener != null && OrmmaView.this.isRegisteredProtocol(Uri.parse(s))) {
                        OrmmaView.this.mListener.handleRequest(s);
                        return true;
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(Uri.parse(s));
                        intent2.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    OrmmaView.this.getContext().startActivity(intent3);
                    return true;
                }
                OrmmaView.this.mListener.onClick();
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(Uri.parse(s));
                intent4.addFlags(268435456);
                OrmmaView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.mWebChromeClient = new WebChromeClient() {
            private boolean handlePopups(final JsResult jsResult) {
                if (NexageAdManager.areJavascriptPromptsAndAlertsAllowed()) {
                    NexageAdManager.setIsPopupDisplayed(true);
                    return false;
                }
                jsResult.cancel();
                return true;
            }
            
            public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS alert", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS confirm", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
                NexageLog.d("JS prompt", s2);
                return this.handlePopups((JsResult)jsPromptResult);
            }
        };
        this.initialize();
        final TypedArray obtainStyledAttributes = this.getContext().obtainStyledAttributes(set, OrmmaView.attrs);
        final int dimensionPixelSize = obtainStyledAttributes.getDimensionPixelSize(0, -1);
        final int dimensionPixelSize2 = obtainStyledAttributes.getDimensionPixelSize(1, -1);
        if (dimensionPixelSize > 0 && dimensionPixelSize2 > 0) {
            this.mUtilityController.setMaxSize(dimensionPixelSize, dimensionPixelSize2);
        }
        obtainStyledAttributes.recycle();
    }
    
    public OrmmaView(final Context mContext, final OrmmaView$OrmmaViewListener listener) {
        super(mContext);
        this.mViewState = OrmmaView$ViewState.DEFAULT;
        this.registeredProtocols = new HashSet();
        this.mHandler = new Handler() {
            public void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onExpandClose();
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.RESIZED;
                            final ViewGroup$LayoutParams layoutParams = OrmmaView.this.getLayoutParams();
                            layoutParams.height = data.getInt("resize_height", layoutParams.height);
                            layoutParams.width = data.getInt("resize_width", layoutParams.width);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'resized', size: { width: " + layoutParams.width + ", height: " + layoutParams.height + "}});");
                            OrmmaView.this.requestLayout();
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onResize();
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (OrmmaView.this.mViewState) {
                                default: {
                                    break Label_0068;
                                }
                                case RESIZED: {
                                    OrmmaView.this.closeResized();
                                    break Label_0068;
                                }
                                case EXPANDED: {
                                    OrmmaView.this.closeExpanded();
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            OrmmaView.this.setVisibility(4);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'hidden' });");
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onHide();
                                break;
                            }
                            break;
                        }
                        case 1003: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'default' });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            OrmmaView.this.doExpand(data);
                            break;
                        }
                        case 1006: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.LEFT_BEHIND;
                            break;
                        }
                        case 1008: {
                            OrmmaView.this.playAudioImpl(data);
                            break;
                        }
                        case 1007: {
                            OrmmaView.this.playVideoImpl(data);
                            break;
                        }
                        case 1010: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ viewable:true });");
                            Log.d("OrmmaView", "viewableChange: injection: " + "window.ormmaview.fireChangeEvent({ viewable:true });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1009: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.mWebViewClient = new WebViewClient() {
            public void onLoadResource(final WebView webView, final String s) {
                if (s.indexOf("mm4rm=click") > 0) {
                    OrmmaView.this.mListener.onBillableEvent();
                }
            }
            
            public void onPageFinished(final WebView webView, final String s) {
                OrmmaView.this.mDefaultHeight = (int)(OrmmaView.this.getHeight() / OrmmaView.this.mDensity);
                OrmmaView.this.mDefaultWidth = (int)(OrmmaView.this.getWidth() / OrmmaView.this.mDensity);
                OrmmaView.this.mUtilityController.init(OrmmaView.this.mDensity);
                if (OrmmaView.this.mListener != null) {
                    OrmmaView.this.mListener.onFinishedLoading();
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Log.d("OrmmaView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                try {
                    if (OrmmaView.this.mListener != null && OrmmaView.this.isRegisteredProtocol(Uri.parse(s))) {
                        OrmmaView.this.mListener.handleRequest(s);
                        return true;
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(Uri.parse(s));
                        intent2.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    OrmmaView.this.getContext().startActivity(intent3);
                    return true;
                }
                OrmmaView.this.mListener.onClick();
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(Uri.parse(s));
                intent4.addFlags(268435456);
                OrmmaView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.mWebChromeClient = new WebChromeClient() {
            private boolean handlePopups(final JsResult jsResult) {
                if (NexageAdManager.areJavascriptPromptsAndAlertsAllowed()) {
                    NexageAdManager.setIsPopupDisplayed(true);
                    return false;
                }
                jsResult.cancel();
                return true;
            }
            
            public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS alert", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS confirm", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
                NexageLog.d("JS prompt", s2);
                return this.handlePopups((JsResult)jsPromptResult);
            }
        };
        this.mContext = mContext;
        this.setListener(listener);
        this.initialize();
    }
    
    public OrmmaView(final Context context, final String mapAPIKey) {
        super(context);
        this.mViewState = OrmmaView$ViewState.DEFAULT;
        this.registeredProtocols = new HashSet();
        this.mHandler = new Handler() {
            public void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onExpandClose();
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.RESIZED;
                            final ViewGroup$LayoutParams layoutParams = OrmmaView.this.getLayoutParams();
                            layoutParams.height = data.getInt("resize_height", layoutParams.height);
                            layoutParams.width = data.getInt("resize_width", layoutParams.width);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'resized', size: { width: " + layoutParams.width + ", height: " + layoutParams.height + "}});");
                            OrmmaView.this.requestLayout();
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onResize();
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (OrmmaView.this.mViewState) {
                                default: {
                                    break Label_0068;
                                }
                                case RESIZED: {
                                    OrmmaView.this.closeResized();
                                    break Label_0068;
                                }
                                case EXPANDED: {
                                    OrmmaView.this.closeExpanded();
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            OrmmaView.this.setVisibility(4);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'hidden' });");
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onHide();
                                break;
                            }
                            break;
                        }
                        case 1003: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'default' });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            OrmmaView.this.doExpand(data);
                            break;
                        }
                        case 1006: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.LEFT_BEHIND;
                            break;
                        }
                        case 1008: {
                            OrmmaView.this.playAudioImpl(data);
                            break;
                        }
                        case 1007: {
                            OrmmaView.this.playVideoImpl(data);
                            break;
                        }
                        case 1010: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ viewable:true });");
                            Log.d("OrmmaView", "viewableChange: injection: " + "window.ormmaview.fireChangeEvent({ viewable:true });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1009: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.mWebViewClient = new WebViewClient() {
            public void onLoadResource(final WebView webView, final String s) {
                if (s.indexOf("mm4rm=click") > 0) {
                    OrmmaView.this.mListener.onBillableEvent();
                }
            }
            
            public void onPageFinished(final WebView webView, final String s) {
                OrmmaView.this.mDefaultHeight = (int)(OrmmaView.this.getHeight() / OrmmaView.this.mDensity);
                OrmmaView.this.mDefaultWidth = (int)(OrmmaView.this.getWidth() / OrmmaView.this.mDensity);
                OrmmaView.this.mUtilityController.init(OrmmaView.this.mDensity);
                if (OrmmaView.this.mListener != null) {
                    OrmmaView.this.mListener.onFinishedLoading();
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Log.d("OrmmaView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                try {
                    if (OrmmaView.this.mListener != null && OrmmaView.this.isRegisteredProtocol(Uri.parse(s))) {
                        OrmmaView.this.mListener.handleRequest(s);
                        return true;
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(Uri.parse(s));
                        intent2.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    OrmmaView.this.getContext().startActivity(intent3);
                    return true;
                }
                OrmmaView.this.mListener.onClick();
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(Uri.parse(s));
                intent4.addFlags(268435456);
                OrmmaView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.mWebChromeClient = new WebChromeClient() {
            private boolean handlePopups(final JsResult jsResult) {
                if (NexageAdManager.areJavascriptPromptsAndAlertsAllowed()) {
                    NexageAdManager.setIsPopupDisplayed(true);
                    return false;
                }
                jsResult.cancel();
                return true;
            }
            
            public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS alert", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS confirm", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
                NexageLog.d("JS prompt", s2);
                return this.handlePopups((JsResult)jsPromptResult);
            }
        };
        this.mapAPIKey = mapAPIKey;
        this.initialize();
    }
    
    public OrmmaView(final Context context, final String mapAPIKey, final OrmmaView$OrmmaViewListener listener) {
        super(context);
        this.mViewState = OrmmaView$ViewState.DEFAULT;
        this.registeredProtocols = new HashSet();
        this.mHandler = new Handler() {
            public void handleMessage(final Message message) {
                final Bundle data = message.getData();
                Label_0068: {
                    switch (message.what) {
                        case 1005: {
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onExpandClose();
                                break;
                            }
                            break;
                        }
                        case 1000: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.RESIZED;
                            final ViewGroup$LayoutParams layoutParams = OrmmaView.this.getLayoutParams();
                            layoutParams.height = data.getInt("resize_height", layoutParams.height);
                            layoutParams.width = data.getInt("resize_width", layoutParams.width);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'resized', size: { width: " + layoutParams.width + ", height: " + layoutParams.height + "}});");
                            OrmmaView.this.requestLayout();
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onResize();
                                break;
                            }
                            break;
                        }
                        case 1001: {
                            switch (OrmmaView.this.mViewState) {
                                default: {
                                    break Label_0068;
                                }
                                case RESIZED: {
                                    OrmmaView.this.closeResized();
                                    break Label_0068;
                                }
                                case EXPANDED: {
                                    OrmmaView.this.closeExpanded();
                                    break Label_0068;
                                }
                            }
                            break;
                        }
                        case 1002: {
                            OrmmaView.this.setVisibility(4);
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'hidden' });");
                            if (OrmmaView.this.mListener != null) {
                                OrmmaView.this.mListener.onHide();
                                break;
                            }
                            break;
                        }
                        case 1003: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ state: 'default' });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1004: {
                            OrmmaView.this.doExpand(data);
                            break;
                        }
                        case 1006: {
                            OrmmaView.this.mViewState = OrmmaView$ViewState.LEFT_BEHIND;
                            break;
                        }
                        case 1008: {
                            OrmmaView.this.playAudioImpl(data);
                            break;
                        }
                        case 1007: {
                            OrmmaView.this.playVideoImpl(data);
                            break;
                        }
                        case 1010: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireChangeEvent({ viewable:true });");
                            Log.d("OrmmaView", "viewableChange: injection: " + "window.ormmaview.fireChangeEvent({ viewable:true });");
                            OrmmaView.this.setVisibility(0);
                            break;
                        }
                        case 1009: {
                            OrmmaView.this.injectJavaScript("window.ormmaview.fireErrorEvent(\"" + data.getString("message") + "\", \"" + data.getString("action") + "\")");
                            break;
                        }
                    }
                }
                super.handleMessage(message);
            }
        };
        this.mWebViewClient = new WebViewClient() {
            public void onLoadResource(final WebView webView, final String s) {
                if (s.indexOf("mm4rm=click") > 0) {
                    OrmmaView.this.mListener.onBillableEvent();
                }
            }
            
            public void onPageFinished(final WebView webView, final String s) {
                OrmmaView.this.mDefaultHeight = (int)(OrmmaView.this.getHeight() / OrmmaView.this.mDensity);
                OrmmaView.this.mDefaultWidth = (int)(OrmmaView.this.getWidth() / OrmmaView.this.mDensity);
                OrmmaView.this.mUtilityController.init(OrmmaView.this.mDensity);
                if (OrmmaView.this.mListener != null) {
                    OrmmaView.this.mListener.onFinishedLoading();
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Log.d("OrmmaView", "error:" + s);
                super.onReceivedError(webView, n, s, s2);
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                try {
                    if (OrmmaView.this.mListener != null && OrmmaView.this.isRegisteredProtocol(Uri.parse(s))) {
                        OrmmaView.this.mListener.handleRequest(s);
                        return true;
                    }
                    if (s.startsWith("tel:")) {
                        final Intent intent = new Intent("android.intent.action.DIAL", Uri.parse(s));
                        intent.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent);
                        return true;
                    }
                }
                catch (Exception ex) {
                    try {
                        final Intent intent2 = new Intent();
                        intent2.setAction("android.intent.action.VIEW");
                        intent2.setData(Uri.parse(s));
                        intent2.addFlags(268435456);
                        OrmmaView.this.getContext().startActivity(intent2);
                        return true;
                    }
                    catch (Exception ex2) {
                        return false;
                    }
                }
                if (s.startsWith("mailto:")) {
                    final Intent intent3 = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent3.addFlags(268435456);
                    OrmmaView.this.getContext().startActivity(intent3);
                    return true;
                }
                OrmmaView.this.mListener.onClick();
                final Intent intent4 = new Intent();
                intent4.setAction("android.intent.action.VIEW");
                intent4.setData(Uri.parse(s));
                intent4.addFlags(268435456);
                OrmmaView.this.getContext().startActivity(intent4);
                return true;
            }
        };
        this.mWebChromeClient = new WebChromeClient() {
            private boolean handlePopups(final JsResult jsResult) {
                if (NexageAdManager.areJavascriptPromptsAndAlertsAllowed()) {
                    NexageAdManager.setIsPopupDisplayed(true);
                    return false;
                }
                jsResult.cancel();
                return true;
            }
            
            public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS alert", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
                NexageLog.d("JS confirm", s2);
                return this.handlePopups(jsResult);
            }
            
            public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
                NexageLog.d("JS prompt", s2);
                return this.handlePopups((JsResult)jsPromptResult);
            }
        };
        this.mapAPIKey = mapAPIKey;
        this.setListener(listener);
        this.initialize();
    }
    
    private FrameLayout changeContentArea(final OrmmaController$Dimensions ormmaController$Dimensions) {
        NexageLog.d("OrmmaView", "changeContentArea");
        final FrameLayout frameLayout = (FrameLayout)this.getRootView().findViewById(16908290);
        final ViewGroup viewGroup = (ViewGroup)this.getParent();
        final FrameLayout$LayoutParams frameLayout$LayoutParams = new FrameLayout$LayoutParams(ormmaController$Dimensions.width, ormmaController$Dimensions.height);
        frameLayout$LayoutParams.topMargin = ormmaController$Dimensions.x;
        frameLayout$LayoutParams.leftMargin = ormmaController$Dimensions.y;
        int childCount;
        int mIndex;
        for (childCount = viewGroup.getChildCount(), mIndex = 0; mIndex < childCount && viewGroup.getChildAt(mIndex) != this; ++mIndex) {}
        this.mIndex = mIndex;
        final FrameLayout frameLayout2 = new FrameLayout(this.getContext());
        frameLayout2.setId(100);
        viewGroup.addView((View)frameLayout2, mIndex, new ViewGroup$LayoutParams(this.getWidth(), this.getHeight()));
        viewGroup.removeView((View)this);
        final FrameLayout frameLayout3 = new FrameLayout(this.getContext());
        frameLayout3.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                Log.i("ORMMA", "background touch called");
                return true;
            }
        });
        final FrameLayout$LayoutParams frameLayout$LayoutParams2 = new FrameLayout$LayoutParams(-1, -1);
        frameLayout3.setId(101);
        frameLayout3.setPadding(ormmaController$Dimensions.x, ormmaController$Dimensions.y, 0, 0);
        frameLayout3.addView((View)this, (ViewGroup$LayoutParams)frameLayout$LayoutParams);
        if (frameLayout != null) {
            frameLayout.addView((View)frameLayout3, (ViewGroup$LayoutParams)frameLayout$LayoutParams2);
        }
        return frameLayout3;
    }
    
    private void closeResized() {
        NexageLog.d("OrmmaView", "closeResized");
        if (this.mListener != null) {
            this.mListener.onResizeClose();
        }
        final String string = "window.ormmaview.fireChangeEvent({ state: 'default', size: { width: " + this.mDefaultWidth + ", height: " + this.mDefaultHeight + "}});";
        Log.d("OrmmaView", "closeResized: injection: " + string);
        this.injectJavaScript(string);
        this.resetLayout();
    }
    
    private void doExpand(final Bundle bundle) {
        NexageLog.d("OrmmaView", "doExpand");
        this.setFocusableInTouchMode(true);
        final OrmmaController$Dimensions ormmaController$Dimensions = (OrmmaController$Dimensions)bundle.getParcelable("expand_dimensions");
        final String string = bundle.getString("expand_url");
        final OrmmaController$Properties ormmaController$Properties = (OrmmaController$Properties)bundle.getParcelable("expand_properties");
        if (URLUtil.isValidUrl(string)) {
            this.loadUrl(string);
        }
        final FrameLayout changeContentArea = this.changeContentArea(ormmaController$Dimensions);
        if (ormmaController$Properties.useBackground) {
            changeContentArea.setBackgroundColor(ormmaController$Properties.backgroundColor | 268435456 * (int)(255.0f * ormmaController$Properties.backgroundOpacity));
        }
        final String string2 = "window.ormmaview.fireChangeEvent({ state: 'expanded', size: { width: " + (int)(ormmaController$Dimensions.width / this.mDensity) + ", height: " + (int)(ormmaController$Dimensions.height / this.mDensity) + "} });";
        Log.d("OrmmaView", "doExpand: injection: " + string2);
        this.injectJavaScript(string2);
        if (this.mListener != null) {
            this.mListener.onExpand();
        }
        this.mViewState = OrmmaView$ViewState.EXPANDED;
    }
    
    private int getContentViewHeight() {
        final View viewById = this.getRootView().findViewById(16908290);
        if (viewById != null) {
            return viewById.getHeight();
        }
        return -1;
    }
    
    private void initialize() {
        NexageLog.d("OrmmaView", "OrmmaView initializing...");
        this.setFocusableInTouchMode(false);
        this.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                switch (motionEvent.getAction()) {
                    case 0:
                    case 1: {
                        if (!view.hasFocus()) {
                            view.requestFocus();
                            break;
                        }
                        break;
                    }
                }
                return false;
            }
        });
        this.setScrollContainer(false);
        this.setVerticalScrollBarEnabled(false);
        this.setHorizontalScrollBarEnabled(false);
        this.mGestureDetector = new GestureDetector(this.getContext(), (GestureDetector$OnGestureListener)new OrmmaView$ScrollEater(this));
        this.setBackgroundColor(0);
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)this.getContext().getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.mDensity = displayMetrics.density;
        this.bPageFinished = false;
        this.getSettings().setJavaScriptEnabled(true);
        this.addJavascriptInterface((Object)(this.mUtilityController = new OrmmaUtilityController(this, this.getContext())), "ORMMAUtilityControllerBridge");
        this.setWebViewClient(this.mWebViewClient);
        this.setWebChromeClient(this.mWebChromeClient);
        this.setScriptPath();
        this.mContentViewHeight = this.getContentViewHeight();
        this.getViewTreeObserver().addOnGlobalLayoutListener((ViewTreeObserver$OnGlobalLayoutListener)this);
    }
    
    private boolean isRegisteredProtocol(final Uri uri) {
        final String scheme = uri.getScheme();
        if (scheme == null) {
            return false;
        }
        final Iterator<String> iterator = this.registeredProtocols.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().equalsIgnoreCase(scheme)) {
                return true;
            }
        }
        return false;
    }
    
    private void loadInputStream(final InputStream p0, final String p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/nexage/ormma/view/OrmmaView.reset:()V
        //     4: aload_0        
        //     5: getfield        com/nexage/ormma/view/OrmmaView.mTimeOut:Lcom/nexage/ormma/view/OrmmaView$TimeOut;
        //     8: ifnull          19
        //    11: aload_0        
        //    12: getfield        com/nexage/ormma/view/OrmmaView.mTimeOut:Lcom/nexage/ormma/view/OrmmaView$TimeOut;
        //    15: invokevirtual   com/nexage/ormma/view/OrmmaView$TimeOut.cancel:()Z
        //    18: pop            
        //    19: aload_0        
        //    20: new             Lcom/nexage/ormma/view/OrmmaView$TimeOut;
        //    23: dup            
        //    24: aload_0        
        //    25: invokespecial   com/nexage/ormma/view/OrmmaView$TimeOut.<init>:(Lcom/nexage/ormma/view/OrmmaView;)V
        //    28: putfield        com/nexage/ormma/view/OrmmaView.mTimeOut:Lcom/nexage/ormma/view/OrmmaView$TimeOut;
        //    31: aload_0        
        //    32: aload_0        
        //    33: getfield        com/nexage/ormma/view/OrmmaView.mUtilityController:Lcom/nexage/ormma/controller/OrmmaUtilityController;
        //    36: aload_1        
        //    37: ldc             "_ormma_current"
        //    39: iconst_1       
        //    40: aload_2        
        //    41: getstatic       com/nexage/ormma/view/OrmmaView.mBridgeScriptPath:Ljava/lang/String;
        //    44: getstatic       com/nexage/ormma/view/OrmmaView.mScriptPath:Ljava/lang/String;
        //    47: invokevirtual   com/nexage/ormma/controller/OrmmaUtilityController.writeToDiskWrap:(Ljava/io/InputStream;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //    50: putfield        com/nexage/ormma/view/OrmmaView.mLocalFilePath:Ljava/lang/String;
        //    53: new             Ljava/lang/StringBuilder;
        //    56: dup            
        //    57: ldc_w           "file://"
        //    60: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    63: aload_0        
        //    64: getfield        com/nexage/ormma/view/OrmmaView.mLocalFilePath:Ljava/lang/String;
        //    67: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    70: getstatic       java/io/File.separator:Ljava/lang/String;
        //    73: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    76: ldc             "_ormma_current"
        //    78: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    81: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    84: astore          9
        //    86: new             Ljava/util/Timer;
        //    89: dup            
        //    90: invokespecial   java/util/Timer.<init>:()V
        //    93: aload_0        
        //    94: getfield        com/nexage/ormma/view/OrmmaView.mTimeOut:Lcom/nexage/ormma/view/OrmmaView$TimeOut;
        //    97: ldc2_w          2000
        //   100: ldc2_w          2000
        //   103: invokevirtual   java/util/Timer.schedule:(Ljava/util/TimerTask;JJ)V
        //   106: aload_2        
        //   107: ifnull          115
        //   110: aload_0        
        //   111: aload_2        
        //   112: invokevirtual   com/nexage/ormma/view/OrmmaView.injectJavaScript:(Ljava/lang/String;)V
        //   115: new             Ljava/io/File;
        //   118: dup            
        //   119: new             Ljava/lang/StringBuilder;
        //   122: dup            
        //   123: invokespecial   java/lang/StringBuilder.<init>:()V
        //   126: aload_0        
        //   127: getfield        com/nexage/ormma/view/OrmmaView.mLocalFilePath:Ljava/lang/String;
        //   130: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   133: getstatic       java/io/File.separator:Ljava/lang/String;
        //   136: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   139: ldc             "_ormma_current"
        //   141: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   144: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   147: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //   150: invokevirtual   java/io/File.exists:()Z
        //   153: ifeq            162
        //   156: aload_0        
        //   157: aload           9
        //   159: invokespecial   android/webkit/WebView.loadUrl:(Ljava/lang/String;)V
        //   162: aload_1        
        //   163: ifnull          170
        //   166: aload_1        
        //   167: invokevirtual   java/io/InputStream.close:()V
        //   170: return         
        //   171: astore          7
        //   173: aload           7
        //   175: invokevirtual   java/lang/IllegalStateException.printStackTrace:()V
        //   178: aload_1        
        //   179: ifnull          170
        //   182: aload_1        
        //   183: invokevirtual   java/io/InputStream.close:()V
        //   186: return         
        //   187: astore          8
        //   189: return         
        //   190: astore          5
        //   192: aload           5
        //   194: invokevirtual   java/io/IOException.printStackTrace:()V
        //   197: aload_1        
        //   198: ifnull          170
        //   201: aload_1        
        //   202: invokevirtual   java/io/InputStream.close:()V
        //   205: return         
        //   206: astore          6
        //   208: return         
        //   209: astore_3       
        //   210: aload_1        
        //   211: ifnull          218
        //   214: aload_1        
        //   215: invokevirtual   java/io/InputStream.close:()V
        //   218: aload_3        
        //   219: athrow         
        //   220: astore          10
        //   222: return         
        //   223: astore          4
        //   225: goto            218
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                             
        //  -----  -----  -----  -----  ---------------------------------
        //  31     106    171    190    Ljava/lang/IllegalStateException;
        //  31     106    190    209    Ljava/io/IOException;
        //  31     106    209    220    Any
        //  110    115    171    190    Ljava/lang/IllegalStateException;
        //  110    115    190    209    Ljava/io/IOException;
        //  110    115    209    220    Any
        //  115    162    171    190    Ljava/lang/IllegalStateException;
        //  115    162    190    209    Ljava/io/IOException;
        //  115    162    209    220    Any
        //  166    170    220    223    Ljava/lang/Exception;
        //  173    178    209    220    Any
        //  182    186    187    190    Ljava/lang/Exception;
        //  192    197    209    220    Any
        //  201    205    206    209    Ljava/lang/Exception;
        //  214    218    223    228    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 107, Size: 107
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void reset() {
        if (this.mViewState == OrmmaView$ViewState.EXPANDED) {
            this.closeExpanded();
        }
        else if (this.mViewState == OrmmaView$ViewState.RESIZED) {
            this.closeResized();
        }
        this.invalidate();
        this.mUtilityController.deleteOldAds();
        this.mUtilityController.stopAllListeners();
        this.resetLayout();
    }
    
    private void resetLayout() {
        final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
        if (this.bGotLayoutParams) {
            layoutParams.height = this.mInitLayoutHeight;
            layoutParams.width = this.mInitLayoutWidth;
        }
        this.setVisibility(0);
        this.requestLayout();
    }
    
    private void setScriptPath() {
        synchronized (this) {
            if (OrmmaView.mScriptPath == null) {
                OrmmaView.mScriptPath = this.mUtilityController.copyTextFromJarIntoAssetDir("/js/ormma.js", "js/ormma.js");
            }
            if (OrmmaView.mBridgeScriptPath == null) {
                OrmmaView.mBridgeScriptPath = this.mUtilityController.copyTextFromJarIntoAssetDir("/js/ormma_bridge.js", "js/ormma_bridge.js");
            }
        }
    }
    
    public void addJavascriptObject(final Object o, final String s) {
        this.addJavascriptInterface(o, s);
    }
    
    public void changeViewable(final boolean b) {
        NexageLog.d("OrmmaView", "changeViewable " + b);
        if (b) {
            this.getSettings().setRenderPriority(WebSettings$RenderPriority.HIGH);
            this.mHandler.sendMessage(this.mHandler.obtainMessage(1010));
        }
    }
    
    public void clearView() {
        this.reset();
        super.clearView();
    }
    
    public void close() {
        NexageLog.d("OrmmaView", "close");
        this.mHandler.sendEmptyMessage(1001);
    }
    
    protected void closeExpanded() {
        synchronized (this) {
            NexageLog.d("OrmmaView", "closeExpanded");
            this.setFocusableInTouchMode(false);
            this.resetContents();
            final String string = "window.ormmaview.fireChangeEvent({ state: 'default', size: { width: " + this.mDefaultWidth + ", height: " + this.mDefaultHeight + "}});";
            NexageLog.d("OrmmaView", "closeExpanded: injection: " + string);
            this.injectJavaScript(string);
            this.mViewState = OrmmaView$ViewState.DEFAULT;
            this.mHandler.sendEmptyMessage(1005);
            this.setVisibility(0);
            this.clearFocus();
        }
    }
    
    protected void closeOpened(final View view) {
        NexageLog.d("OrmmaView", "closeOpened");
        ((ViewGroup)((Activity)this.getContext()).getWindow().getDecorView()).removeView(view);
        this.requestLayout();
    }
    
    public void deregisterProtocol(final String s) {
        if (s != null) {
            this.registeredProtocols.remove(s.toLowerCase());
        }
    }
    
    public void dump() {
    }
    
    public void expand(final OrmmaController$Dimensions ormmaController$Dimensions, final String s, final OrmmaController$Properties ormmaController$Properties) {
        final Message obtainMessage = this.mHandler.obtainMessage(1004);
        final Bundle data = new Bundle();
        data.putParcelable("expand_dimensions", (Parcelable)ormmaController$Dimensions);
        data.putString("expand_url", s);
        data.putParcelable("expand_properties", (Parcelable)ormmaController$Properties);
        obtainMessage.setData(data);
        this.mHandler.sendMessage(obtainMessage);
    }
    
    public ConnectivityManager getConnectivityManager() {
        return (ConnectivityManager)this.getContext().getSystemService("connectivity");
    }
    
    OrmmaPlayer getPlayer() {
        if (OrmmaView.player != null) {
            OrmmaView.player.releasePlayer();
        }
        return OrmmaView.player = new OrmmaPlayer(this.getContext());
    }
    
    public String getSize() {
        return "{ width: " + (int)(this.getWidth() / this.mDensity) + ", height: " + (int)(this.getHeight() / this.mDensity) + "}";
    }
    
    public String getState() {
        return this.mViewState.toString().toLowerCase();
    }
    
    public void hide() {
        NexageLog.d("OrmmaView", "hide");
        this.mHandler.sendEmptyMessage(1002);
    }
    
    public void injectJavaScript(final String s) {
        if (s != null) {
            super.loadUrl("javascript:" + s);
        }
    }
    
    public boolean isExpanded() {
        return this.mViewState == OrmmaView$ViewState.EXPANDED;
    }
    
    public boolean isPageFinished() {
        return this.bPageFinished;
    }
    
    public void loadDataFromString(final String s) {
        this.loadInputStream(new ByteArrayInputStream(s.getBytes()), null);
    }
    
    public void loadFile(final File file, final String s) {
        try {
            this.loadInputStream(new FileInputStream(file), s);
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void loadUrl(final String s) {
        this.loadUrl(s, false, null);
    }
    
    public void loadUrl(final String s, final String s2) {
        this.loadUrl(s, false, s2);
    }
    
    public void loadUrl(final String s, final boolean b, final String s2) {
        if (URLUtil.isValidUrl(s)) {
            if (!b) {
                this.bPageFinished = false;
                try {
                    final URL url = new URL(s);
                    url.getFile();
                    InputStream inputStream;
                    if (s.startsWith("file:///android_asset/")) {
                        inputStream = this.getContext().getAssets().open(s.replace("file:///android_asset/", ""));
                    }
                    else {
                        inputStream = url.openStream();
                    }
                    this.loadInputStream(inputStream, s2);
                    return;
                }
                catch (IOException ex) {
                    ex.printStackTrace();
                    return;
                }
                catch (MalformedURLException ex2) {}
            }
            super.loadUrl(s);
        }
    }
    
    protected void onAttachedToWindow() {
        if (!this.bGotLayoutParams) {
            final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
            this.mInitLayoutHeight = layoutParams.height;
            this.mInitLayoutWidth = layoutParams.width;
            this.bGotLayoutParams = true;
        }
        super.onAttachedToWindow();
    }
    
    protected void onDetachedFromWindow() {
        this.mUtilityController.stopAllListeners();
        try {
            super.onDetachedFromWindow();
        }
        catch (Exception ex) {
            NexageLog.i("onDetachedFromWindow exception caught");
        }
    }
    
    public void onGlobalLayout() {
        boolean bKeyboardOut = this.bKeyboardOut;
        if (!this.bKeyboardOut && this.mContentViewHeight >= 0 && this.getContentViewHeight() >= 0 && this.mContentViewHeight != this.getContentViewHeight()) {
            bKeyboardOut = true;
            this.injectJavaScript("window.ormmaview.fireChangeEvent({ keyboardState: true});");
        }
        if (this.bKeyboardOut && this.mContentViewHeight >= 0 && this.getContentViewHeight() >= 0 && this.mContentViewHeight == this.getContentViewHeight()) {
            bKeyboardOut = false;
            this.injectJavaScript("window.ormmaview.fireChangeEvent({ keyboardState: false});");
        }
        if (this.mContentViewHeight < 0) {
            this.mContentViewHeight = this.getContentViewHeight();
        }
        this.bKeyboardOut = bKeyboardOut;
    }
    
    public boolean onTouchEvent(final MotionEvent motionEvent) {
        if (this.mGestureDetector.onTouchEvent(motionEvent)) {
            motionEvent.setAction(3);
        }
        return super.onTouchEvent(motionEvent);
    }
    
    public void onWindowFocusChanged(final boolean b) {
        if (b && NexageAdManager.getIsPopupDisplayed()) {
            NexageAdManager.setIsPopupDisplayed(false);
        }
        super.onWindowFocusChanged(b);
    }
    
    public void open(final String s, final boolean b, final boolean b2, final boolean b3) {
        if (s == null) {
            return;
        }
        if (s.indexOf("mm4rm") > 0) {
            this.mListener.onBillableEvent();
        }
        final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
        intent.addFlags(268435456);
        try {
            this.mContext.startActivity(intent);
        }
        catch (Exception ex) {
            NexageLog.w("Couldn't launch browser: " + ex.getMessage() + ":" + ex.toString());
        }
    }
    
    public void openMap(final String s, final boolean b) {
        Log.d("OrmmaView", "Opening Map Url " + s);
        final String convert = OrmmaUtils.convert(s.trim());
        if (!b) {
            return;
        }
        try {
            final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(convert));
            intent.setFlags(268435456);
            this.getContext().startActivity(intent);
        }
        catch (ActivityNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    
    public void playAudio(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final String s2, final String s3) {
        final OrmmaController$PlayerProperties ormmaController$PlayerProperties = new OrmmaController$PlayerProperties();
        ormmaController$PlayerProperties.setProperties(false, b, b2, b4, b3, s2, s3);
        final Bundle data = new Bundle();
        data.putString("action", OrmmaView$ACTION.PLAY_AUDIO.toString());
        data.putString("expand_url", s);
        data.putParcelable("player_properties", (Parcelable)ormmaController$PlayerProperties);
        if (ormmaController$PlayerProperties.isFullScreen()) {
            try {
                final Intent intent = new Intent(this.getContext(), (Class)OrmmaActionHandler.class);
                intent.putExtras(data);
                this.getContext().startActivity(intent);
                return;
            }
            catch (ActivityNotFoundException ex) {
                ex.printStackTrace();
                return;
            }
        }
        final Message obtainMessage = this.mHandler.obtainMessage(1008);
        obtainMessage.setData(data);
        this.mHandler.sendMessage(obtainMessage);
    }
    
    public void playAudioImpl(final Bundle bundle) {
        final OrmmaController$PlayerProperties ormmaController$PlayerProperties = (OrmmaController$PlayerProperties)bundle.getParcelable("player_properties");
        final String string = bundle.getString("expand_url");
        final OrmmaPlayer player = this.getPlayer();
        player.setPlayData(ormmaController$PlayerProperties, string);
        player.setLayoutParams(new ViewGroup$LayoutParams(1, 1));
        ((ViewGroup)this.getParent()).addView((View)player);
        player.playAudio();
    }
    
    public void playVideo(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final OrmmaController$Dimensions ormmaController$Dimensions, final String s2, final String s3) {
        final Message obtainMessage = this.mHandler.obtainMessage(1007);
        final OrmmaController$PlayerProperties ormmaController$PlayerProperties = new OrmmaController$PlayerProperties();
        ormmaController$PlayerProperties.setProperties(b, b2, b3, false, b4, s2, s3);
        final Bundle data = new Bundle();
        data.putString("expand_url", s);
        data.putString("action", OrmmaView$ACTION.PLAY_VIDEO.toString());
        data.putParcelable("player_properties", (Parcelable)ormmaController$PlayerProperties);
        if (ormmaController$Dimensions != null) {
            data.putParcelable("expand_dimensions", (Parcelable)ormmaController$Dimensions);
        }
        Label_0140: {
            if (!ormmaController$PlayerProperties.isFullScreen()) {
                break Label_0140;
            }
            try {
                final Intent intent = new Intent(this.getContext(), (Class)OrmmaActionHandler.class);
                intent.putExtras(data);
                this.getContext().startActivity(intent);
                return;
            }
            catch (ActivityNotFoundException ex) {
                ex.printStackTrace();
                return;
            }
        }
        if (ormmaController$Dimensions != null) {
            obtainMessage.setData(data);
            this.mHandler.sendMessage(obtainMessage);
        }
    }
    
    public void playVideoImpl(final Bundle bundle) {
        final OrmmaController$PlayerProperties ormmaController$PlayerProperties = (OrmmaController$PlayerProperties)bundle.getParcelable("player_properties");
        final OrmmaController$Dimensions ormmaController$Dimensions = (OrmmaController$Dimensions)bundle.getParcelable("expand_dimensions");
        final String string = bundle.getString("expand_url");
        final OrmmaPlayer player = this.getPlayer();
        player.setPlayData(ormmaController$PlayerProperties, string);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(ormmaController$Dimensions.width, ormmaController$Dimensions.height);
        layoutParams.topMargin = ormmaController$Dimensions.x;
        layoutParams.leftMargin = ormmaController$Dimensions.y;
        player.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        final FrameLayout frameLayout = new FrameLayout(this.getContext());
        frameLayout.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                Log.i("ORMMA", "background touch called");
                return true;
            }
        });
        frameLayout.setId(101);
        frameLayout.setPadding(ormmaController$Dimensions.x, ormmaController$Dimensions.y, 0, 0);
        ((FrameLayout)this.getRootView().findViewById(16908290)).addView((View)frameLayout, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-1, -1));
        frameLayout.addView((View)player);
        this.setVisibility(4);
        player.setListener(new OrmmaPlayerListener() {
            @Override
            public void onComplete() {
                final FrameLayout frameLayout = (FrameLayout)OrmmaView.this.getRootView().findViewById(101);
                ((ViewGroup)frameLayout.getParent()).removeView((View)frameLayout);
                OrmmaView.this.setVisibility(0);
            }
            
            @Override
            public void onError() {
                this.onComplete();
            }
            
            @Override
            public void onPrepared() {
            }
        });
        player.playVideo();
    }
    
    public void raiseError(final String s, final String s2) {
        final Message obtainMessage = this.mHandler.obtainMessage(1009);
        final Bundle data = new Bundle();
        data.putString("message", s);
        data.putString("action", s2);
        obtainMessage.setData(data);
        this.mHandler.sendMessage(obtainMessage);
    }
    
    public void registerProtocol(final String s) {
        if (s != null) {
            this.registeredProtocols.add(s.toLowerCase());
        }
    }
    
    public void removeListener() {
        this.mListener = null;
    }
    
    public void resetContents() {
        final FrameLayout frameLayout = (FrameLayout)this.getRootView().findViewById(16908290);
        final FrameLayout frameLayout2 = (FrameLayout)this.getRootView().findViewById(100);
        final FrameLayout frameLayout3 = (FrameLayout)this.getRootView().findViewById(101);
        if (frameLayout2 == null) {
            return;
        }
        final ViewGroup viewGroup = (ViewGroup)frameLayout2.getParent();
        frameLayout3.removeView((View)this);
        frameLayout.removeView((View)frameLayout3);
        this.resetLayout();
        try {
            viewGroup.addView((View)this, this.mIndex);
            viewGroup.removeView((View)frameLayout2);
            viewGroup.invalidate();
        }
        catch (Throwable t) {
            NexageLog.e("error in resetContents: " + t.getMessage());
        }
    }
    
    public void resize(final int n, final int n2) {
        NexageLog.d("OrmmaView", "resize");
        final Message obtainMessage = this.mHandler.obtainMessage(1000);
        final Bundle data = new Bundle();
        data.putInt("resize_width", n);
        data.putInt("resize_height", n2);
        obtainMessage.setData(data);
        this.mHandler.sendMessage(obtainMessage);
    }
    
    public WebBackForwardList restoreState(final Bundle bundle) {
        this.mLocalFilePath = bundle.getString("AD_PATH");
        super.loadUrl("file://" + this.mLocalFilePath + File.separator + "_ormma_current");
        return null;
    }
    
    public WebBackForwardList saveState(final Bundle bundle) {
        bundle.putString("AD_PATH", this.mLocalFilePath);
        return null;
    }
    
    public void setListener(final OrmmaView$OrmmaViewListener mListener) {
        this.mListener = mListener;
    }
    
    public void setMapAPIKey(final String mapAPIKey) {
        this.mapAPIKey = mapAPIKey;
    }
    
    public void setMaxSize(final int n, final int n2) {
        this.mUtilityController.setMaxSize(n, n2);
    }
    
    public void show() {
        NexageLog.d("OrmmaView", "show");
        this.mHandler.sendEmptyMessage(1003);
    }
}
