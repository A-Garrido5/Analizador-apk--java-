// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.ormma.controller;

import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.webkit.URLUtil;
import org.json.JSONObject;
import com.nexage.android.internal.NexageLog;
import android.util.Log;
import android.util.DisplayMetrics;
import android.content.Context;
import com.nexage.ormma.view.OrmmaView;
import android.view.WindowManager;
import com.nexage.ormma.controller.util.OrmmaConfigurationBroadcastReceiver;

public class OrmmaDisplayController extends OrmmaController
{
    private static final String LOG_TAG = "OrmmaDisplayController";
    private boolean bMaxSizeSet;
    private OrmmaConfigurationBroadcastReceiver mBroadCastReceiver;
    private float mDensity;
    private int mMaxHeight;
    private int mMaxWidth;
    private WindowManager mWindowManager;
    
    public OrmmaDisplayController(final OrmmaView ormmaView, final Context context) {
        super(ormmaView, context);
        this.bMaxSizeSet = false;
        this.mMaxWidth = -1;
        this.mMaxHeight = -1;
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        this.mWindowManager = (WindowManager)context.getSystemService("window");
        this.mWindowManager.getDefaultDisplay().getMetrics(displayMetrics);
        this.mDensity = displayMetrics.density;
    }
    
    private OrmmaController$Dimensions getDeviceDimensions(final OrmmaController$Dimensions ormmaController$Dimensions) {
        ormmaController$Dimensions.width *= (int)this.mDensity;
        ormmaController$Dimensions.height *= (int)this.mDensity;
        ormmaController$Dimensions.x *= (int)this.mDensity;
        ormmaController$Dimensions.y *= (int)this.mDensity;
        if (ormmaController$Dimensions.height < 0) {
            ormmaController$Dimensions.height = this.mOrmmaView.getHeight();
        }
        if (ormmaController$Dimensions.width < 0) {
            ormmaController$Dimensions.width = this.mOrmmaView.getWidth();
        }
        final int[] array = new int[2];
        this.mOrmmaView.getLocationInWindow(array);
        if (ormmaController$Dimensions.x < 0) {
            ormmaController$Dimensions.x = array[0];
        }
        if (ormmaController$Dimensions.y < 0) {
            ormmaController$Dimensions.y = 0 + array[1];
        }
        return ormmaController$Dimensions;
    }
    
    public void close() {
        Log.d("OrmmaDisplayController", "close");
        this.mOrmmaView.close();
    }
    
    public String dimensions() {
        return "{ \"top\" :" + (int)(this.mOrmmaView.getTop() / this.mDensity) + ",\"left\" :" + (int)(this.mOrmmaView.getLeft() / this.mDensity) + ",\"bottom\" :" + (int)(this.mOrmmaView.getBottom() / this.mDensity) + ",\"right\" :" + (int)(this.mOrmmaView.getRight() / this.mDensity) + "}";
    }
    
    public void expand(final String s, final String s2, final String s3) {
        NexageLog.d("OrmmaDisplayController", "expand: dimensions: " + s + " url: " + s2 + " properties: " + s3);
        try {
            this.mOrmmaView.expand(this.getDeviceDimensions((OrmmaController$Dimensions)OrmmaController.getFromJSON(new JSONObject(s), OrmmaController$Dimensions.class)), s2, (OrmmaController$Properties)OrmmaController.getFromJSON(new JSONObject(s3), OrmmaController$Properties.class));
        }
        catch (Exception ex) {
            NexageLog.v("OrmmaDisplayController", "expand failed: " + ex.getLocalizedMessage());
        }
    }
    
    public String getMaxSize() {
        if (this.bMaxSizeSet) {
            return "{ width: " + this.mMaxWidth + ", height: " + this.mMaxHeight + "}";
        }
        return this.getScreenSize();
    }
    
    public int getOrientation() {
        final int rotation = this.mWindowManager.getDefaultDisplay().getRotation();
        int n = -1;
        switch (rotation) {
            case 0: {
                n = 0;
                break;
            }
            case 1: {
                n = 90;
                break;
            }
            case 2: {
                n = 180;
                break;
            }
            case 3: {
                n = 270;
                break;
            }
        }
        Log.d("OrmmaDisplayController", "getOrientation: " + n);
        return n;
    }
    
    public String getScreenSize() {
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        this.mWindowManager.getDefaultDisplay().getMetrics(displayMetrics);
        return "{ width: " + (int)(displayMetrics.widthPixels / displayMetrics.density) + ", height: " + (int)(displayMetrics.heightPixels / displayMetrics.density) + "}";
    }
    
    public String getSize() {
        return this.mOrmmaView.getSize();
    }
    
    public void hide() {
        Log.d("OrmmaDisplayController", "hide");
        this.mOrmmaView.hide();
    }
    
    public boolean isVisible() {
        return this.mOrmmaView.getVisibility() == 0;
    }
    
    public void logHTML(final String s) {
        Log.d("OrmmaDisplayController", s);
    }
    
    public void onOrientationChanged(final int n) {
        final String string = "window.ormmaview.fireChangeEvent({ orientation: " + n + "});";
        Log.d("OrmmaDisplayController", string);
        this.mOrmmaView.injectJavaScript(string);
    }
    
    public void open(final String s, final boolean b, final boolean b2, final boolean b3) {
        Log.d("OrmmaDisplayController", "open: url: " + s + " back: " + b + " forward: " + b2 + " refresh: " + b3);
        if (!URLUtil.isValidUrl(s)) {
            this.mOrmmaView.raiseError("Invalid url", "open");
            return;
        }
        this.mOrmmaView.open(s, b, b2, b3);
    }
    
    public void openMap(final String s, final boolean b) {
        Log.d("OrmmaDisplayController", "openMap: url: " + s);
        this.mOrmmaView.openMap(s, b);
    }
    
    public void playAudio(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final String s2, final String s3) {
        Log.d("OrmmaDisplayController", "playAudio: url: " + s + " autoPlay: " + b + " controls: " + b2 + " loop: " + b3 + " position: " + b4 + " startStyle: " + s2 + " stopStyle: " + s3);
        if (!URLUtil.isValidUrl(s)) {
            this.mOrmmaView.raiseError("Invalid url", "playAudio");
            return;
        }
        this.mOrmmaView.playAudio(s, b, b2, b3, b4, s2, s3);
    }
    
    public void playVideo(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final int[] array, final String s2, final String s3) {
        Log.d("OrmmaDisplayController", "playVideo: url: " + s + " audioMuted: " + b + " autoPlay: " + b2 + " controls: " + b3 + " loop: " + b4 + " x: " + array[0] + " y: " + array[1] + " width: " + array[2] + " height: " + array[3] + " startStyle: " + s2 + " stopStyle: " + s3);
        final int n = array[0];
        OrmmaController$Dimensions deviceDimensions = null;
        if (n != -1) {
            final OrmmaController$Dimensions ormmaController$Dimensions = new OrmmaController$Dimensions();
            ormmaController$Dimensions.x = array[0];
            ormmaController$Dimensions.y = array[1];
            ormmaController$Dimensions.width = array[2];
            ormmaController$Dimensions.height = array[3];
            deviceDimensions = this.getDeviceDimensions(ormmaController$Dimensions);
        }
        if (!URLUtil.isValidUrl(s)) {
            this.mOrmmaView.raiseError("Invalid url", "playVideo");
            return;
        }
        this.mOrmmaView.playVideo(s, b, b2, b3, b4, deviceDimensions, s2, s3);
    }
    
    public void resize(final int n, final int n2) {
        Log.d("OrmmaDisplayController", "resize: width: " + n + " height: " + n2);
        if ((this.mMaxHeight > 0 && n2 > this.mMaxHeight) || (this.mMaxWidth > 0 && n > this.mMaxWidth)) {
            this.mOrmmaView.raiseError("Maximum size exceeded", "resize");
            return;
        }
        this.mOrmmaView.resize((int)(this.mDensity * n), (int)(this.mDensity * n2));
    }
    
    public void setMaxSize(final int mMaxWidth, final int mMaxHeight) {
        this.bMaxSizeSet = true;
        this.mMaxWidth = mMaxWidth;
        this.mMaxHeight = mMaxHeight;
    }
    
    public void show() {
        Log.d("OrmmaDisplayController", "show");
        this.mOrmmaView.show();
    }
    
    public void startConfigurationListener() {
        try {
            if (this.mBroadCastReceiver == null) {
                this.mBroadCastReceiver = new OrmmaConfigurationBroadcastReceiver(this);
                NexageLog.d("startConfigurationListener, creating new broadcast receiver");
            }
            else {
                this.mContext.unregisterReceiver((BroadcastReceiver)this.mBroadCastReceiver);
                NexageLog.d("startConfigurationListener, unregistering broadcast receiver");
            }
            this.mContext.registerReceiver((BroadcastReceiver)this.mBroadCastReceiver, new IntentFilter("android.intent.action.CONFIGURATION_CHANGED"));
        }
        catch (Exception ex) {}
    }
    
    @Override
    public void stopAllListeners() {
        this.stopConfigurationListener();
        this.mBroadCastReceiver = null;
    }
    
    public void stopConfigurationListener() {
        try {
            this.mContext.unregisterReceiver((BroadcastReceiver)this.mBroadCastReceiver);
            NexageLog.d("stopConfigurationListener, unregistering broadcast receiver");
        }
        catch (Exception ex) {}
    }
}
