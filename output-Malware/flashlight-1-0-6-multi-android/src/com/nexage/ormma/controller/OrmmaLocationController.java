// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.ormma.controller;

import java.util.Iterator;
import android.util.Log;
import android.location.Location;
import android.content.Context;
import com.nexage.ormma.view.OrmmaView;
import android.location.LocationManager;
import com.nexage.ormma.controller.listeners.LocListener;

public class OrmmaLocationController extends OrmmaController
{
    private static final String LOG_TAG = "OrmmaLocationController";
    final int INTERVAL;
    private boolean allowLocationServices;
    private boolean hasPermission;
    private LocListener mGps;
    private int mLocListenerCount;
    private LocationManager mLocationManager;
    private LocListener mNetwork;
    
    public OrmmaLocationController(final OrmmaView ormmaView, final Context context) {
        super(ormmaView, context);
        this.hasPermission = false;
        this.INTERVAL = 1000;
        this.allowLocationServices = false;
        try {
            this.mLocationManager = (LocationManager)context.getSystemService("location");
            if (this.mLocationManager.getProvider("gps") != null) {
                this.mGps = new LocListener(context, 1000, this, "gps");
            }
            if (this.mLocationManager.getProvider("network") != null) {
                this.mNetwork = new LocListener(context, 1000, this, "network");
            }
            this.hasPermission = true;
        }
        catch (SecurityException ex) {}
    }
    
    private static String formatLocation(final Location location) {
        return "{ lat: " + location.getLatitude() + ", lon: " + location.getLongitude() + ", acc: " + location.getAccuracy() + "}";
    }
    
    public void allowLocationServices(final boolean allowLocationServices) {
        this.allowLocationServices = allowLocationServices;
    }
    
    public boolean allowLocationServices() {
        return this.allowLocationServices;
    }
    
    public void fail() {
        Log.e("OrmmaLocationController", "Location can't be determined");
        this.mOrmmaView.injectJavaScript("window.ormmaview.fireErrorEvent(\"Location cannot be identified\", \"OrmmaLocationController\")");
    }
    
    public String getLocation() {
        Log.d("OrmmaLocationController", "getLocation: hasPermission: " + this.hasPermission);
        if (this.hasPermission) {
            final Iterator<String> iterator = this.mLocationManager.getProviders(true).iterator();
            Location lastKnownLocation = null;
            while (iterator.hasNext()) {
                lastKnownLocation = this.mLocationManager.getLastKnownLocation((String)iterator.next());
                if (lastKnownLocation != null) {
                    break;
                }
            }
            Log.d("OrmmaLocationController", "getLocation: " + lastKnownLocation);
            if (lastKnownLocation != null) {
                return formatLocation(lastKnownLocation);
            }
        }
        return null;
    }
    
    public void startLocationListener() {
        if (this.mLocListenerCount == 0) {
            if (this.mNetwork != null) {
                this.mNetwork.start();
            }
            if (this.mGps != null) {
                this.mGps.start();
            }
        }
        ++this.mLocListenerCount;
    }
    
    @Override
    public void stopAllListeners() {
        this.mLocListenerCount = 0;
        while (true) {
            try {
                this.mGps.stop();
                try {
                    this.mNetwork.stop();
                }
                catch (Exception ex) {}
            }
            catch (Exception ex2) {
                continue;
            }
            break;
        }
    }
    
    public void stopLocationListener() {
        --this.mLocListenerCount;
        if (this.mLocListenerCount == 0) {
            if (this.mNetwork != null) {
                this.mNetwork.stop();
            }
            if (this.mGps != null) {
                this.mGps.stop();
            }
        }
    }
    
    public void success(final Location location) {
        final String string = "window.ormmaview.fireChangeEvent({ location: " + formatLocation(location) + "})";
        Log.d("OrmmaLocationController", string);
        this.mOrmmaView.injectJavaScript(string);
    }
}
