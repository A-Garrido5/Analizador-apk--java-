// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.internal;

import com.nexage.android.interstitial.InterstitialLayout;
import android.view.View;
import android.os.Handler;
import android.app.Activity;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;
import android.content.Intent;
import android.net.Uri;
import android.telephony.TelephonyManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo$State;
import android.net.ConnectivityManager;
import java.util.Iterator;
import android.content.Context;
import android.location.LocationManager;
import android.location.Location;

public abstract class NexageContext
{
    public static final int CHECK_LOCATION_UPDATE_INTERVAL = 120000;
    private static NexageContext$HashedIDs hashedIDs;
    private static Location lastLocationObtained;
    private static LocationManager locationManager;
    public static Context s_Context;
    public static float s_Dip2Px;
    public static int s_LandscapeHeight;
    public static int s_LandscapeWidth;
    private static String s_Operator;
    public static volatile String s_UserAgent;
    private static long timeLastLocationObtained;
    
    public static Location getCoordinates() {
        if (NexageContext.timeLastLocationObtained > System.currentTimeMillis() - 120000L) {
            return NexageContext.lastLocationObtained;
        }
        NexageLog.d("getCoordinates start");
        long n = Long.MIN_VALUE;
        if (NexageContext.locationManager == null) {
            NexageContext.locationManager = (LocationManager)NexageContext.s_Context.getSystemService("location");
        }
        final Iterator<String> iterator = (Iterator<String>)NexageContext.locationManager.getAllProviders().iterator();
        float n2 = Float.MAX_VALUE;
        Location lastLocationObtained = null;
    Label_0241_Outer:
        while (iterator.hasNext()) {
            final String s = iterator.next();
            if (!s.equals("gps")) {
                s.equals("passive");
            }
            final Location lastKnownLocation = NexageContext.locationManager.getLastKnownLocation(s);
            while (true) {
                Label_0265: {
                    if (lastKnownLocation == null) {
                        break Label_0265;
                    }
                    final float accuracy = lastKnownLocation.getAccuracy();
                    long time = lastKnownLocation.getTime();
                    if (time > System.currentTimeMillis() && s.equals("gps")) {
                        time -= 86400000L;
                    }
                    if (accuracy < n2) {
                        NexageLog.d("getCoordinates 1: " + s);
                        n = time;
                        n2 = accuracy;
                        lastLocationObtained = lastKnownLocation;
                        continue Label_0241_Outer;
                    }
                    if (n2 != Float.MAX_VALUE || time <= n) {
                        break Label_0265;
                    }
                    NexageLog.d("getCoordinates 2: " + s);
                    final long n3 = time;
                    final Location location = lastKnownLocation;
                    lastLocationObtained = location;
                    n = n3;
                    continue Label_0241_Outer;
                }
                final long n3 = n;
                final Location location = lastLocationObtained;
                continue;
            }
        }
        NexageContext.lastLocationObtained = lastLocationObtained;
        NexageContext.timeLastLocationObtained = System.currentTimeMillis();
        return lastLocationObtained;
    }
    
    private static NexageContext$HashedIDs getHashedIDs() {
        if (NexageContext.hashedIDs == null) {
            NexageContext.hashedIDs = new NexageContext$HashedIDs(null);
        }
        return NexageContext.hashedIDs;
    }
    
    public static String getMccmnc() {
        return getHashedIDs().mccmnc;
    }
    
    public static int getNetType() {
        try {
            final ConnectivityManager connectivityManager = (ConnectivityManager)NexageContext.s_Context.getSystemService("connectivity");
            if (connectivityManager != null) {
                final NetworkInfo networkInfo = connectivityManager.getNetworkInfo(1);
                if (networkInfo != null) {
                    final NetworkInfo$State state = networkInfo.getState();
                    if (state == NetworkInfo$State.CONNECTED || state == NetworkInfo$State.CONNECTING) {
                        return 0;
                    }
                }
            }
            return 1;
        }
        catch (Exception ex) {
            NexageLog.w("Couldn't detect network type (wifi/mobile)");
            ex.printStackTrace();
            return 1;
        }
    }
    
    public static String getOperator() {
        if (NexageContext.s_Operator == null) {
            NexageContext.s_Operator = ((TelephonyManager)NexageContext.s_Context.getSystemService("phone")).getNetworkOperatorName();
        }
        return NexageContext.s_Operator;
    }
    
    public static void lauchBrowser(final String s, final String s2) {
        if (s == null) {
            return;
        }
        final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
        intent.addFlags(268435456);
        try {
            NexageContext.s_Context.startActivity(intent);
        }
        catch (Exception ex) {
            NexageLog.w(s2, "Launch browser: " + ex.getMessage() + ":" + ex.toString());
        }
    }
    
    static String md5(final String s) {
        if (s != null) {
            try {
                if (s.length() > 0) {
                    final MessageDigest instance = MessageDigest.getInstance("MD5");
                    instance.update(s.getBytes());
                    final byte[] digest = instance.digest();
                    final StringBuffer sb = new StringBuffer();
                    final char[] array = new char[2];
                    for (int i = 0; i < digest.length; ++i) {
                        sb.append(Ad.byteToHex(0xFF & digest[i], array));
                    }
                    return sb.toString();
                }
            }
            catch (NoSuchAlgorithmException ex) {
                ex.printStackTrace();
            }
        }
        return null;
    }
    
    static String sha1(final String s) {
        if (s != null) {
            try {
                if (s.length() > 0) {
                    final MessageDigest instance = MessageDigest.getInstance("SHA-1");
                    instance.update(s.getBytes());
                    final byte[] digest = instance.digest();
                    final StringBuffer sb = new StringBuffer();
                    final char[] array = new char[2];
                    for (int i = 0; i < digest.length; ++i) {
                        sb.append(Ad.byteToHex(0xFF & digest[i], array));
                    }
                    return sb.toString();
                }
            }
            catch (NoSuchAlgorithmException ex) {
                ex.printStackTrace();
            }
        }
        return null;
    }
    
    public abstract void SDKAdVisible(final boolean p0);
    
    public void clicked() {
    }
    
    public abstract void failed();
    
    public abstract Activity getActivity();
    
    public Handler getHandler() {
        return null;
    }
    
    public abstract String getPosition();
    
    public abstract View getView();
    
    public abstract InterstitialLayout interstitialLayout();
    
    public abstract boolean mm4rmExpanded(final Ad p0);
    
    boolean mm4rmLock(final Ad ad) {
        return true;
    }
    
    public abstract void mm4rmRestored(final Ad p0);
    
    public abstract void nudgeAdFetcher();
    
    public abstract boolean readyForAdFetch();
    
    public abstract boolean showAd(final Ad p0);
    
    public abstract boolean visible();
}
