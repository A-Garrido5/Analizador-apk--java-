// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.internal;

import com.nexage.android.NexageAdView;
import android.view.animation.Interpolator;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.TranslateAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.util.AttributeSet;
import android.view.View;
import android.content.Context;
import android.widget.ViewFlipper;

public class AnimatedSwitcher extends ViewFlipper implements NexageAdSwitcher
{
    private final Context context;
    private View current;
    
    public AnimatedSwitcher(final Context context) {
        super(context, (AttributeSet)null);
        this.context = context;
        final Animation loadAnimation = AnimationUtils.loadAnimation(context, 17432576);
        loadAnimation.setDuration(1000L);
        final Animation loadAnimation2 = AnimationUtils.loadAnimation(context, 17432577);
        loadAnimation2.setDuration(1000L);
        this.setInAnimation(loadAnimation);
        this.setOutAnimation(loadAnimation2);
        this.setAnimateFirstView(true);
    }
    
    private Animation inFromLeftAnimation() {
        final TranslateAnimation translateAnimation = new TranslateAnimation(2, -1.0f, 2, 0.0f, 2, 0.0f, 2, 0.0f);
        ((Animation)translateAnimation).setDuration(500L);
        ((Animation)translateAnimation).setInterpolator((Interpolator)new AccelerateInterpolator());
        return (Animation)translateAnimation;
    }
    
    private Animation inFromRightAnimation() {
        final TranslateAnimation translateAnimation = new TranslateAnimation(2, 1.0f, 2, 0.0f, 2, 0.0f, 2, 0.0f);
        ((Animation)translateAnimation).setDuration(500L);
        ((Animation)translateAnimation).setInterpolator((Interpolator)new AccelerateInterpolator());
        return (Animation)translateAnimation;
    }
    
    private Animation outToLeftAnimation() {
        final TranslateAnimation translateAnimation = new TranslateAnimation(2, 0.0f, 2, -1.0f, 2, 0.0f, 2, 0.0f);
        ((Animation)translateAnimation).setDuration(500L);
        ((Animation)translateAnimation).setInterpolator((Interpolator)new AccelerateInterpolator());
        return (Animation)translateAnimation;
    }
    
    private Animation outToRightAnimation() {
        final TranslateAnimation translateAnimation = new TranslateAnimation(2, 0.0f, 2, 1.0f, 2, 0.0f, 2, 0.0f);
        ((Animation)translateAnimation).setDuration(500L);
        ((Animation)translateAnimation).setInterpolator((Interpolator)new AccelerateInterpolator());
        return (Animation)translateAnimation;
    }
    
    public void addAdView(final View current) {
        if ((!(current instanceof OrmmaAdLayout) || (!((OrmmaAdLayout)current).isBlock() && NexageGlobalHandler.isGlobalAdServingEnabled())) && this.current != current) {
            if (this.current != null) {
                if (this.current instanceof OrmmaAdLayout) {
                    ((OrmmaAdLayout)this.current).clearOrmmaView();
                }
                this.removeView(this.current);
            }
            this.addView(this.current = current);
            final NexageAdView nexageAdView = (NexageAdView)this.getParent();
            if (nexageAdView != null) {
                nexageAdView.onDisplay();
            }
            this.showNext();
        }
    }
    
    public boolean animated() {
        return true;
    }
    
    public View getCurrentView() {
        return this.current;
    }
    
    protected void onDetachedFromWindow() {
        try {
            super.onDetachedFromWindow();
        }
        catch (Exception ex) {
            NexageLog.i("", "onDetachedFromWindow exception caught");
        }
        catch (IllegalArgumentException ex2) {}
        finally {
            super.stopFlipping();
        }
    }
    
    public View removeAdView() {
        if (this.current != null) {
            this.removeView(this.current);
        }
        final View current = this.current;
        this.current = null;
        return current;
    }
    
    public void setAnimationType(final String s) {
        if (s.equalsIgnoreCase("slide_in_out")) {
            final Animation loadAnimation = AnimationUtils.loadAnimation(this.context, 17432578);
            loadAnimation.setDuration(1000L);
            final Animation loadAnimation2 = AnimationUtils.loadAnimation(this.context, 17432579);
            loadAnimation2.setDuration(1000L);
            this.setInAnimation(loadAnimation);
            this.setOutAnimation(loadAnimation2);
        }
        else {
            if (s.equalsIgnoreCase("fade_in_out")) {
                final Animation loadAnimation3 = AnimationUtils.loadAnimation(this.context, 17432576);
                loadAnimation3.setDuration(1000L);
                final Animation loadAnimation4 = AnimationUtils.loadAnimation(this.context, 17432577);
                loadAnimation4.setDuration(1000L);
                this.setInAnimation(loadAnimation3);
                this.setOutAnimation(loadAnimation4);
                return;
            }
            if (s.equalsIgnoreCase("left_in_right_out")) {
                final Animation inFromLeftAnimation = this.inFromLeftAnimation();
                inFromLeftAnimation.setDuration(1000L);
                final Animation outToRightAnimation = this.outToRightAnimation();
                outToRightAnimation.setDuration(1000L);
                this.setInAnimation(inFromLeftAnimation);
                this.setOutAnimation(outToRightAnimation);
                return;
            }
            if (s.equalsIgnoreCase("right_in_left_out")) {
                final Animation inFromRightAnimation = this.inFromRightAnimation();
                inFromRightAnimation.setDuration(1000L);
                final Animation outToLeftAnimation = this.outToLeftAnimation();
                outToLeftAnimation.setDuration(1000L);
                this.setInAnimation(inFromRightAnimation);
                this.setOutAnimation(outToLeftAnimation);
            }
        }
    }
    
    public void setVisibility(final int n) {
        super.setVisibility(n);
        if (this.current != null) {
            if (n != 4) {
                this.current.setVisibility(n);
                return;
            }
            this.current.setVisibility(8);
        }
    }
}
