// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.internal;

import android.app.Activity;
import java.util.TimerTask;
import android.os.Parcelable;
import java.io.Serializable;
import android.content.Intent;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import android.os.ResultReceiver;
import java.util.Map;
import android.os.Handler;
import android.content.pm.ApplicationInfo;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.Timer;
import java.util.List;
import java.lang.reflect.Method;
import android.content.Context;
import java.lang.reflect.Constructor;

public class TRUSTeManager
{
    private static String CONSTANT_APP_INFO;
    private static String CONSTANT_ERROR_MESSAGE;
    private static String CONSTANT_PROD_ENV;
    private static String CONSTANT_RECEIVER_KEY;
    private static int CONSTANT_STATUS_FINISHED = 0;
    private static String CONSTANT_TPID;
    private static final String TAG = "TRUSTeManager";
    private static final long TIMEOUT_DELAY = 5000L;
    private static TRUSTeManager instance;
    private Class AppInfoClass;
    private Constructor AppInfoConstructor;
    private Class ReceiverClass;
    private Class ServiceResultReceiverClass;
    private Constructor ServiceResultReceiverConstructor;
    private Class TPIDServiceClass;
    private Class TRUSTeSDKClass;
    private Class TRUSTeSDKConstantsClass;
    private Constructor TRUSTeSDKConstructor;
    private String accessToken;
    private String appID;
    private Context context;
    private Method getTPIDMethod;
    private boolean gotFirstTPID;
    private boolean isInitialized;
    private boolean isProcessing;
    private List listeners;
    private String refreshToken;
    private Method setReceiverMethod;
    private Object teSDK;
    private Timer timeoutTimer;
    
    static {
        TRUSTeManager.instance = null;
    }
    
    private TRUSTeManager(final Context context) {
        this.listeners = new ArrayList();
        this.context = context;
    }
    
    private void broadcast(final boolean b, final String s) {
        NexageLog.d("TRUSTeManager", "broadcast " + b + " " + s);
        for (int size = this.listeners.size(), i = 0; i < size; ++i) {
            final TRUSTeManager$Listener trusTeManager$Listener = this.listeners.get(i);
            if (b) {
                trusTeManager$Listener.onReceiveTPID(s);
            }
            else {
                trusTeManager$Listener.onFailedToReceiveTPID();
            }
        }
        this.isProcessing = false;
    }
    
    public static TRUSTeManager getInstance(final Context context) {
        if (TRUSTeManager.instance == null) {
            TRUSTeManager.instance = new TRUSTeManager(context);
        }
        return TRUSTeManager.instance;
    }
    
    private boolean initMetadata() {
        NexageLog.d("TRUSTeManager", "initMetadata");
        boolean b2;
        try {
            final ApplicationInfo applicationInfo = this.context.getPackageManager().getApplicationInfo(this.context.getPackageName(), 128);
            boolean b = false;
            if (applicationInfo == null) {
                return b;
            }
            if (applicationInfo.metaData == null) {
                return false;
            }
            this.accessToken = applicationInfo.metaData.getString("TRUSTE_ACCESS_TOKEN");
            this.refreshToken = applicationInfo.metaData.getString("TRUSTE_REFRESH_TOKEN");
            this.appID = applicationInfo.metaData.getString("TRUSTE_APP_ID");
            if (TextUtils.isEmpty((CharSequence)this.accessToken) && TextUtils.isEmpty((CharSequence)this.refreshToken)) {
                final boolean empty = TextUtils.isEmpty((CharSequence)this.appID);
                b = false;
                if (empty) {
                    return b;
                }
            }
            b2 = true;
            if (TextUtils.isEmpty((CharSequence)this.accessToken)) {
                NexageLog.d("TRUSTeManager", "access token is unavailable");
                b2 = false;
            }
            if (TextUtils.isEmpty((CharSequence)this.refreshToken)) {
                NexageLog.d("TRUSTeManager", "refresh token is unavailable");
                b2 = false;
            }
            if (TextUtils.isEmpty((CharSequence)this.appID)) {
                NexageLog.d("TRUSTeManager", "app ID is unavailable");
                return false;
            }
        }
        catch (Exception ex) {
            NexageLog.d("TRUSTeManager", "initMetadata failed " + ex.getLocalizedMessage());
            return false;
        }
        return b2;
    }
    
    private boolean initReflection() {
        NexageLog.d("TRUSTeManager", "initReflection");
        try {
            this.ReceiverClass = Class.forName("com.truste.mobile.sdk.ServiceResultReceiver$Receiver");
            this.ServiceResultReceiverClass = Class.forName("com.truste.mobile.sdk.ServiceResultReceiver");
            this.ServiceResultReceiverConstructor = this.ServiceResultReceiverClass.getConstructor(Handler.class);
            this.setReceiverMethod = this.ServiceResultReceiverClass.getMethod("setReceiver", this.ReceiverClass);
            this.TPIDServiceClass = Class.forName("com.truste.mobile.sdk.TPIDService");
            this.AppInfoClass = Class.forName("com.truste.mobile.sdk.AppInfo");
            this.AppInfoConstructor = this.AppInfoClass.getConstructor(String.class, String.class, String.class, String.class, Map.class, String.class);
            this.TRUSTeSDKClass = Class.forName("com.truste.mobile.sdk.TRUSTeSDK");
            this.TRUSTeSDKConstructor = this.TRUSTeSDKClass.getConstructor(Context.class, this.AppInfoClass);
            this.getTPIDMethod = this.TRUSTeSDKClass.getMethod("getTPID", (Class[])new Class[0]);
            this.TRUSTeSDKConstantsClass = Class.forName("com.truste.mobile.sdk.TRUSTeSDKConstants");
            TRUSTeManager.CONSTANT_APP_INFO = (String)this.TRUSTeSDKConstantsClass.getField("APP_INFO").get(null);
            TRUSTeManager.CONSTANT_ERROR_MESSAGE = (String)this.TRUSTeSDKConstantsClass.getField("ERROR_MESSAGE").get(null);
            TRUSTeManager.CONSTANT_PROD_ENV = (String)this.TRUSTeSDKConstantsClass.getField("PROD_ENV").get(null);
            TRUSTeManager.CONSTANT_RECEIVER_KEY = (String)this.TRUSTeSDKConstantsClass.getField("RECEIVER_KEY").get(null);
            TRUSTeManager.CONSTANT_STATUS_FINISHED = this.TRUSTeSDKConstantsClass.getField("STATUS_FINISHED").getInt(null);
            TRUSTeManager.CONSTANT_TPID = (String)this.TRUSTeSDKConstantsClass.getField("TPID").get(null);
            return true;
        }
        catch (Exception ex) {
            NexageLog.d("TRUSTeManager", "initReflection failed " + ex.getLocalizedMessage());
            return false;
        }
    }
    
    private void initTRUSTeSDK() {
        NexageLog.d("TRUSTeManager", "initTRUSTeSDK");
        try {
            final Serializable instance = this.AppInfoConstructor.newInstance(this.accessToken, this.refreshToken, this.appID, "", null, TRUSTeManager.CONSTANT_PROD_ENV);
            this.teSDK = this.TRUSTeSDKConstructor.newInstance(this.context.getApplicationContext(), instance);
            final ResultReceiver resultReceiver = this.ServiceResultReceiverConstructor.newInstance(new Handler());
            this.setReceiverMethod.invoke(resultReceiver, Proxy.newProxyInstance(this.ReceiverClass.getClassLoader(), new Class[] { this.ReceiverClass }, new TRUSTeManager$ReceiverHandler(this, null)));
            final Intent intent = new Intent(this.context, this.TPIDServiceClass);
            intent.putExtra(TRUSTeManager.CONSTANT_APP_INFO, (Serializable)instance);
            intent.putExtra(TRUSTeManager.CONSTANT_RECEIVER_KEY, (Parcelable)resultReceiver);
            this.context.startService(intent);
            this.isInitialized = true;
            this.startTimeoutTimer();
        }
        catch (Exception ex) {
            NexageLog.d("TRUSTeManager", "initTRUSTeSDK failed " + ex.getLocalizedMessage());
        }
    }
    
    private void startTimeoutTimer() {
        synchronized (this) {
            this.stopTimeoutTimer();
            NexageLog.d("TRUSTeManager", "startTimeoutTimer");
            (this.timeoutTimer = new Timer()).schedule(new TimerTask() {
                @Override
                public void run() {
                    NexageLog.d("TRUSTeManager", "timeout");
                    TRUSTeManager.this.broadcast(false, null);
                }
            }, 5000L);
        }
    }
    
    private void stopTimeoutTimer() {
        synchronized (this) {
            NexageLog.d("TRUSTeManager", "stopTimeoutTimer");
            if (this.timeoutTimer != null) {
                this.timeoutTimer.cancel();
                this.timeoutTimer = null;
            }
        }
    }
    
    public void addListener(final TRUSTeManager$Listener trusTeManager$Listener) {
        synchronized (this) {
            NexageLog.d("TRUSTeManager", "addListener");
            for (int size = this.listeners.size(), i = 0; i < size; ++i) {
                if (this.listeners.get(i) == trusTeManager$Listener) {
                    return;
                }
            }
            NexageLog.d("TRUSTeManager", "adding...");
            this.listeners.add(trusTeManager$Listener);
        }
    }
    
    public void getTRUSTeTPID() {
        while (true) {
            Label_0056: {
                synchronized (this) {
                    NexageLog.d("TRUSTeManager", "getTRUSTeTPID");
                    if (this.isProcessing) {
                        NexageLog.d("TRUSTeManager", "currently processing request, leaving getTRUSTeTPID ");
                    }
                    else {
                        if (this.listeners.size() != 0) {
                            break Label_0056;
                        }
                        NexageLog.d("TRUSTeManager", "no listeners registered, leaving getTRUSTeTPID ");
                    }
                    return;
                }
            }
            if (this.isInitialized) {
                if (this.gotFirstTPID) {
                Label_0162_Outer:
                    while (true) {
                        while (true) {
                            Label_0214: {
                                while (true) {
                                    try {
                                        final String s = (String)this.getTPIDMethod.invoke(this.teSDK, new Object[0]);
                                        if (s != null) {
                                            final boolean b = true;
                                            this.broadcast(b, s);
                                            return;
                                        }
                                        break Label_0214;
                                    }
                                    catch (Exception ex) {
                                        NexageLog.d("TRUSTeManager", "getTPID failed " + ex.getLocalizedMessage());
                                        final String s = null;
                                        continue Label_0162_Outer;
                                    }
                                    break;
                                }
                                break;
                            }
                            final boolean b = false;
                            continue;
                        }
                    }
                }
                this.broadcast(false, null);
                return;
            }
            this.isProcessing = true;
            if (!this.initMetadata()) {
                this.broadcast(false, null);
                return;
            }
            if (!this.initReflection()) {
                this.broadcast(false, null);
                return;
            }
            ((Activity)this.context).runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    TRUSTeManager.this.initTRUSTeSDK();
                }
            });
        }
    }
    
    public void removeListener(final TRUSTeManager$Listener trusTeManager$Listener) {
        synchronized (this) {
            NexageLog.d("TRUSTeManager", "removeListener");
            for (int size = this.listeners.size(), i = 0; i < size; ++i) {
                if (this.listeners.get(i) == trusTeManager$Listener) {
                    NexageLog.d("TRUSTeManager", "removing...");
                    this.listeners.remove(i);
                }
            }
        }
    }
}
