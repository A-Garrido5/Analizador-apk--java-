// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.v2.provider.interstitial;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import com.nexage.android.v2.TagInfo;
import com.nexage.android.reports2.ReportManager;
import android.app.Activity;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.v2.Task;
import java.lang.reflect.Method;
import android.content.Context;
import java.lang.reflect.Constructor;
import com.nexage.android.v2.provider.InMobiBaseProvider;

public class InMobiInterstitialProvider extends InMobiBaseProvider implements InterstitialProvider
{
    private static final String TAG = "InMobiIntProvider";
    private Class IMAdInterstitialClass;
    private Constructor IMAdInterstitialConstructor;
    private Class IMAdInterstitialListenerClass;
    private Context context;
    private Method getStateMethod;
    private Object imAdInterstitial;
    private Object imAdInterstitialListenerProxy;
    private Method loadNewAdMethod;
    private Method setIMAdInterstitialListenerMethod;
    private Method showMethod;
    private Method stopLoadingMethod;
    private Task task;
    
    public InMobiInterstitialProvider() {
        NexageLog.d("InMobiIntProvider", "entering constructor");
        try {
            this.init();
            this.IMAdInterstitialListenerClass = Class.forName("com.inmobi.androidsdk.IMAdInterstitialListener");
            this.IMAdInterstitialClass = Class.forName("com.inmobi.androidsdk.IMAdInterstitial");
            this.IMAdInterstitialConstructor = this.IMAdInterstitialClass.getConstructor(Activity.class, String.class);
            this.getStateMethod = this.IMAdInterstitialClass.getDeclaredMethod("getState", (Class[])new Class[0]);
            this.loadNewAdMethod = this.IMAdInterstitialClass.getDeclaredMethod("loadNewAd", this.IMAdRequestClass);
            this.setIMAdInterstitialListenerMethod = this.IMAdInterstitialClass.getDeclaredMethod("setIMAdInterstitialListener", this.IMAdInterstitialListenerClass);
            this.showMethod = this.IMAdInterstitialClass.getDeclaredMethod("show", (Class[])new Class[0]);
            this.stopLoadingMethod = this.IMAdInterstitialClass.getDeclaredMethod("stopLoading", (Class[])new Class[0]);
            final String s = (String)this.getReleaseVersionMethod.invoke(null, new Object[0]);
            this.isSdkInitialized = true;
            NexageLog.d("InMobiIntProvider", "SDK is initialized using InMobi version " + s);
        }
        catch (Exception ex) {
            NexageLog.e("InMobiIntProvider", "Failed to initialize InMobi SDK.");
            NexageLog.e("InMobiIntProvider", "Make sure that the InMobi SDK JAR is in your classpath.");
            NexageLog.e("InMobiIntProvider", "Failed here:", ex);
        }
    }
    
    @Override
    public void cancel() {
        NexageLog.d("InMobiIntProvider", "entering cancel");
        if (!this.isSdkInitialized) {
            return;
        }
        try {
            this.stopLoadingMethod.invoke(this.imAdInterstitial, new Object[0]);
        }
        catch (Exception ex) {
            NexageLog.e("InMobiIntProvider", "cancel failed", ex);
        }
    }
    
    @Override
    public void display(final Task task) {
        NexageLog.d("InMobiIntProvider", "entering display");
        if (!this.isSdkInitialized || this.context == null) {
            NexageLog.e("InMobiIntProvider", "display failed");
            return;
        }
        ((Activity)this.context).runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                try {
                    if (InMobiInterstitialProvider.this.getStateMethod.invoke(InMobiInterstitialProvider.this.imAdInterstitial, new Object[0]).toString().equals("READY")) {
                        InMobiInterstitialProvider.this.showMethod.invoke(InMobiInterstitialProvider.this.imAdInterstitial, new Object[0]);
                        ReportManager.addDisplayEvent(task.adService, task);
                        task.displayed = true;
                        NexageLog.d("InMobiIntProvider", "displaying...");
                        return;
                    }
                    NexageLog.d("InMobiIntProvider", "not ready to display");
                }
                catch (Exception ex) {
                    NexageLog.e("InMobiIntProvider", "display failed", ex);
                }
            }
        });
    }
    
    @Override
    public void getAd(final Context context, final Task task) {
        synchronized (this) {
            NexageLog.d("InMobiIntProvider", "entering getAd");
            if (!this.isSdkInitialized || context == null || task == null) {
                this.fireAdFailed(task);
            }
            else {
                this.context = context;
                this.task = task;
                ((Activity)context).runOnUiThread((Runnable)new Runnable() {
                    @Override
                    public void run() {
                        try {
                            NexageLog.d("InMobiIntProvider", "starting getAd thread");
                            InMobiInterstitialProvider.this.imAdInterstitial = InMobiInterstitialProvider.this.IMAdInterstitialConstructor.newInstance(context, task.adTag.siteId);
                            InMobiInterstitialProvider.this.imAdInterstitialListenerProxy = Proxy.newProxyInstance(InMobiInterstitialProvider.this.IMAdInterstitialListenerClass.getClassLoader(), new Class[] { InMobiInterstitialProvider.this.IMAdInterstitialListenerClass }, new InMobiInterstitialProvider$IMAdInterstitialListenerHandler(InMobiInterstitialProvider.this, null));
                            InMobiInterstitialProvider.this.setIMAdInterstitialListenerMethod.invoke(InMobiInterstitialProvider.this.imAdInterstitial, InMobiInterstitialProvider.this.imAdInterstitialListenerProxy);
                            if (InMobiInterstitialProvider.this.getStateMethod.invoke(InMobiInterstitialProvider.this.imAdInterstitial, new Object[0]).toString().equals("READY")) {
                                NexageLog.d("InMobiIntProvider", "ad is already available");
                                InMobiInterstitialProvider.this.fireAdReceived(task);
                            }
                            else {
                                InMobiInterstitialProvider.this.createIMAdRequest();
                                InMobiInterstitialProvider.this.loadNewAdMethod.invoke(InMobiInterstitialProvider.this.imAdInterstitial, InMobiInterstitialProvider.this.imAdRequest);
                                NexageLog.d("InMobiIntProvider", "loading ad...");
                            }
                            NexageLog.d("InMobiIntProvider", "exiting getAd");
                        }
                        catch (Exception ex) {
                            NexageLog.e("InMobiIntProvider", "getAd failed", ex);
                            InMobiInterstitialProvider.this.fireAdFailed(task);
                        }
                    }
                });
            }
        }
    }
    
    @Override
    public String getProviderId() {
        return "INMOBI";
    }
}
