// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.v2.provider;

import java.util.regex.Matcher;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.rules.RuleMgr;
import com.nexage.android.internal.NexageContext;
import com.nexage.android.internal.SessionDepthManager;
import android.location.Location;
import com.nexage.android.DeviceLocation;
import com.nexage.android.NexageAdManager;
import java.util.HashMap;
import java.util.regex.Pattern;

public class MacroSub
{
    static final String MSV_VERSION = "1";
    static final String WHOLE_REGEX = "\\^\\{([A-Z]+?),(.*?)\\}";
    static Pattern s_pattern;
    
    public static String getMsvVersion() {
        return "1";
    }
    
    public static String macroSub(final String s, final HashMap hashMap) {
        final DeviceLocation locationAwareness = NexageAdManager.getLocationAwareness();
        Location location;
        if (locationAwareness != null) {
            location = locationAwareness.getLocation();
        }
        else {
            location = null;
        }
        MacroSub$Loc macroSub$Loc = null;
        if (location != null) {
            macroSub$Loc = new MacroSub$Loc(location.getLatitude(), location.getLongitude());
        }
        return macroSubImpl(s, macroSub$Loc, hashMap);
    }
    
    static String macroSubImpl(final String s, final MacroSub$Loc macroSub$Loc, final HashMap hashMap) {
        final int sessionDepth = SessionDepthManager.getSessionDepth();
        if (MacroSub.s_pattern == null) {
            MacroSub.s_pattern = Pattern.compile("\\^\\{([A-Z]+?),(.*?)\\}");
        }
        final StringBuffer sb = new StringBuffer(s);
        final Matcher matcher = MacroSub.s_pattern.matcher(sb);
        int n = sessionDepth;
        Matcher matcher2 = matcher;
    Label_0103_Outer:
        while (matcher2.find(0)) {
            final String group = matcher2.group(1);
            final String group2 = matcher2.group(2);
            while (true) {
                Label_0340: {
                    String s2;
                    if ("LAT".equals(group)) {
                        if (macroSub$Loc == null) {
                            break Label_0340;
                        }
                        s2 = new StringBuilder().append(macroSub$Loc.lat).toString();
                    }
                    else if ("LNG".equals(group)) {
                        if (macroSub$Loc == null) {
                            break Label_0340;
                        }
                        s2 = new StringBuilder().append(macroSub$Loc.lng).toString();
                    }
                    else if ("NET".equals(group)) {
                        s2 = new StringBuilder().append(NexageContext.getNetType()).toString();
                    }
                    else if ("SD".equals(group)) {
                        if (n > RuleMgr.getMaxSessionDepth()) {
                            n = 0;
                        }
                        s2 = new StringBuilder().append(n).toString();
                    }
                    else {
                        if (hashMap == null) {
                            break Label_0340;
                        }
                        final String s3 = hashMap.get("RID");
                        if (!"RID".equals(group) || s3 == null) {
                            break Label_0340;
                        }
                        s2 = new StringBuilder().append(s3).toString();
                    }
                    if (s2 == null) {
                        s2 = "";
                    }
                    sb.replace(matcher2.start(), matcher2.end(), new StringBuilder().append(s2).toString());
                    matcher2 = MacroSub.s_pattern.matcher(sb);
                    continue Label_0103_Outer;
                }
                String s2 = group2;
                continue;
            }
        }
        NexageLog.i("string after macro sub: " + (Object)sb);
        return sb.toString();
    }
    
    public boolean isMacroSubEnabled() {
        return true;
    }
}
