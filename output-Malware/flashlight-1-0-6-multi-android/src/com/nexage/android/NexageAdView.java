// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android;

import android.widget.LinearLayout$LayoutParams;
import android.view.ViewGroup$LayoutParams;
import com.nexage.android.internal.NexageGlobalHandler;
import com.nexage.android.internal.SessionDepthManager;
import android.content.IntentFilter;
import com.nexage.ormma.view.OrmmaView;
import com.nexage.android.internal.OrmmaAdLayout;
import java.util.Timer;
import com.nexage.android.internal.AdLayout;
import android.app.Activity;
import android.annotation.SuppressLint;
import com.nexage.android.internal.PlainSwitcher;
import com.nexage.android.internal.AnimatedSwitcher;
import com.nexage.android.internal.NexageLog;
import java.util.Hashtable;
import com.nexage.android.internal.NexageAdSwitcher;
import android.util.AttributeSet;
import android.view.View;
import com.nexage.android.internal.NexageContext;
import com.nexage.android.internal.NexageAdFetcher;
import java.util.TimerTask;
import com.nexage.android.internal.Ad;
import android.view.View$OnClickListener;
import android.content.Context;
import android.content.BroadcastReceiver;
import android.widget.RelativeLayout;

public class NexageAdView extends RelativeLayout
{
    private static final String TAG = "NAV";
    private static final int c_DefaultHeightDip = 50;
    private static final int c_DefaultWidthDip = 320;
    private static int nReceiverRegistrations;
    private static int s_DefaultHeight;
    private static int s_DefaultWidth;
    private boolean isAddedToFetcher;
    private boolean isDetached;
    private boolean isFetching;
    private long lastNudgeTimestamp;
    private NexageAdViewListener listener;
    private final BroadcastReceiver mScreenReceiver;
    private boolean mScreenVisible;
    private Context m_Activity;
    private String m_Alignment;
    private String m_AnimationType;
    private Integer m_BGColor;
    private Integer m_BGRes;
    private View$OnClickListener m_ClickListener;
    private volatile Ad m_CurrentAd;
    private TimerTask m_DetachTask;
    private NexageAdFetcher m_Fetcher;
    private int m_Height;
    volatile int m_MM4RM_Expanded;
    private final NexageContext m_NexageContext;
    private volatile Ad m_PendingAd;
    String m_Position;
    private int m_PrefetchAttempt;
    private volatile boolean m_ReadyToFetch;
    private volatile NexageAdView$RefreshTask m_RefreshTask;
    private View m_Switcher;
    private Integer m_TextColor;
    private int m_Width;
    private int refreshInterval;
    
    static {
        NexageAdView.s_DefaultWidth = 0;
        NexageAdView.s_DefaultHeight = 0;
        NexageAdView.nReceiverRegistrations = 0;
    }
    
    public NexageAdView(final Context context, final AttributeSet set) {
        this(context, set, 0);
    }
    
    public NexageAdView(final Context context, final AttributeSet set, final int n) {
        super(context, set, n);
        this.m_NexageContext = new NexageAdView$AdViewContext(this, null);
        this.refreshInterval = 30000;
        this.m_Switcher = null;
        this.m_AnimationType = "fade_in_out";
        this.m_BGColor = null;
        this.m_TextColor = null;
        this.mScreenVisible = true;
        this.m_MM4RM_Expanded = 0;
        this.m_BGRes = null;
        this.m_Alignment = "center";
        this.m_ReadyToFetch = true;
        this.m_PrefetchAttempt = 2;
        this.mScreenReceiver = new NexageAdView$MyReceiver(this, null);
        this.m_CurrentAd = null;
        this.m_PendingAd = null;
        this.m_RefreshTask = null;
        if ((set == null || set.getAttributeCount() == 0) && !this.isInEditMode()) {
            throw new IllegalArgumentException("NexageAdView: AttributeSet cannot be empty");
        }
        this.init(context, set);
    }
    
    public NexageAdView(final String position, final Context context) {
        super(context, (AttributeSet)null, 0);
        this.m_NexageContext = new NexageAdView$AdViewContext(this, null);
        this.refreshInterval = 30000;
        this.m_Switcher = null;
        this.m_AnimationType = "fade_in_out";
        this.m_BGColor = null;
        this.m_TextColor = null;
        this.mScreenVisible = true;
        this.m_MM4RM_Expanded = 0;
        this.m_BGRes = null;
        this.m_Alignment = "center";
        this.m_ReadyToFetch = true;
        this.m_PrefetchAttempt = 2;
        this.mScreenReceiver = new NexageAdView$MyReceiver(this, null);
        this.m_CurrentAd = null;
        this.m_PendingAd = null;
        this.m_RefreshTask = null;
        if (position == null || position.length() == 0) {
            throw new IllegalArgumentException("NexageAdView: position cannot be empty");
        }
        this.m_Position = position;
        this.init(context, null);
    }
    
    private void SDKAdVisible(final boolean b) {
        if (b) {
            this.checkSetRefreshTimer(true);
        }
    }
    
    @Deprecated
    public static void addCustomAttribute(final String s, final String s2) {
        NexageAdManager.addCustomAttribute(s, s2);
    }
    
    private void displayAd(final Ad currentAd) {
        synchronized (this) {
            this.m_PendingAd = null;
            if (this.m_CurrentAd != null && this.m_CurrentAd != currentAd) {
                this.m_CurrentAd.readyToReport();
            }
            if (this.isDetached) {
                this.m_CurrentAd = null;
                return;
            }
            this.m_CurrentAd = currentAd;
            // monitorexit(this)
            this.m_CurrentAd.setSize(this.m_Width, this.m_Height);
            this.m_CurrentAd.setAttributes(this.m_BGColor, this.m_TextColor, this.m_Alignment);
            this.m_CurrentAd.setAdView(this);
            this.m_CurrentAd.setSwitcher((NexageAdSwitcher)this.m_Switcher);
            if (((NexageAdView$AdViewContext)this.m_NexageContext).mm4rmNotLocked()) {
                this.switchView();
            }
        }
    }
    
    @Deprecated
    public static String getApplicationName() {
        return NexageAdManager.getApplicationName();
    }
    
    @Deprecated
    public static String getApplicationVersion() {
        return NexageAdManager.getApplicationVersion();
    }
    
    @Deprecated
    public static String getCn() {
        return NexageAdManager.getCn();
    }
    
    @Deprecated
    public static String getDcn() {
        return NexageAdManager.getDCN();
    }
    
    @Deprecated
    public static Hashtable getExtraParameter() {
        return NexageAdManager.getExtraParameters();
    }
    
    private String getVisibilityString(final int n) {
        switch (n) {
            default: {
                return "UNKNOWN";
            }
            case 8: {
                return "GONE";
            }
            case 4: {
                return "INVISIBLE";
            }
            case 0: {
                return "VISIBLE";
            }
        }
    }
    
    private void init(final Context activity, final AttributeSet set) {
        NexageLog.d("NAV", "init");
        this.m_Activity = activity;
        if (!this.isInEditMode()) {
            NexageAdManager.init(activity);
            this.m_Switcher = (View)new AnimatedSwitcher(activity);
        }
        else {
            this.m_Switcher = (View)new PlainSwitcher(this.m_Activity);
        }
        if (NexageAdView.s_DefaultWidth == 0) {
            NexageAdView.s_DefaultWidth = (int)(320.0f * NexageContext.s_Dip2Px);
            NexageAdView.s_DefaultHeight = (int)(50.0f * NexageContext.s_Dip2Px);
        }
        this.m_Width = NexageAdView.s_DefaultWidth;
        this.m_Height = NexageAdView.s_DefaultHeight;
        this.addView(this.m_Switcher);
        this.setClickable(true);
        this.setLongClickable(true);
        this.setFocusable(true);
        this.setPadding(0, 0, 0, 0);
        this.setDescendantFocusability(262144);
        if (set != null) {
            this.parseAttribute(set);
        }
        this.m_Switcher.layout(0, 0, this.m_Width, this.m_Height);
        this.setPosition(this.m_Position);
    }
    
    @SuppressLint({ "DefaultLocale" })
    private void parseAttribute(final AttributeSet p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Ljava/lang/StringBuilder;
        //     3: dup            
        //     4: ldc_w           "http://schemas.android.com/apk/res/"
        //     7: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    10: aload_0        
        //    11: getfield        com/nexage/android/NexageAdView.m_Activity:Landroid/content/Context;
        //    14: invokevirtual   android/content/Context.getPackageName:()Ljava/lang/String;
        //    17: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    20: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    23: astore_2       
        //    24: aload_0        
        //    25: aload_1        
        //    26: aload_2        
        //    27: ldc_w           "refreshInterval"
        //    30: sipush          30000
        //    33: invokeinterface android/util/AttributeSet.getAttributeIntValue:(Ljava/lang/String;Ljava/lang/String;I)I
        //    38: invokevirtual   com/nexage/android/NexageAdView.setRefreshInterval:(I)V
        //    41: aload_1        
        //    42: aload_2        
        //    43: ldc_w           "cn"
        //    46: invokeinterface android/util/AttributeSet.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //    51: astore_3       
        //    52: aload_3        
        //    53: ifnull          79
        //    56: aload_3        
        //    57: invokevirtual   java/lang/String.length:()I
        //    60: ifle            79
        //    63: aload_3        
        //    64: invokestatic    com/nexage/android/NexageAdManager.setCn:(Ljava/lang/String;)V
        //    67: ldc_w           "cn attribute in NexageAdView is deprecated."
        //    70: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;)V
        //    73: ldc_w           "Please use setCn() method of NexageAdManager."
        //    76: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;)V
        //    79: aload_1        
        //    80: aload_2        
        //    81: ldc_w           "position"
        //    84: invokeinterface android/util/AttributeSet.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //    89: astore          4
        //    91: aload_1        
        //    92: aload_2        
        //    93: ldc_w           "testmode"
        //    96: iconst_0       
        //    97: invokeinterface android/util/AttributeSet.getAttributeBooleanValue:(Ljava/lang/String;Ljava/lang/String;Z)Z
        //   102: istore          5
        //   104: iload           5
        //   106: ifeq            126
        //   109: iload           5
        //   111: invokestatic    com/nexage/android/NexageAdManager.setTestMode:(Z)V
        //   114: ldc_w           "testmode attribute in NexageAdView is deprecated."
        //   117: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;)V
        //   120: ldc_w           "Please use <meta-data android:value=\"true\" android:name=\"NEXAGE_TEST_MODE\" />."
        //   123: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;)V
        //   126: aload_1        
        //   127: aload_2        
        //   128: ldc_w           "animation"
        //   131: invokeinterface android/util/AttributeSet.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   136: astore          6
        //   138: aload           6
        //   140: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //   143: ifne            159
        //   146: aload_0        
        //   147: invokevirtual   com/nexage/android/NexageAdView.isInEditMode:()Z
        //   150: ifne            382
        //   153: aload_0        
        //   154: aload           6
        //   156: invokevirtual   com/nexage/android/NexageAdView.setAnimationType:(Ljava/lang/String;)V
        //   159: aload_1        
        //   160: ldc_w           "http://schemas.android.com/apk/res/android"
        //   163: ldc_w           "textColor"
        //   166: invokeinterface android/util/AttributeSet.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   171: astore          7
        //   173: aload           7
        //   175: ifnull          214
        //   178: aload_0        
        //   179: ldc_w           16777215
        //   182: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   185: putfield        com/nexage/android/NexageAdView.m_TextColor:Ljava/lang/Integer;
        //   188: aload           7
        //   190: iconst_0       
        //   191: invokevirtual   java/lang/String.charAt:(I)C
        //   194: bipush          35
        //   196: if_icmpne       391
        //   199: aload_0        
        //   200: aload           7
        //   202: invokevirtual   java/lang/String.toUpperCase:()Ljava/lang/String;
        //   205: invokestatic    com/nexage/android/internal/Ad.hexToInt:(Ljava/lang/String;)I
        //   208: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   211: putfield        com/nexage/android/NexageAdView.m_TextColor:Ljava/lang/Integer;
        //   214: aload_1        
        //   215: ldc_w           "http://schemas.android.com/apk/res/android"
        //   218: ldc_w           "background"
        //   221: invokeinterface android/util/AttributeSet.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   226: astore          8
        //   228: aload           8
        //   230: ifnull          283
        //   233: aload           8
        //   235: iconst_0       
        //   236: invokevirtual   java/lang/String.charAt:(I)C
        //   239: bipush          35
        //   241: if_icmpne       415
        //   244: aload_0        
        //   245: ldc_w           -16777216
        //   248: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   251: putfield        com/nexage/android/NexageAdView.m_BGColor:Ljava/lang/Integer;
        //   254: aload_0        
        //   255: aload           8
        //   257: invokevirtual   java/lang/String.toUpperCase:()Ljava/lang/String;
        //   260: invokestatic    com/nexage/android/internal/Ad.hexToInt:(Ljava/lang/String;)I
        //   263: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   266: putfield        com/nexage/android/NexageAdView.m_BGColor:Ljava/lang/Integer;
        //   269: aload_0        
        //   270: getfield        com/nexage/android/NexageAdView.m_Switcher:Landroid/view/View;
        //   273: aload_0        
        //   274: getfield        com/nexage/android/NexageAdView.m_BGColor:Ljava/lang/Integer;
        //   277: invokevirtual   java/lang/Integer.intValue:()I
        //   280: invokevirtual   android/view/View.setBackgroundColor:(I)V
        //   283: aload           4
        //   285: ifnonnull       293
        //   288: ldc_w           "default"
        //   291: astore          4
        //   293: aload_0        
        //   294: aload           4
        //   296: putfield        com/nexage/android/NexageAdView.m_Position:Ljava/lang/String;
        //   299: new             Landroid/widget/LinearLayout$LayoutParams;
        //   302: dup            
        //   303: aload_0        
        //   304: getfield        com/nexage/android/NexageAdView.m_Activity:Landroid/content/Context;
        //   307: aload_1        
        //   308: invokespecial   android/widget/LinearLayout$LayoutParams.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;)V
        //   311: astore          9
        //   313: aload           9
        //   315: getfield        android/widget/LinearLayout$LayoutParams.width:I
        //   318: iconst_1       
        //   319: if_icmple       331
        //   322: aload_0        
        //   323: aload           9
        //   325: getfield        android/widget/LinearLayout$LayoutParams.width:I
        //   328: putfield        com/nexage/android/NexageAdView.m_Width:I
        //   331: aload           9
        //   333: getfield        android/widget/LinearLayout$LayoutParams.height:I
        //   336: iconst_1       
        //   337: if_icmple       349
        //   340: aload_0        
        //   341: aload           9
        //   343: getfield        android/widget/LinearLayout$LayoutParams.height:I
        //   346: putfield        com/nexage/android/NexageAdView.m_Height:I
        //   349: aload_0        
        //   350: aload           9
        //   352: invokespecial   android/widget/RelativeLayout.setLayoutParams:(Landroid/view/ViewGroup$LayoutParams;)V
        //   355: aload_0        
        //   356: getfield        com/nexage/android/NexageAdView.m_Switcher:Landroid/view/View;
        //   359: iconst_0       
        //   360: iconst_0       
        //   361: aload_0        
        //   362: getfield        com/nexage/android/NexageAdView.m_Width:I
        //   365: aload_0        
        //   366: getfield        com/nexage/android/NexageAdView.m_Height:I
        //   369: invokevirtual   android/view/View.layout:(IIII)V
        //   372: aload_0        
        //   373: aload           9
        //   375: getfield        android/widget/LinearLayout$LayoutParams.gravity:I
        //   378: invokevirtual   com/nexage/android/NexageAdView.setGravity:(I)V
        //   381: return         
        //   382: aload_0        
        //   383: aload           6
        //   385: putfield        com/nexage/android/NexageAdView.m_AnimationType:Ljava/lang/String;
        //   388: goto            159
        //   391: aload_0        
        //   392: aload           7
        //   394: iconst_1       
        //   395: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   398: invokestatic    java/lang/Integer.parseInt:(Ljava/lang/String;)I
        //   401: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   404: putfield        com/nexage/android/NexageAdView.m_TextColor:Ljava/lang/Integer;
        //   407: goto            214
        //   410: astore          11
        //   412: goto            214
        //   415: aload_0        
        //   416: iconst_0       
        //   417: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   420: putfield        com/nexage/android/NexageAdView.m_BGRes:Ljava/lang/Integer;
        //   423: aload_0        
        //   424: aload           8
        //   426: iconst_1       
        //   427: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   430: invokestatic    java/lang/Integer.parseInt:(Ljava/lang/String;)I
        //   433: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   436: putfield        com/nexage/android/NexageAdView.m_BGRes:Ljava/lang/Integer;
        //   439: aload_0        
        //   440: getfield        com/nexage/android/NexageAdView.m_BGRes:Ljava/lang/Integer;
        //   443: invokevirtual   java/lang/Integer.intValue:()I
        //   446: ifeq            283
        //   449: aload_0        
        //   450: getfield        com/nexage/android/NexageAdView.m_Switcher:Landroid/view/View;
        //   453: aload_0        
        //   454: getfield        com/nexage/android/NexageAdView.m_BGRes:Ljava/lang/Integer;
        //   457: invokevirtual   java/lang/Integer.intValue:()I
        //   460: invokevirtual   android/view/View.setBackgroundResource:(I)V
        //   463: goto            283
        //   466: astore          10
        //   468: goto            283
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  188    214    410    415    Ljava/lang/Exception;
        //  233    283    466    471    Ljava/lang/Exception;
        //  391    407    410    415    Ljava/lang/Exception;
        //  415    463    466    471    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0283:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Deprecated
    public static void setApplicationName(final String applicationName) {
        NexageAdManager.setApplicationName(applicationName);
    }
    
    @Deprecated
    public static void setApplicationVersion(final String applicationVersion) {
        NexageAdManager.setApplicationVersion(applicationVersion);
    }
    
    @Deprecated
    public static void setCn(final String cn) {
        NexageAdManager.setCn(cn);
    }
    
    @Deprecated
    public static void setDcn(final String dcn) {
        NexageAdManager.setDCN(dcn);
    }
    
    private void setIsFetching(final boolean isFetching) {
        NexageLog.d("NAV", "setting isFetching to " + isFetching);
        this.isFetching = isFetching;
    }
    
    private void startFetcher() {
        NexageLog.d("NAV", "startFetcher");
        this.isAddedToFetcher = true;
        this.m_Fetcher.add(this.m_NexageContext);
        synchronized (this) {
            if (this.m_DetachTask != null) {
                this.m_DetachTask.cancel();
                this.m_DetachTask = null;
            }
            if (this.m_PendingAd != null) {
                NexageLog.d("NAV", "posting DisplayAdRunnable from startFetcher");
                this.post((Runnable)new NexageAdView$DisplayAdRunnable(this, this.m_PendingAd));
            }
        }
    }
    
    private void switchView() {
        if (this.m_CurrentAd == null) {
            NexageLog.w(this.m_Position, "switchView: currentAd is null");
        }
        else {
            final AdLayout layout = this.m_CurrentAd.getLayout((Activity)this.m_Activity);
            if (layout != null) {
                if (this.m_ClickListener != null) {
                    layout.setOnClickListener(this.m_ClickListener, this);
                }
                final View view = layout.getView();
                view.setVisibility(this.getVisibility());
                if (this.m_BGRes != null) {
                    view.setBackgroundResource((int)this.m_BGRes);
                }
                if (this.m_BGColor != null) {
                    view.setBackgroundColor((int)this.m_BGColor);
                }
                while (true) {
                    try {
                        if (this.m_CurrentAd.getSwitcher() == null) {
                            ((NexageAdSwitcher)this.m_Switcher).addAdView(view);
                        }
                        Label_0169: {
                            if (view != null) {
                                break Label_0169;
                            }
                            boolean b = true;
                            try {
                                this.checkSetRefreshTimer(b);
                                this.setIsFetching(false);
                                if (this.listener != null) {
                                    ((Activity)this.m_Activity).runOnUiThread((Runnable)new Runnable() {
                                        @Override
                                        public void run() {
                                            NexageAdView.this.listener.onReceiveAd(NexageAdView.this);
                                        }
                                    });
                                    return;
                                }
                                return;
                                b = false;
                            }
                            catch (Exception ex) {}
                        }
                    }
                    catch (Exception ex2) {
                        continue;
                    }
                    break;
                }
            }
        }
    }
    
    private boolean visible() {
        boolean b = true;
        NexageLog.d("NAV", "visible");
        final boolean shown = this.isShown();
        final boolean b2 = this.getVisibility() == 0 && b;
        if (!this.mScreenVisible || !this.isShown() || this.getVisibility() != 0 || this.isDetached) {
            b = false;
        }
        NexageLog.d("NAV", "mScreenVisible=" + this.mScreenVisible + ", isShown=" + shown + ", isVisible=" + b2 + ", isDetached=" + this.isDetached + " --> retval=" + b);
        return b;
    }
    
    public void checkSetRefreshTimer(final boolean b) {
        NexageLog.d("NAV", "checkSetRefreshTimer enter");
        if (NexageAdManager.getIsMediation()) {
            return;
        }
        NexageLog.d("NAV", "checkSetRefreshTimer visible=" + this.visible() + ", foreground=" + b);
        if (!this.visible() && b) {
            NexageLog.d("NAV", "checkSetRefreshTimer not visible and in foreground, returning");
            return;
        }
        if (NexageAdManager.getIsPopupDisplayed() && this.m_RefreshTask != null) {
            NexageLog.d("NAV", "checkSetRefreshTimer popup in the foreground, returning");
            this.m_RefreshTask.cancel();
            this.m_RefreshTask = null;
            return;
        }
        if (b) {
            this.nudgeAdFetcher();
        }
        if (this.m_CurrentAd == null && b) {
            NexageLog.d("NAV", "checkSetRefreshTimer m_CurrentAd is null and in foreground, returning");
            return;
        }
        synchronized (this) {
            NexageLog.d("NAV", "checkSetRefreshTimer refreshInterval=" + this.refreshInterval + ", m_RefreshTask=" + this.m_RefreshTask);
            if (this.refreshInterval > 0 && this.m_RefreshTask == null) {
                NexageLog.d("NAV", "checkSetRefreshTimer creating new RefreshTask");
                this.m_RefreshTask = new NexageAdView$RefreshTask(this, null);
                new Timer().schedule(this.m_RefreshTask, this.refreshInterval);
            }
        }
    }
    
    public void displayRichMedia() {
        NexageLog.d("NAV", "displayRichMedia");
        NexageLog.d("NAV", "  m_Switcher is class " + this.m_Switcher.getClass().getSimpleName());
        if (this.m_Switcher instanceof NexageAdSwitcher) {
            final View currentView = ((NexageAdSwitcher)this.m_Switcher).getCurrentView();
            if (currentView != null) {
                NexageLog.d("NAV", "  currentView is class " + currentView.getClass().getSimpleName());
            }
            else {
                NexageLog.d("NAV", "  currentView is null");
            }
            if (currentView != null && currentView instanceof OrmmaAdLayout) {
                final OrmmaView ormmaView = ((OrmmaAdLayout)currentView).getOrmmaView();
                final StringBuilder sb = new StringBuilder("  ormmaView is ");
                String s;
                if (ormmaView != null) {
                    s = "NOT ";
                }
                else {
                    s = "";
                }
                NexageLog.d("NAV", sb.append(s).append("null").toString());
                if (ormmaView != null) {
                    ormmaView.changeViewable(true);
                }
            }
        }
    }
    
    public String getAnimationType() {
        return this.m_AnimationType;
    }
    
    public int getBackgroundColor() {
        if (this.m_BGColor == null) {
            return -16777216;
        }
        return this.m_BGColor;
    }
    
    public NexageAdViewListener getListener() {
        return this.listener;
    }
    
    NexageContext getNexageContext() {
        return this.m_NexageContext;
    }
    
    public String getPosition() {
        return this.m_Position;
    }
    
    public int getRefreshInterval() {
        return this.refreshInterval;
    }
    
    public int getTextColor() {
        if (this.m_TextColor == null) {
            return 16777215;
        }
        return this.m_TextColor;
    }
    
    public boolean isFetching() {
        return this.isFetching;
    }
    
    void nudgeAdFetcher() {
        NexageLog.d("NAV", "nudgeAdFetcher enter");
        final long currentTimeMillis = System.currentTimeMillis();
        NexageLog.d("NAV", "nudgeAdFetcher elapsed=" + (currentTimeMillis - this.lastNudgeTimestamp));
        if (currentTimeMillis - this.lastNudgeTimestamp > 2000L) {
            NexageLog.d("NAV", "nudgeAdFetcher wake");
            this.setIsFetching(true);
            this.m_Fetcher.wake();
            this.lastNudgeTimestamp = currentTimeMillis;
            return;
        }
        NexageLog.d("NAV", "nudgeAdFetcher ignored");
        this.checkSetRefreshTimer(false);
    }
    
    protected void onAttachedToWindow() {
        NexageLog.d("NAV", "onAttachedToWindow");
        super.onAttachedToWindow();
        this.isDetached = false;
        if (!this.isAddedToFetcher) {
            this.startFetcher();
        }
        final IntentFilter intentFilter = new IntentFilter("android.intent.action.USER_PRESENT");
        intentFilter.addAction("android.intent.action.SCREEN_OFF");
        final Context context = this.getContext();
        NexageLog.d("NAV", "register mScreenReceiver " + NexageAdView.nReceiverRegistrations + " " + this.mScreenReceiver);
        context.registerReceiver(this.mScreenReceiver, intentFilter);
        ++NexageAdView.nReceiverRegistrations;
    }
    
    protected void onDetachedFromWindow() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             "NAV"
        //     2: ldc_w           "onDetachedFromWindow"
        //     5: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //     8: iconst_1       
        //     9: invokestatic    com/nexage/android/internal/NexageGlobalHandler.setGlobalAdServingEnabled:(Z)V
        //    12: aload_0        
        //    13: bipush          8
        //    15: invokevirtual   com/nexage/android/NexageAdView.setVisibility:(I)V
        //    18: aload_0        
        //    19: invokespecial   android/widget/RelativeLayout.onDetachedFromWindow:()V
        //    22: ldc             "NAV"
        //    24: new             Ljava/lang/StringBuilder;
        //    27: dup            
        //    28: ldc_w           "unregister mScreenReceiver "
        //    31: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    34: getstatic       com/nexage/android/NexageAdView.nReceiverRegistrations:I
        //    37: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    40: ldc_w           " "
        //    43: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    46: aload_0        
        //    47: getfield        com/nexage/android/NexageAdView.mScreenReceiver:Landroid/content/BroadcastReceiver;
        //    50: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //    53: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    56: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    59: aload_0        
        //    60: invokevirtual   com/nexage/android/NexageAdView.getContext:()Landroid/content/Context;
        //    63: aload_0        
        //    64: getfield        com/nexage/android/NexageAdView.mScreenReceiver:Landroid/content/BroadcastReceiver;
        //    67: invokevirtual   android/content/Context.unregisterReceiver:(Landroid/content/BroadcastReceiver;)V
        //    70: iconst_m1      
        //    71: getstatic       com/nexage/android/NexageAdView.nReceiverRegistrations:I
        //    74: iadd           
        //    75: putstatic       com/nexage/android/NexageAdView.nReceiverRegistrations:I
        //    78: aload_0        
        //    79: monitorenter   
        //    80: aload_0        
        //    81: iconst_1       
        //    82: putfield        com/nexage/android/NexageAdView.isDetached:Z
        //    85: aload_0        
        //    86: getfield        com/nexage/android/NexageAdView.m_CurrentAd:Lcom/nexage/android/internal/Ad;
        //    89: ifnull          109
        //    92: aload_0        
        //    93: getfield        com/nexage/android/NexageAdView.m_CurrentAd:Lcom/nexage/android/internal/Ad;
        //    96: getfield        com/nexage/android/internal/Ad.isAdViewed:Z
        //    99: ifeq            109
        //   102: aload_0        
        //   103: getfield        com/nexage/android/NexageAdView.m_CurrentAd:Lcom/nexage/android/internal/Ad;
        //   106: invokevirtual   com/nexage/android/internal/Ad.readyToReport:()V
        //   109: aload_0        
        //   110: new             Lcom/nexage/android/NexageAdView$1;
        //   113: dup            
        //   114: aload_0        
        //   115: invokespecial   com/nexage/android/NexageAdView$1.<init>:(Lcom/nexage/android/NexageAdView;)V
        //   118: putfield        com/nexage/android/NexageAdView.m_DetachTask:Ljava/util/TimerTask;
        //   121: new             Ljava/util/Timer;
        //   124: dup            
        //   125: invokespecial   java/util/Timer.<init>:()V
        //   128: aload_0        
        //   129: getfield        com/nexage/android/NexageAdView.m_DetachTask:Ljava/util/TimerTask;
        //   132: ldc2_w          10000
        //   135: invokevirtual   java/util/Timer.schedule:(Ljava/util/TimerTask;J)V
        //   138: aload_0        
        //   139: monitorexit    
        //   140: aload_0        
        //   141: getfield        com/nexage/android/NexageAdView.m_Fetcher:Lcom/nexage/android/internal/NexageAdFetcher;
        //   144: aload_0        
        //   145: getfield        com/nexage/android/NexageAdView.m_NexageContext:Lcom/nexage/android/internal/NexageContext;
        //   148: invokevirtual   com/nexage/android/internal/NexageAdFetcher.remove:(Lcom/nexage/android/internal/NexageContext;)V
        //   151: aload_0        
        //   152: iconst_0       
        //   153: putfield        com/nexage/android/NexageAdView.isAddedToFetcher:Z
        //   156: return         
        //   157: astore_1       
        //   158: ldc_w           "onDetachedFromWindow exception caught"
        //   161: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;)V
        //   164: goto            22
        //   167: astore_3       
        //   168: aload_0        
        //   169: monitorexit    
        //   170: aload_3        
        //   171: athrow         
        //   172: astore_2       
        //   173: goto            78
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  18     22     157    167    Ljava/lang/Exception;
        //  22     78     172    176    Ljava/lang/Exception;
        //  80     109    167    172    Any
        //  109    140    167    172    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0022:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public void onDisplay() {
        NexageLog.d("NAV", "onDisplay");
        SessionDepthManager.incrementSessionDepth();
        this.m_CurrentAd.addDisplayToReport();
        NexageLog.d("NAV", "AD displayed for pos " + this.m_Position);
        NexageLog.d("NAV", "setting m_AdViewed to true");
        this.m_CurrentAd.isAdViewed = true;
    }
    
    protected void onMeasure(final int n, final int n2) {
        super.onMeasure(this.m_Width, this.m_Height);
        this.setMeasuredDimension(this.m_Width, this.m_Height);
    }
    
    public void onWindowFocusChanged(final boolean b) {
        if (b && NexageAdManager.getIsPopupDisplayed()) {
            NexageAdManager.setIsPopupDisplayed(false);
        }
        super.onWindowFocusChanged(b);
        this.SDKAdVisible(b);
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        NexageLog.d("NAV", "onWindowVisibilityChanged " + this.getVisibilityString(n));
        super.onWindowVisibilityChanged(n);
        if (n == 0) {
            this.checkSetRefreshTimer(true);
        }
    }
    
    public boolean readyToReport() {
        return this.isDetached && this.m_CurrentAd != null && this.m_CurrentAd.isAdViewed;
    }
    
    public void rollover() {
    Label_0143_Outer:
        while (true) {
            while (true) {
            Label_0274:
                while (true) {
                    synchronized (this) {
                        NexageLog.d("NAV", "rollover");
                        if (!NexageGlobalHandler.isGlobalAdServingEnabled()) {
                            NexageLog.d("NAV", "rollover ignored -- ad serving is globally disabled");
                            return;
                        }
                        final StringBuilder sb = new StringBuilder("m_CurrentAd is ");
                        if (this.m_CurrentAd != null) {
                            final String s = "NOT ";
                            String s2 = sb.append(s).append("null, ").toString();
                            if (this.m_CurrentAd != null) {
                                s2 = s2 + "m_AdViewed is " + this.m_CurrentAd.isAdViewed + ", ";
                            }
                            final StringBuilder append = new StringBuilder().append(s2).append("m_PendingAd is ");
                            if (this.m_PendingAd == null) {
                                break Label_0274;
                            }
                            final String s3 = "NOT ";
                            NexageLog.d("NAV", append.append(s3).append("null").toString());
                            if ((this.m_CurrentAd != null && !this.m_CurrentAd.isAdViewed) || this.m_PendingAd != null) {
                                NexageLog.d("NAV", "returning");
                                return;
                            }
                            break;
                        }
                    }
                    final String s = "";
                    continue Label_0143_Outer;
                }
                final String s3 = "";
                continue;
            }
        }
        NexageLog.d("NAV", "continuing...");
        this.m_ReadyToFetch = true;
        if (this.m_RefreshTask != null) {
            this.m_RefreshTask.cancel();
            this.m_RefreshTask = null;
        }
        // monitorexit(this)
        if (this.refreshInterval == 0 && !this.isAddedToFetcher) {
            this.startFetcher();
        }
        this.nudgeAdFetcher();
        this.m_PrefetchAttempt = 2;
    }
    
    public void setAnimationType(String animationType) {
        if (animationType == null || animationType.length() < 2) {
            this.m_AnimationType = null;
            if (!((NexageAdSwitcher)this.m_Switcher).animated()) {
                return;
            }
        }
        else {
            if (!animationType.equalsIgnoreCase("fade_in_out") && !animationType.equalsIgnoreCase("slide_in_out") && !animationType.equalsIgnoreCase("left_in_right_out") && !animationType.equalsIgnoreCase("right_in_left_out")) {
                animationType = "fade_in_out";
            }
            this.m_AnimationType = animationType;
            if (((NexageAdSwitcher)this.m_Switcher).animated()) {
                ((NexageAdSwitcher)this.m_Switcher).setAnimationType(this.m_AnimationType);
                return;
            }
        }
        this.removeView(this.m_Switcher);
        final View removeAdView = ((NexageAdSwitcher)this.m_Switcher).removeAdView();
        if (this.m_AnimationType == null || this.isInEditMode()) {
            this.m_Switcher = (View)new PlainSwitcher(this.m_Activity);
        }
        else {
            this.m_Switcher = (View)new AnimatedSwitcher(this.m_Activity);
            ((NexageAdSwitcher)this.m_Switcher).setAnimationType(this.m_AnimationType);
        }
        if (removeAdView != null) {
            ((NexageAdSwitcher)this.m_Switcher).addAdView(removeAdView);
        }
        this.addView(this.m_Switcher);
        this.m_Switcher.layout(0, 0, this.m_Width, this.m_Height);
        if (this.m_BGColor != null) {
            this.m_Switcher.setBackgroundColor((int)this.m_BGColor);
        }
        if (this.m_BGRes != null && this.m_BGRes != 0) {
            this.m_Switcher.setBackgroundResource((int)this.m_BGRes);
        }
        this.m_Switcher.setVisibility(super.getVisibility());
    }
    
    public void setBackgroundColor(final int n) {
        super.setBackgroundColor(n);
        this.m_BGColor = n;
        this.m_Switcher.setBackgroundColor(n);
    }
    
    public void setBackgroundResource(final int n) {
        super.setBackgroundResource(n);
        this.m_BGRes = n;
        this.m_Switcher.setBackgroundResource(n);
    }
    
    public void setGravity(final int gravity) {
        super.setGravity(gravity);
        if (gravity == 3) {
            this.m_Alignment = "left";
        }
        else {
            if (gravity == 5) {
                this.m_Alignment = "right";
                return;
            }
            if (gravity == 1) {
                this.m_Alignment = "center";
            }
        }
    }
    
    public void setLayoutParams(final ViewGroup$LayoutParams layoutParams) {
        if (layoutParams.width > 1) {
            this.m_Width = layoutParams.width;
        }
        if (layoutParams.height > 1) {
            this.m_Height = layoutParams.height;
        }
        super.setLayoutParams(layoutParams);
        if (this.m_Switcher != null) {
            this.m_Switcher.layout(0, 0, this.m_Width, this.m_Height);
        }
        this.setGravity(new LinearLayout$LayoutParams(layoutParams).gravity);
    }
    
    public void setListener(final NexageAdViewListener listener) {
        this.listener = listener;
    }
    
    public void setOnClickListener(final View$OnClickListener clickListener) {
        this.setClickable(true);
        this.m_ClickListener = clickListener;
    }
    
    public void setPosition(final String position) {
        if (this.m_Fetcher == null || !position.equals(this.m_Position)) {
            if (this.m_Fetcher != null) {
                this.m_Fetcher.remove(this.m_NexageContext);
            }
            this.m_Fetcher = NexageAdFetcher.getFetcher(position);
            this.m_Position = position;
        }
    }
    
    public void setRefreshInterval(int refreshInterval) {
        if (refreshInterval != 0 && refreshInterval < 10000) {
            refreshInterval = 10000;
        }
        this.refreshInterval = refreshInterval;
    }
    
    public void setTextColor(final int n) {
        this.m_TextColor = n;
    }
    
    public void setVisibility(final int n) {
        super.setVisibility(n);
        final int visibility = super.getVisibility();
        NexageLog.d("NAV", "setVisibility from " + this.getVisibilityString(visibility) + " to " + this.getVisibilityString(n));
        if (visibility != n) {
            if (n == 0) {
                if (this.m_CurrentAd != null) {
                    this.checkSetRefreshTimer(true);
                }
                else {
                    this.rollover();
                }
            }
            if (this.m_Switcher != null) {
                this.m_Switcher.setVisibility(n);
            }
        }
    }
    
    @Deprecated
    public void start() {
        this.rollover();
    }
}
