// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.interstitial;

import com.nexage.android.internal.NexageLog;
import java.util.Collection;
import java.util.TreeSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.util.HashMap;

class VASTDocument
{
    int m_BitRate;
    String m_ClickThroughURL;
    int m_Duration;
    HashMap m_MediaFiles;
    HashMap m_TrackingEvents;
    
    VASTDocument(final InputStream byteStream) {
        this.m_TrackingEvents = new HashMap();
        final Document parse = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(byteStream));
        parse.getDocumentElement().normalize();
        this.getImpressions(parse);
        final Element element = (Element)parse.getElementsByTagName("Linear").item(0);
        if (element != null) {
            final NodeList childNodes = element.getChildNodes();
            for (int i = 0; i < childNodes.getLength(); ++i) {
                final Node item = childNodes.item(i);
                final String nodeName = item.getNodeName();
                if ("Duration".equalsIgnoreCase(nodeName)) {
                    this.m_Duration = this.getDuration(item);
                }
                else if ("TrackingEvents".equalsIgnoreCase(nodeName)) {
                    this.getTrackingEvents(item);
                }
                else if ("VideoClicks".equalsIgnoreCase(nodeName)) {
                    this.getVideoClicks(item);
                }
                else if ("MediaFiles".equalsIgnoreCase(nodeName)) {
                    this.m_MediaFiles = this.getMediaFiles(item);
                }
            }
        }
    }
    
    private void addEvent(final String s, final String s2) {
        List<String> list = this.m_TrackingEvents.get(s);
        if (list == null) {
            list = new ArrayList<String>();
            this.m_TrackingEvents.put(s, list);
        }
        list.add(s2);
    }
    
    private String getCDATA(final Node node) {
        String s = "";
        final NodeList childNodes = node.getChildNodes();
        String trim;
        for (int i = 0; i < childNodes.getLength(); ++i, s = trim) {
            trim = childNodes.item(i).getNodeValue().trim();
            if (trim.length() <= 0) {
                trim = s;
            }
        }
        return s;
    }
    
    private int getDuration(final Node node) {
        final String cdata = this.getCDATA(node);
        final String string = cdata + "+0000";
        Label_0065: {
            if (!string.contains(".")) {
                break Label_0065;
            }
            String s = "HH:mm:ss.SSSZ";
            while (true) {
                final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(s);
                try {
                    return (int)simpleDateFormat.parse(string).getTime();
                    s = "HH:mm:ssZ";
                }
                catch (ParseException ex) {
                    throw new Exception("Invalid '<Duration>" + cdata + "</Duration>' in VAST XML");
                }
            }
        }
    }
    
    private void getImpressions(final Document document) {
        final NodeList elementsByTagName = document.getElementsByTagName("Impression");
        if (elementsByTagName.getLength() > 0) {
            for (int i = 0; i < elementsByTagName.getLength(); ++i) {
                this.addEvent("Impression", this.getCDATA(elementsByTagName.item(i)));
            }
        }
    }
    
    private HashMap getMediaFiles(final Node node) {
        final HashMap<Integer, String> hashMap = new HashMap<Integer, String>();
        final NodeList childNodes = node.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); ++i) {
            final Node item = childNodes.item(i);
            if ("MediaFile".equalsIgnoreCase(item.getNodeName())) {
                final Node namedItem = item.getAttributes().getNamedItem("bitrate");
                Integer n;
                if (namedItem != null) {
                    n = Integer.decode(namedItem.getNodeValue());
                }
                else {
                    n = -1;
                }
                hashMap.put(n, this.getCDATA(item));
            }
        }
        return hashMap;
    }
    
    private void getTrackingEvents(final Node node) {
        final NodeList childNodes = node.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); ++i) {
            final Node item = childNodes.item(i);
            if ("Tracking".equalsIgnoreCase(item.getNodeName())) {
                this.addEvent(item.getAttributes().getNamedItem("event").getNodeValue(), this.getCDATA(item));
            }
        }
    }
    
    private void getVideoClicks(final Node node) {
        final NodeList childNodes = node.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); ++i) {
            final Node item = childNodes.item(i);
            final String nodeName = item.getNodeName();
            if ("ClickThrough".equalsIgnoreCase(nodeName)) {
                this.m_ClickThroughURL = this.getCDATA(item);
            }
            else if ("ClickTracking".equalsIgnoreCase(nodeName)) {
                this.addEvent("ClickTracking", this.getCDATA(item));
            }
        }
    }
    
    List getEventURLs(final String s) {
        List list;
        if (this.m_TrackingEvents == null) {
            list = null;
        }
        else {
            list = this.m_TrackingEvents.get(s);
            if (list != null) {
                this.m_TrackingEvents.remove(s);
                return list;
            }
        }
        return list;
    }
    
    String getVideoURL(final String s) {
        if (this.m_MediaFiles == null) {
            return null;
        }
        final TreeSet<Integer> set = new TreeSet<Integer>();
        set.addAll(this.m_MediaFiles.keySet());
        final Integer n = set.first();
        this.m_BitRate = n;
        final String s2 = this.m_MediaFiles.get(n);
        NexageLog.d(s, "MediaFile: bitrate=" + this.m_BitRate + " URL=" + s2);
        return s2;
    }
}
