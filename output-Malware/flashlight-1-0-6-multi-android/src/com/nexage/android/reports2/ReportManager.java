// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.reports2;

import java.util.TimerTask;
import com.nexage.android.rules.RuleMgr;
import com.nexage.android.NexageAdManager;
import com.nexage.android.rules.AdMaxPosition;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.v2.TagInfo;
import android.content.Context;
import java.util.Timer;

public class ReportManager
{
    private static final int CHECK_AFTER_REQ_DELAY = 3000;
    private static final int IGNORE_RESUME_AFTER_START = 500;
    private static final String TAG = "ReportManager";
    private static Timer checkAfterReqTimer;
    private static Context context;
    private static Timer flushTimer;
    private static boolean isFlushing;
    private static boolean isPaused;
    private static boolean isStarted;
    private static long startTime;
    
    static {
        ReportManager.startTime = 0L;
    }
    
    public static void addAdNetRequest(final AdService2 adService2, final TagInfo tagInfo, final int status) {
        synchronized (ReportManager.class) {
            tagInfo.status = status;
            if (status == 1) {
                adService2.buyer = tagInfo.buyer;
                adService2.pru = tagInfo.pru;
            }
            adService2.addAdNetRequest(tagInfo);
        }
    }
    
    public static boolean addClickEvent(final AdService2 adService2, final AdClick adClick) {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "addClickEvent: " + adClick.tag);
            boolean b;
            if (adService2.adClick != null) {
                NexageLog.i(adService2.position, "AD Clicked again. Stats will only reflect the first click.");
                b = false;
            }
            else {
                ReportPersistMgr.insert(adService2, adService2.adClick = adClick);
                NexageLog.i(adService2.position, "AD Clicked");
                NexageLog.d("ReportManager", "calling isReadyToFlush from addClickEvent");
                if (isReadyToFlush()) {
                    flush();
                }
                b = true;
            }
            return b;
        }
    }
    
    public static boolean addClickEvent(final AdService2 adService2, final TagInfo tagInfo) {
        synchronized (ReportManager.class) {
            return addClickEvent(adService2, new AdClick(tagInfo.positionName, tagInfo.adTag.tagId));
        }
    }
    
    public static boolean addDisplayEvent(final AdService2 adService2, final AdDisplay adDisplay) {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "addDisplayEvent: " + adDisplay.tag);
            boolean b;
            if (adService2.adDisplay != null) {
                NexageLog.i("ReportManager", "AD displayed again. Stats will only reflect the first display.");
                b = false;
            }
            else {
                ReportPersistMgr.insert(adService2, adDisplay);
                NexageLog.d("ReportManager", "calling isReadyToFlush from addDisplayEvent");
                if (isReadyToFlush()) {
                    flush();
                }
                b = true;
            }
            return b;
        }
    }
    
    public static boolean addDisplayEvent(final AdService2 adService2, final TagInfo tagInfo) {
        synchronized (ReportManager.class) {
            final AdDisplay adDisplay = new AdDisplay(tagInfo.positionName, tagInfo.adTag.tagId);
            adDisplay.pru = tagInfo.pru;
            adDisplay.buyer = tagInfo.buyer;
            return addDisplayEvent(adService2, adDisplay);
        }
    }
    
    private static void flush() {
        while (true) {
            Label_0058: {
                synchronized (ReportManager.class) {
                    NexageLog.d("ReportManager", "flush");
                    if (ReportManager.isFlushing) {
                        NexageLog.w("ReportManager", "flush already in progress");
                    }
                    else {
                        stopFlushTimer();
                        if (!AdMaxPosition.isOffline(ReportManager.context)) {
                            break Label_0058;
                        }
                        NexageLog.w("ReportManager", "device is offline");
                        startFlushTimer();
                    }
                    return;
                }
            }
            ReportSender.startFlush(ReportManager.context);
        }
    }
    
    static String getReportServlet() {
        return NexageAdManager.getMediationURL() + "/adEvents";
    }
    
    public static AdService2 getService(final String s) {
        synchronized (ReportManager.class) {
            return new AdService2(s);
        }
    }
    
    public static long getTimestamp() {
        return System.currentTimeMillis();
    }
    
    private static boolean isReadyToFlush() {
        while (true) {
            boolean b = false;
            while (true) {
                Label_0162: {
                    while (true) {
                        Label_0155: {
                            synchronized (ReportManager.class) {
                                NexageLog.d("ReportManager", "isReadyToFlush");
                                if (ReportManager.isFlushing) {
                                    NexageLog.w("ReportManager", "flush already in progress");
                                }
                                else {
                                    final int batchSize = RuleMgr.batchSize();
                                    final int requestCount = ReportPersistMgr.s_ReportPersistMgr.getRequestCount();
                                    final int clickCount = ReportPersistMgr.s_ReportPersistMgr.getClickCount();
                                    if (requestCount >= batchSize) {
                                        break Label_0162;
                                    }
                                    b = false;
                                    if (clickCount > 0) {
                                        break Label_0162;
                                    }
                                    NexageLog.d("ReportManager", "reqs=" + requestCount + ", batch size=" + batchSize + ", clicks=" + clickCount);
                                    final StringBuilder sb = new StringBuilder("flush is ");
                                    if (!b) {
                                        break Label_0155;
                                    }
                                    final String s = "";
                                    NexageLog.d("ReportManager", sb.append(s).append("ready").toString());
                                    stopCheckAfterReqTimer();
                                }
                                return b;
                            }
                        }
                        final String s = "NOT ";
                        continue;
                    }
                }
                b = true;
                continue;
            }
        }
    }
    
    public static void pause() {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "pause");
            ReportManager.isPaused = true;
        }
    }
    
    static void reportFlushFinished(final boolean b) {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "reportFlushFinished, success=" + b);
            if (b) {
                ReportPersistMgr.commitCheckPoint();
            }
            ReportManager.isFlushing = false;
            if (!ReportManager.isPaused) {
                startFlushTimer();
            }
        }
    }
    
    public static void requestCompleted(final AdService2 p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             Lcom/nexage/android/reports2/ReportManager;.class
        //     2: monitorenter   
        //     3: ldc             "ReportManager"
        //     5: ldc             "requestCompleted"
        //     7: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    10: aload_0        
        //    11: invokestatic    com/nexage/android/reports2/ReportManager.getTimestamp:()J
        //    14: aload_0        
        //    15: getfield        com/nexage/android/reports2/AdService2.timestamp:J
        //    18: lsub           
        //    19: l2i            
        //    20: putfield        com/nexage/android/reports2/AdService2.responseTime:I
        //    23: ldc             "ReportManager"
        //    25: new             Ljava/lang/StringBuilder;
        //    28: dup            
        //    29: ldc_w           "service contains "
        //    32: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    35: aload_0        
        //    36: getfield        com/nexage/android/reports2/AdService2.adNetRequests:Ljava/util/ArrayList;
        //    39: invokevirtual   java/util/ArrayList.size:()I
        //    42: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    45: ldc_w           " requests"
        //    48: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    51: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    54: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    57: aload_0        
        //    58: getfield        com/nexage/android/reports2/AdService2.adNetRequests:Ljava/util/ArrayList;
        //    61: invokevirtual   java/util/ArrayList.size:()I
        //    64: ifne            102
        //    67: ldc             "ReportManager"
        //    69: new             Ljava/lang/StringBuilder;
        //    72: dup            
        //    73: ldc_w           "skipping: no adnets found. Does position "
        //    76: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    79: aload_0        
        //    80: getfield        com/nexage/android/reports2/AdService2.position:Ljava/lang/String;
        //    83: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    86: ldc_w           " have associated ad tags?"
        //    89: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    92: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    95: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    98: ldc             Lcom/nexage/android/reports2/ReportManager;.class
        //   100: monitorexit    
        //   101: return         
        //   102: aload_0        
        //   103: aload_0        
        //   104: invokevirtual   com/nexage/android/reports2/AdService2.toJson:()Lorg/json/JSONObject;
        //   107: invokevirtual   org/json/JSONObject.toString:()Ljava/lang/String;
        //   110: putfield        com/nexage/android/reports2/AdService2.json:Ljava/lang/String;
        //   113: aload_0        
        //   114: invokestatic    com/nexage/android/reports2/ReportPersistMgr.insert:(Lcom/nexage/android/reports2/AdService2;)V
        //   117: invokestatic    com/nexage/android/reports2/ReportManager.startCheckAfterReqTimer:()V
        //   120: goto            98
        //   123: astore_1       
        //   124: ldc             Lcom/nexage/android/reports2/ReportManager;.class
        //   126: monitorexit    
        //   127: aload_1        
        //   128: athrow         
        //   129: astore_2       
        //   130: ldc             "ReportManager"
        //   132: ldc_w           "json ex"
        //   135: aload_2        
        //   136: invokestatic    com/nexage/android/internal/NexageLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   139: goto            113
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                    
        //  -----  -----  -----  -----  ------------------------
        //  3      98     123    129    Any
        //  102    113    129    142    Lorg/json/JSONException;
        //  102    113    123    129    Any
        //  113    120    123    129    Any
        //  130    139    123    129    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0102:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static void resume() {
        while (true) {
            synchronized (ReportManager.class) {
                NexageLog.d("ReportManager", "resume");
                ReportManager.isPaused = false;
                if (ReportManager.isStarted) {
                    if (System.currentTimeMillis() - ReportManager.startTime > 500L) {
                        flush();
                    }
                    else {
                        NexageLog.d("ReportManager", "ignore resume: too soon after start");
                    }
                    return;
                }
            }
            NexageLog.d("ReportManager", "ignore resume: not started yet");
        }
    }
    
    public static void setFlushing(final boolean isFlushing) {
        synchronized (ReportManager.class) {
            ReportManager.isFlushing = isFlushing;
        }
    }
    
    public static void start(final Context context) {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "starting...");
            ReportPersistMgr.start(ReportManager.context = context);
            flush();
            ReportManager.isStarted = true;
            ReportManager.startTime = System.currentTimeMillis();
            NexageLog.d("ReportManager", "initial report flush complete");
        }
    }
    
    private static void startCheckAfterReqTimer() {
        synchronized (ReportManager.class) {
            stopCheckAfterReqTimer();
            NexageLog.d("ReportManager", "startCheckAfterReqTimer");
            (ReportManager.checkAfterReqTimer = new Timer()).schedule(new TimerTask() {
                @Override
                public final void run() {
                    NexageLog.d("ReportManager", "calling isReadyToFlush from requestCompleted");
                    if (isReadyToFlush()) {
                        flush();
                    }
                }
            }, 3000L);
        }
    }
    
    private static void startFlushTimer() {
        synchronized (ReportManager.class) {
            stopFlushTimer();
            final long n = RuleMgr.reportFrequency();
            NexageLog.d("ReportManager", "startFlushTimer, delay=" + n);
            (ReportManager.flushTimer = new Timer()).schedule(new TimerTask() {
                @Override
                public final void run() {
                    NexageLog.d("ReportManager", "tick!");
                    flush();
                }
            }, n);
        }
    }
    
    private static void stopCheckAfterReqTimer() {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "stopCheckAfterReqTimer");
            if (ReportManager.checkAfterReqTimer != null) {
                ReportManager.checkAfterReqTimer.cancel();
                ReportManager.checkAfterReqTimer = null;
            }
        }
    }
    
    private static void stopFlushTimer() {
        synchronized (ReportManager.class) {
            NexageLog.d("ReportManager", "stopFlushTimer");
            if (ReportManager.flushTimer != null) {
                ReportManager.flushTimer.cancel();
                ReportManager.flushTimer = null;
            }
        }
    }
}
