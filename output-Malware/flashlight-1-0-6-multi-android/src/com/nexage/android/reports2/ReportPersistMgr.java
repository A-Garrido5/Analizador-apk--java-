// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.reports2;

import android.database.Cursor;
import android.database.DatabaseUtils;
import com.nexage.android.internal.NexageLog;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.content.Context;

class ReportPersistMgr
{
    private static final String BUYER = "buyer";
    private static final String CLICK_TABLE = "clickTable";
    private static final String DISPLAY_TABLE = "diplayTable";
    private static final String FLUSH_TS = "flushTs";
    private static final String GUID = "a";
    private static final String INTEGER = " INTEGER";
    private static final String JSON = "json";
    private static final String POSITION = "pos";
    private static final String POS_SEQ = "posSeq";
    private static final String PRIMARY_KEY = " INTEGER PRIMARY KEY";
    private static final String PRU = "pru";
    private static final String REQUEST_TABLE = "reqTable";
    private static final String SEQUENCE = "seq";
    private static final String STATUS = "st";
    private static final String SVC_RESPONSE_TIME = "svcRespTime";
    private static final String SVC_TIMESTAMP = "svcTimestamp";
    private static final String TAG = "ReportPersist";
    private static final String TAGID = "tagId";
    private static final String TEXT = " TEXT";
    private static final String TIMESTAMP = "ts";
    static ReportPersistMgr s_ReportPersistMgr;
    private final Context context;
    private final SQLiteStatement deleteDisplayStmt;
    private final SQLiteStatement deleteEventsStmt;
    private final SQLiteStatement deleteRequestsStmt;
    private final SQLiteStatement insertDisplayStmt;
    private final SQLiteStatement insertEventStmt;
    private final SQLiteStatement insertRequestStmt;
    private final SQLiteDatabase reader;
    private final SQLiteStatement updateClickStmt;
    private final SQLiteStatement updateDisplayStmt;
    private final SQLiteStatement updateRequestStmt;
    private final SQLiteDatabase writer;
    
    static {
        ReportPersistMgr.s_ReportPersistMgr = null;
    }
    
    private ReportPersistMgr(final Context context) {
        this.context = context;
        final ReportPersistMgr$OpenHelper reportPersistMgr$OpenHelper = new ReportPersistMgr$OpenHelper(this.context);
        this.writer = reportPersistMgr$OpenHelper.getWritableDatabase();
        this.reader = reportPersistMgr$OpenHelper.getReadableDatabase();
        this.insertRequestStmt = this.writer.compileStatement("insert into reqTable(pos,svcTimestamp,svcRespTime,st,buyer,pru,json,a) values(?,?,?,?,?,?,?,?)");
        this.insertEventStmt = this.writer.compileStatement("insert into clickTable(pos,posSeq,ts,tagId,a) values(?,?,?,?,?)");
        this.insertDisplayStmt = this.writer.compileStatement("insert into diplayTable(pos,posSeq,ts,tagId,buyer,pru,a) values(?,?,?,?,?,?,?)");
        this.deleteRequestsStmt = this.writer.compileStatement("delete from reqTable WHERE flushTs is not null");
        this.deleteEventsStmt = this.writer.compileStatement("delete from clickTable WHERE flushTs is not null");
        this.deleteDisplayStmt = this.writer.compileStatement("delete from diplayTable WHERE flushTs is not null");
        this.updateRequestStmt = this.writer.compileStatement("update reqTable set flushTs=? WHERE flushTs is null");
        this.updateClickStmt = this.writer.compileStatement("update clickTable set flushTs=? WHERE flushTs is null");
        this.updateDisplayStmt = this.writer.compileStatement("update diplayTable set flushTs=? WHERE flushTs is null");
    }
    
    static void commitCheckPoint() {
        synchronized (ReportPersistMgr.class) {
            if (ReportPersistMgr.s_ReportPersistMgr != null) {
                ReportPersistMgr.s_ReportPersistMgr.deleteRequestsStmt.execute();
                ReportPersistMgr.s_ReportPersistMgr.deleteEventsStmt.execute();
                ReportPersistMgr.s_ReportPersistMgr.deleteDisplayStmt.execute();
            }
        }
    }
    
    public static void insert(final AdService2 adService2) {
        SQLiteStatement insertRequestStmt = null;
        Label_0095_Outer:Label_0112_Outer:
        while (true) {
            while (true) {
            Label_0204:
                while (true) {
                Label_0195:
                    while (true) {
                        while (true) {
                            try {
                                insertRequestStmt = ReportPersistMgr.s_ReportPersistMgr.insertRequestStmt;
                                insertRequestStmt.bindString(1, adService2.position);
                                insertRequestStmt.bindLong(2, adService2.timestamp);
                                insertRequestStmt.bindLong(3, (long)adService2.responseTime);
                                insertRequestStmt.bindLong(4, (long)adService2.status);
                                if (adService2.buyer != null) {
                                    insertRequestStmt.bindString(5, adService2.buyer);
                                }
                                else {
                                    insertRequestStmt.bindNull(5);
                                }
                                if (adService2.pru != null) {
                                    insertRequestStmt.bindString(6, adService2.pru);
                                    if (adService2.json == null) {
                                        break Label_0195;
                                    }
                                    insertRequestStmt.bindString(7, adService2.json);
                                    if (adService2.aGuid != null) {
                                        insertRequestStmt.bindString(8, adService2.aGuid);
                                        insertRequestStmt.executeInsert();
                                        NexageLog.d("ReportPersist", "insert record req:" + adService2.m_ServiceID + " pos:" + adService2.position + " json:" + adService2.json);
                                        return;
                                    }
                                    break Label_0204;
                                }
                            }
                            catch (Exception ex) {
                                NexageLog.e("ReportPersist", "sql error", ex);
                                continue;
                            }
                            break;
                        }
                        insertRequestStmt.bindNull(6);
                        continue Label_0095_Outer;
                    }
                    insertRequestStmt.bindNull(7);
                    continue Label_0112_Outer;
                }
                insertRequestStmt.bindNull(8);
                continue;
            }
        }
    }
    
    public static void insert(final AdService2 adService2, final AdClick adClick) {
        while (true) {
            while (true) {
                final SQLiteStatement insertEventStmt;
                Label_0155: {
                    synchronized (ReportPersistMgr.class) {
                        if (adClick.tag != null && adService2.position != null) {
                            insertEventStmt = ReportPersistMgr.s_ReportPersistMgr.insertEventStmt;
                            insertEventStmt.bindString(1, adService2.position);
                            insertEventStmt.bindLong(2, adService2.timestamp % 10000L);
                            insertEventStmt.bindLong(3, adClick.timestamp);
                            insertEventStmt.bindString(4, adClick.tag);
                            if (adService2.aGuid == null) {
                                break Label_0155;
                            }
                            insertEventStmt.bindString(5, adService2.aGuid);
                            insertEventStmt.executeInsert();
                            NexageLog.d("ReportPersist", "insert record click: " + adService2.m_ServiceID + " tag: " + adClick.tag + "pos: " + adService2.position);
                        }
                        return;
                    }
                }
                insertEventStmt.bindNull(5);
                continue;
            }
        }
    }
    
    public static void insert(final AdService2 adService2, final AdDisplay adDisplay) {
        synchronized (ReportPersistMgr.class) {
            try {
                final SQLiteStatement insertDisplayStmt = ReportPersistMgr.s_ReportPersistMgr.insertDisplayStmt;
                insertDisplayStmt.bindString(1, new String(adService2.position.getBytes("UTF-8"), "UTF-8"));
                insertDisplayStmt.bindLong(2, adService2.timestamp % 10000L);
                insertDisplayStmt.bindLong(3, adDisplay.timestamp);
                if (adDisplay.tag != null) {
                    insertDisplayStmt.bindString(4, new String(adDisplay.tag.getBytes("UTF-8"), "UTF-8"));
                }
                else {
                    insertDisplayStmt.bindNull(4);
                }
                if (adDisplay.buyer != null) {
                    insertDisplayStmt.bindString(5, new String(adDisplay.buyer.getBytes("UTF-8"), "UTF-8"));
                }
                else {
                    insertDisplayStmt.bindNull(5);
                }
                if (adDisplay.pru == null) {
                    goto Label_0262;
                }
                insertDisplayStmt.bindString(6, new String(adDisplay.pru.getBytes("UTF-8"), "UTF-8"));
                if (adService2.aGuid != null) {
                    insertDisplayStmt.bindString(7, adService2.aGuid);
                    insertDisplayStmt.executeInsert();
                    NexageLog.d("ReportPersist", "insert record display: " + adService2.m_ServiceID + " tag: " + adDisplay.tag + "pos: " + adService2.position);
                    return;
                }
                goto Label_0272;
            }
            catch (Exception ex) {}
        }
    }
    
    static void start(final Context context) {
        synchronized (ReportPersistMgr.class) {
            if (ReportPersistMgr.s_ReportPersistMgr == null) {
                ReportPersistMgr.s_ReportPersistMgr = new ReportPersistMgr(context);
            }
        }
    }
    
    public static void updateAndReadRecords() {
        synchronized (ReportPersistMgr.class) {
            final long currentTimeMillis = System.currentTimeMillis();
            final SQLiteStatement updateRequestStmt = ReportPersistMgr.s_ReportPersistMgr.updateRequestStmt;
            final long currentTimeMillis2 = System.currentTimeMillis();
            updateRequestStmt.bindLong(1, currentTimeMillis2);
            updateRequestStmt.execute();
            final SQLiteStatement updateClickStmt = ReportPersistMgr.s_ReportPersistMgr.updateClickStmt;
            updateClickStmt.bindLong(1, currentTimeMillis2);
            updateClickStmt.execute();
            final SQLiteStatement updateDisplayStmt = ReportPersistMgr.s_ReportPersistMgr.updateDisplayStmt;
            updateDisplayStmt.bindLong(1, currentTimeMillis2);
            updateDisplayStmt.execute();
            NexageLog.i("ReportPersist", "total update time: " + (System.currentTimeMillis() - currentTimeMillis));
            NexageLog.i("ReportPersist", "read back total: " + ReportPersistMgr.s_ReportPersistMgr.readRequests() + " requests, " + ReportPersistMgr.s_ReportPersistMgr.readClicks() + " clicks, " + ReportPersistMgr.s_ReportPersistMgr.readDisplays() + " displays, total time: " + (System.currentTimeMillis() - System.currentTimeMillis()));
        }
    }
    
    void deleteAll() {
        this.writer.delete("reqTable", (String)null, (String[])null);
        this.writer.delete("diplayTable", (String)null, (String[])null);
        this.writer.delete("clickTable", (String)null, (String[])null);
    }
    
    public int getClickCount() {
        final int n = (int)DatabaseUtils.queryNumEntries(this.reader, "clickTable");
        NexageLog.i("ReportPersist", "click count:" + n);
        return n;
    }
    
    public int getRequestCount() {
        final int n = (int)DatabaseUtils.queryNumEntries(this.reader, "reqTable");
        NexageLog.i("ReportPersist", "request count:" + n);
        return n;
    }
    
    int readClicks() {
        final Cursor query = this.reader.query("clickTable", new String[] { "seq", "pos", "posSeq", "ts", "tagId", "flushTs", "a" }, "flushTs is not null", (String[])null, (String)null, (String)null, (String)null);
        final boolean moveToFirst = query.moveToFirst();
        int n = 0;
        Label_0233: {
            if (!moveToFirst) {
                break Label_0233;
            }
            while (true) {
                query.getInt(0);
                final String string = query.getString(1);
                final int int1 = query.getInt(2);
                final long long1 = query.getLong(3);
                final String string2 = query.getString(4);
                final long long2 = query.getLong(5);
                final String string3 = query.getString(6);
                Label_0197: {
                    if (long2 <= 0L) {
                        break Label_0197;
                    }
                    final AdClick adClick = new AdClick(string, string2, string3);
                    adClick.timestamp = long1;
                    adClick.reqId = int1;
                    synchronized (ReportSender.class) {
                        ReportSender.report.clicks.add(adClick);
                        // monitorexit(ReportSender.class)
                        ++n;
                        if (!query.moveToNext()) {
                            NexageLog.d("read total " + n + " click records");
                            if (!query.isClosed()) {
                                query.close();
                            }
                            if (n > 0) {
                                NexageLog.i("ReportPersist", "read back " + n + " click records");
                            }
                            return n;
                        }
                        continue;
                    }
                }
                break;
            }
        }
    }
    
    int readDisplays() {
        final Cursor query = this.reader.query("diplayTable", new String[] { "seq", "pos", "posSeq", "ts", "tagId", "buyer", "pru", "flushTs", "a" }, "flushTs is not null", (String[])null, (String)null, (String)null, (String)null);
        final boolean moveToFirst = query.moveToFirst();
        int n = 0;
        Label_0252: {
            if (!moveToFirst) {
                break Label_0252;
            }
            while (true) {
                query.getInt(0);
                final String string = query.getString(1);
                final int int1 = query.getInt(2);
                final long long1 = query.getLong(3);
                final String string2 = query.getString(4);
                final String string3 = query.getString(5);
                final String string4 = query.getString(6);
                final long long2 = query.getLong(7);
                final String string5 = query.getString(8);
                Label_0243: {
                    if (long2 <= 0L) {
                        break Label_0243;
                    }
                    final AdDisplay adDisplay = new AdDisplay(string, string2, string5);
                    adDisplay.buyer = string3;
                    adDisplay.pru = string4;
                    adDisplay.timestamp = long1;
                    adDisplay.reqId = int1;
                    synchronized (ReportSender.class) {
                        ReportSender.report.displays.add(adDisplay);
                        // monitorexit(ReportSender.class)
                        ++n;
                        if (!query.moveToNext()) {
                            if (!query.isClosed()) {
                                query.close();
                            }
                            if (n > 0) {
                                NexageLog.i("ReportPersist", "read back " + n + " display records");
                            }
                            return n;
                        }
                        continue;
                    }
                }
                break;
            }
        }
    }
    
    int readRequests() {
        final Cursor query = this.reader.query("reqTable", new String[] { "seq", "pos", "svcTimestamp", "svcRespTime", "buyer", "pru", "flushTs", "json", "a" }, "flushTs is not null", (String[])null, (String)null, (String)null, (String)null);
        final boolean moveToFirst = query.moveToFirst();
        int n = 0;
        if (moveToFirst) {
            do {
                query.getInt(0);
                final String string = query.getString(1);
                final long long1 = query.getLong(2);
                final int int1 = query.getInt(3);
                final String string2 = query.getString(4);
                final String string3 = query.getString(5);
                final long long2 = query.getLong(6);
                final String string4 = query.getString(7);
                final String string5 = query.getString(8);
                if (long2 <= 0L) {
                    NexageLog.e("ReportPersist", "flushTs <= 0");
                }
                else {
                    final AdService2 service = ReportSender.report.findService(string);
                    service.timestamp = long1;
                    service.responseTime = int1;
                    service.buyer = string2;
                    service.pru = string3;
                    service.restored = true;
                    service.json = string4;
                    service.aGuid = string5;
                    ++n;
                }
            } while (query.moveToNext());
        }
        if (!query.isClosed()) {
            query.close();
        }
        if (n > 0) {
            NexageLog.i("ReportPersist", "read back " + n + " request records");
        }
        return n;
    }
}
