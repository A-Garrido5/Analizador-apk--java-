// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.sdks;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import android.annotation.SuppressLint;
import java.util.Iterator;
import java.util.Hashtable;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import com.nexage.android.NexageAdManager;
import android.app.Activity;
import java.util.Map;
import java.util.Calendar;
import android.location.Location;
import com.nexage.android.internal.NexageLog;
import android.os.Handler;
import android.content.Context;
import android.view.View;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import com.nexage.android.sdkmanager.SDKProvider;

public final class InMobiProvider extends SDKProvider
{
    private static final int INMOBI_AD_UNIT_120X600 = 13;
    private static final int INMOBI_AD_UNIT_300X250 = 10;
    private static final int INMOBI_AD_UNIT_320X50 = 15;
    private static final int INMOBI_AD_UNIT_468X60 = 12;
    private static final int INMOBI_AD_UNIT_728X90 = 11;
    private static final int REFRESH_INTERVAL_OFF = -1;
    private static final String TAG = "InMobiProvider";
    private Class IMAdListenerClass;
    private Class IMAdRequestClass;
    private Constructor IMAdRequestConstructor;
    private Class IMAdRequestEthnicityTypeClass;
    private Class IMAdRequestGenderTypeClass;
    private Class IMAdViewClass;
    private Constructor IMAdViewConstructor;
    private Class IMCommonUtilClass;
    private Method getReleaseVersionMethod;
    private Object imAdRequest;
    private View imAdView;
    private Method loadNewAdMethod;
    private Method setAgeMethod;
    private Method setAreaCodeMethod;
    private Method setCurrentLocationMethod;
    private Method setDateOfBirthMethod;
    private Method setEthnicityMethod;
    private Method setGenderMethod;
    private Method setIMAdListenerMethod;
    private Method setIncomeMethod;
    private Method setInterestsMethod;
    private Method setLocationWithCityStateCountryMethod;
    private Method setPostalCodeMethod;
    private Method setRefreshIntervalMethod;
    private Method setRequestParamsMethod;
    private Method valueOfEthnicityMethod;
    private Method valueOfGenderMethod;
    
    public InMobiProvider(final Context context, final Handler handler) {
        super(context, handler);
        NexageLog.d("InMobiProvider", "entering constructor");
        try {
            this.IMCommonUtilClass = Class.forName("com.inmobi.commons.IMCommonUtil");
            this.getReleaseVersionMethod = this.IMCommonUtilClass.getDeclaredMethod("getReleaseVersion", (Class[])new Class[0]);
            this.IMAdRequestEthnicityTypeClass = Class.forName("com.inmobi.androidsdk.IMAdRequest$EthnicityType");
            this.valueOfEthnicityMethod = this.IMAdRequestEthnicityTypeClass.getDeclaredMethod("valueOf", String.class);
            this.IMAdRequestGenderTypeClass = Class.forName("com.inmobi.androidsdk.IMAdRequest$GenderType");
            this.valueOfGenderMethod = this.IMAdRequestGenderTypeClass.getDeclaredMethod("valueOf", String.class);
            this.IMAdRequestClass = Class.forName("com.inmobi.androidsdk.IMAdRequest");
            this.IMAdRequestConstructor = this.IMAdRequestClass.getConstructor((Class[])new Class[0]);
            this.setAgeMethod = this.IMAdRequestClass.getDeclaredMethod("setAge", Integer.TYPE);
            this.setAreaCodeMethod = this.IMAdRequestClass.getDeclaredMethod("setAreaCode", String.class);
            this.setCurrentLocationMethod = this.IMAdRequestClass.getDeclaredMethod("setCurrentLocation", Location.class);
            this.setDateOfBirthMethod = this.IMAdRequestClass.getDeclaredMethod("setDateOfBirth", Calendar.class);
            this.setEthnicityMethod = this.IMAdRequestClass.getDeclaredMethod("setEthnicity", this.IMAdRequestEthnicityTypeClass);
            this.setGenderMethod = this.IMAdRequestClass.getDeclaredMethod("setGender", this.IMAdRequestGenderTypeClass);
            this.setIncomeMethod = this.IMAdRequestClass.getDeclaredMethod("setIncome", Integer.TYPE);
            this.setInterestsMethod = this.IMAdRequestClass.getDeclaredMethod("setInterests", String.class);
            this.setLocationWithCityStateCountryMethod = this.IMAdRequestClass.getDeclaredMethod("setLocationWithCityStateCountry", String.class, String.class, String.class);
            this.setPostalCodeMethod = this.IMAdRequestClass.getDeclaredMethod("setPostalCode", String.class);
            this.setRequestParamsMethod = this.IMAdRequestClass.getDeclaredMethod("setRequestParams", Map.class);
            this.IMAdListenerClass = Class.forName("com.inmobi.androidsdk.IMAdListener");
            this.IMAdViewClass = Class.forName("com.inmobi.androidsdk.IMAdView");
            this.IMAdViewConstructor = this.IMAdViewClass.getConstructor(Activity.class, Integer.TYPE, String.class);
            this.loadNewAdMethod = this.IMAdViewClass.getDeclaredMethod("loadNewAd", this.IMAdRequestClass);
            this.setIMAdListenerMethod = this.IMAdViewClass.getDeclaredMethod("setIMAdListener", this.IMAdListenerClass);
            this.setRefreshIntervalMethod = this.IMAdViewClass.getDeclaredMethod("setRefreshInterval", Integer.TYPE);
            final String s = (String)this.getReleaseVersionMethod.invoke(null, new Object[0]);
            this.isSdkInitialized = true;
            NexageLog.d("InMobiProvider", "SDK is initialized using InMobi version " + s);
        }
        catch (Exception ex) {
            NexageLog.e("InMobiProvider", "Failed to initialize InMobi SDK.");
            NexageLog.e("InMobiProvider", "Make sure that the InMobi SDK JAR is in your classpath.");
            NexageLog.e("InMobiProvider", "Failed here:", ex);
        }
    }
    
    @SuppressLint({ "DefaultLocale" })
    private void createIMAdRequest() {
        this.imAdRequest = this.IMAdRequestConstructor.newInstance(new Object[0]);
        final int age = NexageAdManager.getAge();
        if (age > 0) {
            this.setAgeMethod.invoke(this.imAdRequest, age);
        }
        final String requestAreaCode = NexageAdManager.getRequestAreaCode();
        if (requestAreaCode != null) {
            this.setAreaCodeMethod.invoke(this.imAdRequest, requestAreaCode);
        }
        if (NexageAdManager.getLocationAwareness() != null) {
            this.setCurrentLocationMethod.invoke(this.imAdRequest, NexageAdManager.getLocationAwareness().getLocation());
        }
        final GregorianCalendar birthday = NexageAdManager.getBirthday();
        if (birthday != null) {
            this.setDateOfBirthMethod.invoke(this.imAdRequest, birthday);
        }
        if (NexageAdManager.getEthnicity() != null) {
            String lowerCase = NexageAdManager.getEthnicity().toString().toLowerCase(Locale.getDefault());
            if (lowerCase.startsWith("african")) {
                lowerCase = "black";
            }
            final StringBuilder sb = new StringBuilder();
            sb.append("Eth_");
            sb.append(Character.toUpperCase(lowerCase.charAt(0)));
            sb.append(lowerCase.substring(1));
            this.setEthnicityMethod.invoke(this.imAdRequest, this.valueOfEthnicityMethod.invoke(null, sb.toString()));
        }
        if (NexageAdManager.getGender() != null) {
            this.setGenderMethod.invoke(this.imAdRequest, this.valueOfGenderMethod.invoke(null, NexageAdManager.getGender().toString().toUpperCase(Locale.getDefault())));
        }
        final int householdIncome = NexageAdManager.getHouseholdIncome();
        if (householdIncome > 0) {
            this.setIncomeMethod.invoke(this.imAdRequest, householdIncome);
        }
        final String keywords = NexageAdManager.getKeywords();
        if (keywords != null) {
            this.setInterestsMethod.invoke(this.imAdRequest, keywords);
        }
        String city = NexageAdManager.getCity();
        String state = NexageAdManager.getState();
        String countryCode = NexageAdManager.getCountryCode();
        if ((city != null && city.length() > 0) || (state != null && state.length() > 0) || (countryCode != null && countryCode.length() > 0)) {
            if (city == null) {
                city = "";
            }
            if (state == null) {
                state = "";
            }
            if (countryCode == null) {
                countryCode = "";
            }
            this.setLocationWithCityStateCountryMethod.invoke(this.imAdRequest, city, state, countryCode);
        }
        final String requestPostalCode = NexageAdManager.getRequestPostalCode();
        if (requestPostalCode != null) {
            this.setPostalCodeMethod.invoke(this.imAdRequest, requestPostalCode);
        }
        final Hashtable extraParameters = NexageAdManager.getExtraParameters();
        if (extraParameters != null) {
            final HashMap<String, String> hashMap = new HashMap<String, String>();
            for (final Map.Entry<String, V> entry : extraParameters.entrySet()) {
                hashMap.put(entry.getKey(), (String)entry.getValue());
            }
            this.setRequestParamsMethod.invoke(this.imAdRequest, hashMap);
        }
    }
    
    private static int getInMobiSize(final int n, final int n2) {
        if (n2 < 50 || n < 320) {
            return -1;
        }
        if (n >= 320 && n2 >= 250) {
            return 10;
        }
        if (n >= 728 && n2 >= 90) {
            return 11;
        }
        if (n >= 468 && n <= 728 && n2 >= 60) {
            return 12;
        }
        if (n >= 120 && n < 300 && n2 >= 600) {
            return 13;
        }
        return 15;
    }
    
    @Override
    protected final void cancel() {
        try {
            this.setIMAdListenerMethod.invoke(this.imAdView, null);
        }
        catch (Exception ex) {
            NexageLog.e("InMobiProvider", "loadAd:", ex);
        }
    }
    
    @Override
    protected final View createAdView(final int n, final int n2, final String s) {
        this.imAdView = null;
        try {
            final int inMobiSize = getInMobiSize(n, n2);
            NexageLog.d("InMobiProvider", "createBannerView, inMobiSize:" + inMobiSize);
            this.imAdView = (View)this.IMAdViewConstructor.newInstance(this.context, inMobiSize, s);
            if (this.imAdView != null) {
                this.setIMAdListenerMethod.invoke(this.imAdView, Proxy.newProxyInstance(this.IMAdListenerClass.getClassLoader(), new Class[] { this.IMAdListenerClass }, new InMobiProvider$IMAdListenerHandler(this, null)));
                this.setRefreshIntervalMethod.invoke(this.imAdView, -1);
            }
            return this.imAdView;
        }
        catch (Exception ex) {
            NexageLog.e("InMobiProvider", "createBannerView:", ex);
            this.imAdView = null;
            return this.imAdView;
        }
    }
    
    @Override
    protected final View getAdView() {
        return this.imAdView;
    }
    
    @Override
    protected final void loadAdView() {
        try {
            this.createIMAdRequest();
            this.loadNewAdMethod.invoke(this.imAdView, this.imAdRequest);
        }
        catch (Exception ex) {
            NexageLog.e("InMobiProvider", "loadAdView:", ex);
        }
    }
}
