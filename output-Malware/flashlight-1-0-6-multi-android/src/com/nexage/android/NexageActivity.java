// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android;

import com.nexage.android.mraid.MraidView$OnRequestOrientationListener;
import com.nexage.android.mraid.MraidView$OnCloseButtonStateChangeListener;
import com.nexage.android.mraid.MraidView$ViewState;
import com.nexage.android.mraid.MraidView;
import com.nexage.android.mraid.MraidView$OnCloseListener;
import com.nexage.android.internal.MraidAdLayout;
import android.view.ViewGroup;
import com.nexage.android.internal.OrmmaAdLayout;
import android.os.Bundle;
import android.content.Intent;
import com.nexage.android.v2.provider.interstitial.NexageInterstitialProvider;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import android.view.View$OnClickListener;
import android.content.Context;
import android.widget.ImageView;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.DisplayMetrics;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.mraid.MraidView$ForceOrientation;
import android.widget.FrameLayout;
import com.nexage.android.interstitial.VideoResumeListener;
import android.view.View;
import com.nexage.android.interstitial.InterstitialLayout;
import android.app.Activity;

public class NexageActivity extends Activity
{
    private static final double CLOSE_BUTTON_SCALE = 0.15;
    public static final int INTERSTITIAL_ACTIVITY = 134217728;
    private static final String TAG = "NexageActivity";
    public static final String c_InterstitialAdID = "com.nexage.InterstitialAdID";
    public static final String c_InterstitialAdPosition = "com.nexage.InterstitialAdPosition";
    public static final String c_MM4RM_AdID = "com.nexage.MM4RM_AdID";
    public static final String c_Orientation = "com.nexage.Orientation";
    boolean _activityWasPaused;
    private String interstitialAdPosition;
    private InterstitialLayout m_InterstitialLayout;
    private View m_MM4RMAd;
    private VideoResumeListener m_ResumeListener;
    private FrameLayout rootLayout;
    
    public NexageActivity() {
        this._activityWasPaused = false;
    }
    
    private void setRequestedMraidOrientation(final boolean b, final MraidView$ForceOrientation mraidView$ForceOrientation) {
        while (true) {
            int requestedOrientation = 1;
            while (true) {
                final int requestedOrientation2;
                Label_0240: {
                    synchronized (this) {
                        NexageLog.d("NexageActivity", "setRequestedMraidOrientation " + b + " " + mraidView$ForceOrientation.toString());
                        requestedOrientation2 = this.getRequestedOrientation();
                        NexageLog.d("NexageActivity", "origOrientation " + requestedOrientation2);
                        NexageLog.d("NexageActivity", "allowOrientationChange " + b);
                        NexageLog.d("NexageActivity", "forceOrientation " + mraidView$ForceOrientation.toString());
                        if (mraidView$ForceOrientation != MraidView$ForceOrientation.PORTRAIT) {
                            if (mraidView$ForceOrientation != MraidView$ForceOrientation.LANDSCAPE) {
                                if (b) {
                                    break Label_0240;
                                }
                                final DisplayMetrics displayMetrics = new DisplayMetrics();
                                this.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                                if (displayMetrics.widthPixels < displayMetrics.heightPixels) {
                                    break Label_0117;
                                }
                            }
                            requestedOrientation = 0;
                        }
                        NexageLog.d("NexageActivity", "requested orientation " + requestedOrientation);
                        if (requestedOrientation != requestedOrientation2) {
                            NexageLog.d("NexageActivity", "setting orientation to " + requestedOrientation);
                            this.setRequestedOrientation(requestedOrientation);
                        }
                        return;
                    }
                }
                requestedOrientation = requestedOrientation2;
                continue;
            }
        }
    }
    
    private void showDefaultCloseButton(final boolean b) {
        if (!b) {
            final FrameLayout frameLayout = (FrameLayout)this.findViewById(2130837506);
            if (frameLayout != null) {
                this.rootLayout.removeView((View)frameLayout);
            }
            return;
        }
        final int widthPixels = this.getResources().getDisplayMetrics().widthPixels;
        final int heightPixels = this.getResources().getDisplayMetrics().heightPixels;
        Bitmap scaledBitmap = null;
        while (true) {
            try {
                final Bitmap decodeStream = BitmapFactory.decodeStream(this.getClass().getResourceAsStream("/com/nexage/android/interstitial/assets/close.png"));
                final int width = decodeStream.getWidth();
                final int height = decodeStream.getHeight();
                final double n = 0.15 * Math.min(widthPixels / width, heightPixels / height);
                scaledBitmap = Bitmap.createScaledBitmap(decodeStream, (int)(n * width), (int)(n * height), false);
                decodeStream.recycle();
                final ImageView imageView = new ImageView((Context)this);
                imageView.setImageBitmap(scaledBitmap);
                imageView.setClickable(true);
                imageView.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
                    public void onClick(final View view) {
                        NexageLog.d("NexageActivity", "Close Image button clicked!");
                        NexageActivity.this.dismiss();
                    }
                });
                final FrameLayout frameLayout2 = new FrameLayout((Context)this);
                final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(-2, -2);
                layoutParams.setMargins(0, 0, 0, 0);
                layoutParams.gravity = 5;
                frameLayout2.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                frameLayout2.setId(2130837506);
                frameLayout2.addView((View)imageView);
                this.rootLayout.addView((View)frameLayout2);
            }
            catch (OutOfMemoryError outOfMemoryError) {
                continue;
            }
            break;
        }
    }
    
    public void dismiss() {
        synchronized (this) {
            NexageLog.d("NexageActivity", "dismiss");
            NexageInterstitialProvider.dismiss(this.interstitialAdPosition);
            this.finish();
        }
    }
    
    protected void onActivityResult(final int n, final int n2, final Intent intent) {
        synchronized (this) {
            super.onActivityResult(n, n2, intent);
            NexageLog.d("NexageActivity onActivityResult");
            if (this.m_InterstitialLayout != null && this.m_InterstitialLayout.checkResult(n, intent)) {
                this.dismiss();
            }
        }
    }
    
    public void onBackPressed() {
        synchronized (this) {
            this.dismiss();
        }
    }
    
    protected void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        final int requestedOrientation = this.getRequestedOrientation();
        NexageLog.d("NexageActivity", "NexageActivity orientation from manifest: " + requestedOrientation);
        if (requestedOrientation == -1) {
            NexageLog.d("NexageActivity", "setting requested orientation to SCREEN_ORIENTATION_BEHIND");
            this.setRequestedOrientation(3);
        }
        final Intent intent = this.getIntent();
        this.interstitialAdPosition = intent.getStringExtra("com.nexage.InterstitialAdPosition");
        if (this.interstitialAdPosition == null || NexageInterstitialProvider.display(this, this.interstitialAdPosition) == null) {
            final int intExtra = intent.getIntExtra("com.nexage.InterstitialAdID", -1);
            if (intExtra != -1) {
                this.m_InterstitialLayout = InterstitialLayout.display(this, intExtra);
                if (this.m_InterstitialLayout != null) {
                    return;
                }
            }
            else {
                final int intExtra2 = intent.getIntExtra("com.nexage.MM4RM_AdID", -1);
                if (intExtra2 != -1) {
                    this.m_MM4RMAd = OrmmaAdLayout.getWebView(intExtra2, this);
                    if (this.m_MM4RMAd != null) {
                        this.getWindow().clearFlags(1024);
                        this.getWindow().addFlags(2048);
                        this.setRequestedOrientation(1);
                        this.setContentView(this.m_MM4RMAd);
                        return;
                    }
                }
            }
            this.finish();
        }
    }
    
    protected void onPause() {
        super.onPause();
        this._activityWasPaused = true;
    }
    
    protected void onResume() {
        super.onResume();
        if (this.m_ResumeListener != null) {
            this.m_ResumeListener.onResume();
        }
        if (this._activityWasPaused && !NexageAdManager.getIsPopupDisplayed()) {
            this.dismiss();
            this._activityWasPaused = false;
        }
    }
    
    public void setInterstitialContentView(final ViewGroup viewGroup) {
        if (viewGroup instanceof OrmmaAdLayout) {
            ((OrmmaAdLayout)viewGroup).initForInterstitial((Context)this);
        }
        if (viewGroup instanceof MraidAdLayout) {
            ((MraidAdLayout)viewGroup).initForInterstitial((Context)this);
        }
        this.rootLayout = new FrameLayout((Context)this);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(-1, -1);
        layoutParams.setMargins(0, 0, 0, 0);
        this.rootLayout.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        this.rootLayout.addView((View)viewGroup);
        this.showDefaultCloseButton(true);
        super.setContentView((View)this.rootLayout);
        if (viewGroup instanceof MraidAdLayout) {
            NexageLog.d("NexageActivity", "view is MraidAdLayout");
            final MraidView mraidView = ((MraidAdLayout)viewGroup).getMraidView();
            mraidView.setOnCloseListener(new MraidView$OnCloseListener() {
                @Override
                public void onClose(final MraidView mraidView, final MraidView$ViewState mraidView$ViewState) {
                    NexageLog.d("NexageActivity", "MraidView onClose fired");
                    NexageActivity.this.dismiss();
                }
            });
            mraidView.setOnCloseButtonStateChange(new MraidView$OnCloseButtonStateChangeListener() {
                @Override
                public void onCloseButtonStateChange(final MraidView mraidView, final boolean b) {
                    NexageLog.d("NexageActivity", "MraidView onCloseButtonStateChange fired " + b);
                    NexageActivity.this.runOnUiThread((Runnable)new Runnable() {
                        @Override
                        public void run() {
                            NexageActivity.this.showDefaultCloseButton(b);
                        }
                    });
                }
            });
            mraidView.setOnRequestOrientationListener(new MraidView$OnRequestOrientationListener() {
                @Override
                public void onRequestOrientation(final MraidView mraidView, final boolean b, final MraidView$ForceOrientation mraidView$ForceOrientation) {
                    NexageLog.d("NexageActivity", "MraidView onRequestOrientation fired " + b + " " + mraidView$ForceOrientation.toString());
                    NexageActivity.this.setRequestedMraidOrientation(b, mraidView$ForceOrientation);
                }
            });
            this.setRequestedMraidOrientation(mraidView.allowOrientationChange(), mraidView.getForceOrientation());
        }
    }
    
    public void setOnResumeListener(final VideoResumeListener resumeListener) {
        this.m_ResumeListener = resumeListener;
    }
}
