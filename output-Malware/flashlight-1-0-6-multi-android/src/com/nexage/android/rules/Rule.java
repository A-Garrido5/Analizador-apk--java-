// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.rules;

import java.util.Arrays;
import org.json.JSONArray;
import org.json.JSONObject;

public class Rule
{
    private int cacheSize;
    private String dcn;
    private String generatedDate;
    private int maxSessionDepth;
    private String name;
    AdMaxPosition[] positions;
    int reportBatchSize;
    int reportFrequency;
    private int timeout;
    private int ttl;
    private String version;
    
    static Rule fromJson(final String s) {
        final JSONObject jsonObject = new JSONObject(s);
        final Rule rule = new Rule();
        rule.name = jsonObject.getString("name");
        rule.version = jsonObject.getString("version");
        rule.generatedDate = jsonObject.getString("generatedDate");
        rule.dcn = jsonObject.getString("dcn");
        rule.ttl = jsonObject.getInt("ttl");
        rule.cacheSize = jsonObject.getInt("cacheSize");
        rule.timeout = jsonObject.getInt("timeout");
        rule.reportBatchSize = jsonObject.getInt("reportBatchSize");
        rule.reportFrequency = jsonObject.getInt("reportFrequency");
        rule.version = jsonObject.getString("version");
        rule.maxSessionDepth = 10;
        final JSONArray jsonArray = jsonObject.getJSONArray("positions");
        final int length = jsonArray.length();
        rule.positions = new AdMaxPosition[length];
        for (int i = 0; i < length; ++i) {
            rule.positions[i] = AdMaxPosition.fromJson(jsonArray.getJSONObject(i));
        }
        return rule;
    }
    
    String getDCN() {
        return this.dcn;
    }
    
    int getMaxSessionDepth() {
        return this.maxSessionDepth;
    }
    
    public AdMaxPosition[] getPositions() {
        return this.positions;
    }
    
    int getTimeToLive() {
        return this.ttl;
    }
    
    @Override
    public String toString() {
        final StringBuilder append = new StringBuilder("Rule{name='").append(this.name).append('\'').append(", version='").append(this.version).append('\'').append(", generatedDate='").append(this.generatedDate).append('\'').append(", dcn='").append(this.dcn).append('\'').append(", ttl=").append(this.ttl).append(", positions=");
        Object list;
        if (this.positions == null) {
            list = null;
        }
        else {
            list = Arrays.asList(this.positions);
        }
        return append.append(list).append('}').toString();
    }
}
