// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.rules;

import java.util.TimerTask;
import android.webkit.CookieSyncManager;
import android.annotation.SuppressLint;
import android.content.SharedPreferences$Editor;
import java.util.Date;
import java.text.SimpleDateFormat;
import com.nexage.android.internal.NexageAdFetcher;
import com.nexage.android.v2.Task;
import java.util.ArrayList;
import java.util.List;
import com.nexage.android.internal.GooglePlayServiceManager;
import android.text.TextUtils;
import com.nexage.android.NexageAdManager;
import java.util.Locale;
import com.nexage.android.v2.provider.MacroSub;
import com.nexage.android.internal.HttpUtils;
import com.nexage.android.internal.NexageLog;
import com.nexage.android.internal.TRUSTeManager;
import com.nexage.android.internal.TRUSTeManager$Listener;
import android.content.SharedPreferences;
import java.util.Timer;
import android.content.Context;

public class RuleMgr
{
    private static final int FETCH_MAX_ATTEMPTS = 4;
    private static final long FETCH_RETRY_INTERVAL = 10000L;
    private static final String JSON_RULE = "com.nexage.JsonRule";
    private static final String NEXT_FETCH_TIME = "com.nexage.NextFetchTime";
    private static final String PREF_NAME = "com.nexage.AdMaxRule";
    private static final int RETRY_TIME = 600000;
    private static final String TAG = "RuleMgr";
    private static Context context;
    private static Timer fetchTimer;
    private static boolean isPaused;
    private static boolean isStarted;
    private static String jsonRule;
    private static int nAttempts;
    private static long nextFetchTime;
    private static StringBuilder paramsBuilder;
    private static SharedPreferences preferences;
    private static Rule rule;
    private static boolean shouldNudgeAllFetchers;
    private static TRUSTeManager$Listener trusteListener;
    private static TRUSTeManager trusteManager;
    
    static {
        RuleMgr.isStarted = false;
        RuleMgr.isPaused = false;
    }
    
    public static int batchSize() {
        if (RuleMgr.rule != null) {
            return RuleMgr.rule.reportBatchSize;
        }
        return 10;
    }
    
    private static long calculateStartDelay() {
        final long currentTimeMillis = System.currentTimeMillis();
        long n = RuleMgr.nextFetchTime - currentTimeMillis;
        NexageLog.d("RuleMgr", "curTime=" + currentTimeMillis + ", nextFetchTime=" + RuleMgr.nextFetchTime + ", delay=" + n);
        if (n < 0L) {
            if (RuleMgr.rule != null) {
                return 1000L;
            }
            n = 1L;
        }
        return n;
    }
    
    private static void doHttpConnection(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_1       
        //     2: iconst_1       
        //     3: istore_2       
        //     4: ldc             Lcom/nexage/android/rules/RuleMgr;.class
        //     6: monitorenter   
        //     7: ldc             "RuleMgr"
        //     9: new             Ljava/lang/StringBuilder;
        //    12: dup            
        //    13: ldc             "doHttpConnection "
        //    15: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    18: iconst_1       
        //    19: getstatic       com/nexage/android/rules/RuleMgr.nAttempts:I
        //    22: iadd           
        //    23: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    26: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    29: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    32: ldc             "RuleMgr"
        //    34: new             Ljava/lang/StringBuilder;
        //    37: dup            
        //    38: ldc             "params: "
        //    40: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    43: aload_0        
        //    44: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    47: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    50: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    53: new             Ljava/net/URL;
        //    56: dup            
        //    57: invokestatic    com/nexage/android/rules/RuleMgr.getRuleRequestServlet:()Ljava/lang/String;
        //    60: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
        //    63: astore          4
        //    65: iconst_1       
        //    66: invokestatic    java/net/HttpURLConnection.setFollowRedirects:(Z)V
        //    69: aload           4
        //    71: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
        //    74: checkcast       Ljava/net/HttpURLConnection;
        //    77: astore          19
        //    79: aload           19
        //    81: sipush          30000
        //    84: invokevirtual   java/net/HttpURLConnection.setConnectTimeout:(I)V
        //    87: aload           19
        //    89: sipush          30000
        //    92: invokevirtual   java/net/HttpURLConnection.setReadTimeout:(I)V
        //    95: aload           19
        //    97: iconst_1       
        //    98: invokevirtual   java/net/HttpURLConnection.setDoInput:(Z)V
        //   101: aload           19
        //   103: iconst_1       
        //   104: invokevirtual   java/net/HttpURLConnection.setDoOutput:(Z)V
        //   107: aload           19
        //   109: ldc             "Accept-Encoding"
        //   111: ldc             "gzip"
        //   113: invokevirtual   java/net/HttpURLConnection.setRequestProperty:(Ljava/lang/String;Ljava/lang/String;)V
        //   116: aload           19
        //   118: ldc             "Connection"
        //   120: ldc             "close"
        //   122: invokevirtual   java/net/HttpURLConnection.setRequestProperty:(Ljava/lang/String;Ljava/lang/String;)V
        //   125: aload           19
        //   127: ldc             "Content-Type"
        //   129: ldc             "application/x-www-form-urlencoded; charset=utf-8"
        //   131: invokevirtual   java/net/HttpURLConnection.setRequestProperty:(Ljava/lang/String;Ljava/lang/String;)V
        //   134: aload           19
        //   136: ldc             "POST"
        //   138: invokevirtual   java/net/HttpURLConnection.setRequestMethod:(Ljava/lang/String;)V
        //   141: getstatic       com/nexage/android/internal/NexageContext.s_UserAgent:Ljava/lang/String;
        //   144: ifnull          166
        //   147: getstatic       com/nexage/android/internal/NexageContext.s_UserAgent:Ljava/lang/String;
        //   150: invokevirtual   java/lang/String.length:()I
        //   153: ifle            166
        //   156: aload           19
        //   158: ldc             "User-Agent"
        //   160: getstatic       com/nexage/android/internal/NexageContext.s_UserAgent:Ljava/lang/String;
        //   163: invokevirtual   java/net/HttpURLConnection.setRequestProperty:(Ljava/lang/String;Ljava/lang/String;)V
        //   166: aload           19
        //   168: invokestatic    com/nexage/android/internal/HttpUtils.setCookies:(Ljava/net/HttpURLConnection;)V
        //   171: aload           19
        //   173: invokevirtual   java/net/HttpURLConnection.getOutputStream:()Ljava/io/OutputStream;
        //   176: astore          22
        //   178: aload           22
        //   180: astore          11
        //   182: aload           11
        //   184: aload_0        
        //   185: invokevirtual   java/lang/String.toString:()Ljava/lang/String;
        //   188: ldc             "UTF-8"
        //   190: invokevirtual   java/lang/String.getBytes:(Ljava/lang/String;)[B
        //   193: invokevirtual   java/io/OutputStream.write:([B)V
        //   196: aload           19
        //   198: ldc             "RuleMgr"
        //   200: invokestatic    com/nexage/android/internal/HttpUtils.saveCookies:(Ljava/net/HttpURLConnection;Ljava/lang/String;)V
        //   203: aload           19
        //   205: invokevirtual   java/net/HttpURLConnection.getResponseCode:()I
        //   208: istore          25
        //   210: iload           25
        //   212: sipush          200
        //   215: if_icmpeq       226
        //   218: iload           25
        //   220: sipush          201
        //   223: if_icmpne       602
        //   226: ldc             "RuleMgr"
        //   228: new             Ljava/lang/StringBuilder;
        //   231: dup            
        //   232: ldc             "request succeeded, response code "
        //   234: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   237: iload           25
        //   239: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //   242: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   245: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   248: aload           19
        //   250: invokevirtual   java/net/HttpURLConnection.getContentEncoding:()Ljava/lang/String;
        //   253: astore          26
        //   255: aload           26
        //   257: ifnull          423
        //   260: aload           26
        //   262: ldc             "gzip"
        //   264: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        //   267: istore          27
        //   269: aconst_null    
        //   270: astore_1       
        //   271: iload           27
        //   273: ifeq            423
        //   276: new             Ljava/util/zip/GZIPInputStream;
        //   279: dup            
        //   280: aload           19
        //   282: invokevirtual   java/net/HttpURLConnection.getInputStream:()Ljava/io/InputStream;
        //   285: invokespecial   java/util/zip/GZIPInputStream.<init>:(Ljava/io/InputStream;)V
        //   288: astore_1       
        //   289: sipush          1500
        //   292: newarray        B
        //   294: astore          28
        //   296: new             Ljava/lang/StringBuilder;
        //   299: dup            
        //   300: invokespecial   java/lang/StringBuilder.<init>:()V
        //   303: astore          29
        //   305: aload_1        
        //   306: aload           28
        //   308: invokevirtual   java/io/InputStream.read:([B)I
        //   311: istore          30
        //   313: iload           30
        //   315: iconst_m1      
        //   316: if_icmpeq       432
        //   319: aload           29
        //   321: new             Ljava/lang/String;
        //   324: dup            
        //   325: aload           28
        //   327: iconst_0       
        //   328: iload           30
        //   330: invokespecial   java/lang/String.<init>:([BII)V
        //   333: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   336: pop            
        //   337: goto            305
        //   340: astore          24
        //   342: aload           11
        //   344: astore          6
        //   346: aload           19
        //   348: astore          7
        //   350: aload           24
        //   352: astore          5
        //   354: ldc             "RuleMgr"
        //   356: new             Ljava/lang/StringBuilder;
        //   359: dup            
        //   360: ldc_w           "request failed, "
        //   363: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   366: aload           5
        //   368: invokevirtual   java/lang/Exception.toString:()Ljava/lang/String;
        //   371: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   374: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   377: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;Ljava/lang/String;)V
        //   380: aload_1        
        //   381: ifnull          388
        //   384: aload_1        
        //   385: invokevirtual   java/io/InputStream.close:()V
        //   388: aload           6
        //   390: ifnull          398
        //   393: aload           6
        //   395: invokevirtual   java/io/OutputStream.close:()V
        //   398: aload           7
        //   400: ifnull          814
        //   403: aload           7
        //   405: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   408: iconst_0       
        //   409: istore          15
        //   411: iload           15
        //   413: ifeq            693
        //   416: invokestatic    com/nexage/android/rules/RuleMgr.handleSuccessfulDownload:()V
        //   419: ldc             Lcom/nexage/android/rules/RuleMgr;.class
        //   421: monitorexit    
        //   422: return         
        //   423: aload           19
        //   425: invokevirtual   java/net/HttpURLConnection.getInputStream:()Ljava/io/InputStream;
        //   428: astore_1       
        //   429: goto            289
        //   432: aload           29
        //   434: invokevirtual   java/lang/StringBuilder.length:()I
        //   437: sipush          200
        //   440: if_icmple       589
        //   443: aload           29
        //   445: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   448: astore          35
        //   450: ldc             "RuleMgr"
        //   452: new             Ljava/lang/StringBuilder;
        //   455: dup            
        //   456: ldc_w           "got rules ("
        //   459: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   462: aload           35
        //   464: invokevirtual   java/lang/String.length:()I
        //   467: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //   470: ldc_w           " chars)"
        //   473: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   476: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   479: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   482: aload           35
        //   484: invokestatic    com/nexage/android/rules/RuleMgr.logRules:(Ljava/lang/String;)V
        //   487: aload           35
        //   489: invokestatic    com/nexage/android/rules/Rule.fromJson:(Ljava/lang/String;)Lcom/nexage/android/rules/Rule;
        //   492: astore          36
        //   494: aload           36
        //   496: ifnull          576
        //   499: ldc             "RuleMgr"
        //   501: ldc_w           "parse rules succeeded"
        //   504: invokestatic    com/nexage/android/internal/NexageLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   507: aload           36
        //   509: invokestatic    com/nexage/android/rules/RuleMgr.setRule:(Lcom/nexage/android/rules/Rule;)V
        //   512: getstatic       com/nexage/android/rules/RuleMgr.preferences:Landroid/content/SharedPreferences;
        //   515: invokeinterface android/content/SharedPreferences.edit:()Landroid/content/SharedPreferences$Editor;
        //   520: astore          37
        //   522: aload           37
        //   524: ldc             "com.nexage.JsonRule"
        //   526: aload           35
        //   528: invokeinterface android/content/SharedPreferences$Editor.putString:(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;
        //   533: pop            
        //   534: aload           37
        //   536: invokeinterface android/content/SharedPreferences$Editor.commit:()Z
        //   541: pop            
        //   542: aload_1        
        //   543: ifnull          550
        //   546: aload_1        
        //   547: invokevirtual   java/io/InputStream.close:()V
        //   550: aload           11
        //   552: ifnull          560
        //   555: aload           11
        //   557: invokevirtual   java/io/OutputStream.close:()V
        //   560: aload           19
        //   562: ifnull          820
        //   565: aload           19
        //   567: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   570: iload_2        
        //   571: istore          15
        //   573: goto            411
        //   576: ldc             "RuleMgr"
        //   578: ldc_w           "parse rules failed"
        //   581: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;Ljava/lang/String;)V
        //   584: iconst_0       
        //   585: istore_2       
        //   586: goto            542
        //   589: ldc             "RuleMgr"
        //   591: ldc_w           "request failed -- data length too short"
        //   594: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;Ljava/lang/String;)V
        //   597: iconst_0       
        //   598: istore_2       
        //   599: goto            542
        //   602: ldc             "RuleMgr"
        //   604: new             Ljava/lang/StringBuilder;
        //   607: dup            
        //   608: ldc_w           "request failed, response code "
        //   611: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   614: iload           25
        //   616: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //   619: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   622: invokestatic    com/nexage/android/internal/NexageLog.w:(Ljava/lang/String;Ljava/lang/String;)V
        //   625: iconst_0       
        //   626: istore_2       
        //   627: aconst_null    
        //   628: astore_1       
        //   629: goto            542
        //   632: astore          32
        //   634: iload_2        
        //   635: istore          15
        //   637: goto            411
        //   640: astore          16
        //   642: iconst_0       
        //   643: istore          15
        //   645: goto            411
        //   648: astore          8
        //   650: aconst_null    
        //   651: astore          11
        //   653: aconst_null    
        //   654: astore          10
        //   656: aload_1        
        //   657: ifnull          664
        //   660: aload_1        
        //   661: invokevirtual   java/io/InputStream.close:()V
        //   664: aload           11
        //   666: ifnull          674
        //   669: aload           11
        //   671: invokevirtual   java/io/OutputStream.close:()V
        //   674: aload           10
        //   676: ifnull          684
        //   679: aload           10
        //   681: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   684: aload           8
        //   686: athrow         
        //   687: astore_3       
        //   688: ldc             Lcom/nexage/android/rules/RuleMgr;.class
        //   690: monitorexit    
        //   691: aload_3        
        //   692: athrow         
        //   693: aload_0        
        //   694: invokestatic    com/nexage/android/rules/RuleMgr.handleFailedDownload:(Ljava/lang/String;)V
        //   697: goto            419
        //   700: astore          34
        //   702: goto            550
        //   705: astore          33
        //   707: goto            560
        //   710: astore          18
        //   712: goto            388
        //   715: astore          17
        //   717: goto            398
        //   720: astore          14
        //   722: goto            664
        //   725: astore          13
        //   727: goto            674
        //   730: astore          12
        //   732: goto            684
        //   735: astore          21
        //   737: aload           19
        //   739: astore          10
        //   741: aload           21
        //   743: astore          8
        //   745: aconst_null    
        //   746: astore_1       
        //   747: aconst_null    
        //   748: astore          11
        //   750: goto            656
        //   753: astore          23
        //   755: aload           19
        //   757: astore          10
        //   759: aload           23
        //   761: astore          8
        //   763: goto            656
        //   766: astore          8
        //   768: aload           6
        //   770: astore          9
        //   772: aload           7
        //   774: astore          10
        //   776: aload           9
        //   778: astore          11
        //   780: goto            656
        //   783: astore          5
        //   785: aconst_null    
        //   786: astore          6
        //   788: aconst_null    
        //   789: astore_1       
        //   790: aconst_null    
        //   791: astore          7
        //   793: goto            354
        //   796: astore          20
        //   798: aload           19
        //   800: astore          7
        //   802: aload           20
        //   804: astore          5
        //   806: aconst_null    
        //   807: astore          6
        //   809: aconst_null    
        //   810: astore_1       
        //   811: goto            354
        //   814: iconst_0       
        //   815: istore          15
        //   817: goto            411
        //   820: iload_2        
        //   821: istore          15
        //   823: goto            411
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  7      53     687    693    Any
        //  53     79     783    796    Ljava/lang/Exception;
        //  53     79     648    656    Any
        //  79     166    796    814    Ljava/lang/Exception;
        //  79     166    735    753    Any
        //  166    178    796    814    Ljava/lang/Exception;
        //  166    178    735    753    Any
        //  182    210    340    354    Ljava/lang/Exception;
        //  182    210    753    766    Any
        //  226    255    340    354    Ljava/lang/Exception;
        //  226    255    753    766    Any
        //  260    269    340    354    Ljava/lang/Exception;
        //  260    269    753    766    Any
        //  276    289    340    354    Ljava/lang/Exception;
        //  276    289    753    766    Any
        //  289    305    340    354    Ljava/lang/Exception;
        //  289    305    753    766    Any
        //  305    313    340    354    Ljava/lang/Exception;
        //  305    313    753    766    Any
        //  319    337    340    354    Ljava/lang/Exception;
        //  319    337    753    766    Any
        //  354    380    766    783    Any
        //  384    388    710    715    Ljava/lang/Exception;
        //  384    388    687    693    Any
        //  393    398    715    720    Ljava/lang/Exception;
        //  393    398    687    693    Any
        //  403    408    640    648    Ljava/lang/Exception;
        //  403    408    687    693    Any
        //  416    419    687    693    Any
        //  423    429    340    354    Ljava/lang/Exception;
        //  423    429    753    766    Any
        //  432    494    340    354    Ljava/lang/Exception;
        //  432    494    753    766    Any
        //  499    542    340    354    Ljava/lang/Exception;
        //  499    542    753    766    Any
        //  546    550    700    705    Ljava/lang/Exception;
        //  546    550    687    693    Any
        //  555    560    705    710    Ljava/lang/Exception;
        //  555    560    687    693    Any
        //  565    570    632    640    Ljava/lang/Exception;
        //  565    570    687    693    Any
        //  576    584    340    354    Ljava/lang/Exception;
        //  576    584    753    766    Any
        //  589    597    340    354    Ljava/lang/Exception;
        //  589    597    753    766    Any
        //  602    625    340    354    Ljava/lang/Exception;
        //  602    625    753    766    Any
        //  660    664    720    725    Ljava/lang/Exception;
        //  660    664    687    693    Any
        //  669    674    725    730    Ljava/lang/Exception;
        //  669    674    687    693    Any
        //  679    684    730    735    Ljava/lang/Exception;
        //  679    684    687    693    Any
        //  684    687    687    693    Any
        //  693    697    687    693    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 371, Size: 371
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3417)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static void downloadRules() {
        synchronized (RuleMgr.class) {
            NexageLog.d("RuleMgr", "downloadRules");
            (RuleMgr.paramsBuilder = HttpUtils.getNexageRequestParams()).append("&msv=").append(MacroSub.getMsvVersion());
            final String language = Locale.getDefault().getLanguage();
            NexageLog.d("RuleMgr", "adding param for lang " + language);
            RuleMgr.paramsBuilder.append("&lang=").append(language);
            if (NexageAdManager.isFacebookIdPermitted()) {
                final String facebookAttributionId = BidderPrivate.getFacebookAttributionId(RuleMgr.context);
                if (!TextUtils.isEmpty((CharSequence)facebookAttributionId)) {
                    NexageLog.d("RuleMgr", "adding param for Facebook ID " + facebookAttributionId);
                    RuleMgr.paramsBuilder.append("&xpvt=fbid%3D").append(facebookAttributionId);
                }
            }
            RuleMgr.paramsBuilder.append("&mraid=2");
            final String id = GooglePlayServiceManager.getId(RuleMgr.context);
            if (!TextUtils.isEmpty((CharSequence)id)) {
                final boolean limitAdTrackingEnabled = GooglePlayServiceManager.isLimitAdTrackingEnabled(RuleMgr.context);
                RuleMgr.paramsBuilder.append("&d(id24)=").append(id);
                final StringBuilder append = RuleMgr.paramsBuilder.append("&ifatrk=");
                String s;
                if (limitAdTrackingEnabled) {
                    s = "0";
                }
                else {
                    s = "1";
                }
                append.append(s);
            }
            RuleMgr.trusteManager = TRUSTeManager.getInstance(RuleMgr.context);
            if (RuleMgr.trusteListener == null) {
                RuleMgr.trusteListener = new TRUSTeManager$Listener() {
                    @Override
                    public final void onFailedToReceiveTPID() {
                        NexageLog.d("RuleMgr", "onFailedToReceiveTPID");
                        RuleMgr.trusteManager.removeListener(RuleMgr.trusteListener);
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                doHttpConnection(RuleMgr.paramsBuilder.toString());
                            }
                        }, "RuleMgrHTTPConn").start();
                    }
                    
                    @Override
                    public final void onReceiveTPID(final String s) {
                        NexageLog.d("RuleMgr", "onReceiveTPID " + s);
                        if (!TextUtils.isEmpty((CharSequence)s)) {
                            NexageLog.v("TPID: " + s);
                            RuleMgr.paramsBuilder.append("&d(tpid)=").append(s);
                        }
                        RuleMgr.trusteManager.removeListener(RuleMgr.trusteListener);
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                doHttpConnection(RuleMgr.paramsBuilder.toString());
                            }
                        }, "RuleMgrHTTPConn").start();
                    }
                };
            }
            RuleMgr.trusteManager.addListener(RuleMgr.trusteListener);
            RuleMgr.trusteManager.getTRUSTeTPID();
        }
    }
    
    private static void fetchRules() {
        NexageLog.d("RuleMgr", "fetchRules");
        if (RuleMgr.isPaused) {
            NexageLog.d("RuleMgr", "paused, exiting");
            return;
        }
        RuleMgr.shouldNudgeAllFetchers = (RuleMgr.rule == null);
        NexageLog.d("RuleMgr", "shouldNudgeAllFetchers " + RuleMgr.shouldNudgeAllFetchers);
        RuleMgr.nAttempts = 0;
        downloadRules();
    }
    
    public static AdMaxPosition[] getAllPositions() {
        if (RuleMgr.rule != null) {
            return RuleMgr.rule.positions;
        }
        return new AdMaxPosition[0];
    }
    
    public static int getMaxSessionDepth() {
        if (RuleMgr.rule != null) {
            return RuleMgr.rule.getMaxSessionDepth();
        }
        return 10;
    }
    
    public static AdMaxPosition getPosition(final String s) {
        NexageLog.d("RuleMgr", "getPosition " + s);
        if (RuleMgr.rule == null) {
            NexageLog.d("RuleMgr", "no rules found!");
            return null;
        }
        final AdMaxPosition[] positions = RuleMgr.rule.positions;
        final int length = positions.length;
        int i = 0;
        while (i < length) {
            final AdMaxPosition adMaxPosition = positions[i];
            if (adMaxPosition.name.equals(s)) {
                if (adMaxPosition.adTags.length > 0) {
                    if (NexageLog.VERBOSE_LOG) {
                        adMaxPosition.logJsonString();
                    }
                    return adMaxPosition;
                }
                NexageLog.i("RuleMgr", "position " + s + " has no tags");
                return null;
            }
            else {
                ++i;
            }
        }
        NexageLog.i("RuleMgr", "position " + s + " not found in rules");
        return null;
    }
    
    private static String getRuleRequestServlet() {
        return NexageAdManager.getMediationURL() + "/adRules";
    }
    
    public static List getTaskListByPosition(final String positionName) {
        final AdMaxPosition position = getPosition(positionName);
        if (position == null) {
            return null;
        }
        final AdTag[] adTags = position.adTags;
        final ArrayList<Task> list = new ArrayList<Task>();
        for (int i = 0; i < adTags.length; ++i) {
            final AdTag adTag = adTags[i];
            final Task task = new Task();
            task.adTag = adTag;
            task.positionName = positionName;
            list.add(task);
        }
        return list;
    }
    
    public static int getTimeToLive() {
        if (RuleMgr.rule != null) {
            return RuleMgr.rule.getTimeToLive();
        }
        return 1000;
    }
    
    private static void handleFailedDownload(final String s) {
        while (true) {
            Label_0093: {
                synchronized (RuleMgr.class) {
                    NexageLog.d("RuleMgr", "handleFailedDownload");
                    if (RuleMgr.isPaused) {
                        NexageLog.d("RuleMgr", "is paused, previous attempt failed, bailing");
                    }
                    else {
                        ++RuleMgr.nAttempts;
                        NexageLog.d("RuleMgr", "number of failed attempts " + RuleMgr.nAttempts);
                        if (RuleMgr.nAttempts != 4) {
                            break Label_0093;
                        }
                        NexageLog.d("RuleMgr", "giving up");
                        startFetchTimer(saveNextFetchTime(false));
                    }
                    return;
                }
            }
            NexageLog.d("RuleMgr", "retrying...");
            while (true) {
                try {
                    Thread.sleep(10000L);
                    if (RuleMgr.isPaused) {
                        NexageLog.d("RuleMgr", "is paused, previous attempt failed, bailing");
                        return;
                    }
                }
                catch (InterruptedException ex) {
                    ex.printStackTrace();
                    continue;
                }
                break;
            }
            new Thread(new Runnable() {
                @Override
                public final void run() {
                    doHttpConnection(s);
                }
            }, "retry-" + RuleMgr.nAttempts).start();
        }
    }
    
    private static void handleSuccessfulDownload() {
        synchronized (RuleMgr.class) {
            NexageLog.d("RuleMgr", "handleSuccessfulDownload");
            final int saveNextFetchTime = saveNextFetchTime(true);
            if (RuleMgr.shouldNudgeAllFetchers) {
                NexageLog.d("RuleMgr", "nudging all fetchers");
                NexageAdFetcher.nudgeAllFetchers();
            }
            startFetchTimer(saveNextFetchTime);
        }
    }
    
    private static void logRules(final String s) {
        final int length = s.length();
        if (length > 4000) {
            final int n = length / 4000;
            final int n2 = length % 4000;
            int n3;
            if (n2 == 0) {
                n3 = n;
            }
            else {
                n3 = n + 1;
            }
            int i;
            for (i = 0; i < n; ++i) {
                NexageLog.v("RuleMgr", "rules (" + (i + 1) + "/" + n3 + "): " + s.substring(i * 4000, 4000 * (i + 1)));
            }
            if (n2 > 0) {
                NexageLog.v("RuleMgr", "rules (" + n3 + "/" + n3 + "): " + s.substring(i * 4000));
            }
            return;
        }
        NexageLog.v("RuleMgr", "rules: " + s);
    }
    
    public static void pause() {
        NexageLog.d("RuleMgr", "pause");
        RuleMgr.isPaused = true;
        stopFetchTimer();
    }
    
    public static int reportFrequency() {
        if (RuleMgr.rule != null) {
            return RuleMgr.rule.reportFrequency;
        }
        return 180000;
    }
    
    public static void resume() {
        synchronized (RuleMgr.class) {
            NexageLog.d("RuleMgr", "resume");
            if (!RuleMgr.isStarted) {
                NexageLog.d("RuleMgr", "ignored -- not started yet");
            }
            else {
                RuleMgr.isPaused = false;
                RuleMgr.nextFetchTime = (RuleMgr.preferences = RuleMgr.context.getSharedPreferences("com.nexage.AdMaxRule", 0)).getLong("com.nexage.NextFetchTime", 0L);
                startFetchTimer(calculateStartDelay());
            }
        }
    }
    
    @SuppressLint({ "SimpleDateFormat" })
    private static int saveNextFetchTime(final boolean b) {
        int n = 600000;
        synchronized (RuleMgr.class) {
            final SharedPreferences$Editor edit = RuleMgr.preferences.edit();
            final long currentTimeMillis = System.currentTimeMillis();
            if (b) {
                n = RuleMgr.rule.getTimeToLive();
            }
            else if (RuleMgr.rule != null) {
                n = Math.min(RuleMgr.rule.getTimeToLive(), 600000);
            }
            final long n2 = currentTimeMillis + n;
            edit.putLong("com.nexage.NextFetchTime", n2);
            edit.commit();
            NexageLog.d("RuleMgr", "saved new nextFetchTime " + n2 + " = " + currentTimeMillis + " + " + n + " (" + new SimpleDateFormat("hh:mm:ss").format(new Date(n2)) + ")");
            return n;
        }
    }
    
    static void setRule(final Rule rule) {
        synchronized (RuleMgr.class) {
            RuleMgr.rule = rule;
        }
    }
    
    public static void start(final Context context) {
        synchronized (RuleMgr.class) {
            NexageLog.d("RuleMgr", "entering start " + RuleMgr.isStarted);
            RuleMgr.context = context;
            while (true) {
                Label_0175: {
                    if (RuleMgr.preferences != null) {
                        break Label_0175;
                    }
                    NexageLog.d("RuleMgr", "no prefs loaded");
                    CookieSyncManager.createInstance(context);
                    HttpUtils.loadCookies();
                    RuleMgr.nextFetchTime = (RuleMgr.preferences = context.getSharedPreferences("com.nexage.AdMaxRule", 0)).getLong("com.nexage.NextFetchTime", 0L);
                    if ((RuleMgr.jsonRule = RuleMgr.preferences.getString("com.nexage.JsonRule", "")).length() <= 0) {
                        break Label_0161;
                    }
                    NexageLog.d("RuleMgr", "got JSON string");
                    try {
                        final Rule fromJson = Rule.fromJson(RuleMgr.jsonRule);
                        NexageLog.d("RuleMgr", "parsed JSON");
                        if (fromJson != null) {
                            if (fromJson.getDCN().equals(NexageAdManager.getDCN())) {
                                NexageLog.d("RuleMgr", "rule DCN matches");
                                setRule(fromJson);
                            }
                            else {
                                NexageLog.d("RuleMgr", "rule DCN does not match");
                                RuleMgr.nextFetchTime = 0L;
                            }
                        }
                        final long calculateStartDelay = calculateStartDelay();
                        RuleMgr.isPaused = false;
                        startFetchTimer(calculateStartDelay);
                        RuleMgr.isStarted = true;
                        return;
                    }
                    catch (Exception ex) {
                        NexageLog.w("RuleMgr", "Rule parse exception: " + ex.getMessage() + ":" + ex.toString());
                        continue;
                    }
                }
                continue;
            }
        }
    }
    
    private static void startFetchTimer(final long n) {
        synchronized (RuleMgr.class) {
            stopFetchTimer();
            NexageLog.d("RuleMgr", "startFetchTimer, delay=" + n);
            (RuleMgr.fetchTimer = new Timer()).schedule(new TimerTask() {
                @Override
                public final void run() {
                    fetchRules();
                }
            }, n);
        }
    }
    
    private static void stopFetchTimer() {
        synchronized (RuleMgr.class) {
            NexageLog.d("RuleMgr", "stopFetchTimer");
            if (RuleMgr.fetchTimer != null) {
                RuleMgr.fetchTimer.cancel();
                RuleMgr.fetchTimer = null;
            }
        }
    }
}
