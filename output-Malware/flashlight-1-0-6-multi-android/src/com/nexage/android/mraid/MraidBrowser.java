// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.mraid;

import android.os.Bundle;
import android.widget.ImageView$ScaleType;
import android.widget.LinearLayout$LayoutParams;
import android.view.View$OnClickListener;
import android.annotation.SuppressLint;
import android.webkit.WebSettings;
import android.webkit.WebChromeClient;
import android.content.ActivityNotFoundException;
import com.nexage.android.NexageAdManager;
import android.net.Uri;
import android.widget.Toast;
import android.graphics.Bitmap;
import android.webkit.WebViewClient;
import android.content.Intent;
import android.webkit.CookieSyncManager;
import java.io.InputStream;
import android.util.DisplayMetrics;
import java.io.IOException;
import android.view.View;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.BitmapDrawable;
import android.widget.LinearLayout;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.content.Context;
import android.util.Log;
import android.webkit.WebView;
import android.widget.RelativeLayout;
import android.widget.ImageButton;
import android.app.Activity;

public class MraidBrowser extends Activity
{
    private static final String TAG = "MraidBrowser";
    public static final String URL_EXTRA = "extra_url";
    private ImageButton backButton;
    private ImageButton closeButton;
    private ImageButton forwardButton;
    private ImageButton refreshButton;
    private RelativeLayout rootLayout;
    private WebView webView;
    
    private void createUi() {
        final DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        final int widthPixels = displayMetrics.widthPixels;
        final int heightPixels = displayMetrics.heightPixels;
        final float density = displayMetrics.density;
        final int densityDpi = displayMetrics.densityDpi;
        String s = "screen " + widthPixels + "x" + heightPixels + ", density=" + density + ", densityDpi=" + density + " (";
    Label_0581_Outer:
        while (true) {
        Label_0606_Outer:
            while (true) {
                while (true) {
                    switch (densityDpi) {
                        default:
                        case 120: {
                            Label_0556: {
                                break Label_0556;
                            Label_0270_Outer:
                                while (true) {
                                    Log.d("MraidBrowser", s);
                                    (this.rootLayout = new RelativeLayout((Context)this)).setLayoutParams((ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
                                    this.rootLayout.setPadding(0, 0, 0, 0);
                                    this.rootLayout.setBackgroundColor(-65536);
                                    final LinearLayout linearLayout = new LinearLayout((Context)this);
                                    final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-1, -2);
                                    layoutParams.addRule(12);
                                    linearLayout.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                                    linearLayout.setOrientation(0);
                                    linearLayout.setPadding(0, 0, 0, 0);
                                    final InputStream resourceAsStream = this.getClass().getResourceAsStream("assets/drawable/bkgrnd.png");
                                    final BitmapDrawable backgroundDrawable = new BitmapDrawable(this.getResources(), resourceAsStream);
                                    while (true) {
                                        try {
                                            resourceAsStream.close();
                                            linearLayout.setBackgroundDrawable((Drawable)backgroundDrawable);
                                            linearLayout.setId(1);
                                            final int n = widthPixels >>> 2;
                                            final int min = Math.min(n >>> 1, heightPixels / 10);
                                            Log.d("MraidBrowser", "button size " + n + "x" + min + " min(" + n / 2 + "," + heightPixels / 10 + ")");
                                            final int n2 = min >>> 3;
                                            Log.d("MraidBrowser", "padding " + n2);
                                            this.backButton = this.createButton(n, min, n2, "unleftarrow");
                                            this.forwardButton = this.createButton(n, min, n2, "unrightarrow");
                                            this.refreshButton = this.createButton(n, min, n2, "refresh");
                                            this.closeButton = this.createButton(n, min, n2, "close");
                                            linearLayout.addView((View)this.backButton);
                                            linearLayout.addView((View)this.forwardButton);
                                            linearLayout.addView((View)this.refreshButton);
                                            linearLayout.addView((View)this.closeButton);
                                            this.rootLayout.addView((View)linearLayout);
                                            this.webView = new WebView((Context)this);
                                            final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(-1, -1);
                                            layoutParams2.addRule(2, linearLayout.getId());
                                            this.webView.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                                            this.rootLayout.addView((View)this.webView);
                                            return;
                                            s += "DENSITY_XHIGH)";
                                            continue Label_0270_Outer;
                                            s += "DENSITY_MEDIUM)";
                                            continue Label_0270_Outer;
                                            s += "DENSITY_HIGH)";
                                            continue Label_0270_Outer;
                                            s += "DENSITY_LOW)";
                                        }
                                        catch (IOException ex) {
                                            continue Label_0581_Outer;
                                        }
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                        case 160: {
                            continue Label_0606_Outer;
                        }
                        case 240: {
                            continue;
                        }
                        case 320: {
                            continue Label_0581_Outer;
                        }
                    }
                    break;
                }
                break;
            }
            break;
        }
    }
    
    private void enableCookies() {
        CookieSyncManager.createInstance((Context)this);
        CookieSyncManager.getInstance().startSync();
    }
    
    @SuppressLint({ "SetJavaScriptEnabled" })
    private void initializeWebView(final Intent intent) {
        final WebSettings settings = this.webView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setSupportZoom(true);
        settings.setBuiltInZoomControls(true);
        settings.setUseWideViewPort(true);
        this.webView.loadUrl(intent.getStringExtra("extra_url"));
        this.webView.setWebViewClient((WebViewClient)new WebViewClient() {
            public void onPageFinished(final WebView p0, final String p1) {
                // 
                // This method could not be decompiled.
                // 
                // Original Bytecode:
                // 
                //     0: aload_0        
                //     1: aload_1        
                //     2: aload_2        
                //     3: invokespecial   android/webkit/WebViewClient.onPageFinished:(Landroid/webkit/WebView;Ljava/lang/String;)V
                //     6: new             Ljava/lang/StringBuilder;
                //     9: dup            
                //    10: ldc             "assets/drawable/"
                //    12: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //    15: astore_3       
                //    16: aload_1        
                //    17: invokevirtual   android/webkit/WebView.canGoBack:()Z
                //    20: ifne            30
                //    23: aload_3        
                //    24: ldc             "un"
                //    26: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //    29: pop            
                //    30: aload_3        
                //    31: ldc             "leftarrow.png"
                //    33: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //    36: pop            
                //    37: aload_0        
                //    38: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
                //    41: aload_3        
                //    42: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //    45: invokevirtual   java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
                //    48: astore          5
                //    50: new             Landroid/graphics/drawable/BitmapDrawable;
                //    53: dup            
                //    54: aload_0        
                //    55: getfield        com/nexage/android/mraid/MraidBrowser$1.this$0:Lcom/nexage/android/mraid/MraidBrowser;
                //    58: invokevirtual   com/nexage/android/mraid/MraidBrowser.getResources:()Landroid/content/res/Resources;
                //    61: aload           5
                //    63: invokespecial   android/graphics/drawable/BitmapDrawable.<init>:(Landroid/content/res/Resources;Ljava/io/InputStream;)V
                //    66: astore          6
                //    68: aload           5
                //    70: invokevirtual   java/io/InputStream.close:()V
                //    73: aload_0        
                //    74: getfield        com/nexage/android/mraid/MraidBrowser$1.this$0:Lcom/nexage/android/mraid/MraidBrowser;
                //    77: invokestatic    com/nexage/android/mraid/MraidBrowser.access$100:(Lcom/nexage/android/mraid/MraidBrowser;)Landroid/widget/ImageButton;
                //    80: aload           6
                //    82: invokevirtual   android/widget/ImageButton.setImageDrawable:(Landroid/graphics/drawable/Drawable;)V
                //    85: new             Ljava/lang/StringBuilder;
                //    88: dup            
                //    89: ldc             "assets/drawable/"
                //    91: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //    94: astore          8
                //    96: aload_1        
                //    97: invokevirtual   android/webkit/WebView.canGoForward:()Z
                //   100: ifne            111
                //   103: aload           8
                //   105: ldc             "un"
                //   107: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   110: pop            
                //   111: aload           8
                //   113: ldc             "rightarrow.png"
                //   115: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   118: pop            
                //   119: aload_0        
                //   120: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
                //   123: aload           8
                //   125: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   128: invokevirtual   java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
                //   131: astore          10
                //   133: new             Landroid/graphics/drawable/BitmapDrawable;
                //   136: dup            
                //   137: aload_0        
                //   138: getfield        com/nexage/android/mraid/MraidBrowser$1.this$0:Lcom/nexage/android/mraid/MraidBrowser;
                //   141: invokevirtual   com/nexage/android/mraid/MraidBrowser.getResources:()Landroid/content/res/Resources;
                //   144: aload           10
                //   146: invokespecial   android/graphics/drawable/BitmapDrawable.<init>:(Landroid/content/res/Resources;Ljava/io/InputStream;)V
                //   149: astore          11
                //   151: aload           10
                //   153: invokevirtual   java/io/InputStream.close:()V
                //   156: aload_0        
                //   157: getfield        com/nexage/android/mraid/MraidBrowser$1.this$0:Lcom/nexage/android/mraid/MraidBrowser;
                //   160: invokestatic    com/nexage/android/mraid/MraidBrowser.access$000:(Lcom/nexage/android/mraid/MraidBrowser;)Landroid/widget/ImageButton;
                //   163: aload           11
                //   165: invokevirtual   android/widget/ImageButton.setImageDrawable:(Landroid/graphics/drawable/Drawable;)V
                //   168: return         
                //   169: astore          7
                //   171: goto            73
                //   174: astore          12
                //   176: goto            156
                //    Exceptions:
                //  Try           Handler
                //  Start  End    Start  End    Type                 
                //  -----  -----  -----  -----  ---------------------
                //  68     73     169    174    Ljava/io/IOException;
                //  151    156    174    179    Ljava/io/IOException;
                // 
                // The error that occurred was:
                // 
                // java.lang.IllegalStateException: Expression is linked from several locations: Label_0156:
                //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
                //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformCall(AstMethodBodyBuilder.java:1163)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:1010)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformNode(AstMethodBodyBuilder.java:392)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformBlock(AstMethodBodyBuilder.java:333)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:294)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
                //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
                //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
                //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
                // 
                throw new IllegalStateException("An error occurred while decompiling this method.");
            }
            
            public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
                super.onPageStarted(webView, s, bitmap);
                final InputStream resourceAsStream = this.getClass().getResourceAsStream("assets/drawable/unrightarrow.png");
                final BitmapDrawable imageDrawable = new BitmapDrawable(MraidBrowser.this.getResources(), resourceAsStream);
                while (true) {
                    try {
                        resourceAsStream.close();
                        MraidBrowser.this.forwardButton.setImageDrawable((Drawable)imageDrawable);
                    }
                    catch (IOException ex) {
                        continue;
                    }
                    break;
                }
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Toast.makeText((Context)webView.getContext(), (CharSequence)("MRAID error: " + s), 0).show();
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                if (s != null) {
                    final String host = Uri.parse(s).getHost();
                    if (!s.startsWith("market:") && !s.startsWith("tel:") && !s.startsWith("voicemail:") && !s.startsWith("sms:") && !s.startsWith("mailto:") && !s.startsWith("geo:") && !s.startsWith("google.streetview:") && !"play.google.com".equals(host)) {
                        if (!"market.android.com".equals(host)) {
                            return false;
                        }
                    }
                    while (true) {
                        while (true) {
                            Label_0213: {
                                try {
                                    if (s.startsWith("tel:")) {
                                        if (!NexageAdManager.IsFeatureSupportNeeded("no-phone")) {
                                            MraidBrowser.this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse(s)));
                                        }
                                    }
                                    else {
                                        if (!s.startsWith("sms:")) {
                                            break Label_0213;
                                        }
                                        if (!NexageAdManager.IsFeatureSupportNeeded("no-sms")) {
                                            MraidBrowser.this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse(s)));
                                        }
                                    }
                                    MraidBrowser.this.finish();
                                    return true;
                                }
                                catch (ActivityNotFoundException ex) {
                                    Log.w("MoPub", "Unable to start activity for " + s + ". Ensure that your phone can handle this intent.");
                                    continue;
                                }
                                continue;
                            }
                            MraidBrowser.this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse(s)));
                            continue;
                        }
                    }
                }
                return false;
            }
        });
        this.webView.setWebChromeClient((WebChromeClient)new WebChromeClient() {
            public void onProgressChanged(final WebView webView, final int n) {
                final Activity activity = (Activity)webView.getContext();
                activity.setTitle((CharSequence)"Loading...");
                activity.setProgress(n * 100);
                if (n == 100) {
                    activity.setTitle((CharSequence)webView.getUrl());
                }
            }
        });
    }
    
    private void setButtonListeners() {
        this.backButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                if (MraidBrowser.this.webView.canGoBack()) {
                    MraidBrowser.this.webView.goBack();
                }
            }
        });
        this.forwardButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                if (MraidBrowser.this.webView.canGoForward()) {
                    MraidBrowser.this.webView.goForward();
                }
            }
        });
        this.refreshButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                MraidBrowser.this.webView.reload();
            }
        });
        this.closeButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                MraidBrowser.this.finish();
            }
        });
    }
    
    ImageButton createButton(final int n, final int n2, final int n3, final String s) {
        final ImageButton imageButton = new ImageButton((Context)this);
        final InputStream resourceAsStream = this.getClass().getResourceAsStream("assets/drawable/" + s + ".png");
        final BitmapDrawable imageDrawable = new BitmapDrawable(this.getResources(), resourceAsStream);
        while (true) {
            try {
                resourceAsStream.close();
                imageButton.setImageDrawable((Drawable)imageDrawable);
                final LinearLayout$LayoutParams layoutParams = new LinearLayout$LayoutParams(n, n2);
                layoutParams.gravity = 16;
                imageButton.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                imageButton.setPadding(0, n3, 0, n3);
                imageButton.setScaleType(ImageView$ScaleType.FIT_CENTER);
                imageButton.setBackgroundColor(0);
                return imageButton;
            }
            catch (IOException ex) {
                continue;
            }
            break;
        }
    }
    
    public void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        this.getWindow().requestFeature(2);
        this.getWindow().setFeatureInt(2, -1);
        this.createUi();
        this.setButtonListeners();
        this.setContentView((View)this.rootLayout);
        this.initializeWebView(this.getIntent());
        this.enableCookies();
    }
    
    protected void onPause() {
        super.onPause();
        CookieSyncManager.getInstance().stopSync();
    }
    
    protected void onResume() {
        super.onResume();
        CookieSyncManager.getInstance().startSync();
    }
}
