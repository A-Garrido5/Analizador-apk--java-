// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.mraid;

import android.content.res.Configuration;
import android.view.Window;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import java.net.MalformedURLException;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.Date;
import java.text.SimpleDateFormat;
import com.nexage.android.internal.MraidAdLayout;
import android.os.Build$VERSION;
import java.util.regex.Matcher;
import java.io.IOException;
import java.util.regex.Pattern;
import java.util.Locale;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import android.view.View;
import android.view.View$OnTouchListener;
import android.view.GestureDetector$OnGestureListener;
import android.view.MotionEvent;
import android.view.GestureDetector$SimpleOnGestureListener;
import android.os.Environment;
import java.io.File;
import java.io.OutputStream;
import java.io.InputStream;
import android.view.GestureDetector;
import android.webkit.WebView;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import com.nexage.android.NexageAdManager;
import android.app.Activity;
import android.annotation.TargetApi;
import android.annotation.SuppressLint;

class MraidView$MraidBridge
{
    private static final String TAG = "MraidBridge";
    final /* synthetic */ MraidView this$0;
    
    private MraidView$MraidBridge(final MraidView this$0) {
        this.this$0 = this$0;
    }
    
    public void close() {
        MraidLog.d("MraidBridge", "close");
        this.this$0.displayController.close();
    }
    
    @SuppressLint({ "SimpleDateFormat" })
    @TargetApi(14)
    public void createCalendarEvent(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             "MraidBridge"
        //     2: new             Ljava/lang/StringBuilder;
        //     5: dup            
        //     6: ldc             "createCalendarEvent "
        //     8: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    11: aload_1        
        //    12: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    15: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    18: invokestatic    com/nexage/android/mraid/MraidLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    21: aload_0        
        //    22: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    25: getfield        com/nexage/android/mraid/MraidView.isAutoActionAllowed:Z
        //    28: ifne            49
        //    31: aload_0        
        //    32: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    35: invokestatic    com/nexage/android/mraid/MraidView.access$000:(Lcom/nexage/android/mraid/MraidView;)Z
        //    38: ifne            49
        //    41: ldc             "MraidBridge"
        //    43: ldc             "auto-action not allowed and not touched yet -- returning from createCalendarEvent"
        //    45: invokestatic    com/nexage/android/mraid/MraidLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    48: return         
        //    49: aload_0        
        //    50: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    53: invokestatic    com/nexage/android/mraid/MraidView.access$1100:(Lcom/nexage/android/mraid/MraidView;)Lcom/nexage/android/mraid/MraidView$MraidViewListener;
        //    56: ifnull          90
        //    59: aload_0        
        //    60: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    63: invokestatic    com/nexage/android/mraid/MraidView.access$1200:(Lcom/nexage/android/mraid/MraidView;)Z
        //    66: ifne            90
        //    69: aload_0        
        //    70: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    73: iconst_1       
        //    74: invokestatic    com/nexage/android/mraid/MraidView.access$1202:(Lcom/nexage/android/mraid/MraidView;Z)Z
        //    77: pop            
        //    78: aload_0        
        //    79: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    82: invokestatic    com/nexage/android/mraid/MraidView.access$1100:(Lcom/nexage/android/mraid/MraidView;)Lcom/nexage/android/mraid/MraidView$MraidViewListener;
        //    85: invokeinterface com/nexage/android/mraid/MraidView$MraidViewListener.onClick:()V
        //    90: aload_0        
        //    91: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //    94: invokestatic    com/nexage/android/mraid/MraidView.access$1300:(Lcom/nexage/android/mraid/MraidView;)Z
        //    97: ifeq            361
        //   100: ldc             "Untitled"
        //   102: astore_2       
        //   103: ldc             "Unknown"
        //   105: astore_3       
        //   106: ldc             ""
        //   108: astore          4
        //   110: new             Lorg/json/JSONObject;
        //   113: dup            
        //   114: aload_1        
        //   115: invokespecial   org/json/JSONObject.<init>:(Ljava/lang/String;)V
        //   118: astore          5
        //   120: aload           5
        //   122: ldc             "description"
        //   124: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   127: astore_2       
        //   128: aload           5
        //   130: ldc             "location"
        //   132: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   135: astore_3       
        //   136: aload           5
        //   138: ldc             "summary"
        //   140: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   143: astore          4
        //   145: new             Ljava/text/SimpleDateFormat;
        //   148: dup            
        //   149: ldc             "yyyy-MM-kk'T'HH:mm:ssZ"
        //   151: invokespecial   java/text/SimpleDateFormat.<init>:(Ljava/lang/String;)V
        //   154: astore          23
        //   156: aload           23
        //   158: aload           5
        //   160: ldc             "start"
        //   162: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   165: invokevirtual   java/text/SimpleDateFormat.parse:(Ljava/lang/String;)Ljava/util/Date;
        //   168: invokevirtual   java/util/Date.getTime:()J
        //   171: lstore          24
        //   173: lload           24
        //   175: lstore          13
        //   177: aload           5
        //   179: ldc             "end"
        //   181: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   184: ifnull          390
        //   187: aload           23
        //   189: aload           5
        //   191: ldc             "end"
        //   193: invokevirtual   org/json/JSONObject.getString:(Ljava/lang/String;)Ljava/lang/String;
        //   196: invokevirtual   java/text/SimpleDateFormat.parse:(Ljava/lang/String;)Ljava/util/Date;
        //   199: invokevirtual   java/util/Date.getTime:()J
        //   202: lstore          27
        //   204: lload           27
        //   206: lstore          15
        //   208: new             Landroid/content/Intent;
        //   211: dup            
        //   212: ldc             "android.intent.action.INSERT"
        //   214: invokespecial   android/content/Intent.<init>:(Ljava/lang/String;)V
        //   217: ldc             "vnd.android.cursor.item/event"
        //   219: invokevirtual   android/content/Intent.setType:(Ljava/lang/String;)Landroid/content/Intent;
        //   222: astore          17
        //   224: aload           17
        //   226: ldc             "title"
        //   228: aload_2        
        //   229: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
        //   232: pop            
        //   233: aload           17
        //   235: ldc             "description"
        //   237: aload           4
        //   239: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
        //   242: pop            
        //   243: aload           17
        //   245: ldc             "eventLocation"
        //   247: aload_3        
        //   248: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
        //   251: pop            
        //   252: lload           13
        //   254: lconst_0       
        //   255: lcmp           
        //   256: ifle            269
        //   259: aload           17
        //   261: ldc             "beginTime"
        //   263: lload           13
        //   265: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;J)Landroid/content/Intent;
        //   268: pop            
        //   269: lload           15
        //   271: lconst_0       
        //   272: lcmp           
        //   273: ifle            286
        //   276: aload           17
        //   278: ldc             "endTime"
        //   280: lload           15
        //   282: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;J)Landroid/content/Intent;
        //   285: pop            
        //   286: aload_0        
        //   287: getfield        com/nexage/android/mraid/MraidView$MraidBridge.this$0:Lcom/nexage/android/mraid/MraidView;
        //   290: invokevirtual   com/nexage/android/mraid/MraidView.getContext:()Landroid/content/Context;
        //   293: aload           17
        //   295: invokevirtual   android/content/Context.startActivity:(Landroid/content/Intent;)V
        //   298: return         
        //   299: astore          6
        //   301: aload           4
        //   303: astore          7
        //   305: aload_3        
        //   306: astore          8
        //   308: aload           6
        //   310: astore          9
        //   312: aload_2        
        //   313: astore          10
        //   315: lconst_0       
        //   316: lstore          11
        //   318: new             Ljava/lang/StringBuilder;
        //   321: dup            
        //   322: ldc             "Error parsing event JSON: "
        //   324: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   327: aload           9
        //   329: invokevirtual   java/lang/Exception.getLocalizedMessage:()Ljava/lang/String;
        //   332: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   335: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   338: invokestatic    com/nexage/android/mraid/MraidLog.e:(Ljava/lang/String;)V
        //   341: aload           8
        //   343: astore_3       
        //   344: aload           10
        //   346: astore_2       
        //   347: aload           7
        //   349: astore          4
        //   351: lload           11
        //   353: lstore          13
        //   355: lconst_0       
        //   356: lstore          15
        //   358: goto            208
        //   361: ldc             "Calendar not supported on this platform"
        //   363: invokestatic    com/nexage/android/mraid/MraidLog.e:(Ljava/lang/String;)V
        //   366: return         
        //   367: astore          26
        //   369: lload           13
        //   371: lstore          11
        //   373: aload           4
        //   375: astore          7
        //   377: aload_3        
        //   378: astore          8
        //   380: aload           26
        //   382: astore          9
        //   384: aload_2        
        //   385: astore          10
        //   387: goto            318
        //   390: lconst_0       
        //   391: lstore          15
        //   393: goto            208
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  110    173    299    318    Ljava/lang/Exception;
        //  177    204    367    390    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0208:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public void expand(final String s, final boolean b, final boolean b2, final String s2) {
        MraidLog.d("MraidBridge", "expand " + s + " " + b + " " + b2 + " " + s2);
        if (!this.this$0.isAutoActionAllowed && !this.this$0.isTouched) {
            MraidLog.d("MraidBridge", "auto-action not allowed and not touched yet -- returning from expand");
            return;
        }
        if (this.this$0.mraidViewListener != null && !this.this$0.hasBeenClicked) {
            this.this$0.hasBeenClicked = true;
            this.this$0.mraidViewListener.onClick();
        }
        if (this.this$0.isFetching()) {
            MraidLog.d("MraidBridge", "currently fetching -- returning from expand");
            return;
        }
        ((Activity)this.this$0.getContext()).runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                MraidView$MraidBridge.this.this$0.displayController.expand(s, b, b2, s2);
            }
        });
    }
    
    public void open(final String s) {
        MraidLog.d("MraidBridge", "open " + s);
        if (!this.this$0.isAutoActionAllowed && !this.this$0.isTouched) {
            MraidLog.d("MraidBridge", "auto-action not allowed and not touched yet -- returning from open");
        }
        else {
            if (this.this$0.mListenerInfo.mOnOpenListener != null) {
                this.this$0.mListenerInfo.mOnOpenListener.onOpen(this.this$0);
            }
            if (this.this$0.mraidViewListener != null && !this.this$0.hasBeenClicked) {
                this.this$0.hasBeenClicked = true;
                this.this$0.mraidViewListener.onClick();
            }
            final Context context = this.this$0.getContext();
            if (s.startsWith("tel:")) {
                if (!NexageAdManager.IsFeatureSupportNeeded("no-phone")) {
                    context.startActivity(new Intent("android.intent.action.DIAL", Uri.parse(s)));
                }
            }
            else if (s.startsWith("sms:")) {
                if (!NexageAdManager.IsFeatureSupportNeeded("no-sms")) {
                    context.startActivity(new Intent("android.intent.action.SENDTO", Uri.parse(s)));
                }
            }
            else {
                if (s.startsWith("market:")) {
                    final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    intent.addFlags(268435456);
                    context.startActivity(intent);
                    return;
                }
                if (s.startsWith("http:") || s.startsWith("https:")) {
                    final Intent intent2 = new Intent(context, (Class)MraidBrowser.class);
                    intent2.putExtra("extra_url", s);
                    intent2.addFlags(268435456);
                    context.startActivity(intent2);
                }
            }
        }
    }
    
    public void playVideo(final String s) {
        MraidLog.d("MraidBridge", "playVideo " + s);
        if (!this.this$0.isAutoActionAllowed && !this.this$0.isTouched) {
            MraidLog.d("MraidBridge", "auto-action not allowed and not touched yet -- returning from playVideo");
            return;
        }
        if (this.this$0.mraidViewListener != null && !this.this$0.hasBeenClicked) {
            this.this$0.hasBeenClicked = true;
            this.this$0.mraidViewListener.onClick();
        }
        this.this$0.getContext().startActivity(new Intent("android.intent.action.VIEW", Uri.parse(s)));
    }
    
    public void resize() {
        MraidLog.d("MraidBridge", "resize");
        if (!this.this$0.isAutoActionAllowed && !this.this$0.isTouched) {
            MraidLog.d("MraidBridge", "auto-action not allowed and not touched yet -- returning from resize");
            return;
        }
        if (this.this$0.mraidViewListener != null && !this.this$0.hasBeenClicked) {
            this.this$0.hasBeenClicked = true;
            this.this$0.mraidViewListener.onClick();
        }
        if (this.this$0.isFetching()) {
            MraidLog.d("MraidBridge", "currently fetching -- returning from resize");
            return;
        }
        ((Activity)this.this$0.getContext()).runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                MraidView$MraidBridge.this.this$0.displayController.resize(false);
            }
        });
    }
    
    public void setExpandProperties(final int n, final int n2, final boolean b, final boolean b2) {
        MraidLog.d("MraidBridge", "setExpandProperties " + n + " " + n2 + " " + b + " " + b2);
        this.this$0.displayController.useCustomClose(b);
    }
    
    public void setOrientationProperties(final boolean b, final String s) {
        MraidLog.d("MraidBridge", "setOrientationProperties " + b + " " + s);
        this.this$0.allowOrientationChange = b;
        if (s.equals("portrait")) {
            this.this$0.forceOrientation = MraidView$ForceOrientation.PORTRAIT;
        }
        else if (s.equals("landscape")) {
            this.this$0.forceOrientation = MraidView$ForceOrientation.LANDSCAPE;
        }
        else if (s.equals("none")) {
            this.this$0.forceOrientation = MraidView$ForceOrientation.NONE;
        }
        if (this.this$0.mListenerInfo.mOnRequestOrientationListener != null) {
            this.this$0.mListenerInfo.mOnRequestOrientationListener.onRequestOrientation(this.this$0, this.this$0.allowOrientationChange, this.this$0.forceOrientation);
            return;
        }
        MraidLog.d("MraidBridge", "no OnRequestOrientationListener found");
    }
    
    public void setResizeProperties(final int n, final int n2, final String s, final int n3, final int n4, final boolean b) {
        MraidLog.d("MraidBridge", "setResizeProperties " + n + " " + n2 + " " + s + " " + n3 + " " + n4 + " " + b);
        this.this$0.displayController.setResizeSize(n, n2);
    }
    
    public void storePicture(final String s) {
        MraidLog.d("MraidBridge", "storePicture -> " + s);
        if (!this.this$0.isAutoActionAllowed && !this.this$0.isTouched) {
            MraidLog.d("MraidBridge", "auto-action not allowed and not touched yet -- returning from storePicture");
        }
        else {
            if (this.this$0.mraidViewListener != null && !this.this$0.hasBeenClicked) {
                this.this$0.hasBeenClicked = true;
                this.this$0.mraidViewListener.onClick();
            }
            if (this.this$0.isPhotoSaveSupported()) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            MraidView$MraidBridge.this.this$0.savePictureIntoGallery(s);
                        }
                        catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }).start();
            }
        }
    }
    
    public void useCustomClose(final boolean b) {
        MraidLog.d("MraidBridge", "useCustomClose " + b);
        this.this$0.displayController.useCustomClose(b);
    }
}
