// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.mraid;

import android.content.res.Configuration;
import android.view.Window;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.app.Activity;
import java.net.MalformedURLException;
import android.content.Intent;
import android.net.Uri;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.Date;
import java.text.SimpleDateFormat;
import com.nexage.android.internal.MraidAdLayout;
import android.os.Build$VERSION;
import com.nexage.android.NexageAdManager;
import java.util.regex.Matcher;
import java.io.IOException;
import java.util.regex.Pattern;
import java.util.Locale;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import android.annotation.TargetApi;
import android.view.View;
import android.view.View$OnTouchListener;
import android.view.GestureDetector$OnGestureListener;
import android.view.MotionEvent;
import android.view.GestureDetector$SimpleOnGestureListener;
import android.os.Environment;
import java.io.File;
import java.io.OutputStream;
import java.io.InputStream;
import android.content.Context;
import android.view.GestureDetector;
import android.annotation.SuppressLint;
import android.webkit.WebView;

@SuppressLint({ "ViewConstructor" })
public class MraidView extends WebView
{
    private static final String TAG = "MraidView";
    private boolean allowOrientationChange;
    private int currentHeight;
    private int currentWidth;
    private MraidDisplayController displayController;
    private MraidView$ForceOrientation forceOrientation;
    private GestureDetector gestureDetector;
    private boolean hasBeenClicked;
    private boolean hasFiredReadyEvent;
    protected final boolean isAutoActionAllowed;
    private final boolean isInterstitial;
    private boolean isLaidOut;
    private boolean isPageFinished;
    private boolean isTouched;
    private final boolean isTwoPartExpansionView;
    private boolean isUpdated;
    private MraidView$MraidListenerInfo mListenerInfo;
    private MraidView$MraidViewListener mraidViewListener;
    private final MraidView$PlacementType placementType;
    private MraidView$ViewState viewState;
    
    public MraidView(final Context context, final MraidView$ExpansionStyle mraidView$ExpansionStyle, final MraidView$NativeCloseButtonStyle mraidView$NativeCloseButtonStyle, final MraidView$PlacementType placementType, final boolean isTwoPartExpansionView, final boolean isInterstitial, final boolean isAutoActionAllowed) {
        super(context);
        this.viewState = MraidView$ViewState.DEFAULT;
        this.currentWidth = 0;
        this.currentHeight = 0;
        this.allowOrientationChange = true;
        this.forceOrientation = MraidView$ForceOrientation.NONE;
        MraidLog.d("MraidView", "creating " + this);
        this.placementType = placementType;
        this.isTwoPartExpansionView = isTwoPartExpansionView;
        this.isInterstitial = isInterstitial;
        this.isAutoActionAllowed = isAutoActionAllowed;
        this.initialize(mraidView$ExpansionStyle, mraidView$NativeCloseButtonStyle);
    }
    
    public MraidView(final Context context, final boolean b, final boolean b2) {
        MraidView$ExpansionStyle mraidView$ExpansionStyle;
        if (b) {
            mraidView$ExpansionStyle = MraidView$ExpansionStyle.DISABLED;
        }
        else {
            mraidView$ExpansionStyle = MraidView$ExpansionStyle.ENABLED;
        }
        final MraidView$NativeCloseButtonStyle ad_CONTROLLED = MraidView$NativeCloseButtonStyle.AD_CONTROLLED;
        MraidView$PlacementType mraidView$PlacementType;
        if (b) {
            mraidView$PlacementType = MraidView$PlacementType.INTERSTITIAL;
        }
        else {
            mraidView$PlacementType = MraidView$PlacementType.INLINE;
        }
        this(context, mraidView$ExpansionStyle, ad_CONTROLLED, mraidView$PlacementType, false, b, b2);
    }
    
    private int convertToDip(final int n, final int n2) {
        return n;
    }
    
    private void copyStream(final InputStream inputStream, final OutputStream outputStream) {
        try {
            final byte[] array = new byte[1024];
            while (true) {
                final int read = inputStream.read(array, 0, 1024);
                if (read == -1) {
                    break;
                }
                outputStream.write(array, 0, read);
            }
        }
        catch (Exception ex) {
            MraidLog.i("Error saving picture: " + ex.getLocalizedMessage());
        }
    }
    
    private File getAlbumDir() {
        File file;
        if ("mounted".equals(Environment.getExternalStorageState())) {
            file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), "NexageAd");
            if (!file.mkdirs() && !file.exists()) {
                MraidLog.i("Failed to create camera directory");
                return null;
            }
        }
        else {
            MraidLog.i("External storage is not mounted READ/WRITE.");
            file = null;
        }
        return file;
    }
    
    @SuppressLint({ "SetJavaScriptEnabled" })
    private void initialize(final MraidView$ExpansionStyle mraidView$ExpansionStyle, final MraidView$NativeCloseButtonStyle mraidView$NativeCloseButtonStyle) {
        MraidLog.d("MraidView", "initialize");
        this.setScrollContainer(false);
        this.setVerticalScrollBarEnabled(false);
        this.setHorizontalScrollBarEnabled(false);
        this.setScrollBarStyle(33554432);
        this.gestureDetector = new GestureDetector(this.getContext(), (GestureDetector$OnGestureListener)new GestureDetector$SimpleOnGestureListener() {
            public boolean onScroll(final MotionEvent motionEvent, final MotionEvent motionEvent2, final float n, final float n2) {
                return true;
            }
        });
        this.setFocusableInTouchMode(this.isInterstitial);
        this.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
            @TargetApi(19)
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                switch (motionEvent.getAction()) {
                    case 0:
                    case 1: {
                        MraidView.this.isTouched = true;
                        if (!view.hasFocus()) {
                            view.requestFocus();
                            break;
                        }
                        break;
                    }
                }
                return false;
            }
        });
        this.getSettings().setJavaScriptEnabled(true);
        this.setWebChromeClient((WebChromeClient)new MraidView$MraidWebChromeClient(this, null));
        this.setWebViewClient((WebViewClient)new MraidView$MraidWebViewClient(this, null));
        this.addJavascriptInterface((Object)new MraidView$MraidBridge(this, null), "mraidbridge");
        this.displayController = new MraidDisplayController(this, mraidView$ExpansionStyle, mraidView$NativeCloseButtonStyle);
        this.mListenerInfo = new MraidView$MraidListenerInfo();
    }
    
    private void initializeJavaScriptPlacementType() {
        MraidLog.d("MraidView", "initializeJavaScriptPlacementType");
        this.injectJavaScript("mraid.setPlacementType('" + this.placementType.toString().toLowerCase(Locale.getDefault()) + "');");
    }
    
    private void initializeJavaScriptSupportedFeatures() {
        MraidLog.d("MraidView", "initializeSupportedFeatures");
        this.injectJavaScript("mraid.setSupports(mraid.SUPPORTED_FEATURES.SMS, " + this.isSMSSupported() + ");");
        this.injectJavaScript("mraid.setSupports(mraid.SUPPORTED_FEATURES.TEL, " + this.isPhoneCallSupported() + ");");
        this.injectJavaScript("mraid.setSupports(mraid.SUPPORTED_FEATURES.CALENDAR, " + this.isCalendarSupported() + ");");
        this.injectJavaScript("mraid.setSupports(mraid.SUPPORTED_FEATURES.STOREPICTURE, " + this.isPhotoSaveSupported() + ");");
        this.injectJavaScript("mraid.setSupports(mraid.SUPPORTED_FEATURES.INLINEVIDEO, true);");
    }
    
    private String injectMraidJs(final String s) {
        final InputStream resourceAsStream = this.getClass().getResourceAsStream("assets/web/mraid.js");
        String s2;
        try {
            final byte[] array = new byte[resourceAsStream.available()];
            resourceAsStream.read(array);
            s2 = new String(array);
            final Matcher matcher = Pattern.compile("<script\\s+[^>]*\\bsrc\\s*=\\s*([\"'])mraid\\.js\\1[^>]*>\\s*</script>", 2).matcher(s);
            if (matcher.find()) {
                return s.replace(matcher.group(), "<script>" + System.getProperty("line.separator") + s2 + System.getProperty("line.separator") + "</script>");
            }
        }
        catch (IOException ex) {
            MraidLog.e("MraidView", "injectMraidJs failed " + ex.getLocalizedMessage());
            return null;
        }
        final Matcher matcher2 = Pattern.compile("<head[^>]*>", 2).matcher(s);
        if (matcher2.find()) {
            final String group = matcher2.group();
            return s.replace(group, group + "<script>" + s2 + "</script>");
        }
        final Matcher matcher3 = Pattern.compile("<html[^>]*>", 2).matcher(s);
        matcher3.find();
        final String group2 = matcher3.group();
        return s.replace(group2, group2 + "<head><script>" + s2 + "</script></head>");
    }
    
    private void injectMraidJsDirectly() {
        final InputStream resourceAsStream = this.getClass().getResourceAsStream("assets/web/mraid.js");
        try {
            final byte[] array = new byte[resourceAsStream.available()];
            resourceAsStream.read(array);
            this.injectJavaScript(new String(array));
        }
        catch (IOException ex) {
            MraidLog.e("MraidView", "injectMraidJs failed " + ex.getLocalizedMessage());
        }
    }
    
    private boolean isCalendarSupported() {
        MraidLog.d("MraidView", "isCalendarSupported");
        final boolean isFeatureSupportNeeded = NexageAdManager.IsFeatureSupportNeeded("no-calendar");
        boolean b = false;
        if (!isFeatureSupportNeeded) {
            final int sdk_INT = Build$VERSION.SDK_INT;
            b = false;
            if (sdk_INT >= 14) {
                final int checkCallingOrSelfPermission = this.getContext().checkCallingOrSelfPermission("android.permission.WRITE_CALENDAR");
                b = false;
                if (checkCallingOrSelfPermission == 0) {
                    b = true;
                }
            }
        }
        MraidLog.d("MraidView", "Calendar save support: " + b);
        return b;
    }
    
    private boolean isFetching() {
        try {
            return ((MraidAdLayout)this.getParent()).getNexageAdView().isFetching();
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    private boolean isPhoneCallSupported() {
        final boolean isFeatureSupportNeeded = NexageAdManager.IsFeatureSupportNeeded("no-phone");
        boolean b = false;
        if (!isFeatureSupportNeeded) {
            final int checkCallingOrSelfPermission = this.getContext().checkCallingOrSelfPermission("android.permission.CALL_PHONE");
            b = false;
            if (checkCallingOrSelfPermission == 0) {
                b = true;
            }
        }
        MraidLog.v("Phone call support: " + b);
        return b;
    }
    
    private boolean isPhotoSaveSupported() {
        final boolean isFeatureSupportNeeded = NexageAdManager.IsFeatureSupportNeeded("no-photo");
        boolean b = false;
        if (!isFeatureSupportNeeded) {
            b = true;
        }
        MraidLog.v("Photo save support: " + b);
        return b;
    }
    
    private boolean isSMSSupported() {
        final boolean isFeatureSupportNeeded = NexageAdManager.IsFeatureSupportNeeded("no-sms");
        boolean b = false;
        if (!isFeatureSupportNeeded) {
            final int checkCallingOrSelfPermission = this.getContext().checkCallingOrSelfPermission("android.permission.SEND_SMS");
            b = false;
            if (checkCallingOrSelfPermission == 0) {
                b = true;
            }
        }
        MraidLog.v("SMS support: " + b);
        return b;
    }
    
    @SuppressLint({ "SimpleDateFormat" })
    private void savePictureIntoGallery(final String s) {
        final String string = this.getAlbumDir() + "/img" + new SimpleDateFormat("yyyy-MM-dd-HHmmss").format(new Date()) + ".png";
        MraidLog.i("Saving image into: " + string);
        final File file = new File(string);
        try {
            this.copyStream(new URL(s).openStream(), new FileOutputStream(file));
            this.getContext().sendBroadcast(new Intent("android.intent.action.MEDIA_MOUNTED", Uri.parse("file://" + this.getAlbumDir())));
            MraidLog.i("Saved image successfully");
        }
        catch (MalformedURLException ex) {
            MraidLog.e("Not able to save image due to invalid URL: " + ex.getLocalizedMessage());
        }
        catch (IOException ex2) {
            MraidLog.e("Unable to save image: " + ex2.getLocalizedMessage());
        }
    }
    
    private void updateJavaScriptSizes() {
        MraidLog.d("MraidView", "updateJavaScriptSizes");
        if (!this.isPageFinished) {
            MraidLog.d("MraidView", "updateJavaScriptSizes: isPageFinished is false, returning");
            return;
        }
        final Activity activity = (Activity)this.getContext();
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        final float density = displayMetrics.density;
        final int densityDpi = displayMetrics.densityDpi;
        final int widthPixels = displayMetrics.widthPixels;
        final int heightPixels = displayMetrics.heightPixels;
        MraidLog.d("MraidView", "density " + density);
        switch (densityDpi) {
            case 120: {
                MraidLog.d("MraidView", "densityDpi DENSITY_LOW");
                break;
            }
            case 160: {
                MraidLog.d("MraidView", "densityDpi DENSITY_MEDIUM");
                break;
            }
            case 240: {
                MraidLog.d("MraidView", "densityDpi DENSITY_HIGH");
                break;
            }
        }
        MraidLog.d("MraidView", "widthPixels " + widthPixels);
        MraidLog.d("MraidView", "heightPixels " + heightPixels);
        final Window window = activity.getWindow();
        final Rect rect = new Rect();
        window.getDecorView().getWindowVisibleDisplayFrame(rect);
        final int top = rect.top;
        final int top2 = window.findViewById(16908290).getTop();
        final int n = top2 - top;
        MraidLog.d("MraidView", "statusBarHeight " + top);
        MraidLog.d("MraidView", "titleBarHeight " + n);
        MraidLog.d("MraidView", "contentViewTop " + top2);
        final int convertToDip = this.convertToDip(widthPixels, densityDpi);
        final int convertToDip2 = this.convertToDip(heightPixels, densityDpi);
        MraidLog.d("MraidView", "screen " + convertToDip + "x" + convertToDip2);
        this.displayController.setDensity(density);
        final int n2 = convertToDip2 - top - n;
        MraidLog.d("MraidView", "max " + convertToDip + "x" + n2);
        MraidLog.d("MraidView", "view* " + this.getWidth() + "x" + this.getHeight());
        final int[] array = new int[2];
        this.getLocationOnScreen(array);
        MraidLog.d("MraidView", "getLocationOnScreen " + array[0] + "," + array[1]);
        this.getLocationInWindow(array);
        MraidLog.d("MraidView", "getLocationInWindow " + array[0] + "," + array[1]);
        this.injectJavaScript("mraid.setScreenSize(" + convertToDip + "," + convertToDip2 + ");");
        this.injectJavaScript("mraid.setMaxSize(" + convertToDip + "," + n2 + ");");
        this.injectJavaScript("mraid.setExpandSize(" + convertToDip + "," + convertToDip2 + ");");
        final int currentWidth = this.currentWidth;
        final int currentHeight = this.currentHeight;
        this.currentWidth = this.getWidth();
        this.currentHeight = this.getHeight();
        this.getLocationInWindow(array);
        MraidLog.d("MraidView", "current pixels " + array[0] + "," + array[1] + " " + this.currentWidth + "x" + this.currentHeight);
        final int convertToDip3 = this.convertToDip(array[0], densityDpi);
        final int convertToDip4 = this.convertToDip(array[1], densityDpi);
        final int convertToDip5 = this.convertToDip(this.currentWidth, densityDpi);
        final int convertToDip6 = this.convertToDip(this.currentHeight, densityDpi);
        this.injectJavaScript("mraid.setCurrentPosition(" + convertToDip3 + "," + convertToDip4 + "," + convertToDip5 + "," + convertToDip6 + ");");
        if (currentWidth != this.currentWidth || currentHeight != this.currentHeight) {
            this.fireSizeChangeEvent(convertToDip5, convertToDip6);
        }
        if (!this.isTwoPartExpansionView) {
            MraidView$ViewState viewState = this.displayController.getViewState();
            MraidLog.d("MraidView", "current view state is " + viewState.toString());
            if (viewState == MraidView$ViewState.LOADING) {
                viewState = MraidView$ViewState.DEFAULT;
                this.displayController.setViewState(viewState);
                this.fireStateChangeEvent(viewState);
            }
            if (viewState == MraidView$ViewState.DEFAULT) {
                this.injectJavaScript("mraid.setDefaultPosition(" + convertToDip3 + "," + convertToDip4 + "," + convertToDip5 + "," + convertToDip6 + ");");
            }
            MraidLog.d("MraidView", "checking hasFiredReadyEvent in updateJavaScriptSizes: " + this.hasFiredReadyEvent);
            if (!this.hasFiredReadyEvent) {
                this.fireReadyEvent();
                MraidLog.d("MraidView", "setting hasFiredReadyEvent to true in updateJavaScriptSizes");
                this.hasFiredReadyEvent = true;
            }
        }
        this.isUpdated = true;
    }
    
    public boolean allowOrientationChange() {
        return this.allowOrientationChange;
    }
    
    protected void fireErrorEvent(final String s, final String s2) {
        this.injectJavaScript("mraid.fireErrorEvent('" + s + "', '" + s2 + "');");
    }
    
    protected void fireReadyEvent() {
        this.injectJavaScript("mraid.fireReadyEvent();");
    }
    
    protected void fireSizeChangeEvent(final int n, final int n2) {
        this.injectJavaScript("mraid.fireSizeChangeEvent('" + n + "', '" + n2 + "');");
    }
    
    @SuppressLint({ "DefaultLocale" })
    protected void fireStateChangeEvent(final MraidView$ViewState mraidView$ViewState) {
        final String lowerCase = mraidView$ViewState.toString().toLowerCase();
        this.injectJavaScript("mraid.setState('" + lowerCase + "');");
        this.injectJavaScript("mraid.fireStateChangeEvent('" + lowerCase + "');");
    }
    
    protected void fireViewableChangeEvent(final boolean b) {
        this.injectJavaScript("mraid.fireViewableChangeEvent(" + b + ");");
    }
    
    public MraidDisplayController getDisplayController() {
        return this.displayController;
    }
    
    public MraidView$ForceOrientation getForceOrientation() {
        return this.forceOrientation;
    }
    
    public boolean getHasFiredReadyEvent() {
        return this.hasFiredReadyEvent;
    }
    
    public boolean getIsLaidOut() {
        return this.isLaidOut;
    }
    
    public MraidView$MraidViewListener getListener() {
        return this.mraidViewListener;
    }
    
    public MraidView$OnCloseButtonStateChangeListener getOnCloseButtonStateChangeListener() {
        return this.mListenerInfo.mOnCloseButtonListener;
    }
    
    public MraidView$OnCloseListener getOnCloseListener() {
        return this.mListenerInfo.mOnCloseListener;
    }
    
    public MraidView$OnExpandListener getOnExpandListener() {
        return this.mListenerInfo.mOnExpandListener;
    }
    
    public MraidView$OnFailureListener getOnFailureListener() {
        return this.mListenerInfo.mOnFailureListener;
    }
    
    public MraidView$OnOpenListener getOnOpenListener() {
        return this.mListenerInfo.mOnOpenListener;
    }
    
    public MraidView$OnReadyListener getOnReadyListener() {
        return this.mListenerInfo.mOnReadyListener;
    }
    
    public MraidView$OnRequestOrientationListener getOnRequestOrientationListener() {
        return this.mListenerInfo.mOnRequestOrientationListener;
    }
    
    protected MraidView$PlacementType getPlacementType() {
        return this.placementType;
    }
    
    public int getResizeHeight() {
        return this.displayController.resizeHeight;
    }
    
    public int getResizeWidth() {
        return this.displayController.resizeWidth;
    }
    
    protected String getVisibilityString(final int n) {
        switch (n) {
            default: {
                return "UNKNOWN";
            }
            case 8: {
                return "GONE";
            }
            case 4: {
                return "INVISIBLE";
            }
            case 0: {
                return "VISIBLE";
            }
        }
    }
    
    protected void injectJavaScript(final String s) {
        if (s != null) {
            super.loadUrl("javascript:" + s);
        }
    }
    
    public boolean isExpanded() {
        return this.viewState == MraidView$ViewState.EXPANDED;
    }
    
    protected boolean isInterstitial() {
        return this.isInterstitial;
    }
    
    public void loadHtmlData(String string) {
        MraidLog.d("MraidView", "loadHtmlData (raw)");
        MraidLog.v("MraidView", string);
        if (string.indexOf("<html") == -1) {
            final StringBuilder sb = new StringBuilder();
            sb.append("<html>");
            sb.append("<head>");
            sb.append("<meta name='viewport' content='width=device-width, user-scalable=no' />");
            sb.append("</head>");
            sb.append("<body style='margin:0; padding:0;'>");
            sb.append(string);
            sb.append("</body>");
            sb.append("</html>");
            string = sb.toString();
            MraidLog.d("MraidView", "loadHtmlData (wrapped)");
            MraidLog.v("MraidView", string);
        }
        this.isPageFinished = false;
        this.isTouched = false;
        this.loadDataWithBaseURL((String)null, this.injectMraidJs(string), "text/html", "UTF-8", (String)null);
    }
    
    public void loadUrl(final String s) {
        this.isPageFinished = false;
        this.isTouched = false;
        this.injectMraidJsDirectly();
        super.loadUrl(s);
    }
    
    protected void onAttachedToWindow() {
        MraidLog.d("MraidView", "onAttachedToWindow");
    }
    
    public void onConfigurationChanged(final Configuration configuration) {
        super.onConfigurationChanged(configuration);
        final StringBuilder sb = new StringBuilder("onConfigurationChanged ");
        String s;
        if (configuration.orientation == 1) {
            s = "portrait";
        }
        else {
            s = "landscape";
        }
        MraidLog.d("MraidView", sb.append(s).toString());
    }
    
    protected void onDetachedFromWindow() {
        MraidLog.d("MraidView", "onDetachedFromWindow");
        this.fireViewableChangeEvent(false);
        if (this.isInterstitial) {
            this.fireStateChangeEvent(MraidView$ViewState.HIDDEN);
        }
        super.onDetachedFromWindow();
    }
    
    protected void onLayout(final boolean b, final int n, final int n2, final int n3, final int n4) {
        super.onLayout(b, n, n2, n3, n4);
        MraidLog.d("MraidView", "onLayout " + b + " " + n + " " + n2 + " " + n3 + " " + n4);
        if (b) {
            this.updateJavaScriptSizes();
        }
        this.isLaidOut = true;
    }
    
    protected void onSizeChanged(final int n, final int n2, final int n3, final int n4) {
        super.onSizeChanged(n, n2, n3, n4);
        MraidLog.d("MraidView", "onSizeChanged " + n3 + "x" + n4 + " --> " + n + "x" + n2);
    }
    
    public boolean onTouchEvent(final MotionEvent motionEvent) {
        final MraidView$ViewState viewState = this.displayController.getViewState();
        final boolean onTouchEvent = this.gestureDetector.onTouchEvent(motionEvent);
        if (this.placementType == MraidView$PlacementType.INLINE && viewState != MraidView$ViewState.EXPANDED && onTouchEvent) {
            motionEvent.setAction(3);
        }
        return super.onTouchEvent(motionEvent);
    }
    
    public void onWindowFocusChanged(final boolean b) {
        if (b && NexageAdManager.getIsPopupDisplayed()) {
            NexageAdManager.setIsPopupDisplayed(false);
        }
        super.onWindowFocusChanged(b);
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        MraidLog.d("MraidView", "onWindowVisibilityChanged " + this.getVisibilityString(n));
        super.onWindowVisibilityChanged(n);
    }
    
    public void removeListener() {
        this.mraidViewListener = null;
    }
    
    public void setListener(final MraidView$MraidViewListener mraidViewListener) {
        this.mraidViewListener = mraidViewListener;
    }
    
    public void setOnCloseButtonStateChange(final MraidView$OnCloseButtonStateChangeListener mraidView$OnCloseButtonStateChangeListener) {
        this.mListenerInfo.mOnCloseButtonListener = mraidView$OnCloseButtonStateChangeListener;
    }
    
    public void setOnCloseListener(final MraidView$OnCloseListener mraidView$OnCloseListener) {
        this.mListenerInfo.mOnCloseListener = mraidView$OnCloseListener;
    }
    
    public void setOnExpandListener(final MraidView$OnExpandListener mraidView$OnExpandListener) {
        this.mListenerInfo.mOnExpandListener = mraidView$OnExpandListener;
    }
    
    public void setOnFailureListener(final MraidView$OnFailureListener mraidView$OnFailureListener) {
        this.mListenerInfo.mOnFailureListener = mraidView$OnFailureListener;
    }
    
    public void setOnOpenListener(final MraidView$OnOpenListener mraidView$OnOpenListener) {
        this.mListenerInfo.mOnOpenListener = mraidView$OnOpenListener;
    }
    
    public void setOnReadyListener(final MraidView$OnReadyListener mraidView$OnReadyListener) {
        this.mListenerInfo.mOnReadyListener = mraidView$OnReadyListener;
    }
    
    public void setOnRequestOrientationListener(final MraidView$OnRequestOrientationListener mraidView$OnRequestOrientationListener) {
        this.mListenerInfo.mOnRequestOrientationListener = mraidView$OnRequestOrientationListener;
    }
}
