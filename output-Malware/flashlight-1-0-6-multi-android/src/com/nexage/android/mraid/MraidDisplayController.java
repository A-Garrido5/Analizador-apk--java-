// 
// Decompiled by Procyon v0.5.30
// 

package com.nexage.android.mraid;

import android.widget.RelativeLayout$LayoutParams;
import com.nexage.android.NexageAdView;
import android.webkit.URLUtil;
import android.view.ViewGroup;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import android.util.DisplayMetrics;
import android.content.Context;
import android.app.Activity;
import android.view.View;
import android.widget.FrameLayout;
import android.os.Handler;
import android.widget.ImageView;

class MraidDisplayController
{
    private static final int CLOSE_BUTTON_SIZE_DP = 50;
    private static final String TAG = "MraidDispCtrl";
    private static final long VIEWABILITY_TIMER_MILLIS = 3000L;
    private boolean adWantsCustomCloseButton;
    private ImageView closeButton;
    private float density;
    private final MraidView$ExpansionStyle expansionStyle;
    private Handler handler;
    private boolean isForceNotFullScreen;
    private boolean isFullScreen;
    private boolean isResizeSizeValid;
    private boolean isViewable;
    private final MraidView mraidView;
    private final MraidView$NativeCloseButtonStyle nativeCloseButtonStyle;
    private int origHeight;
    private int origTitleBarVisibility;
    private int origWidth;
    private final int originalRequestedOrientation;
    FrameLayout placeholderView;
    protected int resizeHeight;
    protected int resizeWidth;
    private FrameLayout rootView;
    private View titleBar;
    private MraidView twoPartExpansionView;
    private int viewIndexInParent;
    private MraidView$ViewState viewState;
    
    MraidDisplayController(final MraidView mraidView, final MraidView$ExpansionStyle expansionStyle, final MraidView$NativeCloseButtonStyle nativeCloseButtonStyle) {
        this.isResizeSizeValid = false;
        this.resizeWidth = 0;
        this.resizeHeight = 0;
        this.viewState = MraidView$ViewState.HIDDEN;
        this.handler = new Handler();
        MraidLog.d("MraidDispCtrl", "creating " + this);
        this.mraidView = mraidView;
        this.expansionStyle = expansionStyle;
        this.nativeCloseButtonStyle = nativeCloseButtonStyle;
        final Context context = this.mraidView.getContext();
        if (context instanceof Activity) {
            this.originalRequestedOrientation = ((Activity)context).getRequestedOrientation();
        }
        else {
            this.originalRequestedOrientation = -1;
        }
        MraidLog.d("MraidDispCtrl", "originalRequestedOrientation " + this.getOrientationString(this.originalRequestedOrientation));
        this.viewState = MraidView$ViewState.LOADING;
    }
    
    private void forceFullScreen() {
        boolean isForceNotFullScreen = true;
        MraidLog.d("MraidDispCtrl", "forceFullScreen");
        final Activity activity = (Activity)this.mraidView.getContext();
        final int flags = activity.getWindow().getAttributes().flags;
        while (true) {
            while (true) {
                boolean isFullScreen = false;
                Label_0042: {
                    if ((flags & 0x400) != 0x0) {
                        isFullScreen = isForceNotFullScreen;
                        break Label_0042;
                    }
                    Label_0210: {
                        break Label_0210;
                        while (true) {
                            this.isForceNotFullScreen = isForceNotFullScreen;
                            this.origTitleBarVisibility = -9;
                            while (true) {
                                try {
                                    this.titleBar = (View)activity.findViewById(16908310).getParent();
                                    this.origTitleBarVisibility = this.titleBar.getVisibility();
                                    MraidLog.d("MraidDispCtrl", "isFullScreen " + this.isFullScreen);
                                    MraidLog.d("MraidDispCtrl", "isForceNotFullScreen " + this.isForceNotFullScreen);
                                    MraidLog.d("MraidDispCtrl", "origTitleBarVisibility " + this.mraidView.getVisibilityString(this.origTitleBarVisibility));
                                    activity.getWindow().addFlags(1024);
                                    activity.getWindow().clearFlags(2048);
                                    if (this.titleBar != null) {
                                        this.titleBar.setVisibility(8);
                                    }
                                    return;
                                    isFullScreen = false;
                                    break;
                                    isForceNotFullScreen = false;
                                }
                                catch (Exception ex) {
                                    continue;
                                }
                                break;
                            }
                        }
                    }
                }
                this.isFullScreen = isFullScreen;
                if ((flags & 0x800) != 0x0) {
                    continue;
                }
                break;
            }
            continue;
        }
    }
    
    private String getOrientationString(final int n) {
        switch (n) {
            default: {
                return "UNKNOWN";
            }
            case -1: {
                return "UNSPECIFIED";
            }
            case 0: {
                return "LANDSCAPE";
            }
            case 1: {
                return "PORTRAIT";
            }
        }
    }
    
    private void lockOrientation(final boolean b, final boolean b2, final String s) {
        while (true) {
            int requestedOrientation = 1;
            final Context context = this.mraidView.getContext();
            while (true) {
                Label_0137: {
                    int originalRequestedOrientation = 0;
                    Label_0129: {
                        try {
                            final Activity activity = (Activity)context;
                            if (!b) {
                                activity.setRequestedOrientation(this.originalRequestedOrientation);
                                return;
                            }
                            originalRequestedOrientation = this.originalRequestedOrientation;
                            if (!s.equals("portrait")) {
                                if (s.equals("landscape")) {
                                    break Label_0137;
                                }
                                if (b2) {
                                    break Label_0129;
                                }
                                final DisplayMetrics displayMetrics = new DisplayMetrics();
                                activity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                                if (displayMetrics.widthPixels >= displayMetrics.heightPixels) {
                                    break Label_0137;
                                }
                            }
                            if (requestedOrientation != this.originalRequestedOrientation) {
                                activity.setRequestedOrientation(requestedOrientation);
                                return;
                            }
                            break;
                        }
                        catch (ClassCastException ex) {
                            MraidLog.d("MraidDispCtrl", "Unable to modify device orientation.");
                            return;
                        }
                    }
                    requestedOrientation = originalRequestedOrientation;
                    continue;
                }
                requestedOrientation = 0;
                continue;
            }
        }
    }
    
    private void resetViewToDefaultState() {
        this.restoreOriginalScreenState();
        this.setNativeCloseButtonEnabled(false);
        final FrameLayout frameLayout = (FrameLayout)this.rootView.findViewById(2130837505);
        frameLayout.removeAllViewsInLayout();
        this.rootView.removeView((View)frameLayout);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(this.origWidth, this.origHeight);
        layoutParams.setMargins(0, 0, 0, 0);
        this.mraidView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        this.mraidView.setFocusableInTouchMode(false);
        final ViewGroup viewGroup = (ViewGroup)this.placeholderView.getParent();
        viewGroup.addView((View)this.mraidView, this.viewIndexInParent);
        viewGroup.removeView((View)this.placeholderView);
        viewGroup.invalidate();
        this.twoPartExpansionView = null;
    }
    
    private void restoreOriginalScreenState() {
        MraidLog.d("MraidDispCtrl", "restoreOriginalScreenState");
        final Activity activity = (Activity)this.mraidView.getContext();
        if (!this.isFullScreen) {
            activity.getWindow().clearFlags(1024);
        }
        if (this.isForceNotFullScreen) {
            activity.getWindow().addFlags(2048);
        }
        if (this.titleBar != null) {
            this.titleBar.setVisibility(this.origTitleBarVisibility);
        }
    }
    
    private void swapViewWithPlaceholderView() {
        int viewIndexInParent = 0;
        final ViewGroup viewGroup = (ViewGroup)this.mraidView.getParent();
        if (viewGroup == null) {
            return;
        }
        this.origWidth = this.mraidView.getWidth();
        this.origHeight = this.mraidView.getHeight();
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(this.origWidth, this.origHeight);
        layoutParams.setMargins(0, 0, 0, 0);
        (this.placeholderView = new FrameLayout(this.mraidView.getContext())).setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        while (viewIndexInParent < viewGroup.getChildCount() && viewGroup.getChildAt(viewIndexInParent) != this.mraidView) {
            ++viewIndexInParent;
        }
        this.viewIndexInParent = viewIndexInParent;
        viewGroup.addView((View)this.placeholderView, viewIndexInParent);
        viewGroup.removeView((View)this.mraidView);
    }
    
    protected boolean checkViewable() {
        return true;
    }
    
    protected void close() {
        synchronized (this) {
            this.handler.post((Runnable)new Runnable() {
                @Override
                public void run() {
                    if (MraidDisplayController.this.viewState == MraidView$ViewState.EXPANDED) {
                        MraidDisplayController.this.resetViewToDefaultState();
                        MraidDisplayController.this.lockOrientation(false, false, null);
                        MraidDisplayController.this.viewState = MraidView$ViewState.DEFAULT;
                        MraidDisplayController.this.mraidView.fireStateChangeEvent(MraidDisplayController.this.viewState);
                    }
                    else {
                        if (MraidDisplayController.this.viewState == MraidView$ViewState.RESIZED) {
                            MraidDisplayController.this.resizeWidth = MraidDisplayController.this.origWidth;
                            MraidDisplayController.this.resizeHeight = MraidDisplayController.this.origHeight;
                            MraidDisplayController.this.resize(true);
                            MraidDisplayController.this.isResizeSizeValid = false;
                            MraidDisplayController.this.viewState = MraidView$ViewState.DEFAULT;
                            MraidDisplayController.this.mraidView.fireStateChangeEvent(MraidDisplayController.this.viewState);
                            return;
                        }
                        if (MraidDisplayController.this.viewState == MraidView$ViewState.DEFAULT) {
                            MraidDisplayController.this.mraidView.setVisibility(4);
                            MraidDisplayController.this.viewState = MraidView$ViewState.HIDDEN;
                            MraidDisplayController.this.mraidView.fireStateChangeEvent(MraidDisplayController.this.viewState);
                        }
                    }
                    if (MraidDisplayController.this.mraidView.getOnCloseListener() != null) {
                        MraidDisplayController.this.mraidView.getOnCloseListener().onClose(MraidDisplayController.this.mraidView, MraidDisplayController.this.viewState);
                    }
                    if (MraidDisplayController.this.mraidView.getListener() != null) {
                        MraidDisplayController.this.mraidView.getListener().onExpandClose();
                    }
                }
            });
        }
    }
    
    public void destroy() {
    }
    
    protected void expand(final String s, final boolean b, final boolean b2, final String s2) {
        while (true) {
            Label_0051: {
                synchronized (this) {
                    if (this.expansionStyle == MraidView$ExpansionStyle.DISABLED) {
                        MraidLog.d("MraidDispCtrl", "cannot expand because ExpansionStyle is DISABLED");
                    }
                    else {
                        if (this.viewState != MraidView$ViewState.EXPANDED) {
                            break Label_0051;
                        }
                        MraidLog.d("MraidDispCtrl", "trying to expand when already expanded");
                    }
                    return;
                }
            }
            if (s != null && !URLUtil.isValidUrl(s)) {
                this.mraidView.fireErrorEvent("expand", "URL passed to expand() was invalid.");
                return;
            }
            this.forceFullScreen();
            this.rootView = (FrameLayout)this.mraidView.getRootView().findViewById(16908290);
            if (this.rootView == null) {
                MraidLog.d("MraidDispCtrl", "rootView is null because ad is in the process of taken out. Aborting expand()...");
                return;
            }
            this.useCustomClose(b);
            this.lockOrientation(true, b2, s2);
            this.swapViewWithPlaceholderView();
            MraidView mraidView = this.mraidView;
            if (s != null) {
                (this.twoPartExpansionView = new MraidView(this.mraidView.getContext(), MraidView$ExpansionStyle.DISABLED, MraidView$NativeCloseButtonStyle.AD_CONTROLLED, MraidView$PlacementType.INLINE, true, false, this.mraidView.isAutoActionAllowed)).setOnCloseListener(new MraidView$OnCloseListener() {
                    @Override
                    public void onClose(final MraidView mraidView, final MraidView$ViewState mraidView$ViewState) {
                        MraidDisplayController.this.close();
                    }
                });
                this.twoPartExpansionView.loadUrl(s);
                mraidView = this.twoPartExpansionView;
            }
            mraidView.setFocusableInTouchMode(true);
            final FrameLayout$LayoutParams frameLayout$LayoutParams = new FrameLayout$LayoutParams(-1, -1);
            frameLayout$LayoutParams.setMargins(0, 0, 0, 0);
            mraidView.setLayoutParams((ViewGroup$LayoutParams)frameLayout$LayoutParams);
            final FrameLayout frameLayout = new FrameLayout(this.mraidView.getContext());
            frameLayout.setId(2130837505);
            frameLayout.setLayoutParams((ViewGroup$LayoutParams)frameLayout$LayoutParams);
            frameLayout.addView((View)mraidView);
            this.rootView.addView((View)frameLayout);
            if (this.nativeCloseButtonStyle == MraidView$NativeCloseButtonStyle.ALWAYS_VISIBLE || (!this.adWantsCustomCloseButton && this.nativeCloseButtonStyle != MraidView$NativeCloseButtonStyle.ALWAYS_HIDDEN)) {
                this.setNativeCloseButtonEnabled(true);
            }
            this.viewState = MraidView$ViewState.EXPANDED;
            this.mraidView.fireStateChangeEvent(this.viewState);
            if (this.mraidView.getOnExpandListener() != null) {
                this.mraidView.getOnExpandListener().onExpand(this.mraidView);
            }
            if (this.mraidView.getListener() != null) {
                this.mraidView.getListener().onExpand();
            }
        }
    }
    
    protected MraidView$ViewState getViewState() {
        return this.viewState;
    }
    
    protected boolean isExpanded() {
        return this.viewState == MraidView$ViewState.EXPANDED;
    }
    
    protected void resize(final boolean b) {
        while (true) {
        Label_0143:
            while (true) {
                Label_0094: {
                    synchronized (this) {
                        MraidLog.d("MraidDispCtrl", "resize");
                        if (this.mraidView.getPlacementType() == MraidView$PlacementType.INTERSTITIAL) {
                            MraidLog.d("MraidDispCtrl", "cannot call resize on an interstitial");
                        }
                        else {
                            if (this.viewState != MraidView$ViewState.DEFAULT) {
                                break Label_0094;
                            }
                            this.origWidth = this.mraidView.getWidth();
                            this.origHeight = this.mraidView.getHeight();
                            if (this.isResizeSizeValid) {
                                break Label_0143;
                            }
                            this.mraidView.fireErrorEvent("mraid.resize", "Cannot call resize before setting resizeProperties");
                        }
                        return;
                    }
                }
                if (this.viewState == MraidView$ViewState.EXPANDED) {
                    this.mraidView.fireErrorEvent("mraid.resize", "Cannot call resize on an expanded view");
                    return;
                }
                if (this.viewState == MraidView$ViewState.LOADING) {
                    return;
                }
                if (this.viewState == MraidView$ViewState.HIDDEN) {
                    return;
                }
                continue;
            }
            int n = 1;
            for (Object mraidView = this.mraidView; mraidView != null; mraidView = ((View)mraidView).getParent(), ++n) {
                final String simpleName = ((View)mraidView).getClass().getSimpleName();
                final boolean b2 = mraidView instanceof NexageAdView;
                MraidLog.d("MraidDispCtrl", n + " " + simpleName + " " + b2);
                if (b2) {
                    break;
                }
                if (((View)mraidView).getParent() instanceof FrameLayout) {
                    final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(this.resizeWidth, this.resizeHeight);
                    layoutParams.setMargins(0, 0, 0, 0);
                    ((View)mraidView).setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                }
                else {
                    final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(this.resizeWidth, this.resizeHeight);
                    layoutParams2.setMargins(0, 0, 0, 0);
                    ((View)mraidView).setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                }
            }
            this.viewState = MraidView$ViewState.RESIZED;
            this.mraidView.fireStateChangeEvent(this.viewState);
            if (this.mraidView.getListener() != null) {
                this.mraidView.getListener().onResize();
            }
            if (b && this.mraidView.getListener() != null) {
                this.mraidView.getListener().onResizeClose();
            }
        }
    }
    
    protected void setDensity(final float density) {
        this.density = density;
    }
    
    protected void setNativeCloseButtonEnabled(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/nexage/android/mraid/MraidDisplayController.rootView:Landroid/widget/FrameLayout;
        //     4: ifnonnull       8
        //     7: return         
        //     8: aload_0        
        //     9: getfield        com/nexage/android/mraid/MraidDisplayController.rootView:Landroid/widget/FrameLayout;
        //    12: ldc_w           2130837505
        //    15: invokevirtual   android/widget/FrameLayout.findViewById:(I)Landroid/view/View;
        //    18: checkcast       Landroid/widget/FrameLayout;
        //    21: astore_2       
        //    22: iload_1        
        //    23: ifeq            267
        //    26: aload_0        
        //    27: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //    30: ifnonnull       204
        //    33: aload_0        
        //    34: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //    37: ldc_w           "assets/drawable/close_button_normal.png"
        //    40: invokevirtual   java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
        //    43: astore          6
        //    45: new             Landroid/graphics/drawable/BitmapDrawable;
        //    48: dup            
        //    49: aload_0        
        //    50: getfield        com/nexage/android/mraid/MraidDisplayController.mraidView:Lcom/nexage/android/mraid/MraidView;
        //    53: invokevirtual   com/nexage/android/mraid/MraidView.getResources:()Landroid/content/res/Resources;
        //    56: aload           6
        //    58: invokespecial   android/graphics/drawable/BitmapDrawable.<init>:(Landroid/content/res/Resources;Ljava/io/InputStream;)V
        //    61: astore          7
        //    63: aload           6
        //    65: invokevirtual   java/io/InputStream.close:()V
        //    68: aload_0        
        //    69: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //    72: ldc_w           "assets/drawable/close_button_pressed.png"
        //    75: invokevirtual   java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
        //    78: astore          9
        //    80: new             Landroid/graphics/drawable/BitmapDrawable;
        //    83: dup            
        //    84: aload_0        
        //    85: getfield        com/nexage/android/mraid/MraidDisplayController.mraidView:Lcom/nexage/android/mraid/MraidView;
        //    88: invokevirtual   com/nexage/android/mraid/MraidView.getResources:()Landroid/content/res/Resources;
        //    91: aload           9
        //    93: invokespecial   android/graphics/drawable/BitmapDrawable.<init>:(Landroid/content/res/Resources;Ljava/io/InputStream;)V
        //    96: astore          10
        //    98: aload           9
        //   100: invokevirtual   java/io/InputStream.close:()V
        //   103: new             Landroid/graphics/drawable/StateListDrawable;
        //   106: dup            
        //   107: invokespecial   android/graphics/drawable/StateListDrawable.<init>:()V
        //   110: astore          12
        //   112: aload           12
        //   114: iconst_1       
        //   115: newarray        I
        //   117: dup            
        //   118: iconst_0       
        //   119: ldc_w           -16842919
        //   122: iastore        
        //   123: aload           7
        //   125: invokevirtual   android/graphics/drawable/StateListDrawable.addState:([ILandroid/graphics/drawable/Drawable;)V
        //   128: aload           12
        //   130: iconst_1       
        //   131: newarray        I
        //   133: dup            
        //   134: iconst_0       
        //   135: ldc_w           16842919
        //   138: iastore        
        //   139: aload           10
        //   141: invokevirtual   android/graphics/drawable/StateListDrawable.addState:([ILandroid/graphics/drawable/Drawable;)V
        //   144: aload_0        
        //   145: new             Landroid/widget/ImageButton;
        //   148: dup            
        //   149: aload_0        
        //   150: getfield        com/nexage/android/mraid/MraidDisplayController.mraidView:Lcom/nexage/android/mraid/MraidView;
        //   153: invokevirtual   com/nexage/android/mraid/MraidView.getContext:()Landroid/content/Context;
        //   156: invokespecial   android/widget/ImageButton.<init>:(Landroid/content/Context;)V
        //   159: putfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   162: aload_0        
        //   163: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   166: aload           12
        //   168: invokevirtual   android/widget/ImageView.setImageDrawable:(Landroid/graphics/drawable/Drawable;)V
        //   171: aload_0        
        //   172: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   175: getstatic       android/widget/ImageView$ScaleType.CENTER_CROP:Landroid/widget/ImageView$ScaleType;
        //   178: invokevirtual   android/widget/ImageView.setScaleType:(Landroid/widget/ImageView$ScaleType;)V
        //   181: aload_0        
        //   182: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   185: aconst_null    
        //   186: invokevirtual   android/widget/ImageView.setBackgroundDrawable:(Landroid/graphics/drawable/Drawable;)V
        //   189: aload_0        
        //   190: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   193: new             Lcom/nexage/android/mraid/MraidDisplayController$3;
        //   196: dup            
        //   197: aload_0        
        //   198: invokespecial   com/nexage/android/mraid/MraidDisplayController$3.<init>:(Lcom/nexage/android/mraid/MraidDisplayController;)V
        //   201: invokevirtual   android/widget/ImageView.setOnClickListener:(Landroid/view/View$OnClickListener;)V
        //   204: ldc_w           0.5
        //   207: ldc_w           50.0
        //   210: aload_0        
        //   211: getfield        com/nexage/android/mraid/MraidDisplayController.density:F
        //   214: fmul           
        //   215: fadd           
        //   216: f2i            
        //   217: istore          4
        //   219: new             Landroid/widget/FrameLayout$LayoutParams;
        //   222: dup            
        //   223: iload           4
        //   225: iload           4
        //   227: iconst_5       
        //   228: invokespecial   android/widget/FrameLayout$LayoutParams.<init>:(III)V
        //   231: astore          5
        //   233: aload_2        
        //   234: aload_0        
        //   235: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   238: aload           5
        //   240: invokevirtual   android/widget/FrameLayout.addView:(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V
        //   243: aload_0        
        //   244: getfield        com/nexage/android/mraid/MraidDisplayController.mraidView:Lcom/nexage/android/mraid/MraidView;
        //   247: astore_3       
        //   248: aload_3        
        //   249: invokevirtual   com/nexage/android/mraid/MraidView.getOnCloseButtonStateChangeListener:()Lcom/nexage/android/mraid/MraidView$OnCloseButtonStateChangeListener;
        //   252: ifnull          7
        //   255: aload_3        
        //   256: invokevirtual   com/nexage/android/mraid/MraidView.getOnCloseButtonStateChangeListener:()Lcom/nexage/android/mraid/MraidView$OnCloseButtonStateChangeListener;
        //   259: aload_3        
        //   260: iload_1        
        //   261: invokeinterface com/nexage/android/mraid/MraidView$OnCloseButtonStateChangeListener.onCloseButtonStateChange:(Lcom/nexage/android/mraid/MraidView;Z)V
        //   266: return         
        //   267: aload_2        
        //   268: aload_0        
        //   269: getfield        com/nexage/android/mraid/MraidDisplayController.closeButton:Landroid/widget/ImageView;
        //   272: invokevirtual   android/widget/FrameLayout.removeView:(Landroid/view/View;)V
        //   275: goto            243
        //   278: astore          8
        //   280: goto            68
        //   283: astore          11
        //   285: goto            103
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  63     68     278    283    Ljava/io/IOException;
        //  98     103    283    288    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0103:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    protected void setResizeSize(final int n, final int n2) {
        MraidLog.d("MraidDispCtrl", "setResizeSize " + n + "x" + n2);
        this.resizeWidth = (int)(n * this.density);
        this.resizeHeight = (int)(n2 * this.density);
        this.isResizeSizeValid = true;
    }
    
    protected void setViewState(final MraidView$ViewState viewState) {
        this.viewState = viewState;
    }
    
    protected void useCustomClose(final boolean adWantsCustomCloseButton) {
        MraidLog.d("MraidDispCtrl", "useCustomClose " + adWantsCustomCloseButton);
        this.adWantsCustomCloseButton = adWantsCustomCloseButton;
        final MraidView mraidView = this.mraidView;
        final boolean b = !adWantsCustomCloseButton;
        if (mraidView.getOnCloseButtonStateChangeListener() != null) {
            mraidView.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(mraidView, b);
        }
    }
}
