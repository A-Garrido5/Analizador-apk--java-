// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.os.Vibrator;
import android.content.DialogInterface;
import android.app.AlertDialog;
import android.app.Activity;
import android.content.Context;
import android.app.AlertDialog$Builder;
import java.util.concurrent.Callable;
import java.util.Map;
import android.content.DialogInterface$OnClickListener;

class BridgeMMNotification extends MMJSObject implements DialogInterface$OnClickListener
{
    private String ALERT;
    private String VIBRATE;
    private int index;
    
    BridgeMMNotification() {
        this.ALERT = "alert";
        this.VIBRATE = "vibrate";
    }
    
    public MMJSResponse alert(final Map map) {
        synchronized (this) {
            return this.runOnUiThreadFuture(new Callable() {
                @Override
                public MMJSResponse call() {
                    final MMWebView mmWebView = (MMWebView)BridgeMMNotification.this.mmWebViewRef.get();
                    if (mmWebView != null) {
                        final Activity activity = mmWebView.getActivity();
                        final Map val$arguments = map;
                        if (activity != null) {
                            if (!activity.isFinishing()) {
                                final AlertDialog create = new AlertDialog$Builder((Context)activity).create();
                                if (val$arguments.containsKey("title")) {
                                    create.setTitle((CharSequence)val$arguments.get("title"));
                                }
                                if (val$arguments.containsKey("message")) {
                                    create.setMessage((CharSequence)val$arguments.get("message"));
                                }
                                if (val$arguments.containsKey("cancelButton")) {
                                    create.setButton(-2, (CharSequence)val$arguments.get("cancelButton"), (DialogInterface$OnClickListener)BridgeMMNotification.this);
                                }
                                if (val$arguments.containsKey("buttons")) {
                                    final String[] split = val$arguments.get("buttons").split(",");
                                    if (split.length > 0) {
                                        create.setButton(-3, (CharSequence)split[0], (DialogInterface$OnClickListener)BridgeMMNotification.this);
                                    }
                                    if (split.length > 1) {
                                        create.setButton(-1, (CharSequence)split[1], (DialogInterface$OnClickListener)BridgeMMNotification.this);
                                    }
                                }
                                create.show();
                            }
                            final MMJSResponse mmjsResponse = new MMJSResponse();
                            mmjsResponse.result = 1;
                            mmjsResponse.response = BridgeMMNotification.this.index;
                            return mmjsResponse;
                        }
                    }
                    return null;
                }
            });
        }
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map map) {
        MMJSResponse alert;
        if (this.ALERT.equals(s)) {
            alert = this.alert(map);
        }
        else {
            final boolean equals = this.VIBRATE.equals(s);
            alert = null;
            if (equals) {
                return this.vibrate(map);
            }
        }
        return alert;
    }
    
    public void onClick(final DialogInterface dialogInterface, final int n) {
        // monitorenter(this)
        Label_0013: {
            if (n != -2) {
                break Label_0013;
            }
            try {
                this.index = 0;
                if (n == -3) {
                    this.index = 1;
                }
                if (n == -1) {
                    this.index = 2;
                }
                dialogInterface.cancel();
                this.notify();
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    public MMJSResponse vibrate(final Map map) {
        final Context context = (Context)this.contextRef.get();
        long n;
        if (map.containsKey("duration")) {
            n = (long)(1000.0 * Float.parseFloat(map.get("duration")));
        }
        else {
            n = 0L;
        }
        if (context == null || n <= 0L) {
            return null;
        }
        if (context.getPackageManager().checkPermission("android.permission.VIBRATE", context.getPackageName()) == 0) {
            ((Vibrator)context.getSystemService("vibrator")).vibrate(n);
            return MMJSResponse.responseWithSuccess("Vibrating for " + n);
        }
        return MMJSResponse.responseWithError("The required permissions to vibrate are not set.");
    }
}
