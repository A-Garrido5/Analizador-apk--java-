// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.text.TextUtils;
import org.json.JSONArray;
import java.util.Map;
import android.net.Uri;
import android.media.MediaScannerConnection$MediaScannerConnectionClient;
import java.io.File;
import android.content.Intent;
import android.content.Context;
import android.graphics.Bitmap;
import android.media.MediaScannerConnection;

class BridgeMMMedia extends MMJSObject
{
    private static final String PATH = "path";
    private static final String TAG = "BridgeMMMedia";
    private static Object pickerActivityObject;
    private String AVAILABLE_SOURCE_TYPES;
    private String GET_DEVICE_VOLUME;
    private String GET_PICTURE;
    private String IS_SOURCE_TYPE_AVAILABLE;
    private String PLAY_AUDIO;
    private String PLAY_SOUND;
    private String PLAY_VIDEO;
    private String STOP_AUDIO;
    private String WRITE_TO_PHOTO_LIBRARY;
    MediaScannerConnection mediaScanner;
    
    BridgeMMMedia() {
        this.IS_SOURCE_TYPE_AVAILABLE = "isSourceTypeAvailable";
        this.AVAILABLE_SOURCE_TYPES = "availableSourceTypes";
        this.GET_PICTURE = "getPicture";
        this.WRITE_TO_PHOTO_LIBRARY = "writeToPhotoLibrary";
        this.PLAY_VIDEO = "playVideo";
        this.STOP_AUDIO = "stopAudio";
        this.GET_DEVICE_VOLUME = "getDeviceVolume";
        this.PLAY_AUDIO = "playAudio";
        this.PLAY_SOUND = "playSound";
    }
    
    private static Bitmap centerOfImage(final Bitmap bitmap, final int n, final int n2) {
        return cropImage(bitmap, (bitmap.getWidth() - n) / 2, (bitmap.getHeight() - n2) / 2, n, n2);
    }
    
    private static Bitmap cropImage(final Bitmap bitmap, final int n, final int n2, final int n3, final int n4) {
        return Bitmap.createBitmap(bitmap, n, n2, n3, n4);
    }
    
    private boolean isCameraAvailable() {
        final Context context = (Context)this.contextRef.get();
        return context != null && context.getPackageManager().checkPermission("android.permission.CAMERA", context.getPackageName()) == 0 && context.getPackageManager().queryIntentActivities(new Intent("android.media.action.IMAGE_CAPTURE"), 65536).size() > 0;
    }
    
    private boolean isPictureChooserAvailable() {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction("android.intent.action.GET_CONTENT");
            return context.getPackageManager().queryIntentActivities(intent, 65536).size() > 0;
        }
        return false;
    }
    
    private static Bitmap resizeImage(final Bitmap bitmap, final int n, final int n2, final int n3) {
        return Bitmap.createScaledBitmap(bitmap, n, n2, true);
    }
    
    static Bitmap resizeImage(final Bitmap bitmap, final String s, final int n, final int n2, final int n3) {
        final float n4 = n / bitmap.getWidth();
        final float n5 = n2 / bitmap.getHeight();
        if (s.equals("Center")) {
            return centerOfImage(bitmap, n, n2);
        }
        if (s.equals("ScaleToAspectFit")) {
            final float min = Math.min(n4, n5);
            return resizeImage(bitmap, (int)(min * bitmap.getWidth()), (int)(min * bitmap.getHeight()), n3);
        }
        if (s.equals("ScaleToAspectFill")) {
            final float max = Math.max(n4, n5);
            return cropImage(resizeImage(bitmap, (int)(max * bitmap.getWidth()), (int)(max * bitmap.getHeight()), n3), 0, 0, n, n2);
        }
        return resizeImage(bitmap, n, n2, n3);
    }
    
    private static final byte[] scaleBitmapToBytes(final File p0, final int p1, final int p2, final String p3) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Ljava/io/FileInputStream;
        //     3: dup            
        //     4: aload_0        
        //     5: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //     8: astore          4
        //    10: new             Landroid/graphics/BitmapFactory$Options;
        //    13: dup            
        //    14: invokespecial   android/graphics/BitmapFactory$Options.<init>:()V
        //    17: astore          5
        //    19: aload           5
        //    21: iconst_1       
        //    22: putfield        android/graphics/BitmapFactory$Options.inJustDecodeBounds:Z
        //    25: aload           4
        //    27: aconst_null    
        //    28: aload           5
        //    30: invokestatic    android/graphics/BitmapFactory.decodeStream:(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
        //    33: pop            
        //    34: aload           5
        //    36: getfield        android/graphics/BitmapFactory$Options.outHeight:I
        //    39: istore          26
        //    41: aload           5
        //    43: getfield        android/graphics/BitmapFactory$Options.outWidth:I
        //    46: istore          27
        //    48: iload           26
        //    50: iload_2        
        //    51: if_icmpgt       60
        //    54: iload           27
        //    56: iload_1        
        //    57: if_icmple       552
        //    60: iload           27
        //    62: iload           26
        //    64: if_icmple       214
        //    67: iload           26
        //    69: i2f            
        //    70: iload_2        
        //    71: i2f            
        //    72: fdiv           
        //    73: invokestatic    java/lang/Math.round:(F)I
        //    76: istore          28
        //    78: new             Ljava/io/FileInputStream;
        //    81: dup            
        //    82: aload_0        
        //    83: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //    86: astore          7
        //    88: aload           5
        //    90: iconst_0       
        //    91: putfield        android/graphics/BitmapFactory$Options.inJustDecodeBounds:Z
        //    94: aload           5
        //    96: iload           28
        //    98: putfield        android/graphics/BitmapFactory$Options.inSampleSize:I
        //   101: aload           7
        //   103: aconst_null    
        //   104: aload           5
        //   106: invokestatic    android/graphics/BitmapFactory.decodeStream:(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
        //   109: astore          29
        //   111: aload           4
        //   113: invokevirtual   java/io/FileInputStream.close:()V
        //   116: aload           7
        //   118: invokevirtual   java/io/FileInputStream.close:()V
        //   121: aload           29
        //   123: astore          11
        //   125: aconst_null    
        //   126: astore          12
        //   128: aload           11
        //   130: ifnull          211
        //   133: aload           11
        //   135: aload_3        
        //   136: iload_1        
        //   137: iload_2        
        //   138: iconst_1       
        //   139: invokestatic    com/millennialmedia/android/BridgeMMMedia.resizeImage:(Landroid/graphics/Bitmap;Ljava/lang/String;III)Landroid/graphics/Bitmap;
        //   142: astore          13
        //   144: new             Ljava/io/ByteArrayOutputStream;
        //   147: dup            
        //   148: invokespecial   java/io/ByteArrayOutputStream.<init>:()V
        //   151: astore          14
        //   153: aload_3        
        //   154: ldc             ""
        //   156: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   159: ifeq            363
        //   162: aload           11
        //   164: getstatic       android/graphics/Bitmap$CompressFormat.JPEG:Landroid/graphics/Bitmap$CompressFormat;
        //   167: bipush          100
        //   169: aload           14
        //   171: invokevirtual   android/graphics/Bitmap.compress:(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
        //   174: pop            
        //   175: aload           14
        //   177: invokevirtual   java/io/ByteArrayOutputStream.toByteArray:()[B
        //   180: astore          20
        //   182: aload           20
        //   184: astore          12
        //   186: aload           11
        //   188: ifnull          196
        //   191: aload           11
        //   193: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   196: aload           13
        //   198: ifnull          206
        //   201: aload           13
        //   203: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   206: aload           14
        //   208: invokevirtual   java/io/ByteArrayOutputStream.close:()V
        //   211: aload           12
        //   213: areturn        
        //   214: iload           27
        //   216: i2f            
        //   217: iload_1        
        //   218: i2f            
        //   219: fdiv           
        //   220: fstore          31
        //   222: fload           31
        //   224: invokestatic    java/lang/Math.round:(F)I
        //   227: istore          32
        //   229: iload           32
        //   231: istore          28
        //   233: goto            78
        //   236: astore          30
        //   238: ldc             "BridgeMMMedia"
        //   240: ldc             "Error closing file"
        //   242: aload           30
        //   244: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   247: aload           29
        //   249: astore          11
        //   251: goto            125
        //   254: astore          6
        //   256: aconst_null    
        //   257: astore          7
        //   259: aconst_null    
        //   260: astore          4
        //   262: ldc             "BridgeMMMedia"
        //   264: ldc             "Can't find file to scale bitmap"
        //   266: aload           6
        //   268: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   271: aload           4
        //   273: ifnull          281
        //   276: aload           4
        //   278: invokevirtual   java/io/FileInputStream.close:()V
        //   281: aload           7
        //   283: ifnull          291
        //   286: aload           7
        //   288: invokevirtual   java/io/FileInputStream.close:()V
        //   291: aconst_null    
        //   292: astore          11
        //   294: goto            125
        //   297: astore          10
        //   299: ldc             "BridgeMMMedia"
        //   301: ldc             "Error closing file"
        //   303: aload           10
        //   305: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   308: aconst_null    
        //   309: astore          11
        //   311: goto            125
        //   314: astore          33
        //   316: aconst_null    
        //   317: astore          7
        //   319: aconst_null    
        //   320: astore          4
        //   322: aload           33
        //   324: astore          8
        //   326: aload           4
        //   328: ifnull          336
        //   331: aload           4
        //   333: invokevirtual   java/io/FileInputStream.close:()V
        //   336: aload           7
        //   338: ifnull          346
        //   341: aload           7
        //   343: invokevirtual   java/io/FileInputStream.close:()V
        //   346: aload           8
        //   348: athrow         
        //   349: astore          9
        //   351: ldc             "BridgeMMMedia"
        //   353: ldc             "Error closing file"
        //   355: aload           9
        //   357: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   360: goto            346
        //   363: aload           13
        //   365: getstatic       android/graphics/Bitmap$CompressFormat.JPEG:Landroid/graphics/Bitmap$CompressFormat;
        //   368: bipush          100
        //   370: aload           14
        //   372: invokevirtual   android/graphics/Bitmap.compress:(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
        //   375: pop            
        //   376: goto            175
        //   379: astore          17
        //   381: ldc             "BridgeMMMedia"
        //   383: ldc_w           "Error scaling bitmap"
        //   386: aload           17
        //   388: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   391: aload           11
        //   393: ifnull          401
        //   396: aload           11
        //   398: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   401: aload           13
        //   403: ifnull          411
        //   406: aload           13
        //   408: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   411: aconst_null    
        //   412: astore          12
        //   414: aload           14
        //   416: ifnull          211
        //   419: aload           14
        //   421: invokevirtual   java/io/ByteArrayOutputStream.close:()V
        //   424: aconst_null    
        //   425: areturn        
        //   426: astore          18
        //   428: ldc             "BridgeMMMedia"
        //   430: ldc             "Error closing file"
        //   432: aload           18
        //   434: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   437: aconst_null    
        //   438: areturn        
        //   439: astore          21
        //   441: ldc             "BridgeMMMedia"
        //   443: ldc             "Error closing file"
        //   445: aload           21
        //   447: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   450: aload           12
        //   452: areturn        
        //   453: astore          23
        //   455: aconst_null    
        //   456: astore          14
        //   458: aload           23
        //   460: astore          15
        //   462: aload           11
        //   464: ifnull          472
        //   467: aload           11
        //   469: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   472: aload           13
        //   474: ifnull          482
        //   477: aload           13
        //   479: invokevirtual   android/graphics/Bitmap.recycle:()V
        //   482: aload           14
        //   484: ifnull          492
        //   487: aload           14
        //   489: invokevirtual   java/io/ByteArrayOutputStream.close:()V
        //   492: aload           15
        //   494: athrow         
        //   495: astore          16
        //   497: ldc             "BridgeMMMedia"
        //   499: ldc             "Error closing file"
        //   501: aload           16
        //   503: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   506: goto            492
        //   509: astore          15
        //   511: goto            462
        //   514: astore          17
        //   516: aconst_null    
        //   517: astore          14
        //   519: goto            381
        //   522: astore          24
        //   524: aload           24
        //   526: astore          8
        //   528: aconst_null    
        //   529: astore          7
        //   531: goto            326
        //   534: astore          8
        //   536: goto            326
        //   539: astore          6
        //   541: aconst_null    
        //   542: astore          7
        //   544: goto            262
        //   547: astore          6
        //   549: goto            262
        //   552: iconst_1       
        //   553: istore          28
        //   555: goto            78
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                           
        //  -----  -----  -----  -----  -------------------------------
        //  0      10     254    262    Ljava/io/FileNotFoundException;
        //  0      10     314    326    Any
        //  10     48     539    547    Ljava/io/FileNotFoundException;
        //  10     48     522    534    Any
        //  67     78     539    547    Ljava/io/FileNotFoundException;
        //  67     78     522    534    Any
        //  78     88     539    547    Ljava/io/FileNotFoundException;
        //  78     88     522    534    Any
        //  88     111    547    552    Ljava/io/FileNotFoundException;
        //  88     111    534    539    Any
        //  111    121    236    254    Ljava/io/IOException;
        //  144    153    514    522    Ljava/lang/Exception;
        //  144    153    453    462    Any
        //  153    175    379    381    Ljava/lang/Exception;
        //  153    175    509    514    Any
        //  175    182    379    381    Ljava/lang/Exception;
        //  175    182    509    514    Any
        //  191    196    439    453    Ljava/lang/Exception;
        //  201    206    439    453    Ljava/lang/Exception;
        //  206    211    439    453    Ljava/lang/Exception;
        //  222    229    539    547    Ljava/io/FileNotFoundException;
        //  222    229    522    534    Any
        //  262    271    534    539    Any
        //  276    281    297    314    Ljava/io/IOException;
        //  286    291    297    314    Ljava/io/IOException;
        //  331    336    349    363    Ljava/io/IOException;
        //  341    346    349    363    Ljava/io/IOException;
        //  363    376    379    381    Ljava/lang/Exception;
        //  363    376    509    514    Any
        //  381    391    509    514    Any
        //  396    401    426    439    Ljava/lang/Exception;
        //  406    411    426    439    Ljava/lang/Exception;
        //  419    424    426    439    Ljava/lang/Exception;
        //  467    472    495    509    Ljava/lang/Exception;
        //  477    482    495    509    Ljava/lang/Exception;
        //  487    492    495    509    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 264, Size: 264
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void scanMedia(final String s) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            this.mediaScanner = new MediaScannerConnection(context.getApplicationContext(), (MediaScannerConnection$MediaScannerConnectionClient)new MediaScannerConnection$MediaScannerConnectionClient() {
                public void onMediaScannerConnected() {
                    if (BridgeMMMedia.this.mediaScanner != null) {
                        BridgeMMMedia.this.mediaScanner.scanFile(s, (String)null);
                    }
                }
                
                public void onScanCompleted(final String s, final Uri uri) {
                    if (uri == null) {
                        MMLog.d("BridgeMMMedia", "Failed to scan " + s);
                    }
                }
            });
            if (this.mediaScanner != null) {
                this.mediaScanner.connect();
            }
        }
    }
    
    public MMJSResponse availableSourceTypes(final Map map) {
        final JSONArray response = new JSONArray();
        if (this.isCameraAvailable()) {
            response.put((Object)"Camera");
        }
        if (this.isPictureChooserAvailable()) {
            response.put((Object)"Photo Library");
        }
        final MMJSResponse mmjsResponse = new MMJSResponse();
        mmjsResponse.result = 1;
        mmjsResponse.response = response;
        return mmjsResponse;
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map map) {
        MMJSResponse sourceTypeAvailable;
        if (this.IS_SOURCE_TYPE_AVAILABLE.equals(s)) {
            sourceTypeAvailable = this.isSourceTypeAvailable(map);
        }
        else {
            if (this.AVAILABLE_SOURCE_TYPES.equals(s)) {
                return this.availableSourceTypes(map);
            }
            if (this.GET_PICTURE.equals(s)) {
                return this.getPicture(map);
            }
            if (this.WRITE_TO_PHOTO_LIBRARY.equals(s)) {
                return this.writeToPhotoLibrary(map);
            }
            if (this.PLAY_VIDEO.equals(s)) {
                return this.playVideo(map);
            }
            if (this.STOP_AUDIO.equals(s)) {
                return this.stopAudio(map);
            }
            if (this.GET_DEVICE_VOLUME.equals(s)) {
                return this.getDeviceVolume(map);
            }
            if (this.PLAY_AUDIO.equals(s)) {
                return this.playAudio(map);
            }
            final boolean equals = this.PLAY_SOUND.equals(s);
            sourceTypeAvailable = null;
            if (equals) {
                return this.playSound(map);
            }
        }
        return sourceTypeAvailable;
    }
    
    public MMJSResponse getDeviceVolume(final Map map) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final int mediaVolume = MMSDK.getMediaVolume(context);
            final MMJSResponse responseWithSuccess = MMJSResponse.responseWithSuccess();
            responseWithSuccess.response = mediaVolume;
            return responseWithSuccess;
        }
        return MMJSResponse.responseWithError("no volume available");
    }
    
    public MMJSResponse getPicture(final Map p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: monitorenter   
        //     2: aload_0        
        //     3: getfield        com/millennialmedia/android/BridgeMMMedia.contextRef:Ljava/lang/ref/WeakReference;
        //     6: invokevirtual   java/lang/ref/WeakReference.get:()Ljava/lang/Object;
        //     9: checkcast       Landroid/content/Context;
        //    12: astore_3       
        //    13: aload_1        
        //    14: ldc_w           "sourceType"
        //    17: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    22: checkcast       Ljava/lang/String;
        //    25: astore          4
        //    27: aload_1        
        //    28: ldc_w           "constrainHeight"
        //    31: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    36: checkcast       Ljava/lang/String;
        //    39: astore          5
        //    41: aload_1        
        //    42: ldc_w           "constrainWidth"
        //    45: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    50: checkcast       Ljava/lang/String;
        //    53: astore          6
        //    55: aload_1        
        //    56: ldc_w           "contentMode"
        //    59: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    64: checkcast       Ljava/lang/String;
        //    67: astore          7
        //    69: aload           7
        //    71: ifnonnull       389
        //    74: ldc             ""
        //    76: astore          7
        //    78: goto            389
        //    81: ldc_w           "Missing constrainHeight and/or constrainWidth"
        //    84: invokestatic    com/millennialmedia/android/MMJSResponse.responseWithError:(Ljava/lang/String;)Lcom/millennialmedia/android/MMJSResponse;
        //    87: astore          8
        //    89: aload           8
        //    91: astore          9
        //    93: aload_0        
        //    94: monitorexit    
        //    95: aload           9
        //    97: areturn        
        //    98: aload           5
        //   100: invokestatic    java/lang/Float.parseFloat:(Ljava/lang/String;)F
        //   103: f2i            
        //   104: istore          10
        //   106: aload           6
        //   108: invokestatic    java/lang/Float.parseFloat:(Ljava/lang/String;)F
        //   111: f2i            
        //   112: istore          11
        //   114: iload           10
        //   116: iload           11
        //   118: imul           
        //   119: ldc_w           360000
        //   122: if_icmple       136
        //   125: ldc_w           "constrainHeight * constrainWidth > 360000"
        //   128: invokestatic    com/millennialmedia/android/MMJSResponse.responseWithError:(Ljava/lang/String;)Lcom/millennialmedia/android/MMJSResponse;
        //   131: astore          9
        //   133: goto            93
        //   136: aload_3        
        //   137: ifnull          383
        //   140: aload           4
        //   142: ifnull          383
        //   145: new             Ljava/io/File;
        //   148: dup            
        //   149: aload_3        
        //   150: invokestatic    com/millennialmedia/android/AdCache.getInternalCacheDirectory:(Landroid/content/Context;)Ljava/io/File;
        //   153: new             Ljava/lang/StringBuilder;
        //   156: dup            
        //   157: ldc_w           "tmp_mm_"
        //   160: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   163: invokestatic    java/lang/System.currentTimeMillis:()J
        //   166: invokestatic    java/lang/String.valueOf:(J)Ljava/lang/String;
        //   169: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   172: ldc_w           ".jpg"
        //   175: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   178: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   181: invokespecial   java/io/File.<init>:(Ljava/io/File;Ljava/lang/String;)V
        //   184: astore          12
        //   186: aload           4
        //   188: ldc_w           "Camera"
        //   191: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        //   194: ifeq            204
        //   197: aload_0        
        //   198: invokespecial   com/millennialmedia/android/BridgeMMMedia.isCameraAvailable:()Z
        //   201: ifne            237
        //   204: aload           4
        //   206: ldc_w           "Photo Library"
        //   209: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        //   212: ifne            226
        //   215: aload           4
        //   217: ldc_w           "PhotoLibrary"
        //   220: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        //   223: ifeq            383
        //   226: aload_0        
        //   227: invokespecial   com/millennialmedia/android/BridgeMMMedia.isPictureChooserAvailable:()Z
        //   230: istore          13
        //   232: iload           13
        //   234: ifeq            383
        //   237: new             Ljava/lang/Object;
        //   240: dup            
        //   241: invokespecial   java/lang/Object.<init>:()V
        //   244: astore          14
        //   246: aload           14
        //   248: putstatic       com/millennialmedia/android/BridgeMMMedia.pickerActivityObject:Ljava/lang/Object;
        //   251: aload           14
        //   253: monitorenter   
        //   254: aload_3        
        //   255: aload           12
        //   257: aload           4
        //   259: invokestatic    com/millennialmedia/android/Utils$IntentUtils.startPickerActivity:(Landroid/content/Context;Ljava/io/File;Ljava/lang/String;)V
        //   262: getstatic       com/millennialmedia/android/BridgeMMMedia.pickerActivityObject:Ljava/lang/Object;
        //   265: invokevirtual   java/lang/Object.wait:()V
        //   268: aload           14
        //   270: monitorexit    
        //   271: aconst_null    
        //   272: putstatic       com/millennialmedia/android/BridgeMMMedia.pickerActivityObject:Ljava/lang/Object;
        //   275: aload           12
        //   277: invokevirtual   java/io/File.exists:()Z
        //   280: ifeq            383
        //   283: aload           12
        //   285: invokevirtual   java/io/File.length:()J
        //   288: lconst_0       
        //   289: lcmp           
        //   290: ifle            383
        //   293: aload           12
        //   295: iload           11
        //   297: iload           10
        //   299: aload           7
        //   301: invokestatic    com/millennialmedia/android/BridgeMMMedia.scaleBitmapToBytes:(Ljava/io/File;IILjava/lang/String;)[B
        //   304: astore          17
        //   306: aload           12
        //   308: invokevirtual   java/io/File.delete:()Z
        //   311: pop            
        //   312: aload           17
        //   314: ifnull          383
        //   317: new             Lcom/millennialmedia/android/MMJSResponse;
        //   320: dup            
        //   321: invokespecial   com/millennialmedia/android/MMJSResponse.<init>:()V
        //   324: astore          9
        //   326: aload           9
        //   328: iconst_1       
        //   329: putfield        com/millennialmedia/android/MMJSResponse.result:I
        //   332: aload           9
        //   334: aload           17
        //   336: putfield        com/millennialmedia/android/MMJSResponse.dataResponse:[B
        //   339: goto            93
        //   342: astore_2       
        //   343: aload_0        
        //   344: monitorexit    
        //   345: aload_2        
        //   346: athrow         
        //   347: astore          19
        //   349: aload           14
        //   351: monitorexit    
        //   352: aload           19
        //   354: athrow         
        //   355: astore          16
        //   357: ldc             "BridgeMMMedia"
        //   359: ldc_w           "Error with pickerActivity synchronization"
        //   362: aload           16
        //   364: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   367: aconst_null    
        //   368: putstatic       com/millennialmedia/android/BridgeMMMedia.pickerActivityObject:Ljava/lang/Object;
        //   371: goto            275
        //   374: astore          15
        //   376: aconst_null    
        //   377: putstatic       com/millennialmedia/android/BridgeMMMedia.pickerActivityObject:Ljava/lang/Object;
        //   380: aload           15
        //   382: athrow         
        //   383: aconst_null    
        //   384: astore          9
        //   386: goto            93
        //   389: aload           5
        //   391: ifnull          81
        //   394: aload           6
        //   396: ifnonnull       98
        //   399: goto            81
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  2      69     342    347    Any
        //  81     89     342    347    Any
        //  98     114    342    347    Any
        //  125    133    342    347    Any
        //  145    204    342    347    Any
        //  204    226    342    347    Any
        //  226    232    342    347    Any
        //  237    254    355    374    Ljava/lang/Exception;
        //  237    254    374    383    Any
        //  254    271    347    355    Any
        //  271    275    342    347    Any
        //  275    312    342    347    Any
        //  317    339    342    347    Any
        //  349    355    355    374    Ljava/lang/Exception;
        //  349    355    374    383    Any
        //  357    367    374    383    Any
        //  367    371    342    347    Any
        //  376    383    342    347    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0237:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public MMJSResponse isSourceTypeAvailable(final Map map) {
        final String s = map.get("sourceType");
        if (s != null) {
            if (s.equalsIgnoreCase("Camera") && this.isCameraAvailable()) {
                return MMJSResponse.responseWithSuccess("true");
            }
            if (s.equalsIgnoreCase("Photo Library") && this.isPictureChooserAvailable()) {
                return MMJSResponse.responseWithSuccess("true");
            }
        }
        return MMJSResponse.responseWithError("false");
    }
    
    public MMJSResponse playAudio(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("path");
        if (context != null && s != null) {
            final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio(context);
            if (sharedAudio == null) {
                return null;
            }
            if (sharedAudio.isPlaying()) {
                return MMJSResponse.responseWithError("Audio already playing.");
            }
            if (s.startsWith("http")) {
                return sharedAudio.playAudio(Uri.parse(s), Boolean.parseBoolean(map.get("repeat")));
            }
            final File downloadFile = AdCache.getDownloadFile(context, s);
            if (downloadFile.exists()) {
                return sharedAudio.playAudio(Uri.fromFile(downloadFile), Boolean.parseBoolean(map.get("repeat")));
            }
        }
        return null;
    }
    
    public MMJSResponse playSound(final Map map) {
        if (this.contextRef == null) {
            return null;
        }
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("path");
        if (context != null && s != null) {
            final File downloadFile = AdCache.getDownloadFile(context, s);
            if (downloadFile.exists()) {
                final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio((Context)this.contextRef.get());
                if (sharedAudio != null) {
                    return sharedAudio.playSound(downloadFile);
                }
            }
        }
        return null;
    }
    
    public MMJSResponse playVideo(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("path");
        if (context != null && s != null) {
            if (s.startsWith("http")) {
                Utils$IntentUtils.startVideoPlayerActivityWithData(context, s);
                return MMJSResponse.responseWithSuccess(s);
            }
            final File downloadFile = AdCache.getDownloadFile(context, s);
            if (downloadFile.exists()) {
                Utils$IntentUtils.startVideoPlayerActivityWithData(context, downloadFile);
                return MMJSResponse.responseWithSuccess(downloadFile.getName());
            }
        }
        return null;
    }
    
    public MMJSResponse stopAudio(final Map map) {
        if (this.contextRef != null) {
            final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio((Context)this.contextRef.get());
            if (sharedAudio != null) {
                return sharedAudio.stop();
            }
        }
        return null;
    }
    
    public MMJSResponse writeToPhotoLibrary(final Map map) {
        synchronized (this) {
            final Context context = (Context)this.contextRef.get();
            final String s = map.get("path");
            MMJSResponse mmjsResponse;
            if (context != null && !TextUtils.isEmpty((CharSequence)s)) {
                final Uri parse = Uri.parse((String)map.get("path"));
                final String lastPathSegment = parse.getLastPathSegment();
                final String scheme = parse.getScheme();
                if (scheme != null && scheme.equals("http") && !AdCache.downloadComponentExternalStorage(parse.toString(), "Pictures", lastPathSegment, context)) {
                    mmjsResponse = MMJSResponse.responseWithError("Failed to download");
                }
                else {
                    final File downloadFile = AdCache.getDownloadFile(context, "Pictures", parse.getLastPathSegment());
                    if (!downloadFile.exists()) {
                        mmjsResponse = MMJSResponse.responseWithError("No file at " + downloadFile.getAbsolutePath());
                    }
                    else {
                        this.scanMedia(downloadFile.getAbsolutePath());
                        if (!AdCache.isExternalMounted()) {
                            mmjsResponse = MMJSResponse.responseWithError("Storage not mounted, cannot add image to photo library photo library");
                        }
                        else {
                            mmjsResponse = MMJSResponse.responseWithSuccess("Image saved to photo library");
                        }
                    }
                }
            }
            else {
                mmjsResponse = null;
            }
            return mmjsResponse;
        }
    }
}
