// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.content.Context;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import android.app.Activity;
import java.util.Map;
import java.lang.ref.WeakReference;

abstract class MMJSObject
{
    private static final String TAG;
    protected WeakReference contextRef;
    protected WeakReference mmWebViewRef;
    
    static {
        TAG = MMJSObject.class.getName();
    }
    
    abstract MMJSResponse executeCommand(final String p0, final Map p1);
    
    long getAdImplId(final String s) {
        if (s != null) {
            return (long)Float.parseFloat(s);
        }
        return -4L;
    }
    
    AdViewOverlayActivity getBaseActivity() {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null) {
            final Activity activity = mmWebView.getActivity();
            if (activity instanceof MMActivity) {
                final MMBaseActivity wrappedActivity = ((MMActivity)activity).getWrappedActivity();
                if (wrappedActivity instanceof AdViewOverlayActivity) {
                    return (AdViewOverlayActivity)wrappedActivity;
                }
            }
        }
        return null;
    }
    
    MMJSResponse runOnUiThreadFuture(final Callable callable) {
        final FutureTask<MMJSResponse> futureTask = new FutureTask<MMJSResponse>(callable);
        MMSDK.runOnUiThread(futureTask);
        try {
            return futureTask.get();
        }
        catch (InterruptedException ex) {
            MMLog.e(MMJSObject.TAG, "Future interrupted", ex);
        }
        catch (ExecutionException ex2) {
            MMLog.e(MMJSObject.TAG, "Future execution problem: ", ex2);
            goto Label_0037;
        }
    }
    
    void setContext(final Context context) {
        this.contextRef = new WeakReference((T)context);
    }
    
    void setMMWebView(final MMWebView mmWebView) {
        this.mmWebViewRef = new WeakReference((T)mmWebView);
    }
}
