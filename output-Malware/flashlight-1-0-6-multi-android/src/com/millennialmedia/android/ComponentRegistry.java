// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.util.Stack;

class ComponentRegistry
{
    static Stack bannerBridges;
    static Stack cachedVideoBridges;
    static Stack calendarBridges;
    static Stack deviceBridges;
    static Stack examples;
    static Stack inlineVideoBridges;
    static Stack interstitialBridges;
    static Stack loggingComponents;
    static Stack mediaBridges;
    static Stack notificationBridges;
    static Stack speechkitBridges;
    
    static {
        ComponentRegistry.examples = new Stack();
        ComponentRegistry.bannerBridges = new Stack();
        ComponentRegistry.cachedVideoBridges = new Stack();
        ComponentRegistry.calendarBridges = new Stack();
        ComponentRegistry.deviceBridges = new Stack();
        ComponentRegistry.inlineVideoBridges = new Stack();
        ComponentRegistry.interstitialBridges = new Stack();
        ComponentRegistry.mediaBridges = new Stack();
        ComponentRegistry.notificationBridges = new Stack();
        ComponentRegistry.speechkitBridges = new Stack();
        ComponentRegistry.loggingComponents = new Stack();
    }
    
    static void addBannerBridge(final BridgeMMBanner bridgeMMBanner) {
        ComponentRegistry.bannerBridges.push(bridgeMMBanner);
    }
    
    static void addCachedVideoBridge(final BridgeMMCachedVideo bridgeMMCachedVideo) {
        ComponentRegistry.cachedVideoBridges.push(bridgeMMCachedVideo);
    }
    
    static void addCalendarBridge(final BridgeMMCalendar bridgeMMCalendar) {
        ComponentRegistry.calendarBridges.push(bridgeMMCalendar);
    }
    
    static void addDeviceBridge(final BridgeMMDevice bridgeMMDevice) {
        ComponentRegistry.deviceBridges.push(bridgeMMDevice);
    }
    
    static void addExample(final ExampleComponent exampleComponent) {
        ComponentRegistry.examples.push(exampleComponent);
    }
    
    static void addInlineVideoBridge(final BridgeMMInlineVideo bridgeMMInlineVideo) {
        ComponentRegistry.inlineVideoBridges.push(bridgeMMInlineVideo);
    }
    
    static void addInterstitialBridge(final BridgeMMInterstitial bridgeMMInterstitial) {
        ComponentRegistry.interstitialBridges.push(bridgeMMInterstitial);
    }
    
    static void addLoggingComponent(final MMLog$LoggingComponent mmLog$LoggingComponent) {
        ComponentRegistry.loggingComponents.push(mmLog$LoggingComponent);
    }
    
    static void addMediaBridge(final BridgeMMMedia bridgeMMMedia) {
        ComponentRegistry.mediaBridges.push(bridgeMMMedia);
    }
    
    static void addNotificationBridge(final BridgeMMNotification bridgeMMNotification) {
        ComponentRegistry.notificationBridges.push(bridgeMMNotification);
    }
    
    static void addSpeechkitBridge(final BridgeMMSpeechkit bridgeMMSpeechkit) {
        ComponentRegistry.speechkitBridges.push(bridgeMMSpeechkit);
    }
    
    static BridgeMMBanner getBannerBridge() {
        return (BridgeMMBanner)getComponent(ComponentRegistry.bannerBridges);
    }
    
    static BridgeMMCachedVideo getCachedVideoBridge() {
        return (BridgeMMCachedVideo)getComponent(ComponentRegistry.cachedVideoBridges);
    }
    
    static BridgeMMCalendar getCalendarBridge() {
        return (BridgeMMCalendar)getComponent(ComponentRegistry.calendarBridges);
    }
    
    private static Object getComponent(final Stack stack) {
        if (stack.isEmpty()) {
            return null;
        }
        return stack.lastElement();
    }
    
    static BridgeMMDevice getDeviceBridge() {
        return (BridgeMMDevice)getComponent(ComponentRegistry.deviceBridges);
    }
    
    static ExampleComponent getExample() {
        return (ExampleComponent)getComponent(ComponentRegistry.examples);
    }
    
    static BridgeMMInlineVideo getInlineVideoBridge() {
        return (BridgeMMInlineVideo)getComponent(ComponentRegistry.inlineVideoBridges);
    }
    
    static BridgeMMInterstitial getInterstitialBridge() {
        return (BridgeMMInterstitial)getComponent(ComponentRegistry.interstitialBridges);
    }
    
    static MMLog$LoggingComponent getLoggingComponent() {
        return (MMLog$LoggingComponent)getComponent(ComponentRegistry.loggingComponents);
    }
    
    static BridgeMMMedia getMediaBridge() {
        return (BridgeMMMedia)getComponent(ComponentRegistry.mediaBridges);
    }
    
    static BridgeMMNotification getNotificationBridge() {
        return (BridgeMMNotification)getComponent(ComponentRegistry.notificationBridges);
    }
    
    static BridgeMMSpeechkit getSpeechkitBridge() {
        return (BridgeMMSpeechkit)getComponent(ComponentRegistry.speechkitBridges);
    }
    
    static void removeBannerBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.bannerBridges);
    }
    
    static void removeCachedVideoBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.cachedVideoBridges);
    }
    
    static void removeCalendarBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.calendarBridges);
    }
    
    private static void removeComponent(final boolean b, final Stack stack) {
        if (!stack.isEmpty() && (stack.size() != 1 || b)) {
            stack.pop();
        }
    }
    
    static void removeDeviceBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.deviceBridges);
    }
    
    static void removeExample(final boolean b) {
        removeComponent(b, ComponentRegistry.examples);
    }
    
    static void removeInlineVideoBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.inlineVideoBridges);
    }
    
    static void removeInterstitialBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.interstitialBridges);
    }
    
    static void removeLoggingComponent(final boolean b) {
        removeComponent(b, ComponentRegistry.loggingComponents);
    }
    
    static void removeMediaBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.mediaBridges);
    }
    
    static void removeNotificationBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.notificationBridges);
    }
    
    static void removeSpeechkitBridge(final boolean b) {
        removeComponent(b, ComponentRegistry.speechkitBridges);
    }
}
