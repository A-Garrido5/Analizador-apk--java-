// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.content.Context;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;

final class AdCacheThreadPool
{
    private static AdCacheThreadPool sharedThreadPool;
    private ThreadPoolExecutor executor;
    private PriorityBlockingQueue queue;
    
    private AdCacheThreadPool() {
        final TimeUnit seconds = TimeUnit.SECONDS;
        final PriorityBlockingQueue<Runnable> queue = new PriorityBlockingQueue<Runnable>(32);
        this.queue = queue;
        this.executor = new ThreadPoolExecutor(1, 2, 30L, seconds, queue);
    }
    
    static AdCacheThreadPool sharedThreadPool() {
        synchronized (AdCacheThreadPool.class) {
            if (AdCacheThreadPool.sharedThreadPool == null) {
                AdCacheThreadPool.sharedThreadPool = new AdCacheThreadPool();
            }
            return AdCacheThreadPool.sharedThreadPool;
        }
    }
    
    final boolean startDownloadTask(final Context context, final String s, final CachedAd cachedAd, final AdCache$AdCacheTaskListener adCache$AdCacheTaskListener) {
        // monitorenter(this)
        Label_0062: {
            if (context == null || cachedAd == null) {
                break Label_0062;
            }
            try {
                final AdCacheThreadPool$AdCacheTask adCacheThreadPool$AdCacheTask = new AdCacheThreadPool$AdCacheTask(this, context, s, cachedAd, adCache$AdCacheTaskListener);
                boolean b;
                if (!this.queue.contains(adCacheThreadPool$AdCacheTask) && !cachedAd.isOnDisk(context)) {
                    this.executor.execute(adCacheThreadPool$AdCacheTask);
                    b = true;
                }
                else {
                    b = false;
                }
                return b;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
}
