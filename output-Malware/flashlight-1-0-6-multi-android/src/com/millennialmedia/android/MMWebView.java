// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.util.Map;
import android.view.ViewGroup$LayoutParams;
import android.view.View;
import android.view.MotionEvent;
import android.view.View$MeasureSpec;
import android.text.TextUtils;
import android.view.ViewParent;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Paint;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import android.graphics.Bitmap;
import java.util.concurrent.Callable;
import android.os.Build;
import android.webkit.WebSettings;
import android.view.GestureDetector$OnGestureListener;
import android.os.Build$VERSION;
import android.webkit.WebChromeClient;
import android.view.View$OnTouchListener;
import android.content.Context;
import android.view.GestureDetector;
import android.webkit.WebView;

class MMWebView extends WebView
{
    static final String JS_INTERFACE_NAME = "interface";
    static final String PROPERTY_BANNER_TYPE = "PROPERTY_BANNER_TYPE";
    static final String PROPERTY_EXPANDING = "PROPERTY_EXPANDING";
    static final String PROPERTY_STATE = "PROPERTY_STATE";
    private static final String TAG = "MMWebView";
    private HttpMMHeaders _lastHeaders;
    long creatorAdImplId;
    int currentColor;
    String currentUrl;
    boolean hadFirstRecordingCreation;
    boolean hadFirstSpeechKitCreation;
    volatile boolean isExpanding;
    boolean isSendingSize;
    volatile boolean isUserClosedResize;
    volatile boolean isVisible;
    volatile String mraidState;
    int oldHeight;
    int oldWidth;
    volatile boolean requiresPreAdSizeFix;
    final GestureDetector tapDetector;
    final String userAgent;
    
    public MMWebView(final Context context, final long creatorAdImplId) {
        super(context);
        this.isSendingSize = true;
        this.oldHeight = -50;
        this.oldWidth = -50;
        this.isVisible = false;
        this.hadFirstSpeechKitCreation = false;
        this.setWillNotDraw(this.hadFirstRecordingCreation = false);
        this.setHorizontalScrollBarEnabled(false);
        this.setVerticalScrollBarEnabled(false);
        this.setOnTouchListener((View$OnTouchListener)new MMWebView$WebTouchListener(this));
        this.mraidState = "loading";
        this.creatorAdImplId = creatorAdImplId;
        MMLog.v("MMWebView", String.format("Assigning WebView internal id: %d", this.creatorAdImplId));
        this.setId((int)(15063L + this.creatorAdImplId));
        if (HandShake.sharedHandShake(context).hardwareAccelerationEnabled) {
            this.enableHardwareAcceleration();
        }
        else {
            this.disableAllAcceleration();
        }
        this.setWebChromeClient((WebChromeClient)new MMWebView$MyWebChromeClient(this));
        final WebSettings settings = this.getSettings();
        this.userAgent = settings.getUserAgentString();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(-1);
        settings.setDefaultTextEncodingName("UTF-8");
        settings.setLoadWithOverviewMode(true);
        settings.setGeolocationEnabled(true);
        if (Build$VERSION.SDK_INT >= 17) {
            MMLog.i("MMWebView", "Disabling user gesture requirement for media playback");
            settings.setMediaPlaybackRequiresUserGesture(false);
        }
        settings.setJavaScriptCanOpenWindowsAutomatically(true);
        this.tapDetector = new GestureDetector(context.getApplicationContext(), (GestureDetector$OnGestureListener)new MMWebView$BannerGestureListener(this));
    }
    
    private boolean hasDefaultResizeParams() {
        return this.oldWidth == -50 && this.oldHeight == -50;
    }
    
    private boolean isInterstitial() {
        return this.getBanner() == null;
    }
    
    private boolean needsSamsungJBOpenGlFixNoAcceleration() {
        final int int1 = Integer.parseInt(Build$VERSION.SDK);
        return "Nexus S".equals(Build.MODEL) && "samsung".equals(Build.MANUFACTURER) && (int1 == 16 || int1 == 17);
    }
    
    boolean allowMicrophoneCreationCommands() {
        boolean allowRecordingCommands = true;
        if (this.hadFirstRecordingCreation) {
            allowRecordingCommands = this.allowRecordingCommands();
        }
        else {
            this.hadFirstRecordingCreation = allowRecordingCommands;
            if (!this.isInterstitial() || !this.isVisible) {
                return false;
            }
        }
        return allowRecordingCommands;
    }
    
    boolean allowRecordingCommands() {
        return this.hasWindowFocus() && this.isInterstitial();
    }
    
    boolean allowSpeechCreationCommands() {
        boolean allowRecordingCommands = true;
        if (this.hadFirstSpeechKitCreation) {
            allowRecordingCommands = this.allowRecordingCommands();
        }
        else {
            this.hadFirstSpeechKitCreation = allowRecordingCommands;
            if (!this.isInterstitial() || !this.isVisible) {
                return false;
            }
        }
        return allowRecordingCommands;
    }
    
    void animateTransition(final MMAdImpl mmAdImpl) {
        final FutureTask futureTask = new FutureTask(new Callable() {
            @Override
            public Void call() {
                try {
                    MMWebView.this.buildDrawingCache();
                    final Bitmap drawingCache = MMWebView.this.getDrawingCache();
                    if (drawingCache != null) {
                        mmAdImpl.prepareTransition(Bitmap.createBitmap(drawingCache));
                    }
                    MMWebView.this.destroyDrawingCache();
                    return null;
                }
                catch (Exception ex) {
                    MMLog.e("MMWebView", "Animation exception: ", ex);
                    return null;
                }
            }
        });
        MMSDK.runOnUiThread(futureTask);
        try {
            futureTask.get();
        }
        catch (InterruptedException ex) {}
        catch (ExecutionException ex2) {}
    }
    
    boolean canScroll() {
        return this.getParent() instanceof MMAdView;
    }
    
    void disableAllAcceleration() {
        if (Build$VERSION.SDK_INT >= 11) {
            MMLog.i("MMWebView", "Disabling acceleration");
            this.setLayerType(0, (Paint)null);
        }
    }
    
    void enableHardwareAcceleration() {
        if (this.needsSamsungJBOpenGlFixNoAcceleration()) {
            return;
        }
        try {
            WebView.class.getMethod("setLayerType", Integer.TYPE, Paint.class).invoke(this, 2, null);
            MMLog.d("MMWebView", "Enabled hardwareAcceleration");
        }
        catch (Exception ex) {}
    }
    
    void enableSendingSize() {
        this.isSendingSize = true;
    }
    
    void enableSoftwareAcceleration() {
        if (this.needsSamsungJBOpenGlFixNoAcceleration()) {
            return;
        }
        try {
            WebView.class.getMethod("setLayerType", Integer.TYPE, Paint.class).invoke(this, 1, null);
            MMLog.d("MMWebView", "Enable softwareAcceleration");
        }
        catch (Exception ex) {}
    }
    
    Activity getActivity() {
        synchronized (this) {
            final ViewParent parent = this.getParent();
            if (parent == null || !(parent instanceof ViewGroup)) {
                return null;
            }
            final Context context = ((ViewGroup)parent).getContext();
            if (context == null || !(context instanceof MMActivity)) {
                return null;
            }
            return (MMActivity)context;
            mmActivity = null;
            return mmActivity;
        }
    }
    
    String getAdId() {
        if (this._lastHeaders != null && !TextUtils.isEmpty((CharSequence)this._lastHeaders.acid)) {
            return this._lastHeaders.acid;
        }
        return "DEFAULT_AD_ID";
    }
    
    AdViewOverlayView getAdViewOverlayView() {
        synchronized (this) {
            final ViewParent parent = this.getParent();
            AdViewOverlayView adViewOverlayView;
            if (parent != null && parent instanceof AdViewOverlayView) {
                adViewOverlayView = (AdViewOverlayView)parent;
            }
            else {
                adViewOverlayView = null;
            }
            return adViewOverlayView;
        }
    }
    
    MMAdView getBanner() {
        synchronized (this) {
            final ViewParent parent = this.getParent();
            MMAdView mmAdView;
            if (parent != null && parent instanceof MMAdView) {
                mmAdView = (MMAdView)parent;
            }
            else {
                mmAdView = null;
            }
            return mmAdView;
        }
    }
    
    HttpMMHeaders getLastHeaders() {
        return this._lastHeaders;
    }
    
    MMAdView getMMAdView() {
        if (this.getParent() instanceof MMAdView) {
            return (MMAdView)this.getParent();
        }
        return null;
    }
    
    MMLayout getMMLayout() {
        if (this.getParent() instanceof MMLayout) {
            return (MMLayout)this.getParent();
        }
        return null;
    }
    
    String getUserAgent() {
        return this.userAgent;
    }
    
    boolean isCurrentParent(final long n) {
        final ViewParent parent = this.getParent();
        if (parent == null) {
            return false;
        }
        MMLog.w("MMWebView", "Id check for parent: " + n + " versus " + ((MMLayout)parent).adImpl.internalId);
        return n == ((MMLayout)parent).adImpl.internalId;
    }
    
    boolean isMraidResized() {
        return "resized".equals(this.mraidState);
    }
    
    boolean isOriginalUrl(final String s) {
        return (!TextUtils.isEmpty((CharSequence)this.currentUrl) && s.equals(this.currentUrl + "?")) || s.equals(this.currentUrl + "#");
    }
    
    boolean isParentBannerAd() {
        return this.getParent() != null && ((ViewGroup)this.getParent()) instanceof MMAdView;
    }
    
    public void loadDataWithBaseURL(final String currentUrl, final String s, final String s2, final String s3, final String s4) {
        this.currentUrl = currentUrl;
        try {
            super.loadDataWithBaseURL(currentUrl, s, s2, s3, s4);
        }
        catch (Exception ex) {
            MMLog.e("MMWebView", "Error hit when calling through to loadDataWithBaseUrl", ex);
        }
    }
    
    public void loadUrl(final String currentUrl) {
        if (TextUtils.isEmpty((CharSequence)currentUrl)) {
            return;
        }
        if (currentUrl.startsWith("http")) {
            this.currentUrl = currentUrl;
        }
        MMLog.v("MMWebView", "loadUrl @@" + currentUrl);
        if (MMSDK.isUiThread()) {
            try {
                super.loadUrl(currentUrl);
                return;
            }
            catch (Exception ex) {
                return;
            }
        }
        MMSDK.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                MMWebView.this.loadUrl(currentUrl);
            }
        });
    }
    
    protected void onMeasure(final int n, final int n2) {
        super.onMeasure(n, n2);
        int size = View$MeasureSpec.getSize(n2);
        final int size2 = View$MeasureSpec.getSize(n);
        final int measuredHeight = this.getMeasuredHeight();
        if (measuredHeight != 0) {
            size = measuredHeight;
        }
        if (this.requiresPreAdSizeFix) {
            this.setMeasuredDimension(1, 1);
            return;
        }
        this.setMeasuredDimension(size2, size);
    }
    
    public void onPauseWebView() {
        if (Build$VERSION.SDK_INT < 11) {
            return;
        }
        try {
            WebView.class.getMethod("onPause", (Class<?>[])new Class[0]).invoke(this, new Object[0]);
        }
        catch (Exception ex) {
            MMLog.w("MMWebView", "No onPause()");
        }
    }
    
    public void onResumeWebView() {
        if (!this.isParentBannerAd() && Build$VERSION.SDK_INT >= 19) {
            final Activity activity = this.getActivity();
            if (activity != null) {
                activity.setRequestedOrientation(14);
            }
        }
        if (Build$VERSION.SDK_INT < 11) {
            return;
        }
        try {
            WebView.class.getMethod("onResume", (Class<?>[])new Class[0]).invoke(this, new Object[0]);
        }
        catch (Exception ex) {
            MMLog.w("MMWebView", "No onResume()");
        }
    }
    
    protected void onSizeChanged(final int n, final int n2, final int n3, final int n4) {
        if (this.getContext().getResources().getDisplayMetrics() != null && this.isSendingSize) {
            this.setAdSize();
            if (this.getHeight() != 1 || this.getWidth() != 1) {
                MMSDK.runOnUiThreadDelayed(new Runnable() {
                    @Override
                    public void run() {
                        MMWebView.this.isSendingSize = false;
                    }
                }, 800L);
            }
        }
        super.onSizeChanged(n, n2, n3, n4);
    }
    
    public boolean onTouchEvent(final MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            this.requestFocus();
        }
        if (this.tapDetector != null) {
            this.tapDetector.onTouchEvent(motionEvent);
        }
        if (motionEvent.getAction() == 1) {
            MMLog.v("MMWebView", String.format("Ad clicked: action=%d x=%f y=%f", motionEvent.getAction(), motionEvent.getX(), motionEvent.getY()));
        }
        return super.onTouchEvent(motionEvent);
    }
    
    void removeFromParent() {
        final ViewParent parent = this.getParent();
        if (parent != null && parent instanceof ViewGroup) {
            ((ViewGroup)parent).removeView((View)this);
        }
    }
    
    void resetSpeechKit() {
        BridgeMMSpeechkit.releaseSpeechKit();
        this.hadFirstSpeechKitCreation = false;
        this.hadFirstRecordingCreation = false;
    }
    
    void setAdProperties() {
        this.loadUrl("javascript:MMJS.sdk.setAdProperties(" + new AdProperties(this.getContext()).getAdProperties((View)this) + ");");
    }
    
    void setAdSize() {
        this.loadUrl("javascript:MMJS.sdk.setAdSize(" + Utils.getViewDimensions((View)this) + ");");
    }
    
    public void setBackgroundColor(final int n) {
        this.currentColor = n;
        if (n == 0) {
            this.enableSoftwareAcceleration();
        }
        super.setBackgroundColor(n);
    }
    
    void setLastHeaders(final HttpMMHeaders lastHeaders) {
        this._lastHeaders = lastHeaders;
    }
    
    void setMraidDefault() {
        this.loadUrl("javascript:MMJS.sdk.setState('default')");
        this.mraidState = "default";
        this.isSendingSize = true;
    }
    
    void setMraidExpanded() {
        this.loadUrl("javascript:MMJS.sdk.setState('expanded');");
        this.mraidState = "expanded";
        this.hadFirstSpeechKitCreation = false;
        this.hadFirstRecordingCreation = false;
        this.isSendingSize = true;
    }
    
    void setMraidHidden() {
        this.loadUrl("javascript:MMJS.sdk.setState('hidden')");
        this.mraidState = "hidden";
    }
    
    void setMraidPlacementTypeInline() {
        this.loadUrl("javascript:MMJS.sdk.setPlacementType('inline');");
    }
    
    void setMraidPlacementTypeInterstitial() {
        this.loadUrl("javascript:MMJS.sdk.setPlacementType('interstitial');");
    }
    
    void setMraidReady() {
        this.loadUrl("javascript:MMJS.sdk.ready();");
    }
    
    void setMraidResize(final DTOResizeParameters dtoResizeParameters) {
        synchronized (this) {
            if (MMSDK.hasSetTranslationMethod()) {
                final MMAdView mmAdView = this.getMMAdView();
                this.isUserClosedResize = false;
                MMLog.d("MMWebView", "New DTOResizeParameters = " + dtoResizeParameters);
                if (mmAdView != null) {
                    MMSDK.runOnUiThread(new Runnable() {
                        private void handleMraidResize(final DTOResizeParameters dtoResizeParameters) {
                            final MMAdView val$adView = mmAdView;
                            val$adView.getClass();
                            final MMAdView$BannerBounds mmAdView$BannerBounds = new MMAdView$BannerBounds(val$adView, dtoResizeParameters);
                            this.setUnresizeParameters();
                            mmAdView$BannerBounds.modifyLayoutParams(MMWebView.this.getLayoutParams());
                        }
                        
                        private void setUnresizeParameters() {
                            if (MMWebView.this.hasDefaultResizeParams()) {
                                final ViewGroup$LayoutParams layoutParams = MMWebView.this.getLayoutParams();
                                MMWebView.this.oldWidth = layoutParams.width;
                                MMWebView.this.oldHeight = layoutParams.height;
                                if (MMWebView.this.oldWidth <= 0) {
                                    MMWebView.this.oldWidth = MMWebView.this.getWidth();
                                }
                                if (MMWebView.this.oldHeight <= 0) {
                                    MMWebView.this.oldHeight = MMWebView.this.getHeight();
                                }
                            }
                        }
                        
                        @Override
                        public void run() {
                            synchronized (MMWebView.this) {
                                MMWebView.this.isSendingSize = true;
                                mmAdView.handleMraidResize(dtoResizeParameters);
                                this.handleMraidResize(dtoResizeParameters);
                                MMWebView.this.loadUrl("javascript:MMJS.sdk.setState('resized');");
                                MMWebView.this.mraidState = "resized";
                            }
                        }
                    });
                }
            }
        }
    }
    
    void setMraidViewableHidden() {
        this.loadUrl("javascript:MMJS.sdk.setViewable(false)");
        this.isVisible = false;
    }
    
    void setMraidViewableVisible() {
        this.loadUrl("javascript:MMJS.sdk.setViewable(true)");
        this.isVisible = true;
    }
    
    void setWebViewContent(final String s, final String s2, final Context context) {
        if (s == null || s2 == null) {
            return;
        }
        final String substring = s2.substring(0, 1 + s2.lastIndexOf("/"));
        this.resetSpeechKit();
        String injectMraidJs;
        if (MRaid.hasMraidLocally(context)) {
            injectMraidJs = MRaid.injectMraidJs(context, s);
        }
        else {
            MMLog.e("MMWebView", "MMJS is not downloaded");
            injectMraidJs = s;
        }
        if (MMSDK.logLevel >= 5) {
            MMLog.v("MMWebView", String.format("Received ad with base url %s.", s2));
            MMLog.v("MMWebView", s);
        }
        MMSDK.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (HandShake.sharedHandShake(MMWebView.this.getContext()).hardwareAccelerationEnabled) {
                    MMWebView.this.enableHardwareAcceleration();
                }
                else if (MMWebView.this.currentColor == 0) {
                    MMWebView.this.enableSoftwareAcceleration();
                }
                else {
                    MMWebView.this.disableAllAcceleration();
                }
                MMWebView.this.isSendingSize = true;
                MMWebView.this.loadDataWithBaseURL(substring, injectMraidJs, "text/html", "UTF-8", null);
            }
        });
    }
    
    void setWebViewContent(String s, final String s2, final MMAdImpl mmAdImpl) {
        if (s == null || s2 == null || mmAdImpl == null) {
            return;
        }
        this.unresizeToDefault(mmAdImpl);
        this.resetSpeechKit();
        final String substring = s2.substring(0, 1 + s2.lastIndexOf("/"));
        if (MMSDK.logLevel >= 5) {
            MMLog.v("MMWebView", String.format("Received ad with base url %s.", substring));
            MMLog.v("MMWebView", s);
        }
        if (mmAdImpl.isTransitionAnimated()) {
            this.animateTransition(mmAdImpl);
        }
        if (mmAdImpl.ignoreDensityScaling) {
            s = "<head><meta name=\"viewport\" content=\"target-densitydpi=device-dpi\" /></head>" + s;
        }
        if (MRaid.hasMraidLocally(mmAdImpl.getContext())) {
            s = MRaid.injectMraidJs(mmAdImpl.getContext(), s);
        }
        else {
            MMLog.e("MMWebView", "MMJS is not downloaded");
        }
        MMSDK.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (HandShake.sharedHandShake(MMWebView.this.getContext()).hardwareAccelerationEnabled) {
                    MMWebView.this.enableHardwareAcceleration();
                }
                else if (MMWebView.this.currentColor == 0) {
                    MMWebView.this.enableSoftwareAcceleration();
                }
                else {
                    MMWebView.this.disableAllAcceleration();
                }
                final MMAd callingAd = mmAdImpl.getCallingAd();
                if (callingAd != null && callingAd instanceof MMLayout) {
                    ((MMLayout)callingAd).removeVideo();
                }
                MMWebView.this.isSendingSize = true;
                MMWebView.this.loadDataWithBaseURL(substring, s, "text/html", "UTF-8", null);
            }
        });
    }
    
    void setmicrophoneAudioLevelChange(final double n) {
        this.loadUrl("javascript:MMJS.sdk.microphoneAudioLevelChange(" + n + ")");
    }
    
    void setmicrophoneStateChange(final String s) {
        this.loadUrl("javascript:MMJS.sdk.microphoneStateChange('" + s + "')");
    }
    
    public String toString() {
        return "MMWebView originally from(" + this.creatorAdImplId + ") MRaidState(" + this.mraidState + ")." + super.toString();
    }
    
    void unresizeToDefault(final MMAdImpl mmAdImpl) {
        synchronized (this) {
            if (MMSDK.hasSetTranslationMethod() && this.isMraidResized() && mmAdImpl != null) {
                final MMAd callingAd = mmAdImpl.getCallingAd();
                if (callingAd instanceof MMAdView) {
                    final MMAdView mmAdView = (MMAdView)callingAd;
                    this.isUserClosedResize = true;
                    MMSDK.runOnUiThread(new Runnable() {
                        void handleUnresize() {
                            if (MMSDK.hasSetTranslationMethod() && !MMWebView.this.hasDefaultResizeParams()) {
                                final ViewGroup$LayoutParams layoutParams = MMWebView.this.getLayoutParams();
                                layoutParams.width = MMWebView.this.oldWidth;
                                layoutParams.height = MMWebView.this.oldHeight;
                                MMWebView.this.oldWidth = -50;
                                MMWebView.this.oldHeight = -50;
                                MMWebView.this.requestLayout();
                            }
                        }
                        
                        @Override
                        public void run() {
                            synchronized (MMWebView.this) {
                                mmAdView.handleUnresize();
                                this.handleUnresize();
                                MMWebView.this.setMraidDefault();
                                MMWebView.this.isSendingSize = true;
                                MMWebView.this.invalidate();
                            }
                        }
                    });
                }
            }
        }
    }
    
    void updateArgumentsWithSettings(final Map map) {
        String s;
        if (this.isParentBannerAd()) {
            s = "true";
        }
        else {
            s = "false";
        }
        map.put("PROPERTY_BANNER_TYPE", s);
        map.put("PROPERTY_STATE", this.mraidState);
        map.put("PROPERTY_EXPANDING", String.valueOf(this.creatorAdImplId));
    }
}
