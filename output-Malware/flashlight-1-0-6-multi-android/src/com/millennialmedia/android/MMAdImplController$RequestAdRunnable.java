// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.content.Context;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import java.io.IOException;
import org.apache.http.HttpEntity;
import java.util.Iterator;
import java.lang.ref.WeakReference;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Map;
import java.util.Comparator;
import java.util.TreeMap;

class MMAdImplController$RequestAdRunnable implements Runnable
{
    String adUrl;
    HttpMMHeaders mmHeaders;
    final /* synthetic */ MMAdImplController this$0;
    
    private MMAdImplController$RequestAdRunnable(final MMAdImplController this$0) {
        this.this$0 = this$0;
    }
    
    private boolean isAdUrlBuildable() {
        this.adUrl = null;
        final WeakReference adImplRef = this.this$0.adImplRef;
        MMAdImpl mmAdImpl = null;
        if (adImplRef != null) {
            mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
        }
        if (mmAdImpl != null) {
            StringBuilder sb;
            try {
                final TreeMap<String, String> treeMap = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
                mmAdImpl.insertUrlAdMetaValues(treeMap);
                MMSDK.insertUrlCommonValues(mmAdImpl.getContext(), treeMap);
                treeMap.put("ua", mmAdImpl.controller.getUserAgent());
                sb = new StringBuilder(HandShake.getAdUrl());
                MMLog.d("MMAdImplController", treeMap.entrySet().toString());
                for (final Map.Entry<String, String> entry : treeMap.entrySet()) {
                    sb.append(String.format("%s=%s&", entry.getKey(), URLEncoder.encode(entry.getValue(), "UTF-8")));
                }
            }
            catch (UnsupportedEncodingException ex) {
                return this.failWithErrorMessage(new MMException(ex));
            }
            sb.delete(-1 + sb.length(), sb.length());
            this.adUrl = sb.toString();
            MMLog.d("MMAdImplController", String.format("Calling for an advertisement: %s", this.adUrl));
        }
        else {
            this.failWithInfoMessage(new MMException(25));
        }
        return true;
    }
    
    private boolean isHandledHtmlResponse(final HttpEntity httpEntity) {
        try {
            final WeakReference adImplRef = this.this$0.adImplRef;
            MMAdImpl mmAdImpl = null;
            if (adImplRef != null) {
                mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
            }
            if (mmAdImpl != null) {
                if (!mmAdImpl.isBanner()) {
                    final InterstitialAd interstitialAd = new InterstitialAd();
                    interstitialAd.content = HttpGetRequest.convertStreamToString(httpEntity.getContent());
                    interstitialAd.setId(mmAdImpl.adType);
                    interstitialAd.adUrl = this.adUrl;
                    interstitialAd.mmHeaders = this.mmHeaders;
                    if (MMSDK.logLevel >= 5) {
                        MMLog.v("MMAdImplController", String.format("Received interstitial ad with url %s.", interstitialAd.adUrl));
                        MMLog.v("MMAdImplController", interstitialAd.content);
                    }
                    AdCache.save(mmAdImpl.getContext(), interstitialAd);
                    AdCache.setNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName(), interstitialAd.getId());
                    MMSDK$Event.fetchStartedCaching(mmAdImpl);
                    MMSDK$Event.requestCompleted(mmAdImpl);
                }
                else {
                    if (mmAdImpl.controller != null) {
                        mmAdImpl.controller.setLastHeaders(this.mmHeaders);
                        mmAdImpl.controller.setWebViewContent(HttpGetRequest.convertStreamToString(httpEntity.getContent()), this.adUrl);
                    }
                    MMSDK$Event.requestCompleted(mmAdImpl);
                }
            }
        }
        catch (IOException ex) {
            return this.failWithErrorMessage(new MMException("Exception raised in HTTP stream: " + ex, ex));
        }
        return true;
    }
    
    private boolean isHandledJsonResponse(final HttpEntity httpEntity) {
        MMAdImpl mmAdImpl;
        if (this.this$0.adImplRef != null) {
            mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
        }
        else {
            mmAdImpl = null;
        }
        if (mmAdImpl == null) {
            return true;
        }
        if (mmAdImpl.isBanner()) {
            return this.failWithErrorMessage(new MMException("Millennial ad return unsupported format.", 15));
        }
        while (true) {
            VideoAd videoAd = null;
            Label_0207: {
                try {
                    videoAd = (VideoAd)CachedAd.parseJSON(HttpGetRequest.convertStreamToString(httpEntity.getContent()));
                    if (videoAd != null && videoAd.isValid()) {
                        MMLog.i("MMAdImplController", "Cached video ad JSON received: " + videoAd.getId());
                        if (!videoAd.isExpired()) {
                            break Label_0207;
                        }
                        MMLog.i("MMAdImplController", "New ad has expiration date in the past. Not downloading ad content.");
                        videoAd.delete(mmAdImpl.getContext());
                        MMSDK$Event.requestFailed(mmAdImpl, new MMException(15));
                    }
                    return true;
                }
                catch (IllegalStateException ex) {
                    ex.printStackTrace();
                    return this.failWithInfoMessage(new MMException("Millennial ad return failed. Invalid response data.", ex));
                }
                catch (IOException ex2) {
                    ex2.printStackTrace();
                    return this.failWithInfoMessage(new MMException("Millennial ad return failed. " + ex2, ex2));
                }
            }
            if (AdCache.loadNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName()) != null) {
                MMLog.i("MMAdImplController", "Previously fetched ad exists in the playback queue. Not downloading ad content.");
                videoAd.delete(mmAdImpl.getContext());
                MMSDK$Event.requestFailed(mmAdImpl, new MMException(17));
                return true;
            }
            AdCache.save(mmAdImpl.getContext(), videoAd);
            if (!videoAd.isOnDisk(mmAdImpl.getContext())) {
                MMSDK$Event.logEvent(videoAd.cacheMissURL);
                MMLog.d("MMAdImplController", "Downloading ad...");
                MMSDK$Event.fetchStartedCaching(mmAdImpl);
                videoAd.downloadPriority = 3;
                AdCache.startDownloadTask(mmAdImpl.getContext(), mmAdImpl.getCachedName(), videoAd, mmAdImpl.controller);
                return true;
            }
            MMLog.d("MMAdImplController", "Cached ad is valid. Moving it to the front of the queue.");
            AdCache.setNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName(), videoAd.getId());
            MMSDK$Event.fetchStartedCaching(mmAdImpl);
            MMSDK$Event.requestCompleted(mmAdImpl);
            return true;
        }
    }
    
    private boolean isHandledResponse(final HttpResponse httpResponse) {
        final HttpEntity entity = httpResponse.getEntity();
        if (entity == null) {
            this.failWithInfoMessage(new MMException("Null HTTP entity", 14));
            return false;
        }
        if (entity.getContentLength() == 0L) {
            this.failWithInfoMessage(new MMException("Millennial ad return failed. Zero content length returned.", 14));
            return false;
        }
        this.saveMacId(httpResponse);
        final Header contentType = entity.getContentType();
        if (contentType != null && contentType.getValue() != null) {
            if (contentType.getValue().toLowerCase().startsWith("application/json")) {
                this.isHandledJsonResponse(entity);
            }
            else {
                if (!contentType.getValue().toLowerCase().startsWith("text/html")) {
                    this.failWithInfoMessage(new MMException("Millennial ad return failed. Invalid (JSON/HTML expected) mime type returned.", 15));
                    return false;
                }
                final Header firstHeader = httpResponse.getFirstHeader("X-MM-Video");
                this.mmHeaders = new HttpMMHeaders(httpResponse.getAllHeaders());
                if (firstHeader != null && firstHeader.getValue().equalsIgnoreCase("true")) {
                    final WeakReference adImplRef = this.this$0.adImplRef;
                    MMAdImpl mmAdImpl = null;
                    if (adImplRef != null) {
                        mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
                    }
                    if (mmAdImpl != null) {
                        final Context context = mmAdImpl.getContext();
                        HandShake.sharedHandShake(context).updateLastVideoViewedTime(context, mmAdImpl.adType);
                    }
                }
                this.isHandledHtmlResponse(entity);
            }
            return true;
        }
        this.failWithInfoMessage(new MMException("Millennial ad return failed. HTTP Header value null.", 15));
        return false;
    }
    
    private void saveMacId(final HttpResponse httpResponse) {
        final Header[] headers = httpResponse.getHeaders("Set-Cookie");
        for (int length = headers.length, i = 0; i < length; ++i) {
            final String value = headers[i].getValue();
            final int index = value.indexOf("MAC-ID=");
            if (index >= 0) {
                final int index2 = value.indexOf(59, index);
                if (index2 > index) {
                    MMSDK.macId = value.substring(index + 7, index2);
                }
            }
        }
    }
    
    boolean fail(final MMException ex) {
        final WeakReference adImplRef = this.this$0.adImplRef;
        MMAdImpl mmAdImpl = null;
        if (adImplRef != null) {
            mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
        }
        MMSDK$Event.requestFailed(mmAdImpl, ex);
        return false;
    }
    
    boolean failWithErrorMessage(final MMException ex) {
        MMLog.e("MMAdImplController", ex.getMessage());
        return this.fail(ex);
    }
    
    boolean failWithInfoMessage(final MMException ex) {
        MMLog.i("MMAdImplController", ex.getMessage());
        return this.fail(ex);
    }
    
    @Override
    public void run() {
        try {
            if (this.this$0.adImplRef != null) {
                final MMAdImpl mmAdImpl = (MMAdImpl)this.this$0.adImplRef.get();
                if (mmAdImpl == null || !MMSDK.isConnected(mmAdImpl.getContext())) {
                    this.failWithInfoMessage(new MMException("No network available, can't call for ads.", 11));
                    return;
                }
                if (!this.isAdUrlBuildable()) {
                    return;
                }
                HttpResponse value;
                try {
                    value = new HttpGetRequest().get(this.adUrl);
                    if (value == null) {
                        this.failWithErrorMessage(new MMException("HTTP response is null.", 14));
                        return;
                    }
                }
                catch (Exception ex) {
                    this.failWithErrorMessage(new MMException("Ad request HTTP error. " + ex.getMessage(), 14));
                    return;
                }
                if (!this.isHandledResponse(value)) {
                    return;
                }
            }
        }
        catch (Exception ex2) {
            this.failWithInfoMessage(new MMException("Request not filled, can't call for ads.", 14));
        }
        finally {
            this.this$0.requestAdRunnable = null;
        }
    }
}
