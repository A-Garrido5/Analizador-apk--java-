// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.text.TextUtils;
import android.os.Environment;
import java.util.Map;
import android.os.Build$VERSION;
import android.provider.Settings$System;
import android.media.AudioManager;
import java.security.MessageDigest;
import android.provider.Settings$Secure;
import java.util.Enumeration;
import org.apache.http.conn.util.InetAddressUtils;
import java.net.InetAddress;
import java.net.NetworkInterface;
import android.net.ConnectivityManager;
import android.content.res.Configuration;
import android.telephony.TelephonyManager;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import java.io.IOException;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.ads.identifier.AdvertisingIdClient$Info;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.app.AlertDialog;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager$NameNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.os.Looper;
import android.os.Handler;

public final class MMSDK
{
    private static final String BASE_URL_TRACK_EVENT = "http://ads.mp.mydas.mobi/pixel?id=";
    static final int CACHE_REQUEST_TIMEOUT = 30000;
    static final int CLOSE_ACTIVITY_DURATION = 400;
    static String COMMA;
    public static final String DEFAULT_APID = "28911";
    public static final String DEFAULT_BANNER_APID = "28913";
    public static final String DEFAULT_RECT_APID = "28914";
    static final String EMPTY = "";
    static final int HANDSHAKE_REQUEST_TIMEOUT = 3000;
    static final String JSON_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss ZZZZ";
    public static final int LOG_LEVEL_DEBUG = 1;
    public static final int LOG_LEVEL_ERROR = 0;
    public static final int LOG_LEVEL_INFO = 2;
    @Deprecated
    public static final int LOG_LEVEL_INTERNAL = 4;
    @Deprecated
    public static final int LOG_LEVEL_PRIVATE_VERBOSE = 5;
    public static final int LOG_LEVEL_VERBOSE = 3;
    static final int OPEN_ACTIVITY_DURATION = 600;
    static final String PREFS_NAME = "MillennialMediaSettings";
    static final int REQUEST_TIMEOUT = 10000;
    public static final String SDKLOG = "MMSDK";
    public static final String VERSION = "5.3.0-c3980670.a";
    @Deprecated
    static boolean disableAdMinRefresh;
    private static String getMMdidValue;
    private static boolean hasSpeechKit;
    private static boolean isBroadcastingEvents;
    static int logLevel;
    static String macId;
    static Handler mainHandler;
    private static int nextDefaultId;
    
    static {
        MMSDK.disableAdMinRefresh = false;
        MMSDK.nextDefaultId = 1897808289;
        MMSDK.COMMA = ",";
        MMSDK.mainHandler = new Handler(Looper.getMainLooper());
        MMSDK.getMMdidValue = null;
        MMSDK.hasSpeechKit = false;
        try {
            System.loadLibrary("nmsp_speex");
            MMSDK.hasSpeechKit = true;
        }
        catch (UnsatisfiedLinkError unsatisfiedLinkError) {}
    }
    
    static String byteArrayToString(final byte[] array) {
        final StringBuilder sb = new StringBuilder(2 * array.length);
        for (int i = 0; i < array.length; ++i) {
            sb.append(String.format("%02X", array[i]));
        }
        return sb.toString();
    }
    
    static void checkActivity(final Context context) {
        final PackageManager packageManager = context.getPackageManager();
        try {
            packageManager.getActivityInfo(new ComponentName(context, "com.millennialmedia.android.MMActivity"), 128);
        }
        catch (PackageManager$NameNotFoundException ex) {
            MMLog.e("MMSDK", "Activity MMActivity not declared in AndroidManifest.xml", (Throwable)ex);
            ex.printStackTrace();
            createMissingPermissionDialog(context, "MMActivity class").show();
        }
    }
    
    static void checkPermissions(final Context context) {
        if (context.checkCallingOrSelfPermission("android.permission.INTERNET") == -1) {
            createMissingPermissionDialog(context, "INTERNET permission").show();
        }
        if (context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") == -1) {
            createMissingPermissionDialog(context, "ACCESS_NETWORK_STATE permission").show();
        }
    }
    
    private static AlertDialog createMissingPermissionDialog(final Context context, final String s) {
        final AlertDialog create = new AlertDialog$Builder(context).create();
        create.setTitle((CharSequence)"Whoops!");
        create.setMessage((CharSequence)String.format("The developer has forgot to declare the %s in the manifest file. Please reach out to the developer to remove this error.", s));
        create.setButton(-3, (CharSequence)"OK", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
            public final void onClick(final DialogInterface dialogInterface, final int n) {
                dialogInterface.cancel();
            }
        });
        create.show();
        return create;
    }
    
    static String getAaid(final AdvertisingIdClient$Info advertisingIdClient$Info) {
        if (advertisingIdClient$Info == null) {
            return null;
        }
        return advertisingIdClient$Info.getId();
    }
    
    static AdvertisingIdClient$Info getAdvertisingInfo(final Context context) {
        try {
            return AdvertisingIdClient.getAdvertisingIdInfo(context);
        }
        catch (IOException ex) {
            MMLog.e("MMSDK", "Unrecoverable error connecting to Google Play services (e.g.,the old version of the service doesnt support getting AdvertisingId", ex);
            return null;
        }
        catch (GooglePlayServicesNotAvailableException ex2) {
            MMLog.e("MMSDK", "Google Play services is not available entirely.", ex2);
            return null;
        }
        catch (IllegalStateException ex3) {
            MMLog.e("MMSDK", "IllegalStateException: ", ex3);
            return null;
        }
        catch (GooglePlayServicesRepairableException ex4) {
            MMLog.e("MMSDK", "Google Play Services is not installed, up-to-date, or enabled", ex4);
            return null;
        }
    }
    
    public static boolean getBroadcastEvents() {
        return MMSDK.isBroadcastingEvents;
    }
    
    static String getCn(final Context context) {
        return ((TelephonyManager)context.getSystemService("phone")).getNetworkOperatorName();
    }
    
    static Configuration getConfiguration(final Context context) {
        return context.getResources().getConfiguration();
    }
    
    static String getConnectionType(final Context context) {
        final ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService("connectivity");
        if (connectivityManager == null) {
            return "unknown";
        }
        if (connectivityManager.getActiveNetworkInfo() == null || !connectivityManager.getActiveNetworkInfo().isConnected()) {
            return "offline";
        }
        final int type = connectivityManager.getActiveNetworkInfo().getType();
        final int subtype = connectivityManager.getActiveNetworkInfo().getSubtype();
        if (type == 1) {
            return "wifi";
        }
        if (type != 0) {
            return "unknown";
        }
        switch (subtype) {
            default: {
                return "unknown";
            }
            case 7: {
                return "1xrtt";
            }
            case 4: {
                return "cdma";
            }
            case 2: {
                return "edge";
            }
            case 14: {
                return "ehrpd";
            }
            case 5: {
                return "evdo_0";
            }
            case 6: {
                return "evdo_a";
            }
            case 12: {
                return "evdo_b";
            }
            case 1: {
                return "gprs";
            }
            case 8: {
                return "hsdpa";
            }
            case 10: {
                return "hspa";
            }
            case 15: {
                return "hspap";
            }
            case 9: {
                return "hsupa";
            }
            case 11: {
                return "iden";
            }
            case 13: {
                return "lte";
            }
            case 3: {
                return "umts";
            }
        }
    }
    
    public static int getDefaultAdId() {
        synchronized (MMSDK.class) {
            return ++MMSDK.nextDefaultId;
        }
    }
    
    static float getDensity(final Context context) {
        return context.getResources().getDisplayMetrics().density;
    }
    
    private static String getDensityString(final Context context) {
        return Float.toString(getDensity(context));
    }
    
    static String getDpiHeight(final Context context) {
        return Integer.toString(context.getResources().getDisplayMetrics().heightPixels);
    }
    
    static String getDpiWidth(final Context context) {
        return Integer.toString(context.getResources().getDisplayMetrics().widthPixels);
    }
    
    static String getIpAddress(final Context context) {
        StringBuilder sb = null;
        while (true) {
            while (true) {
                String s = null;
                Label_0120: {
                    try {
                        sb = new StringBuilder();
                        final Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
                        while (networkInterfaces.hasMoreElements()) {
                            final Enumeration<InetAddress> inetAddresses = networkInterfaces.nextElement().getInetAddresses();
                            while (inetAddresses.hasMoreElements()) {
                                final InetAddress inetAddress = inetAddresses.nextElement();
                                if (!inetAddress.isLoopbackAddress()) {
                                    if (sb.length() > 0) {
                                        sb.append(',');
                                    }
                                    s = inetAddress.getHostAddress().toUpperCase();
                                    if (!InetAddressUtils.isIPv4Address(s)) {
                                        break Label_0120;
                                    }
                                    sb.append(s);
                                }
                            }
                        }
                        break;
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception getting ip information: ", ex);
                        return "";
                    }
                }
                final int index = s.indexOf(37);
                if (index >= 0) {
                    s = s.substring(0, index);
                }
                sb.append(s);
                continue;
            }
        }
        return sb.toString();
    }
    
    @Deprecated
    public static int getLogLevel() {
        return MMLog.getLogLevel();
    }
    
    static String getMMdid(final Context context) {
        final String string;
        final StringBuilder sb;
        synchronized (MMSDK.class) {
            String getMMdidValue;
            if (MMSDK.getMMdidValue != null) {
                getMMdidValue = MMSDK.getMMdidValue;
            }
            else {
                string = Settings$Secure.getString(context.getContentResolver(), "android_id");
                getMMdidValue = null;
                if (string != null) {
                    final StringBuilder sb2;
                    sb = (sb2 = new StringBuilder("mmh_"));
                    final String s = "MD5";
                    final MessageDigest messageDigest = MessageDigest.getInstance(s);
                    final String s2 = string;
                    final byte[] array = s2.getBytes();
                    final byte[] array2 = messageDigest.digest(array);
                    final String s3 = byteArrayToString(array2);
                    sb2.append(s3);
                    final StringBuilder sb3 = sb;
                    final String s4 = "_";
                    sb3.append(s4);
                    final StringBuilder sb4 = sb;
                    final String s5 = "SHA1";
                    final MessageDigest messageDigest2 = MessageDigest.getInstance(s5);
                    final String s6 = string;
                    final byte[] array3 = s6.getBytes();
                    final byte[] array4 = messageDigest2.digest(array3);
                    final String s7 = byteArrayToString(array4);
                    sb4.append(s7);
                    final StringBuilder sb5 = sb;
                    getMMdidValue = sb5.toString();
                    final String s8 = MMSDK.getMMdidValue = getMMdidValue;
                }
            }
            return getMMdidValue;
        }
        try {
            final StringBuilder sb2 = sb;
            final String s = "MD5";
            final MessageDigest messageDigest = MessageDigest.getInstance(s);
            final String s2 = string;
            final byte[] array = s2.getBytes();
            final byte[] array2 = messageDigest.digest(array);
            final String s3 = byteArrayToString(array2);
            sb2.append(s3);
            final StringBuilder sb3 = sb;
            final String s4 = "_";
            sb3.append(s4);
            final StringBuilder sb4 = sb;
            final String s5 = "SHA1";
            final MessageDigest messageDigest2 = MessageDigest.getInstance(s5);
            final String s6 = string;
            final byte[] array3 = s6.getBytes();
            final byte[] array4 = messageDigest2.digest(array3);
            final String s7 = byteArrayToString(array4);
            sb4.append(s7);
            final StringBuilder sb5 = sb;
            return MMSDK.getMMdidValue = sb5.toString();
        }
        catch (Exception ex) {
            MMLog.e("MMSDK", "Exception calculating hash: ", ex);
            return null;
        }
    }
    
    static String getMcc(final Context context) {
        final Configuration configuration = getConfiguration(context);
        if (configuration.mcc == 0) {
            final String networkOperator = getNetworkOperator(context);
            if (networkOperator != null && networkOperator.length() >= 6) {
                return networkOperator.substring(0, 3);
            }
        }
        return String.valueOf(configuration.mcc);
    }
    
    static int getMediaVolume(final Context context) {
        return ((AudioManager)context.getApplicationContext().getSystemService("audio")).getStreamVolume(3);
    }
    
    static String getMnc(final Context context) {
        final Configuration configuration = getConfiguration(context);
        if (configuration.mnc == 0) {
            final String networkOperator = getNetworkOperator(context);
            if (networkOperator != null && networkOperator.length() >= 6) {
                return networkOperator.substring(3);
            }
        }
        return String.valueOf(configuration.mnc);
    }
    
    static String getNetworkOperator(final Context context) {
        return ((TelephonyManager)context.getSystemService("phone")).getNetworkOperator();
    }
    
    static String getOrientation(final Context context) {
        switch (context.getResources().getConfiguration().orientation) {
            default: {
                return "default";
            }
            case 1: {
                return "portrait";
            }
            case 2: {
                return "landscape";
            }
            case 3: {
                return "square";
            }
        }
    }
    
    static final String getOrientationLocked(final Context context) {
        if (Settings$System.getString(context.getContentResolver(), "accelerometer_rotation").equals("1")) {
            return "false";
        }
        return "true";
    }
    
    static boolean getSupportsCalendar() {
        return Build$VERSION.SDK_INT >= 14;
    }
    
    static String getSupportsSms(final Context context) {
        return String.valueOf(context.getPackageManager().hasSystemFeature("android.hardware.telephony"));
    }
    
    static String getSupportsTel(final Context context) {
        return String.valueOf(context.getPackageManager().hasSystemFeature("android.hardware.telephony"));
    }
    
    static boolean hasMicrophone(final Context context) {
        return context.getPackageManager().hasSystemFeature("android.hardware.microphone");
    }
    
    static boolean hasRecordAudioPermission(final Context context) {
        return context.checkCallingOrSelfPermission("android.permission.RECORD_AUDIO") == 0;
    }
    
    static boolean hasSetTranslationMethod() {
        return Integer.parseInt(Build$VERSION.SDK) >= 11;
    }
    
    private static String hasSpeechKit(final Context context) {
        if (MMSDK.hasSpeechKit && hasRecordAudioPermission(context)) {
            return "true";
        }
        return "false";
    }
    
    public static void initialize(final Context context) {
        final HandShake sharedHandShake = HandShake.sharedHandShake(context);
        sharedHandShake.sendInitRequest();
        sharedHandShake.startSession();
    }
    
    static void insertUrlCommonValues(final Context p0, final Map p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             "MMSDK"
        //     2: ldc_w           "executing getIDThread"
        //     5: invokestatic    com/millennialmedia/android/MMLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //     8: aload_1        
        //     9: ldc_w           "density"
        //    12: aload_0        
        //    13: invokestatic    com/millennialmedia/android/MMSDK.getDensityString:(Landroid/content/Context;)Ljava/lang/String;
        //    16: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    21: pop            
        //    22: aload_1        
        //    23: ldc_w           "hpx"
        //    26: aload_0        
        //    27: invokestatic    com/millennialmedia/android/MMSDK.getDpiHeight:(Landroid/content/Context;)Ljava/lang/String;
        //    30: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    35: pop            
        //    36: aload_1        
        //    37: ldc_w           "wpx"
        //    40: aload_0        
        //    41: invokestatic    com/millennialmedia/android/MMSDK.getDpiWidth:(Landroid/content/Context;)Ljava/lang/String;
        //    44: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    49: pop            
        //    50: aload_1        
        //    51: ldc_w           "sk"
        //    54: aload_0        
        //    55: invokestatic    com/millennialmedia/android/MMSDK.hasSpeechKit:(Landroid/content/Context;)Ljava/lang/String;
        //    58: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    63: pop            
        //    64: aload_1        
        //    65: ldc_w           "mic"
        //    68: aload_0        
        //    69: invokestatic    com/millennialmedia/android/MMSDK.hasMicrophone:(Landroid/content/Context;)Z
        //    72: invokestatic    java/lang/Boolean.toString:(Z)Ljava/lang/String;
        //    75: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    80: pop            
        //    81: ldc_w           "true"
        //    84: astore          7
        //    86: aload_0        
        //    87: invokestatic    com/google/android/gms/common/GooglePlayServicesUtil.isGooglePlayServicesAvailable:(Landroid/content/Context;)I
        //    90: ifne            788
        //    93: aload_0        
        //    94: invokestatic    com/millennialmedia/android/MMSDK.getAdvertisingInfo:(Landroid/content/Context;)Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$Info;
        //    97: astore          47
        //    99: aload           47
        //   101: ifnull          788
        //   104: aload           47
        //   106: invokestatic    com/millennialmedia/android/MMSDK.getAaid:(Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$Info;)Ljava/lang/String;
        //   109: astore          8
        //   111: aload           8
        //   113: ifnull          129
        //   116: aload           47
        //   118: invokevirtual   com/google/android/gms/ads/identifier/AdvertisingIdClient$Info.isLimitAdTrackingEnabled:()Z
        //   121: ifeq            129
        //   124: ldc_w           "false"
        //   127: astore          7
        //   129: aload           8
        //   131: ifnull          680
        //   134: aload_1        
        //   135: ldc_w           "aaid"
        //   138: aload           8
        //   140: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   145: pop            
        //   146: aload_1        
        //   147: ldc_w           "ate"
        //   150: aload           7
        //   152: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   157: pop            
        //   158: aload_0        
        //   159: invokestatic    com/millennialmedia/android/MMSDK.isCachedVideoSupportedOnDevice:(Landroid/content/Context;)Z
        //   162: ifeq            706
        //   165: aload_1        
        //   166: ldc_w           "cachedvideo"
        //   169: ldc_w           "true"
        //   172: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   177: pop            
        //   178: getstatic       android/os/Build.MODEL:Ljava/lang/String;
        //   181: ifnull          197
        //   184: aload_1        
        //   185: ldc_w           "dm"
        //   188: getstatic       android/os/Build.MODEL:Ljava/lang/String;
        //   191: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   196: pop            
        //   197: getstatic       android/os/Build$VERSION.RELEASE:Ljava/lang/String;
        //   200: ifnull          232
        //   203: aload_1        
        //   204: ldc_w           "dv"
        //   207: new             Ljava/lang/StringBuilder;
        //   210: dup            
        //   211: ldc_w           "Android"
        //   214: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   217: getstatic       android/os/Build$VERSION.RELEASE:Ljava/lang/String;
        //   220: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   223: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   226: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   231: pop            
        //   232: aload_1        
        //   233: ldc_w           "sdkversion"
        //   236: ldc             "5.3.0-c3980670.a"
        //   238: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   243: pop            
        //   244: aload_1        
        //   245: ldc_w           "mcc"
        //   248: aload_0        
        //   249: invokestatic    com/millennialmedia/android/MMSDK.getMcc:(Landroid/content/Context;)Ljava/lang/String;
        //   252: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   257: pop            
        //   258: aload_1        
        //   259: ldc_w           "mnc"
        //   262: aload_0        
        //   263: invokestatic    com/millennialmedia/android/MMSDK.getMnc:(Landroid/content/Context;)Ljava/lang/String;
        //   266: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   271: pop            
        //   272: aload_0        
        //   273: invokestatic    com/millennialmedia/android/MMSDK.getCn:(Landroid/content/Context;)Ljava/lang/String;
        //   276: astore          15
        //   278: aload           15
        //   280: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //   283: ifne            298
        //   286: aload_1        
        //   287: ldc_w           "cn"
        //   290: aload           15
        //   292: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   297: pop            
        //   298: invokestatic    java/util/Locale.getDefault:()Ljava/util/Locale;
        //   301: astore          16
        //   303: aload           16
        //   305: ifnull          338
        //   308: aload_1        
        //   309: ldc_w           "language"
        //   312: aload           16
        //   314: invokevirtual   java/util/Locale.getLanguage:()Ljava/lang/String;
        //   317: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   322: pop            
        //   323: aload_1        
        //   324: ldc_w           "country"
        //   327: aload           16
        //   329: invokevirtual   java/util/Locale.getCountry:()Ljava/lang/String;
        //   332: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   337: pop            
        //   338: aload_0        
        //   339: invokevirtual   android/content/Context.getPackageName:()Ljava/lang/String;
        //   342: astore          35
        //   344: aload_1        
        //   345: ldc_w           "pkid"
        //   348: aload           35
        //   350: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   355: pop            
        //   356: aload_0        
        //   357: invokevirtual   android/content/Context.getPackageManager:()Landroid/content/pm/PackageManager;
        //   360: astore          37
        //   362: aload_1        
        //   363: ldc_w           "pknm"
        //   366: aload           37
        //   368: aload           37
        //   370: aload           35
        //   372: iconst_0       
        //   373: invokevirtual   android/content/pm/PackageManager.getApplicationInfo:(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
        //   376: invokevirtual   android/content/pm/PackageManager.getApplicationLabel:(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;
        //   379: invokevirtual   java/lang/Object.toString:()Ljava/lang/String;
        //   382: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   387: pop            
        //   388: aload_0        
        //   389: invokestatic    com/millennialmedia/android/HandShake.sharedHandShake:(Landroid/content/Context;)Lcom/millennialmedia/android/HandShake;
        //   392: aload_0        
        //   393: invokevirtual   com/millennialmedia/android/HandShake.getSchemesList:(Landroid/content/Context;)Ljava/lang/String;
        //   396: astore          18
        //   398: aload           18
        //   400: ifnull          415
        //   403: aload_1        
        //   404: ldc_w           "appsids"
        //   407: aload           18
        //   409: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   414: pop            
        //   415: aload_0        
        //   416: invokestatic    com/millennialmedia/android/AdCache.getCachedVideoList:(Landroid/content/Context;)Ljava/lang/String;
        //   419: astore          19
        //   421: aload           19
        //   423: ifnull          438
        //   426: aload_1        
        //   427: ldc_w           "vid"
        //   430: aload           19
        //   432: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   437: pop            
        //   438: aload_0        
        //   439: invokestatic    com/millennialmedia/android/MMSDK.getConnectionType:(Landroid/content/Context;)Ljava/lang/String;
        //   442: astore          21
        //   444: aload_0        
        //   445: invokestatic    com/millennialmedia/android/AdCache.isExternalStorageAvailable:(Landroid/content/Context;)Z
        //   448: ifeq            737
        //   451: new             Landroid/os/StatFs;
        //   454: dup            
        //   455: aload_0        
        //   456: invokestatic    com/millennialmedia/android/AdCache.getCacheDirectory:(Landroid/content/Context;)Ljava/io/File;
        //   459: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //   462: invokespecial   android/os/StatFs.<init>:(Ljava/lang/String;)V
        //   465: astore          22
        //   467: aload           22
        //   469: invokevirtual   android/os/StatFs.getAvailableBlocks:()I
        //   472: i2l            
        //   473: aload           22
        //   475: invokevirtual   android/os/StatFs.getBlockSize:()I
        //   478: i2l            
        //   479: lmul           
        //   480: invokestatic    java/lang/Long.toString:(J)Ljava/lang/String;
        //   483: astore          23
        //   485: aload_0        
        //   486: aconst_null    
        //   487: new             Landroid/content/IntentFilter;
        //   490: dup            
        //   491: ldc_w           "android.intent.action.BATTERY_CHANGED"
        //   494: invokespecial   android/content/IntentFilter.<init>:(Ljava/lang/String;)V
        //   497: invokevirtual   android/content/Context.registerReceiver:(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
        //   500: astore          24
        //   502: aload           24
        //   504: ifnull          779
        //   507: aload           24
        //   509: ldc_w           "plugged"
        //   512: iconst_0       
        //   513: invokevirtual   android/content/Intent.getIntExtra:(Ljava/lang/String;I)I
        //   516: ifne            771
        //   519: ldc_w           "false"
        //   522: astore          25
        //   524: ldc_w           100.0
        //   527: aload           24
        //   529: ldc_w           "scale"
        //   532: bipush          100
        //   534: invokevirtual   android/content/Intent.getIntExtra:(Ljava/lang/String;I)I
        //   537: i2f            
        //   538: fdiv           
        //   539: aload           24
        //   541: ldc_w           "level"
        //   544: iconst_0       
        //   545: invokevirtual   android/content/Intent.getIntExtra:(Ljava/lang/String;I)I
        //   548: i2f            
        //   549: fmul           
        //   550: f2i            
        //   551: invokestatic    java/lang/Integer.toString:(I)Ljava/lang/String;
        //   554: astore          26
        //   556: aload           26
        //   558: ifnull          581
        //   561: aload           26
        //   563: invokevirtual   java/lang/String.length:()I
        //   566: ifle            581
        //   569: aload_1        
        //   570: ldc_w           "bl"
        //   573: aload           26
        //   575: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   580: pop            
        //   581: aload           25
        //   583: ifnull          606
        //   586: aload           25
        //   588: invokevirtual   java/lang/String.length:()I
        //   591: ifle            606
        //   594: aload_1        
        //   595: ldc_w           "plugged"
        //   598: aload           25
        //   600: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   605: pop            
        //   606: aload           23
        //   608: invokevirtual   java/lang/String.length:()I
        //   611: ifle            626
        //   614: aload_1        
        //   615: ldc_w           "space"
        //   618: aload           23
        //   620: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   625: pop            
        //   626: aload           21
        //   628: ifnull          643
        //   631: aload_1        
        //   632: ldc_w           "conn"
        //   635: aload           21
        //   637: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   642: pop            
        //   643: aload_0        
        //   644: invokestatic    com/millennialmedia/android/MMSDK.getIpAddress:(Landroid/content/Context;)Ljava/lang/String;
        //   647: ldc_w           "UTF-8"
        //   650: invokestatic    java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   653: astore          28
        //   655: aload           28
        //   657: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //   660: ifne            675
        //   663: aload_1        
        //   664: ldc_w           "pip"
        //   667: aload           28
        //   669: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   674: pop            
        //   675: aload_1        
        //   676: invokestatic    com/millennialmedia/android/MMRequest.insertLocation:(Ljava/util/Map;)V
        //   679: return         
        //   680: aload_0        
        //   681: invokestatic    com/millennialmedia/android/MMSDK.getMMdid:(Landroid/content/Context;)Ljava/lang/String;
        //   684: astore          9
        //   686: aload           9
        //   688: ifnull          158
        //   691: aload_1        
        //   692: ldc_w           "mmdid"
        //   695: aload           9
        //   697: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   702: pop            
        //   703: goto            158
        //   706: aload_1        
        //   707: ldc_w           "cachedvideo"
        //   710: ldc_w           "false"
        //   713: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   718: pop            
        //   719: goto            178
        //   722: astore          17
        //   724: ldc             "MMSDK"
        //   726: ldc_w           "Can't insert package information"
        //   729: aload           17
        //   731: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   734: goto            388
        //   737: new             Landroid/os/StatFs;
        //   740: dup            
        //   741: aload_0        
        //   742: invokevirtual   android/content/Context.getFilesDir:()Ljava/io/File;
        //   745: invokevirtual   java/io/File.getPath:()Ljava/lang/String;
        //   748: invokespecial   android/os/StatFs.<init>:(Ljava/lang/String;)V
        //   751: astore          22
        //   753: goto            467
        //   756: astore          20
        //   758: ldc             "MMSDK"
        //   760: ldc_w           "Exception inserting common parameters: "
        //   763: aload           20
        //   765: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   768: goto            675
        //   771: ldc_w           "true"
        //   774: astore          25
        //   776: goto            524
        //   779: aconst_null    
        //   780: astore          26
        //   782: aconst_null    
        //   783: astore          25
        //   785: goto            556
        //   788: aconst_null    
        //   789: astore          8
        //   791: goto            129
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  338    388    722    737    Ljava/lang/Exception;
        //  438    467    756    771    Ljava/lang/Exception;
        //  467    502    756    771    Ljava/lang/Exception;
        //  507    519    756    771    Ljava/lang/Exception;
        //  524    556    756    771    Ljava/lang/Exception;
        //  561    581    756    771    Ljava/lang/Exception;
        //  586    606    756    771    Ljava/lang/Exception;
        //  606    626    756    771    Ljava/lang/Exception;
        //  631    643    756    771    Ljava/lang/Exception;
        //  643    675    756    771    Ljava/lang/Exception;
        //  737    753    756    771    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0438:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static boolean isCachedVideoSupportedOnDevice(final Context context) {
        return context.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != -1 && (!Build$VERSION.SDK.equalsIgnoreCase("8") || (Environment.getExternalStorageState().equals("mounted") && AdCache.isExternalEnabled));
    }
    
    static boolean isConnected(final Context context) {
        final ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService("connectivity");
        return connectivityManager != null && (connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnected());
    }
    
    static boolean isUiThread() {
        return MMSDK.mainHandler.getLooper() == Looper.myLooper();
    }
    
    static void printDiagnostics(final MMAdImpl mmAdImpl) {
        if (mmAdImpl != null) {
            final Context context = mmAdImpl.getContext();
            MMLog.i("MMSDK", String.format("MMAd External ID: %d", mmAdImpl.getId()));
            MMLog.i("MMSDK", String.format("MMAd Internal ID: %d", mmAdImpl.internalId));
            MMLog.i("MMSDK", String.format("APID: %s", mmAdImpl.apid));
            final Object[] array = { null };
            String s;
            if (AdCache.isExternalStorageAvailable(context)) {
                s = "";
            }
            else {
                s = "not ";
            }
            array[0] = s;
            MMLog.i("MMSDK", String.format("SD card is %savailable.", array));
            if (context != null) {
                MMLog.i("MMSDK", String.format("Package: %s", context.getPackageName()));
                MMLog.i("MMSDK", String.format("MMDID: %s", getMMdid(context)));
                MMLog.i("MMSDK", "Permissions:");
                final Object[] array2 = { null };
                String s2;
                if (context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") == -1) {
                    s2 = "not ";
                }
                else {
                    s2 = "";
                }
                array2[0] = s2;
                MMLog.i("MMSDK", String.format("android.permission.ACCESS_NETWORK_STATE is %spresent", array2));
                final Object[] array3 = { null };
                String s3;
                if (context.checkCallingOrSelfPermission("android.permission.INTERNET") == -1) {
                    s3 = "not ";
                }
                else {
                    s3 = "";
                }
                array3[0] = s3;
                MMLog.i("MMSDK", String.format("android.permission.INTERNET is %spresent", array3));
                final Object[] array4 = { null };
                String s4;
                if (context.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == -1) {
                    s4 = "not ";
                }
                else {
                    s4 = "";
                }
                array4[0] = s4;
                MMLog.i("MMSDK", String.format("android.permission.WRITE_EXTERNAL_STORAGE is %spresent", array4));
                final Object[] array5 = { null };
                String s5;
                if (context.checkCallingOrSelfPermission("android.permission.VIBRATE") == -1) {
                    s5 = "not ";
                }
                else {
                    s5 = "";
                }
                array5[0] = s5;
                MMLog.i("MMSDK", String.format("android.permission.VIBRATE is %spresent", array5));
                final Object[] array6 = { null };
                String s6;
                if (context.checkCallingOrSelfPermission("android.permission.ACCESS_COARSE_LOCATION") == -1) {
                    s6 = "not ";
                }
                else {
                    s6 = "";
                }
                array6[0] = s6;
                MMLog.i("MMSDK", String.format("android.permission.ACCESS_COARSE_LOCATION is %spresent", array6));
                final Object[] array7 = { null };
                String s7;
                if (context.checkCallingOrSelfPermission("android.permission.ACCESS_FINE_LOCATION") == -1) {
                    s7 = "not ";
                }
                else {
                    s7 = "";
                }
                array7[0] = s7;
                MMLog.i("MMSDK", String.format("android.permission.ACCESS_FINE_LOCATION is %spresent", array7));
                MMLog.i("MMSDK", "Cached Ads:");
                AdCache.iterateCachedAds(context, 2, new AdCache$Iterator() {
                    @Override
                    final boolean callback(final CachedAd cachedAd) {
                        final Object[] array = { cachedAd.getTypeString(), cachedAd.getId(), null, null };
                        String s;
                        if (cachedAd.isOnDisk(context)) {
                            s = "";
                        }
                        else {
                            s = "not ";
                        }
                        array[2] = s;
                        String s2;
                        if (cachedAd.isExpired()) {
                            s2 = "";
                        }
                        else {
                            s2 = "not ";
                        }
                        array[3] = s2;
                        MMLog.i("MMSDK", String.format("%s %s is %son disk. Is %sexpired.", array));
                        return true;
                    }
                });
            }
        }
    }
    
    static boolean removeAccelForJira1164() {
        return Integer.parseInt(Build$VERSION.SDK) >= 14;
    }
    
    public static void resetCache(final Context context) {
        AdCache.resetCache(context);
    }
    
    static void runOnUiThread(final Runnable runnable) {
        if (isUiThread()) {
            runnable.run();
            return;
        }
        MMSDK.mainHandler.post(runnable);
    }
    
    static void runOnUiThreadDelayed(final Runnable runnable, final long n) {
        MMSDK.mainHandler.postDelayed(runnable, n);
    }
    
    public static void setBroadcastEvents(final boolean isBroadcastingEvents) {
        MMSDK.isBroadcastingEvents = isBroadcastingEvents;
    }
    
    @Deprecated
    public static void setLogLevel(final int n) {
        switch (n) {
            default: {
                MMLog.setLogLevel(4);
            }
            case 1: {
                MMLog.setLogLevel(3);
            }
            case 2: {
                MMLog.setLogLevel(4);
            }
            case 3: {
                MMLog.setLogLevel(2);
            }
            case 0: {
                MMLog.setLogLevel(6);
            }
        }
    }
    
    static void setMMdid(final String getMMdidValue) {
        synchronized (MMSDK.class) {
            MMSDK.getMMdidValue = getMMdidValue;
        }
    }
    
    static boolean supportsFullScreenInline() {
        return Integer.parseInt(Build$VERSION.SDK) >= 11;
    }
    
    public static void trackConversion(final Context context, final String s) {
        MMConversionTracker.trackConversion(context, s, null);
    }
    
    public static void trackConversion(final Context context, final String s, final MMRequest mmRequest) {
        MMConversionTracker.trackConversion(context, s, mmRequest);
    }
    
    public static void trackEvent(final Context context, final String s) {
        if (!TextUtils.isEmpty((CharSequence)s)) {
            final String mMdid = getMMdid(context);
            if (!TextUtils.isEmpty((CharSequence)mMdid)) {
                Utils$HttpUtils.executeUrl("http://ads.mp.mydas.mobi/pixel?id=" + s + "&mmdid=" + mMdid);
            }
        }
    }
}
