// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.text.TextUtils;
import java.util.HashMap;
import android.net.Uri;
import java.lang.ref.WeakReference;
import java.util.Map;

class MMCommand implements Runnable
{
    private static final String MM_BANNER = "MMBanner";
    private static final String MM_CACHED_VIDEO = "MMCachedVideo";
    private static final String MM_CALENDAR = "MMCalendar";
    private static final String MM_DEVICE = "MMDevice";
    private static final String MM_INLINE_VIDEO = "MMInlineVideo";
    private static final String MM_INTERSTITIAL = "MMInterstitial";
    private static final String MM_MEDIA = "MMMedia";
    private static final String MM_NOTIFICATION = "MMNotification";
    private static final String MM_SPEECHKIT = "MMSpeechkit";
    private static final String TAG = "MMCommand";
    private Map arguments;
    private String bridgeService;
    private String callback;
    private String serviceMethod;
    private WeakReference webViewRef;
    
    static {
        ComponentRegistry.addBannerBridge(new BridgeMMBanner());
        ComponentRegistry.addCachedVideoBridge(new BridgeMMCachedVideo());
        ComponentRegistry.addCalendarBridge(new BridgeMMCalendar());
        ComponentRegistry.addDeviceBridge(new BridgeMMDevice());
        ComponentRegistry.addInlineVideoBridge(new BridgeMMInlineVideo());
        ComponentRegistry.addInterstitialBridge(new BridgeMMInterstitial());
        ComponentRegistry.addMediaBridge(new BridgeMMMedia());
        ComponentRegistry.addNotificationBridge(new BridgeMMNotification());
        ComponentRegistry.addSpeechkitBridge(new BridgeMMSpeechkit());
    }
    
    MMCommand(final MMWebView mmWebView, final String s) {
        this.webViewRef = new WeakReference((T)mmWebView);
        try {
            final String[] split = Uri.parse(s).getHost().split("\\.");
            if (split.length != 2) {
                return;
            }
            this.bridgeService = split[0];
            this.serviceMethod = split[1];
            this.arguments = new HashMap();
            final String[] split2 = s.substring(1 + s.indexOf(63)).split("&");
            for (int length = split2.length, i = 0; i < length; ++i) {
                final String[] split3 = split2[i].split("=");
                if (split3.length >= 2) {
                    this.arguments.put(Uri.decode(split3[0]), Uri.decode(split3[1]));
                    if (split3[0].equalsIgnoreCase("callback")) {
                        this.callback = Uri.decode(split3[1]);
                    }
                }
            }
        }
        catch (Exception ex) {
            MMLog.e("MMCommand", String.format("Exception while executing javascript call %s ", s), ex);
            ex.printStackTrace();
        }
    }
    
    private MMJSObject getBridgeService(final String s) {
        MMJSObject bannerBridge = null;
        if (s != null) {
            if ("MMBanner".equals(s)) {
                bannerBridge = ComponentRegistry.getBannerBridge();
            }
            else {
                if ("MMCachedVideo".equals(s)) {
                    return ComponentRegistry.getCachedVideoBridge();
                }
                if ("MMCalendar".equals(s)) {
                    return ComponentRegistry.getCalendarBridge();
                }
                if ("MMDevice".equals(s)) {
                    return ComponentRegistry.getDeviceBridge();
                }
                if ("MMInlineVideo".equals(s)) {
                    return ComponentRegistry.getInlineVideoBridge();
                }
                if ("MMInterstitial".equals(s)) {
                    return ComponentRegistry.getInterstitialBridge();
                }
                if ("MMMedia".equals(s)) {
                    return ComponentRegistry.getMediaBridge();
                }
                if ("MMNotification".equals(s)) {
                    return ComponentRegistry.getNotificationBridge();
                }
                final boolean equals = "MMSpeechkit".equals(s);
                bannerBridge = null;
                if (equals) {
                    return ComponentRegistry.getSpeechkitBridge();
                }
            }
        }
        return bannerBridge;
    }
    
    private String getBridgeStrippedClassName() {
        return this.bridgeService.replaceFirst("Bridge", "");
    }
    
    boolean isResizeCommand() {
        return this.serviceMethod != null && "resize".equals(this.serviceMethod);
    }
    
    @Override
    public void run() {
        while (true) {
            while (true) {
                try {
                Label_0095:
                    while (true) {
                        if (this.bridgeService == null || this.serviceMethod == null) {
                            final MMJSResponse mmjsResponse = MMJSResponse.responseWithError("The service or service method was not defined.");
                            break Label_0095;
                        }
                        while (true) {
                            try {
                                final MMWebView mmWebView = (MMWebView)this.webViewRef.get();
                                if (mmWebView != null) {
                                    final MMJSObject bridgeService = this.getBridgeService(this.bridgeService);
                                    MMJSResponse mmjsResponse;
                                    if (bridgeService != null) {
                                        bridgeService.setContext(mmWebView.getContext());
                                        bridgeService.setMMWebView(mmWebView);
                                        mmWebView.updateArgumentsWithSettings(this.arguments);
                                        mmjsResponse = bridgeService.executeCommand(this.serviceMethod, this.arguments);
                                    }
                                    else {
                                        final MMJSResponse responseWithError = MMJSResponse.responseWithError("Service: " + this.bridgeService + " does not exist.");
                                        mmjsResponse = responseWithError;
                                    }
                                    if (!TextUtils.isEmpty((CharSequence)this.callback)) {
                                        final MMWebView mmWebView2 = (MMWebView)this.webViewRef.get();
                                        if (mmWebView2 != null) {
                                            if (mmjsResponse == null) {
                                                mmjsResponse = MMJSResponse.responseWithError(this.serviceMethod);
                                            }
                                            if (mmjsResponse.methodName == null) {
                                                mmjsResponse.methodName = this.serviceMethod;
                                            }
                                            if (mmjsResponse.className == null) {
                                                mmjsResponse.className = this.getBridgeStrippedClassName();
                                            }
                                            MMSDK.runOnUiThread(new Runnable() {
                                                final /* synthetic */ MMJSResponse val$resp;
                                                final /* synthetic */ MMWebView val$webViewCallback;
                                                
                                                @Override
                                                public void run() {
                                                    if (MMCommand.this.serviceMethod.equals("expandWithProperties")) {
                                                        this.val$webViewCallback.isExpanding = true;
                                                    }
                                                    this.val$webViewCallback.loadUrl(String.format("javascript:%s(%s);", MMCommand.this.callback, this.val$resp.toJSONString()));
                                                }
                                            });
                                        }
                                    }
                                    return;
                                }
                                break;
                            }
                            catch (Exception ex) {
                                MMLog.e("MMCommand", "Exception while executing javascript call " + this.serviceMethod, ex);
                                final MMJSResponse mmjsResponse = MMJSResponse.responseWithError("Unexpected exception, " + ex.getClass().getName() + " received.");
                                continue Label_0095;
                            }
                            continue Label_0095;
                        }
                        break;
                    }
                }
                finally {
                    if (!TextUtils.isEmpty((CharSequence)this.callback)) {
                        final MMWebView mmWebView3 = (MMWebView)this.webViewRef.get();
                        if (mmWebView3 != null) {
                            MMJSResponse responseWithError2 = null;
                            if (!false) {
                                responseWithError2 = MMJSResponse.responseWithError(this.serviceMethod);
                            }
                            if (responseWithError2.methodName == null) {
                                responseWithError2.methodName = this.serviceMethod;
                            }
                            if (responseWithError2.className == null) {
                                responseWithError2.className = this.getBridgeStrippedClassName();
                            }
                            MMSDK.runOnUiThread(new Runnable(responseWithError2) {
                                final /* synthetic */ MMJSResponse val$resp;
                                final /* synthetic */ MMWebView val$webViewCallback;
                                
                                @Override
                                public void run() {
                                    if (MMCommand.this.serviceMethod.equals("expandWithProperties")) {
                                        mmWebView2.isExpanding = true;
                                    }
                                    mmWebView2.loadUrl(String.format("javascript:%s(%s);", MMCommand.this.callback, mmjsResponse.toJSONString()));
                                }
                            });
                        }
                    }
                }
                final MMJSResponse responseWithError = null;
                continue;
            }
        }
    }
}
