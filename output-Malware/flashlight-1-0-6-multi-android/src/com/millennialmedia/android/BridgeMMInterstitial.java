// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.content.Context;
import java.util.Map;
import android.os.Parcelable;
import android.net.Uri;
import android.content.Intent;

class BridgeMMInterstitial extends MMJSObject
{
    private static final String CLOSE = "close";
    private static final String EXPAND_TO_EXTERNAL_BROWSER = "expandToExternalBrowser";
    private static final String EXPAND_WITH_PROPERTIES = "expandWithProperties";
    private static final String OPEN = "open";
    private static final String SET_ORIENTATION = "setOrientation";
    private static final String TAG;
    private static final String USE_CUSTOM_CLOSE = "useCustomClose";
    
    static {
        TAG = BridgeMMInterstitial.class.getName();
    }
    
    private Intent getExpandExtrasIntent(final String s, final OverlaySettings overlaySettings) {
        final Intent intent = new Intent();
        if (s != null) {
            intent.setData(Uri.parse(s));
        }
        intent.putExtra("settings", (Parcelable)overlaySettings);
        intent.putExtra("internalId", overlaySettings.creatorAdImplId);
        return intent;
    }
    
    private boolean isForcingOrientation(final MMJSResponse mmjsResponse) {
        if (mmjsResponse.result == 1 && mmjsResponse.response instanceof String) {
            final String s = (String)mmjsResponse.response;
            return s.contains("portrait") || s.contains("landscape");
        }
        return false;
    }
    
    private MMJSResponse setAllowOrientationChange(final Map map) {
        final String s = map.get("allowOrientationChange");
        if (s != null) {
            final AdViewOverlayActivity baseActivity = this.getBaseActivity();
            if (baseActivity != null) {
                baseActivity.setAllowOrientationChange(Boolean.parseBoolean(s));
                return MMJSResponse.responseWithSuccess();
            }
        }
        return null;
    }
    
    private MMJSResponse setForceOrientation(final Map map) {
        final String s = map.get("forceOrientation");
        final AdViewOverlayActivity baseActivity = this.getBaseActivity();
        if (baseActivity != null) {
            if (!"none".equals(s)) {
                if ("portrait".equals(s)) {
                    baseActivity.setRequestedOrientationPortrait();
                    return MMJSResponse.responseWithSuccess("portrait");
                }
                if ("landscape".equals(s)) {
                    baseActivity.setRequestedOrientationLandscape();
                    return MMJSResponse.responseWithSuccess("landscape");
                }
            }
            else if ("none".equals(s)) {
                baseActivity.setAllowOrientationChange(true);
                return MMJSResponse.responseWithSuccess("none");
            }
        }
        return null;
    }
    
    public MMJSResponse close(final Map map) {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null) {
            mmWebView.getMMLayout().closeAreaTouched();
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map orientation) {
        MMJSResponse close;
        if ("close".equals(s)) {
            close = this.close(orientation);
        }
        else {
            if ("expandToExternalBrowser".equals(s)) {
                return this.expandToExternalBrowser(orientation);
            }
            if ("expandWithProperties".equals(s)) {
                return this.expandWithProperties(orientation);
            }
            if ("open".equals(s)) {
                return this.open(orientation);
            }
            if ("setOrientation".equals(s)) {
                return this.setOrientation(orientation);
            }
            final boolean equals = "useCustomClose".equals(s);
            close = null;
            if (equals) {
                return this.useCustomClose(orientation);
            }
        }
        return close;
    }
    
    public MMJSResponse expandToExternalBrowser(final Map map) {
        return this.open(map);
    }
    
    public MMJSResponse expandWithProperties(final Map map) {
        final String s = map.get("PROPERTY_BANNER_TYPE");
        if (s != null && !Boolean.parseBoolean(s)) {
            return MMJSResponse.responseWithError("Cannot expand a non banner ad");
        }
        final String urlToLoad = map.get("url");
        final String s2 = map.get("transparent");
        final String s3 = map.get("useCustomClose");
        final String transition = map.get("transition");
        final String s4 = map.get("orientation");
        final String s5 = map.get("transitionDuration");
        final String s6 = map.get("height");
        final String s7 = map.get("width");
        final String s8 = map.get("modal");
        final String s9 = map.get("PROPERTY_EXPANDING");
        final String s10 = map.get("allowOrientationChange");
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final OverlaySettings overlaySettings = new OverlaySettings();
            if (urlToLoad != null) {
                overlaySettings.urlToLoad = urlToLoad;
            }
            if (s9 != null) {
                overlaySettings.creatorAdImplId = (int)Float.parseFloat(s9);
            }
            if (s2 != null) {
                overlaySettings.setIsTransparent(Boolean.parseBoolean(s2));
            }
            if (s3 != null) {
                overlaySettings.setUseCustomClose(Boolean.parseBoolean(s3));
            }
            if (transition != null) {
                overlaySettings.setTransition(transition);
            }
            if (s10 != null) {
                overlaySettings.allowOrientationChange = Boolean.parseBoolean(s10);
            }
            String orientation;
            if (s4 == null) {
                orientation = map.get("forceOrientation");
            }
            else {
                orientation = s4;
            }
            if (orientation != null) {
                overlaySettings.orientation = orientation;
            }
            if (s6 != null) {
                overlaySettings.height = (int)Float.parseFloat(s6);
            }
            if (s7 != null) {
                overlaySettings.width = (int)Float.parseFloat(s7);
            }
            if (s8 != null) {
                overlaySettings.modal = Boolean.parseBoolean(s8);
            }
            while (true) {
                if (s5 == null) {
                    break Label_0377;
                }
                try {
                    overlaySettings.setTransitionDurationInMillis(1000L * Long.parseLong(s5));
                    Utils$IntentUtils.startAdViewOverlayActivity(context, this.getExpandExtrasIntent(urlToLoad, overlaySettings));
                    MMSDK$Event.overlayOpenedBroadCast(context, this.getAdImplId(map.get("PROPERTY_EXPANDING")));
                    return MMJSResponse.responseWithSuccess();
                }
                catch (Exception ex) {
                    MMLog.e(BridgeMMInterstitial.TAG, "Problem converting transitionDuration", ex);
                    continue;
                }
                break;
            }
        }
        return null;
    }
    
    public MMJSResponse open(final Map map) {
        final String s = map.get("url");
        final Context context = (Context)this.contextRef.get();
        if (s != null && context != null) {
            final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
            MMSDK$Event.intentStarted(context, "browser", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            Utils$IntentUtils.startActivity(context, intent);
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    public MMJSResponse setOrientation(final Map map) {
        MMJSResponse mmjsResponse = this.setForceOrientation(map);
        if (mmjsResponse == null || !this.isForcingOrientation(mmjsResponse)) {
            mmjsResponse = this.setAllowOrientationChange(map);
        }
        return mmjsResponse;
    }
    
    public MMJSResponse useCustomClose(final Map map) {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        final String s = map.get("useCustomClose");
        if (s != null && mmWebView != null) {
            final AdViewOverlayView adViewOverlayView = mmWebView.getAdViewOverlayView();
            if (adViewOverlayView != null) {
                adViewOverlayView.setUseCustomClose(Boolean.parseBoolean(s));
                return MMJSResponse.responseWithSuccess();
            }
        }
        return null;
    }
}
