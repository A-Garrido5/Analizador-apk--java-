// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.webkit.JsPromptResult;
import android.widget.Toast;
import android.webkit.JsResult;
import android.webkit.WebView;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.webkit.GeolocationPermissions$Callback;
import android.content.SharedPreferences$Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager$NameNotFoundException;
import android.content.Context;
import java.lang.ref.WeakReference;
import android.webkit.WebChromeClient;

class MMWebView$MyWebChromeClient extends WebChromeClient
{
    private static final String KEY_USE_GEO = "mm_use_geo_location";
    WeakReference webRef;
    
    MMWebView$MyWebChromeClient(final MMWebView mmWebView) {
        this.webRef = new WeakReference((T)mmWebView);
    }
    
    private String getApplicationName(final Context context) {
    Label_0036_Outer:
        while (true) {
            final PackageManager packageManager = context.getApplicationContext().getPackageManager();
            while (true) {
                while (true) {
                    try {
                        final ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), 0);
                        if (applicationInfo != null) {
                            final CharSequence applicationLabel = packageManager.getApplicationLabel(applicationInfo);
                            return (String)applicationLabel;
                        }
                    }
                    catch (PackageManager$NameNotFoundException ex) {
                        final ApplicationInfo applicationInfo = null;
                        continue Label_0036_Outer;
                    }
                    break;
                }
                final CharSequence applicationLabel = "This app";
                continue;
            }
        }
    }
    
    private boolean isFirstGeoRequest() {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        return mmWebView != null && !mmWebView.getContext().getSharedPreferences("MillennialMediaSettings", 0).contains("mm_use_geo_location");
    }
    
    private boolean retrieveUseGeo() {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        return mmWebView != null && mmWebView.getContext().getSharedPreferences("MillennialMediaSettings", 0).getBoolean("mm_use_geo_location", false);
    }
    
    private void saveUseGeo(final boolean b) {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        if (mmWebView != null) {
            final SharedPreferences$Editor edit = mmWebView.getContext().getSharedPreferences("MillennialMediaSettings", 0).edit();
            edit.putBoolean("mm_use_geo_location", b);
            edit.commit();
        }
    }
    
    public void onConsoleMessage(final String s, final int n, final String s2) {
        super.onConsoleMessage(s, n, s2);
    }
    
    public void onGeolocationPermissionsShowPrompt(final String s, final GeolocationPermissions$Callback geolocationPermissions$Callback) {
        if (this.isFirstGeoRequest()) {
            if (this.retrieveUseGeo()) {
                geolocationPermissions$Callback.invoke(s, true, true);
            }
            else {
                final MMWebView mmWebView = (MMWebView)this.webRef.get();
                if (mmWebView != null) {
                    final Activity activity = mmWebView.getActivity();
                    if (activity != null) {
                        final AlertDialog$Builder alertDialog$Builder = new AlertDialog$Builder((Context)activity);
                        alertDialog$Builder.setTitle((CharSequence)this.getApplicationName((Context)activity));
                        alertDialog$Builder.setMessage((CharSequence)"Would like to use your Current Location.").setPositiveButton((CharSequence)"Allow", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                            public void onClick(final DialogInterface dialogInterface, final int n) {
                                MMWebView$MyWebChromeClient.this.saveUseGeo(true);
                                geolocationPermissions$Callback.invoke(s, true, true);
                            }
                        }).setNegativeButton((CharSequence)"Don't Allow", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                            public void onClick(final DialogInterface dialogInterface, final int n) {
                                MMWebView$MyWebChromeClient.this.saveUseGeo(false);
                                geolocationPermissions$Callback.invoke(s, false, false);
                            }
                        });
                        alertDialog$Builder.create().show();
                    }
                }
            }
            return;
        }
        geolocationPermissions$Callback.invoke(s, false, false);
    }
    
    public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        if (mmWebView != null) {
            if (mmWebView.getContext() != mmWebView.getContext().getApplicationContext()) {
                return super.onJsAlert(webView, s, s2, jsResult);
            }
            Toast.makeText(mmWebView.getContext(), (CharSequence)s2, 0).show();
        }
        return true;
    }
    
    public boolean onJsBeforeUnload(final WebView webView, final String s, final String s2, final JsResult jsResult) {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        if (mmWebView != null) {
            if (mmWebView.getContext() != mmWebView.getContext().getApplicationContext()) {
                return super.onJsBeforeUnload(webView, s, s2, jsResult);
            }
            Toast.makeText(mmWebView.getContext(), (CharSequence)s2, 0).show();
        }
        return true;
    }
    
    public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        if (mmWebView != null) {
            if (mmWebView.getContext() != mmWebView.getContext().getApplicationContext()) {
                return super.onJsConfirm(webView, s, s2, jsResult);
            }
            Toast.makeText(mmWebView.getContext(), (CharSequence)s2, 0).show();
        }
        return true;
    }
    
    public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
        final MMWebView mmWebView = (MMWebView)this.webRef.get();
        if (mmWebView != null) {
            if (mmWebView.getContext() != mmWebView.getContext().getApplicationContext()) {
                return super.onJsPrompt(webView, s, s2, s3, jsPromptResult);
            }
            Toast.makeText(mmWebView.getContext(), (CharSequence)s2, 0).show();
        }
        return true;
    }
}
