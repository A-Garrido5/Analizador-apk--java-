// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import com.nuance.nmdp.speechkit.util.dataupload.Action;
import com.nuance.nmdp.speechkit.util.dataupload.Action$ActionType;
import com.nuance.nmdp.speechkit.util.dataupload.Data;
import com.nuance.nmdp.speechkit.util.dataupload.Data$DataType;
import com.nuance.nmdp.speechkit.util.dataupload.DataBlock;
import android.text.TextUtils;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import android.os.Looper;
import com.nuance.nmdp.speechkit.SpeechKit$CmdSetType;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Iterator;
import com.nuance.nmdp.speechkit.recognitionresult.DetailedResult;
import android.content.Context;
import com.nuance.nmdp.speechkit.Recognition;
import java.util.List;
import org.json.JSONArray;
import com.nuance.nmdp.speechkit.DataUploadResult;
import com.nuance.nmdp.speechkit.SpeechError;
import com.nuance.nmdp.speechkit.GenericResult;
import com.nuance.nmdp.speechkit.GenericCommand;
import java.lang.ref.WeakReference;
import android.os.Handler;
import com.nuance.nmdp.speechkit.Vocalizer$Listener;
import com.nuance.nmdp.speechkit.Recognizer$Listener;
import com.nuance.nmdp.speechkit.Vocalizer;
import com.nuance.nmdp.speechkit.Recognizer;
import com.nuance.nmdp.speechkit.SpeechKit;
import com.nuance.nmdp.speechkit.DataUploadCommand;
import com.nuance.nmdp.speechkit.DataUploadCommand$Listener;
import com.nuance.nmdp.speechkit.GenericCommand$Listener;

public class NVASpeechKit
{
    static final float AUDIO_LEVEL_CHANGE_INTERVAL = 0.25f;
    static final float AUDIO_LEVEL_MAX = 90.0f;
    private static final int AUDIO_LEVEL_UPDATE_FREQUENCY = 50;
    private static final int AUDIO_SAMPLE_PERIOD = 2000;
    static final float SAMPLING_BG_INTERVAL = 0.1f;
    private static final String TAG = "NVASpeechKit";
    private static String nuanceIdCache;
    HandShake$NuanceCredentials _credentials;
    public NVASpeechKit$Result[] _results;
    private Runnable audioLevelCallback;
    private NVASpeechKit$AudioLevelTracker audioLevelTracker;
    private Runnable audioSampleCallback;
    private GenericCommand$Listener commandListener;
    private DataUploadCommand$Listener dataUploadListener;
    private String nuance_transaction_session_id;
    private String packageName;
    private DataUploadCommand pendingDataUploadCommand;
    private NVASpeechKit$CustomWordsOp pendingDataUploadCommandType;
    private SpeechKit sk;
    private Recognizer skCurrentRecognizer;
    private Vocalizer skCurrentVocalizer;
    private Recognizer$Listener skRecogListener;
    private Vocalizer$Listener skVocalListener;
    private NVASpeechKit$Listener speechKitListener;
    private Handler speeckKitHandler;
    private NVASpeechKit$State state;
    private WeakReference webViewRef;
    
    static {
        NVASpeechKit.nuanceIdCache = null;
    }
    
    public NVASpeechKit(final MMWebView mmWebView) {
        this._results = null;
        this.audioLevelTracker = new NVASpeechKit$AudioLevelTracker();
        this.audioSampleCallback = new Runnable() {
            @Override
            public void run() {
                NVASpeechKit.this.endRecording();
            }
        };
        this.audioLevelCallback = new Runnable() {
            @Override
            public void run() {
                if (NVASpeechKit.this.skCurrentRecognizer != null) {
                    final double access$100 = normalize(NVASpeechKit.this.skCurrentRecognizer.getAudioLevel());
                    MMLog.d("NVASpeechKit", "audiolevel changed: level=" + access$100);
                    if (NVASpeechKit.this.audioLevelTracker.update(access$100) && NVASpeechKit.this.speechKitListener != null) {
                        NVASpeechKit.this.speechKitListener.onAudioLevelUpdate(access$100);
                    }
                    if (NVASpeechKit.this.state == NVASpeechKit$State.RECORDING || NVASpeechKit.this.audioLevelTracker.isTrackingAudioSample) {
                        NVASpeechKit.this.speeckKitHandler.postDelayed(NVASpeechKit.this.audioLevelCallback, 50L);
                    }
                }
            }
        };
        this.commandListener = new GenericCommand$Listener() {
            @Override
            public void onComplete(final GenericCommand genericCommand, final GenericResult genericResult, final SpeechError speechError) {
                if (speechError != null) {
                    MMLog.e("NVASpeechKit", "GenericCommand listener. Error: " + speechError.getErrorDetail());
                }
                else {
                    MMLog.d("NVASpeechKit", "GenericCommand listener. Success: " + genericResult.getQueryResult());
                }
                NVASpeechKit.this.notifySpeechResults();
            }
        };
        this.dataUploadListener = new DataUploadCommand$Listener() {
            private void notifyListener(final DataUploadCommand dataUploadCommand) {
                if (NVASpeechKit.this.speechKitListener != null && NVASpeechKit.this.pendingDataUploadCommand == dataUploadCommand) {
                    if (NVASpeechKit.this.pendingDataUploadCommandType == NVASpeechKit$CustomWordsOp.Add) {
                        NVASpeechKit.this.speechKitListener.onCustomWordsAdded();
                    }
                    else {
                        NVASpeechKit.this.speechKitListener.onCustomWordsDeleted();
                    }
                }
                NVASpeechKit.this.pendingDataUploadCommand = null;
            }
            
            @Override
            public void onError(final DataUploadCommand dataUploadCommand, final SpeechError speechError) {
                MMLog.e("NVASpeechKit", "DataUploadCommand listener error. command:" + dataUploadCommand.toString() + " Error:" + speechError.getErrorDetail());
                this.notifyListener(dataUploadCommand);
            }
            
            @Override
            public void onResults(final DataUploadCommand dataUploadCommand, final DataUploadResult dataUploadResult) {
                MMLog.d("NVASpeechKit", "DataUploadCommand listener successful command:" + dataUploadCommand.toString() + " isVocRegenerated:" + dataUploadResult.isVocRegenerated() + " results:" + dataUploadResult.toString());
                this.notifyListener(dataUploadCommand);
            }
        };
        this.speechKitListener = new NVASpeechKit$Listener() {
            @Override
            public void onAudioLevelUpdate(final double n) {
                NVASpeechKit.this.audioLevelChange(n);
            }
            
            @Override
            public void onAudioSampleUpdate(final double n) {
                NVASpeechKit.this.backgroundAudioLevel(n);
            }
            
            @Override
            public void onCustomWordsAdded() {
            }
            
            @Override
            public void onCustomWordsDeleted() {
            }
            
            @Override
            public void onError() {
            }
            
            @Override
            public void onResults() {
                NVASpeechKit.this.recognitionResult(NVASpeechKit.this.resultsToJSON(NVASpeechKit.this.getResults()).toString());
            }
            
            @Override
            public void onStateChange(final NVASpeechKit$State nvaSpeechKit$State) {
                switch (nvaSpeechKit$State) {
                    default: {}
                    case ERROR: {
                        NVASpeechKit.this.voiceStateChangeError();
                    }
                    case PROCESSING: {
                        NVASpeechKit.this.voiceStateChangeProcessing();
                    }
                    case READY: {
                        NVASpeechKit.this.voiceStateChangeReady();
                    }
                    case RECORDING: {
                        NVASpeechKit.this.voiceStateChangeRecording();
                    }
                    case VOCALIZING: {
                        NVASpeechKit.this.voiceStateChangeVocalizing();
                    }
                }
            }
        };
        if (mmWebView != null) {
            this.webViewRef = new WeakReference((T)mmWebView);
            this.initInternalData(mmWebView.getContext().getApplicationContext());
        }
        this.state = NVASpeechKit$State.READY;
    }
    
    private String byte2Str(final byte[] array) {
        if (array == null) {
            return null;
        }
        final StringBuffer sb = new StringBuffer();
        for (int i = 0; i < array.length; ++i) {
            final int n = 0xFF & array[i];
            final String hexString = Integer.toHexString(n);
            if (n < 16) {
                sb.append('0');
            }
            sb.append(hexString);
        }
        return sb.toString();
    }
    
    private void cancelAudioLevelCallbacks() {
        if (this.speeckKitHandler != null) {
            this.speeckKitHandler.removeCallbacks(this.audioSampleCallback);
            this.speeckKitHandler.removeCallbacks(this.audioLevelCallback);
        }
    }
    
    private Recognizer$Listener createRecognizerListener() {
        return new Recognizer$Listener() {
            @Override
            public void onError(final Recognizer recognizer, final SpeechError speechError) {
                MMLog.d("NVASpeechKit", "Speech Kit Error code:" + speechError.getErrorCode() + " detail:" + speechError.getErrorDetail() + " suggestions:" + speechError.getSuggestion());
                NVASpeechKit.this.cancelAudioLevelCallbacks();
                NVASpeechKit.this.handleSpeechError(speechError);
                NVASpeechKit.this.skCurrentRecognizer = null;
                if (NVASpeechKit.this.sk != null) {
                    MMLog.d("NVASpeechKit", "Recognizer.Listener.onError: session id [" + NVASpeechKit.this.sk.getSessionId() + "]");
                }
            }
            
            @Override
            public void onRecordingBegin(final Recognizer recognizer) {
                MMLog.d("NVASpeechKit", "recording begins");
                NVASpeechKit.this._results = null;
                if (!NVASpeechKit.this.audioLevelTracker.isTrackingAudioSample()) {
                    NVASpeechKit.this.setState(NVASpeechKit$State.RECORDING);
                }
                NVASpeechKit.this.startProgress(recognizer);
                if (NVASpeechKit.this.audioLevelTracker.isTrackingAudioSample()) {
                    NVASpeechKit.this.speeckKitHandler.removeCallbacks(NVASpeechKit.this.audioSampleCallback);
                    NVASpeechKit.this.speeckKitHandler.postDelayed(NVASpeechKit.this.audioSampleCallback, 2000L);
                }
            }
            
            @Override
            public void onRecordingDone(final Recognizer recognizer) {
                MMLog.d("NVASpeechKit", "recording has ended");
                NVASpeechKit.this.cancelAudioLevelCallbacks();
                if (!NVASpeechKit.this.audioLevelTracker.isTrackingAudioSample()) {
                    NVASpeechKit.this.setState(NVASpeechKit$State.PROCESSING);
                }
                if (NVASpeechKit.this.sk != null) {
                    NVASpeechKit.this.nuance_transaction_session_id = NVASpeechKit.this.sk.getSessionId();
                }
            }
            
            @Override
            public void onResults(final Recognizer recognizer, final Recognition recognition) {
                MMLog.d("NVASpeechKit", "recording results returned.");
                NVASpeechKit.this.cancelAudioLevelCallbacks();
                if (!NVASpeechKit.this.audioLevelTracker.isTrackingAudioSample) {
                    NVASpeechKit.this.processResults(recognition.getDetailedResults());
                    if (NVASpeechKit.this.nuance_transaction_session_id != null) {
                        MMLog.d("NVASpeechKit", "Recognizer.Listener.onResults: session id [" + NVASpeechKit.this.nuance_transaction_session_id + "]");
                    }
                    NVASpeechKit.this.logEvent();
                    return;
                }
                NVASpeechKit.this._results = new NVASpeechKit$Result[0];
                NVASpeechKit.this.notifySpeechResults();
            }
        };
    }
    
    private Vocalizer$Listener createVocalizerListener() {
        return new Vocalizer$Listener() {
            @Override
            public void onSpeakingBegin(final Vocalizer vocalizer, final String s, final Object o) {
                MMLog.d("NVASpeechKit", "Vocalization begins. text=" + s);
                NVASpeechKit.this.setState(NVASpeechKit$State.VOCALIZING);
            }
            
            @Override
            public void onSpeakingDone(final Vocalizer vocalizer, final String s, final SpeechError speechError, final Object o) {
                MMLog.d("NVASpeechKit", "Vocalization has ended.");
                if (speechError != null) {
                    MMLog.e("NVASpeechKit", "Vocalizer error: " + speechError.getErrorDetail());
                    NVASpeechKit.this.handleSpeechError(speechError);
                    return;
                }
                NVASpeechKit.this.setState(NVASpeechKit$State.READY);
            }
        };
    }
    
    private String getAdId() {
        if (this.webViewRef != null) {
            final MMWebView mmWebView = (MMWebView)this.webViewRef.get();
            if (mmWebView != null) {
                return mmWebView.getAdId();
            }
        }
        return "DEFAULT_AD_ID";
    }
    
    private MMWebView getMMWebView() {
        if (this.webViewRef != null) {
            return (MMWebView)this.webViewRef.get();
        }
        return null;
    }
    
    private String getSpeechError(final SpeechError speechError) {
        if (speechError == null) {
            return "No Error given";
        }
        return "Speech Kit Error code:" + speechError.getErrorCode() + " detail:" + speechError.getErrorDetail() + " suggestions:" + speechError.getSuggestion();
    }
    
    private void handleSpeechError(final SpeechError speechError) {
        switch (speechError.getErrorCode()) {
            default: {
                if (this.speechKitListener != null) {
                    this.speechKitListener.onError();
                    this.setState(NVASpeechKit$State.ERROR);
                    this.voiceError(this.getSpeechError(speechError));
                }
            }
            case 2: {
                if (!this.audioLevelTracker.isTrackingAudioSample) {
                    this.setState(NVASpeechKit$State.PROCESSING);
                }
                this._results = new NVASpeechKit$Result[0];
                this.notifySpeechResults();
            }
            case 5: {
                this.setState(NVASpeechKit$State.READY);
                this.skCurrentRecognizer = null;
            }
        }
    }
    
    private void initInternalData(final Context context) {
        if (this.packageName == null) {
            this.packageName = context.getApplicationContext().getPackageName();
        }
    }
    
    private void notifySpeechResults() {
        if (this.speechKitListener != null && this._results != null) {
            if (this.audioLevelTracker.isTrackingAudioSample) {
                this.speechKitListener.onAudioSampleUpdate(this.audioLevelTracker.averageLevel);
                this.audioLevelTracker.reset();
            }
            else {
                this.speechKitListener.onResults();
            }
        }
        this.setState(NVASpeechKit$State.READY);
        this.skCurrentRecognizer = null;
    }
    
    private void processResults(final List list) {
        MMLog.d("NVASpeechKit", "processResults called.");
        this._results = new NVASpeechKit$Result[list.size()];
        final Iterator<DetailedResult> iterator = list.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            final DetailedResult detailedResult = iterator.next();
            final NVASpeechKit$Result[] results = this._results;
            final int n2 = n + 1;
            results[n] = new NVASpeechKit$Result(this, detailedResult.toString(), detailedResult.getConfidenceScore());
            n = n2;
        }
    }
    
    private void releaseWebView() {
        if (this.getMMWebView() != null) {
            this.webViewRef.clear();
        }
    }
    
    private JSONArray resultsToJSON(final NVASpeechKit$Result[] array) {
        final JSONArray jsonArray = new JSONArray();
        int i = 0;
        while (i < array.length) {
            final JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("score", (Object)new StringBuilder().append(array[i].getResultScore()).toString());
                jsonObject.put("result", (Object)array[i].getResultString());
                jsonArray.put((Object)jsonObject);
                ++i;
                continue;
            }
            catch (JSONException ex) {
                MMLog.e("NVASpeechKit", "JSON creation error.", (Throwable)ex);
                return null;
            }
            break;
        }
        return jsonArray;
    }
    
    private void setState(final NVASpeechKit$State state) {
        synchronized (this) {
            MMLog.d("NVASpeechKit", "recording results returned. state=" + state);
            final NVASpeechKit$State state2 = this.state;
            this.state = state;
            if (this.speechKitListener != null && this.state != state2) {
                this.speechKitListener.onStateChange(state);
            }
        }
    }
    
    private void startProgress(final Recognizer recognizer) {
        this.speeckKitHandler.removeCallbacks(this.audioLevelCallback);
        this.speeckKitHandler.postDelayed(this.audioLevelCallback, 50L);
    }
    
    private byte[] string2Byte(final String s) {
        if (s == null) {
            return null;
        }
        final byte[] array = new byte[s.length() / 2];
        for (int i = 0; i < array.length; ++i) {
            array[i] = (byte)Integer.parseInt(s.substring(i * 2, 2 + i * 2), 16);
        }
        return array;
    }
    
    void audioLevelChange(final double n) {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.audioLevelChange(" + n + ")");
        }
    }
    
    void backgroundAudioLevel(final double n) {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.backgroundAudioLevel(" + n + ")");
        }
    }
    
    public void cancelRecording() {
        if (this.skCurrentRecognizer != null) {
            MMLog.d("NVASpeechKit", "cancel RECORDING");
            this.skCurrentRecognizer.cancel();
            this.skCurrentRecognizer = null;
            this.setState(NVASpeechKit$State.READY);
        }
    }
    
    public boolean endRecording() {
        if (this.skCurrentRecognizer != null) {
            MMLog.d("NVASpeechKit", "end RECORDING");
            this.skCurrentRecognizer.stopRecording();
            this.skCurrentRecognizer = null;
            return true;
        }
        return false;
    }
    
    String getNuanceId() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: monitorenter   
        //     2: getstatic       com/millennialmedia/android/NVASpeechKit.nuanceIdCache:Ljava/lang/String;
        //     5: ifnull          16
        //     8: getstatic       com/millennialmedia/android/NVASpeechKit.nuanceIdCache:Ljava/lang/String;
        //    11: astore_3       
        //    12: aload_0        
        //    13: monitorexit    
        //    14: aload_3        
        //    15: areturn        
        //    16: aload_0        
        //    17: getfield        com/millennialmedia/android/NVASpeechKit.webViewRef:Ljava/lang/ref/WeakReference;
        //    20: ifnull          122
        //    23: aload_0        
        //    24: getfield        com/millennialmedia/android/NVASpeechKit.webViewRef:Ljava/lang/ref/WeakReference;
        //    27: invokevirtual   java/lang/ref/WeakReference.get:()Ljava/lang/Object;
        //    30: checkcast       Lcom/millennialmedia/android/MMWebView;
        //    33: astore          7
        //    35: aload           7
        //    37: ifnull          122
        //    40: aload           7
        //    42: invokevirtual   com/millennialmedia/android/MMWebView.getContext:()Landroid/content/Context;
        //    45: astore_2       
        //    46: goto            124
        //    49: aload_2        
        //    50: invokevirtual   android/content/Context.getContentResolver:()Landroid/content/ContentResolver;
        //    53: ldc_w           "android_id"
        //    56: invokestatic    android/provider/Settings$Secure.getString:(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;
        //    59: astore          4
        //    61: aload           4
        //    63: ifnonnull       71
        //    66: aconst_null    
        //    67: astore_3       
        //    68: goto            12
        //    71: ldc_w           "SHA1"
        //    74: invokestatic    java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
        //    77: aload           4
        //    79: invokevirtual   java/lang/String.getBytes:()[B
        //    82: invokevirtual   java/security/MessageDigest.digest:([B)[B
        //    85: invokestatic    com/millennialmedia/android/MMSDK.byteArrayToString:([B)Ljava/lang/String;
        //    88: astore          6
        //    90: aload           6
        //    92: astore_3       
        //    93: aload_3        
        //    94: putstatic       com/millennialmedia/android/NVASpeechKit.nuanceIdCache:Ljava/lang/String;
        //    97: goto            12
        //   100: astore_1       
        //   101: aload_0        
        //   102: monitorexit    
        //   103: aload_1        
        //   104: athrow         
        //   105: astore          5
        //   107: ldc             "NVASpeechKit"
        //   109: ldc_w           "Problem with nuanceid"
        //   112: aload           5
        //   114: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   117: aconst_null    
        //   118: astore_3       
        //   119: goto            12
        //   122: aconst_null    
        //   123: astore_2       
        //   124: aload_2        
        //   125: ifnonnull       49
        //   128: aconst_null    
        //   129: astore_3       
        //   130: goto            12
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  2      12     100    105    Any
        //  16     35     100    105    Any
        //  40     46     100    105    Any
        //  49     61     100    105    Any
        //  71     90     105    122    Ljava/lang/Exception;
        //  71     90     100    105    Any
        //  93     97     100    105    Any
        //  107    117    100    105    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0071:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public NVASpeechKit$Result[] getResults() {
        return this._results;
    }
    
    String getSessionId() {
        if (this.sk != null) {
            return this.sk.getSessionId();
        }
        return "";
    }
    
    public NVASpeechKit$State getState() {
        synchronized (this) {
            return this.state;
        }
    }
    
    public boolean initialize(final HandShake$NuanceCredentials credentials, final Context context) {
        MMLog.d("NVASpeechKit", "initialize called.");
        if (credentials == null || context == null) {
            return false;
        }
        this._credentials = credentials;
        while (true) {
            if (this.sk != null) {
                try {
                    this.sk.connect();
                    if (this.sk == null) {
                        final byte[] string2Byte = this.string2Byte(credentials.appKey);
                        MMLog.d("NVASpeechKit", credentials.toString());
                        this.sk = SpeechKit.initialize(context, "1.0", credentials.appID, credentials.server, credentials.port, false, string2Byte, SpeechKit$CmdSetType.NVC);
                        this.skVocalListener = this.createVocalizerListener();
                        this.skRecogListener = this.createRecognizerListener();
                        this.speeckKitHandler = new Handler(Looper.getMainLooper());
                        this.sk.connect();
                        this.setState(NVASpeechKit$State.READY);
                        return true;
                    }
                }
                catch (IllegalStateException ex) {
                    this.sk = null;
                    continue;
                }
                MMLog.d("NVASpeechKit", "Already initialized. Skipping.");
                return false;
            }
            continue;
        }
    }
    
    public void logEvent() {
        if (this.sk == null) {
            return;
        }
        final PdxValue$Dictionary pdxValue$Dictionary = new PdxValue$Dictionary();
        pdxValue$Dictionary.put("nva_ad_network_id", "MillenialMedia");
        pdxValue$Dictionary.put("nva_device_id", this.getNuanceId());
        pdxValue$Dictionary.put("nva_ad_publisher_id", this.packageName);
        String sessionID = "";
        if (this._credentials != null && !TextUtils.isEmpty((CharSequence)this._credentials.sessionID)) {
            sessionID = this._credentials.sessionID;
            pdxValue$Dictionary.put("nva_ad_session_id", this._credentials.sessionID);
        }
        final String adId = this.getAdId();
        if (!TextUtils.isEmpty((CharSequence)adId)) {
            pdxValue$Dictionary.put("nva_ad_id", adId);
        }
        if (this.nuance_transaction_session_id != null) {
            pdxValue$Dictionary.put("nva_nvc_session_id", this.nuance_transaction_session_id);
            final String nuance_transaction_session_id = this.nuance_transaction_session_id;
            this.nuance_transaction_session_id = null;
        }
        else {
            this.sk.getSessionId();
        }
        MMLog.d("NVASpeechKit", "Sending log revision command to server. sessionId[" + this.sk.getSessionId() + "] deviceId[" + this.getNuanceId() + "] adId[" + adId + "] mmSessionId[" + sessionID + "]");
        this.sk.createLogRevisionCmd("NVA_LOG_EVENT", pdxValue$Dictionary, this.sk.getSessionId(), this.commandListener, this.speeckKitHandler).start();
    }
    
    void recognitionResult(final String s) {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.recognitionResult(" + s + ")");
        }
    }
    
    public void release() {
        MMLog.d("NVASpeechKit", "release called.");
        this.stopActions();
        this.cancelAudioLevelCallbacks();
        if (this.sk != null) {
            this.sk.release();
            this.setState(NVASpeechKit$State.READY);
            this.sk = null;
        }
        this.pendingDataUploadCommand = null;
        this.releaseWebView();
    }
    
    public void setSpeechKitListener(final NVASpeechKit$Listener speechKitListener) {
        this.speechKitListener = speechKitListener;
    }
    
    public boolean startRecording(final String s) {
        MMLog.d("NVASpeechKit", "RECORDING INVOKED.");
        if (this.state == NVASpeechKit$State.READY && this.sk != null) {
            this.nuance_transaction_session_id = null;
            this.skCurrentRecognizer = this.sk.createRecognizer("dictation", 1, s, this.skRecogListener, this.speeckKitHandler);
            MMLog.d("NVASpeechKit", "START RECORDING");
            this.skCurrentRecognizer.start();
            return true;
        }
        return false;
    }
    
    public void startSampleRecording() {
        this.audioLevelTracker.startTrackingAudioSample();
        this.startRecording("en_US");
    }
    
    public void stopActions() {
        if (this.sk == null) {
            return;
        }
        try {
            this.sk.cancelCurrent();
        }
        catch (Exception ex) {
            MMLog.e("NVASpeechKit", "No speech kit to disconnect.", ex);
        }
    }
    
    public boolean textToSpeech(final String s, final String s2) {
        MMLog.d("NVASpeechKit", "TTS INVOKED.");
        if (this.state == NVASpeechKit$State.READY && this.sk != null) {
            (this.skCurrentVocalizer = this.sk.createVocalizerWithLanguage(s2, this.skVocalListener, this.speeckKitHandler)).speakString(s, this);
            return true;
        }
        return false;
    }
    
    public void updateCustomWords(final NVASpeechKit$CustomWordsOp pendingDataUploadCommandType, final String[] array) {
        if (this.sk == null) {
            return;
        }
        final DataBlock dataBlock = new DataBlock();
        final StringBuilder sb = new StringBuilder("Creating dataupload command and ");
        String s;
        if (pendingDataUploadCommandType == NVASpeechKit$CustomWordsOp.Add) {
            s = "adding";
        }
        else {
            s = "deleting";
        }
        MMLog.d("NVASpeechKit", sb.append(s).append(" words.").toString());
        final Data data = new Data("nva_custom_word_uploads", Data$DataType.CUSTOMWORDS);
        Action$ActionType action$ActionType;
        if (pendingDataUploadCommandType == NVASpeechKit$CustomWordsOp.Add) {
            action$ActionType = Action$ActionType.ADD;
        }
        else {
            action$ActionType = Action$ActionType.REMOVE;
        }
        final Action action = new Action(action$ActionType);
        for (final String s2 : array) {
            action.addWord(s2);
            MMLog.d("NVASpeechKit", "\tword: '" + s2 + "'");
        }
        data.addAction(action);
        dataBlock.addData(data);
        final int checksum = dataBlock.getChecksum();
        this.pendingDataUploadCommandType = pendingDataUploadCommandType;
        (this.pendingDataUploadCommand = this.sk.createDataUploadCmd(dataBlock, checksum, checksum, this.dataUploadListener, this.speeckKitHandler)).start();
    }
    
    void voiceError(final String s) {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceError('" + s + "')");
        }
    }
    
    void voiceStateChangeError() {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceStateChange('error')");
        }
    }
    
    void voiceStateChangeProcessing() {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceStateChange('processing')");
        }
    }
    
    void voiceStateChangeReady() {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceStateChange('ready')");
        }
    }
    
    void voiceStateChangeRecording() {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceStateChange('recording')");
        }
    }
    
    void voiceStateChangeVocalizing() {
        final MMWebView mmWebView = this.getMMWebView();
        if (mmWebView != null) {
            mmWebView.loadUrl("javascript:MMJS.sdk.voiceStateChange('vocalizing')");
        }
    }
}
