// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.os.Build;
import android.text.TextUtils;
import android.widget.RelativeLayout$LayoutParams;
import java.util.Iterator;
import android.content.Context;
import android.webkit.WebViewClient;
import java.util.concurrent.ConcurrentHashMap;
import java.lang.ref.WeakReference;
import java.util.Map;

class MMAdImplController implements AdCache$AdCacheTaskListener
{
    static final long NO_ID_RETURNED = -4L;
    private static final String TAG = "MMAdImplController";
    private static final Map saveableControllers;
    private static final Map weakUnsaveableAdRef;
    volatile WeakReference adImplRef;
    volatile long linkedAdImplId;
    MMAdImplController$RequestAdRunnable requestAdRunnable;
    volatile MMWebView webView;
    
    static {
        saveableControllers = new ConcurrentHashMap();
        weakUnsaveableAdRef = new ConcurrentHashMap();
    }
    
    private MMAdImplController(final MMAdImpl mmAdImpl) {
        MMLog.d("MMAdImplController", "**************** creating new controller.");
        this.adImplRef = new WeakReference((T)mmAdImpl);
        if (mmAdImpl.linkForExpansionId != 0L) {
            this.linkForExpansion(mmAdImpl);
            this.webView = getWebViewFromExistingAdImpl(mmAdImpl);
        }
        else if (!(mmAdImpl instanceof MMInterstitial$MMInterstitialAdImpl)) {
            if (mmAdImpl.isBanner()) {
                this.webView = new MMWebView(mmAdImpl.getContext().getApplicationContext(), mmAdImpl.internalId);
                this.webView.requiresPreAdSizeFix = true;
                return;
            }
            this.webView = new MMWebView(mmAdImpl.getContext(), mmAdImpl.internalId);
        }
    }
    
    static void assignAdViewController(final MMAdImpl mmAdImpl) {
        while (true) {
            synchronized (MMAdImplController.class) {
                if (mmAdImpl.controller != null) {
                    if (!MMAdImplController.saveableControllers.containsValue(mmAdImpl.controller)) {
                        if (mmAdImpl.isLifecycleObservable()) {
                            MMAdImplController.saveableControllers.put(mmAdImpl.internalId, mmAdImpl.controller);
                            if (MMAdImplController.weakUnsaveableAdRef.containsKey(mmAdImpl.internalId)) {
                                MMAdImplController.weakUnsaveableAdRef.remove(mmAdImpl.internalId);
                            }
                        }
                        else if (!MMAdImplController.weakUnsaveableAdRef.containsKey(mmAdImpl.internalId)) {
                            MMAdImplController.weakUnsaveableAdRef.put(mmAdImpl.internalId, new WeakReference<MMAdImplController>(mmAdImpl.controller));
                        }
                    }
                    MMLog.d("MMAdImplController", mmAdImpl + " - Has a controller");
                    return;
                }
            }
            MMLog.d("MMAdImplController", "*****************************************assignAdViewController for " + mmAdImpl);
            MMAdImplController controller = MMAdImplController.saveableControllers.get(mmAdImpl.internalId);
            if (controller == null) {
                final WeakReference<MMAdImplController> weakReference = MMAdImplController.weakUnsaveableAdRef.get(mmAdImpl.internalId);
                if (weakReference != null) {
                    controller = weakReference.get();
                }
                if (controller == null) {
                    controller = new MMAdImplController(mmAdImpl);
                    if (mmAdImpl.isLifecycleObservable()) {
                        MMAdImplController.saveableControllers.put(mmAdImpl.internalId, controller);
                    }
                    else {
                        MMAdImplController.weakUnsaveableAdRef.put(mmAdImpl.internalId, new WeakReference<MMAdImplController>(controller));
                    }
                }
            }
            mmAdImpl.controller = controller;
            controller.adImplRef = new WeakReference((T)mmAdImpl);
            if (controller.webView != null && !(mmAdImpl instanceof MMInterstitial$MMInterstitialAdImpl)) {
                setupWebView(mmAdImpl);
            }
        }
    }
    
    static boolean attachWebViewFromOverlay(final MMAdImpl mmAdImpl) {
        // monitorenter(MMAdImplController.class)
        boolean b = false;
        Label_0009: {
            if (mmAdImpl != null) {
                try {
                    MMLog.d("MMAdImplController", "attachWebViewFromOverlay with " + mmAdImpl);
                    if (mmAdImpl.controller != null && mmAdImpl.controller.webView != null) {
                        mmAdImpl.controller.webView.resetSpeechKit();
                    }
                    final MMAdImpl adImplWithId = getAdImplWithId(mmAdImpl.linkForExpansionId);
                    b = false;
                    if (adImplWithId != null) {
                        final MMAdImplController controller = adImplWithId.controller;
                        b = false;
                        if (controller != null) {
                            if (adImplWithId.controller.webView == null) {
                                final MMAdImplController controller2 = mmAdImpl.controller;
                                b = false;
                                if (controller2 == null) {
                                    break Label_0009;
                                }
                                final MMWebView webView = mmAdImpl.controller.webView;
                                b = false;
                                if (webView == null) {
                                    break Label_0009;
                                }
                                adImplWithId.controller.webView = mmAdImpl.controller.webView;
                                mmAdImpl.removeView(mmAdImpl.controller.webView);
                                mmAdImpl.controller.webView = null;
                            }
                            adImplWithId.controller.webView.setMraidDefault();
                            adImplWithId.controller.webView.setWebViewClient((WebViewClient)adImplWithId.getMMWebViewClient());
                            b = true;
                        }
                    }
                }
                finally {
                }
                // monitorexit(MMAdImplController.class)
            }
        }
        // monitorexit(MMAdImplController.class)
        return b;
    }
    
    static String controllersToString() {
        return MMAdImplController.weakUnsaveableAdRef.toString() + " SAVED:" + MMAdImplController.saveableControllers.toString();
    }
    
    static void destroyOtherInlineVideo(final Context context) {
        final Iterator<Map.Entry<K, MMAdImplController>> iterator = MMAdImplController.saveableControllers.entrySet().iterator();
        while (iterator.hasNext()) {
            final MMAdImplController mmAdImplController = iterator.next().getValue();
            if (mmAdImplController != null) {
                final MMAdImpl mmAdImpl = (MMAdImpl)mmAdImplController.adImplRef.get();
                if (mmAdImpl == null) {
                    continue;
                }
                final MMAd callingAd = mmAdImpl.getCallingAd();
                if (callingAd == null || !(callingAd instanceof MMLayout)) {
                    continue;
                }
                ((MMLayout)callingAd).removeVideo();
            }
        }
    }
    
    static MMAdImpl getAdImplWithId(final long n) {
        // monitorenter(MMAdImplController.class)
        MMAdImpl mmAdImpl;
        if (n == -4L) {
            mmAdImpl = null;
        }
        else {
            try {
                MMAdImplController mmAdImplController = MMAdImplController.saveableControllers.get(n);
                if (mmAdImplController == null) {
                    final WeakReference<MMAdImplController> weakReference = MMAdImplController.weakUnsaveableAdRef.get(n);
                    if (weakReference != null) {
                        mmAdImplController = (MMAdImplController)weakReference.get();
                    }
                }
                if (mmAdImplController != null) {
                    mmAdImpl = (MMAdImpl)mmAdImplController.adImplRef.get();
                }
                else {
                    mmAdImpl = null;
                }
            }
            finally {
            }
            // monitorexit(MMAdImplController.class)
        }
        // monitorexit(MMAdImplController.class)
        return mmAdImpl;
    }
    
    static MMWebView getWebViewFromExistingAdImpl(final MMAdImpl mmAdImpl) {
        synchronized (MMAdImplController.class) {
            MMLog.i("MMAdImplController", "getWebViewFromExistingLayout(" + mmAdImpl.internalId + " taking from " + mmAdImpl.linkForExpansionId + ")");
            final MMAdImpl adImplWithId = getAdImplWithId(mmAdImpl.linkForExpansionId);
            MMWebView webView = null;
            if (adImplWithId != null) {
                final MMAdImplController controller = adImplWithId.controller;
                webView = null;
                if (controller != null) {
                    webView = adImplWithId.controller.webView;
                    adImplWithId.controller.webView = null;
                }
            }
            return webView;
        }
    }
    
    private boolean isDownloadingCachedAd(final MMAdImpl mmAdImpl) {
        while (true) {
            boolean b = true;
            Label_0106: {
                synchronized (this) {
                    final Context context = mmAdImpl.getContext();
                    if (HandShake.sharedHandShake(context).isAdTypeDownloading(mmAdImpl.adType)) {
                        MMLog.i("MMAdImplController", "There is a download in progress. Defering call for new ad");
                        MMSDK$Event.requestFailed(mmAdImpl, new MMException(12));
                    }
                    else {
                        MMLog.d("MMAdImplController", "No download in progress.");
                        final CachedAd loadIncompleteDownload = AdCache.loadIncompleteDownload(context, mmAdImpl.getCachedName());
                        if (loadIncompleteDownload == null) {
                            break Label_0106;
                        }
                        MMLog.i("MMAdImplController", "Last ad wasn't fully downloaded. Download again.");
                        MMSDK$Event.fetchStartedCaching(mmAdImpl);
                        AdCache.startDownloadTask(context, mmAdImpl.getCachedName(), loadIncompleteDownload, this);
                    }
                    return b;
                }
            }
            MMLog.i("MMAdImplController", "No incomplete downloads.");
            b = false;
            return b;
        }
    }
    
    static void removeAdViewController(final MMAdImpl mmAdImpl) {
        while (true) {
            while (true) {
                Label_0284: {
                    synchronized (MMAdImplController.class) {
                        if (mmAdImpl.controller != null) {
                            if (!mmAdImpl.isLifecycleObservable()) {
                                break Label_0284;
                            }
                            MMAdImplController.saveableControllers.put(mmAdImpl.internalId, mmAdImpl.controller);
                            if (MMAdImplController.weakUnsaveableAdRef.get(mmAdImpl.internalId) != null) {
                                MMAdImplController.weakUnsaveableAdRef.remove(mmAdImpl.internalId);
                            }
                            MMLog.d("MMAdImplController", "****************RemoveAdviewcontroller - " + mmAdImpl);
                            if (mmAdImpl.isFinishing) {
                                MMAdImplController.saveableControllers.remove(mmAdImpl.internalId);
                                MMAdImplController.weakUnsaveableAdRef.remove(mmAdImpl.internalId);
                            }
                            final MMAdImplController controller = mmAdImpl.controller;
                            mmAdImpl.controller = null;
                            MMLog.d("MMAdImplController", "****************RemoveAdviewcontroller - controllers " + controllersToString());
                            if (controller.webView != null) {
                                MMLog.d("MMAdImplController", "****************RemoveAdviewcontroller - controller!=null, expanding=" + controller.webView.isExpanding);
                                mmAdImpl.removeView(controller.webView);
                                controller.webView.isExpanding = false;
                                if (mmAdImpl.isFinishing && mmAdImpl.linkForExpansionId == 0L) {
                                    controller.webView.loadData("<html></html>", "text/html", "UTF-8");
                                    controller.webView.resetSpeechKit();
                                    controller.webView = null;
                                }
                            }
                        }
                        return;
                    }
                }
                MMAdImplController.weakUnsaveableAdRef.put(mmAdImpl.internalId, new WeakReference<MMAdImplController>(mmAdImpl.controller));
                continue;
            }
        }
    }
    
    private void requestAdInternal(final MMAdImpl mmAdImpl) {
        if (mmAdImpl.apid == null) {
            final MMException ex = new MMException("MMAdView found with a null apid. New ad requests on this MMAdView are disabled until an apid has been assigned.", 1);
            MMLog.e("MMAdImplController", ex.getMessage());
            MMSDK$Event.requestFailed(mmAdImpl, ex);
        }
        else if (mmAdImpl.isBanner() || !this.isDownloadingCachedAd(mmAdImpl)) {
            synchronized (this) {
                if (this.requestAdRunnable != null) {
                    MMLog.i("MMAdImplController", MMException.getErrorCodeMessage(12));
                    MMSDK$Event.requestFailed(mmAdImpl, new MMException(12));
                    return;
                }
            }
            Utils$ThreadUtils.execute(this.requestAdRunnable = new MMAdImplController$RequestAdRunnable(this, null));
        }
        // monitorexit(this)
    }
    
    private static void setupWebView(final MMAdImpl mmAdImpl) {
        synchronized (MMAdImplController.class) {
            final MMAdImplController controller = mmAdImpl.controller;
            if (controller.webView != null) {
                controller.webView.setWebViewClient((WebViewClient)mmAdImpl.getMMWebViewClient());
                if (!controller.webView.isCurrentParent(mmAdImpl.internalId)) {
                    RelativeLayout$LayoutParams relativeLayout$LayoutParams;
                    if (mmAdImpl.isBanner()) {
                        relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-2, -2);
                        if (controller.webView.isMraidResized()) {
                            controller.webView.unresizeToDefault(mmAdImpl);
                        }
                    }
                    else {
                        relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-2, -1);
                    }
                    controller.webView.removeFromParent();
                    mmAdImpl.addView(controller.webView, relativeLayout$LayoutParams);
                }
            }
        }
    }
    
    int checkReason(final MMAdImpl mmAdImpl, final CachedAd cachedAd) {
        if (cachedAd.isExpired()) {
            MMLog.d("MMAdImplController", String.format("%s is expired.", cachedAd.getId()));
            return 21;
        }
        if (!cachedAd.isOnDisk(mmAdImpl.getContext())) {
            MMLog.d("MMAdImplController", String.format("%s is not on disk.", cachedAd.getId()));
            return 22;
        }
        if (!HandShake.sharedHandShake(mmAdImpl.getContext()).canDisplayCachedAd(mmAdImpl.adType, cachedAd.deferredViewStart)) {
            MMLog.d("MMAdImplController", String.format("%s cannot be shown at this time.", cachedAd.getId()));
            return 24;
        }
        return 100;
    }
    
    int display(final MMAdImpl mmAdImpl) {
        final CachedAd loadNextCachedAd = AdCache.loadNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName());
        if (loadNextCachedAd == null) {
            return 20;
        }
        if (loadNextCachedAd.canShow(mmAdImpl.getContext(), mmAdImpl, true)) {
            MMSDK$Event.displayStarted(mmAdImpl);
            AdCache.setNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName(), null);
            loadNextCachedAd.show(mmAdImpl.getContext(), mmAdImpl.internalId);
            HandShake.sharedHandShake(mmAdImpl.getContext()).updateLastVideoViewedTime(mmAdImpl.getContext(), mmAdImpl.adType);
            return 0;
        }
        return this.checkReason(mmAdImpl, loadNextCachedAd);
    }
    
    @Override
    public void downloadCompleted(final CachedAd cachedAd, final boolean b) {
        final MMAdImpl mmAdImpl = (MMAdImpl)this.adImplRef.get();
        if (mmAdImpl == null) {
            MMLog.e("MMAdImplController", MMException.getErrorCodeMessage(25));
            return;
        }
        if (b) {
            AdCache.setNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName(), cachedAd.getId());
        }
        if (b) {
            MMSDK$Event.requestCompleted(mmAdImpl);
            return;
        }
        MMSDK$Event.requestFailed(mmAdImpl, new MMException(15));
    }
    
    @Override
    public void downloadStart(final CachedAd cachedAd) {
    }
    
    public String getDefaultUserAgentString(final Context context) {
        return System.getProperty("http.agent");
    }
    
    HttpMMHeaders getLastHeaders() {
        if (this.webView == null) {
            return null;
        }
        return this.webView.getLastHeaders();
    }
    
    String getUserAgent() {
        final MMAdImpl mmAdImpl = (MMAdImpl)this.adImplRef.get();
        while (true) {
            Label_0043: {
                if (mmAdImpl == null) {
                    break Label_0043;
                }
                final Context context = mmAdImpl.getContext();
                if (context == null) {
                    break Label_0043;
                }
                String s = this.getDefaultUserAgentString(context);
                if (TextUtils.isEmpty((CharSequence)s)) {
                    s = Build.MODEL;
                }
                return s;
            }
            String s = null;
            continue;
        }
    }
    
    int isAdAvailable(final MMAdImpl mmAdImpl) {
        final CachedAd loadNextCachedAd = AdCache.loadNextCachedAd(mmAdImpl.getContext(), mmAdImpl.getCachedName());
        if (loadNextCachedAd == null) {
            MMLog.i("MMAdImplController", "No next ad.");
            return 20;
        }
        if (loadNextCachedAd.canShow(mmAdImpl.getContext(), mmAdImpl, true)) {
            return 0;
        }
        return this.checkReason(mmAdImpl, loadNextCachedAd);
    }
    
    void linkForExpansion(final MMAdImpl mmAdImpl) {
        final MMAdImpl adImplWithId = getAdImplWithId(mmAdImpl.linkForExpansionId);
        if (adImplWithId != null) {
            this.linkedAdImplId = mmAdImpl.linkForExpansionId;
            adImplWithId.controller.linkedAdImplId = mmAdImpl.internalId;
            adImplWithId.linkForExpansionId = mmAdImpl.internalId;
        }
    }
    
    void loadUrl(final String s) {
        if (!TextUtils.isEmpty((CharSequence)s) && this.webView != null) {
            this.webView.loadUrl(s);
        }
    }
    
    void loadWebContent(final String s, final String s2) {
        final MMAdImpl mmAdImpl = (MMAdImpl)this.adImplRef.get();
        if (mmAdImpl != null && this.webView != null) {
            this.webView.setWebViewContent(s, s2, mmAdImpl);
        }
    }
    
    void requestAd() {
        final MMAdImpl mmAdImpl = (MMAdImpl)this.adImplRef.get();
        if (mmAdImpl == null) {
            MMLog.e("MMAdImplController", MMException.getErrorCodeMessage(25));
            MMSDK$Event.requestFailed(mmAdImpl, new MMException(25));
            return;
        }
        if (!mmAdImpl.isRefreshable()) {
            MMSDK$Event.requestFailed(mmAdImpl, new MMException(16));
            return;
        }
        if (!MMSDK.isUiThread()) {
            MMLog.e("MMAdImplController", MMException.getErrorCodeMessage(3));
            MMSDK$Event.requestFailed(mmAdImpl, new MMException(3));
            return;
        }
        if (HandShake.sharedHandShake(mmAdImpl.getContext()).kill) {
            MMLog.i("MMAdImplController", "The server is no longer allowing ads.");
            MMSDK$Event.requestFailed(mmAdImpl, new MMException(16));
            return;
        }
        try {
            MMLog.d("MMAdImplController", "adLayout - requestAd");
            this.requestAdInternal(mmAdImpl);
        }
        catch (Exception ex) {
            MMLog.e("MMAdImplController", "There was an exception with the ad request. ", ex);
            ex.printStackTrace();
        }
    }
    
    void setLastHeaders(final HttpMMHeaders lastHeaders) {
        if (this.webView != null) {
            this.webView.setLastHeaders(lastHeaders);
        }
    }
    
    void setWebViewContent(final String s, final String s2) {
        if (this.webView != null) {
            this.webView.setWebViewContent(s, s2, (MMAdImpl)this.adImplRef.get());
        }
    }
    
    @Override
    public String toString() {
        final MMAdImpl mmAdImpl = (MMAdImpl)this.adImplRef.get();
        final StringBuilder sb = new StringBuilder();
        if (mmAdImpl != null) {
            sb.append(mmAdImpl + "-LinkInC=" + this.linkedAdImplId);
        }
        return sb.toString() + " w/" + this.webView;
    }
    
    void unresizeToDefault() {
        if (this.webView != null) {
            this.webView.unresizeToDefault((MMAdImpl)this.adImplRef.get());
        }
    }
}
