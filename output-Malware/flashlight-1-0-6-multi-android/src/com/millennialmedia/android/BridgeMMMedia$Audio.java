// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.media.AudioManager;
import java.io.File;
import android.net.Uri;
import android.content.Context;
import java.util.Iterator;
import android.media.SoundPool;
import android.media.MediaPlayer;
import java.lang.ref.WeakReference;
import java.util.concurrent.CopyOnWriteArrayList;
import android.media.MediaPlayer$OnCompletionListener;

class BridgeMMMedia$Audio implements MediaPlayer$OnCompletionListener
{
    private static final int MAX_SOUNDS = 4;
    private static BridgeMMMedia$Audio sharedInstance;
    private BridgeMMMedia$Audio$OnLoadCompleteListener completionListener;
    CopyOnWriteArrayList completionListeners;
    private WeakReference contextRef;
    private MediaPlayer mediaPlayer;
    CopyOnWriteArrayList periodicListeners;
    Runnable periodicUpdater;
    private SoundPool soundPool;
    
    private BridgeMMMedia$Audio() {
        this.periodicUpdater = new Runnable() {
            @Override
            public void run() {
                if (BridgeMMMedia$Audio.this.mediaPlayer != null) {
                    if (BridgeMMMedia$Audio.this.mediaPlayer.isPlaying()) {
                        final int currentPosition = BridgeMMMedia$Audio.this.mediaPlayer.getCurrentPosition();
                        if (BridgeMMMedia$Audio.this.periodicListeners != null) {
                            final Iterator<BridgeMMMedia$Audio$PeriodicListener> iterator = (Iterator<BridgeMMMedia$Audio$PeriodicListener>)BridgeMMMedia$Audio.this.periodicListeners.iterator();
                            while (iterator.hasNext()) {
                                iterator.next().onUpdate(currentPosition);
                            }
                        }
                    }
                    MMSDK.runOnUiThreadDelayed(this, 500L);
                }
            }
        };
    }
    
    private BridgeMMMedia$Audio(final Context context) {
        this.periodicUpdater = new Runnable() {
            @Override
            public void run() {
                if (BridgeMMMedia$Audio.this.mediaPlayer != null) {
                    if (BridgeMMMedia$Audio.this.mediaPlayer.isPlaying()) {
                        final int currentPosition = BridgeMMMedia$Audio.this.mediaPlayer.getCurrentPosition();
                        if (BridgeMMMedia$Audio.this.periodicListeners != null) {
                            final Iterator<BridgeMMMedia$Audio$PeriodicListener> iterator = (Iterator<BridgeMMMedia$Audio$PeriodicListener>)BridgeMMMedia$Audio.this.periodicListeners.iterator();
                            while (iterator.hasNext()) {
                                iterator.next().onUpdate(currentPosition);
                            }
                        }
                    }
                    MMSDK.runOnUiThreadDelayed(this, 500L);
                }
            }
        };
        this.contextRef = new WeakReference((T)context.getApplicationContext());
    }
    
    static BridgeMMMedia$Audio sharedAudio(final Context context) {
        synchronized (BridgeMMMedia$Audio.class) {
            if (BridgeMMMedia$Audio.sharedInstance == null) {
                BridgeMMMedia$Audio.sharedInstance = new BridgeMMMedia$Audio(context);
            }
            return BridgeMMMedia$Audio.sharedInstance;
        }
    }
    
    boolean addCompletionListener(final MediaPlayer$OnCompletionListener mediaPlayer$OnCompletionListener) {
        if (this.completionListeners == null) {
            this.completionListeners = new CopyOnWriteArrayList();
        }
        return !this.completionListeners.contains(mediaPlayer$OnCompletionListener) && this.completionListeners.add(mediaPlayer$OnCompletionListener);
    }
    
    boolean addPeriodicListener(final BridgeMMMedia$Audio$PeriodicListener bridgeMMMedia$Audio$PeriodicListener) {
        if (this.periodicListeners == null) {
            this.periodicListeners = new CopyOnWriteArrayList();
        }
        return !this.periodicListeners.contains(bridgeMMMedia$Audio$PeriodicListener) && this.periodicListeners.add(bridgeMMMedia$Audio$PeriodicListener);
    }
    
    boolean isPlaying() {
        synchronized (this) {
            return this.mediaPlayer != null && this.mediaPlayer.isPlaying();
        }
    }
    
    public void onCompletion(final MediaPlayer mediaPlayer) {
        synchronized (this) {
            if (this.completionListeners != null) {
                final Iterator<MediaPlayer$OnCompletionListener> iterator = this.completionListeners.iterator();
                while (iterator.hasNext()) {
                    iterator.next().onCompletion(this.mediaPlayer);
                }
            }
        }
        if (this.mediaPlayer != null) {
            this.mediaPlayer.release();
            this.mediaPlayer = null;
        }
    }
    // monitorexit(this)
    
    MMJSResponse playAudio(final Uri uri, final boolean looping) {
        synchronized (this) {
            try {
                if (this.mediaPlayer != null) {
                    this.mediaPlayer.release();
                    this.mediaPlayer = null;
                }
                (this.mediaPlayer = MediaPlayer.create((Context)this.contextRef.get(), uri)).setLooping(looping);
                this.mediaPlayer.start();
                this.mediaPlayer.setOnCompletionListener((MediaPlayer$OnCompletionListener)this);
                MMSDK.runOnUiThread(this.periodicUpdater);
                return MMJSResponse.responseWithSuccess("Audio playback started");
            }
            catch (Exception ex) {
                MMLog.e("BridgeMMMedia", "Exception in playAudio method", ex.getCause());
                return MMJSResponse.responseWithSuccess("Audio playback started");
            }
        }
    }
    
    MMJSResponse playSound(final File file) {
        // monitorenter(this)
        while (true) {
            try {
                try {
                    if (this.soundPool == null) {
                        this.soundPool = new SoundPool(4, 3, 0);
                        this.completionListener = new BridgeMMMedia$Audio$OnLoadCompleteListener(this.soundPool) {
                            public void onLoadComplete(final SoundPool soundPool, final int n, final int n2) {
                                // monitorenter(this)
                                if (soundPool == null) {
                                    return;
                                }
                                try {
                                    final Context context = (Context)BridgeMMMedia$Audio.this.contextRef.get();
                                    if (context != null) {
                                        final AudioManager audioManager = (AudioManager)context.getSystemService("audio");
                                        final float n3 = (0.0f + audioManager.getStreamVolume(3)) / audioManager.getStreamMaxVolume(3);
                                        soundPool.play(n, n3, n3, 1, 0, 1.0f);
                                    }
                                }
                                finally {
                                }
                                // monitorexit(this)
                            }
                        };
                    }
                    this.completionListener.testSample(this.soundPool.load(file.getAbsolutePath(), 1));
                    return MMJSResponse.responseWithSuccess("Sound playback started");
                }
                finally {
                }
                // monitorexit(this)
            }
            catch (Exception ex) {
                continue;
            }
            break;
        }
    }
    
    boolean removeCompletionListener(final MediaPlayer$OnCompletionListener mediaPlayer$OnCompletionListener) {
        return this.completionListeners != null && this.completionListeners.remove(mediaPlayer$OnCompletionListener);
    }
    
    boolean removePeriodicListener(final BridgeMMMedia$Audio$PeriodicListener bridgeMMMedia$Audio$PeriodicListener) {
        return this.periodicListeners != null && this.periodicListeners.remove(bridgeMMMedia$Audio$PeriodicListener);
    }
    
    MMJSResponse stop() {
        synchronized (this) {
            if (this.mediaPlayer != null) {
                this.onCompletion(this.mediaPlayer);
            }
            if (this.soundPool != null) {
                this.soundPool.release();
                this.soundPool = null;
            }
            if (this.completionListener != null) {
                this.completionListener.release();
                this.completionListener = null;
            }
            return MMJSResponse.responseWithSuccess("Audio stopped");
        }
    }
}
