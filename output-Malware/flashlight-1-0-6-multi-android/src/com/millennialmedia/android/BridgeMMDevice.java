// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.net.URLEncoder;
import android.os.Build;
import android.view.WindowManager;
import android.content.Intent;
import android.net.Uri;
import java.util.Map;
import org.json.JSONObject;
import android.content.Context;

class BridgeMMDevice extends MMJSObject
{
    private static final String CALL = "call";
    private static final String COMPOSE_EMAIL = "composeEmail";
    private static final String COMPOSE_SMS = "composeSms";
    private static final String ENABLE_HARDWARE_ACCEL = "enableHardwareAcceleration";
    private static final String GET_AVAIL_SCHEMES = "getAvailableSchemes";
    private static final String GET_INFO = "getInfo";
    private static final String GET_LOCATION = "getLocation";
    private static final String GET_ORIENTATION = "getOrientation";
    private static final String IS_SCHEME_AVAIL = "isSchemeAvailable";
    private static final String OPEN_APP_STORE = "openAppStore";
    private static final String OPEN_URL = "openUrl";
    private static final String SET_MMDID = "setMMDID";
    private static final String SHOW_MAP = "showMap";
    private static final String TAG = "BridgeMMDevice";
    private static final String TWEET = "tweet";
    
    static JSONObject getDeviceInfo(final Context p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Lorg/json/JSONObject;
        //     3: dup            
        //     4: invokespecial   org/json/JSONObject.<init>:()V
        //     7: astore_1       
        //     8: aload_1        
        //     9: ldc             "sdkVersion"
        //    11: ldc             "5.3.0-c3980670.a"
        //    13: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    16: pop            
        //    17: aload_1        
        //    18: ldc             "connection"
        //    20: aload_0        
        //    21: invokestatic    com/millennialmedia/android/MMSDK.getConnectionType:(Landroid/content/Context;)Ljava/lang/String;
        //    24: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    27: pop            
        //    28: aload_1        
        //    29: ldc             "platform"
        //    31: ldc             "Android"
        //    33: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    36: pop            
        //    37: getstatic       android/os/Build$VERSION.RELEASE:Ljava/lang/String;
        //    40: ifnull          53
        //    43: aload_1        
        //    44: ldc             "version"
        //    46: getstatic       android/os/Build$VERSION.RELEASE:Ljava/lang/String;
        //    49: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    52: pop            
        //    53: getstatic       android/os/Build.MODEL:Ljava/lang/String;
        //    56: ifnull          69
        //    59: aload_1        
        //    60: ldc             "device"
        //    62: getstatic       android/os/Build.MODEL:Ljava/lang/String;
        //    65: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    68: pop            
        //    69: aload_1        
        //    70: ldc             "mmdid"
        //    72: aload_0        
        //    73: invokestatic    com/millennialmedia/android/MMSDK.getMMdid:(Landroid/content/Context;)Ljava/lang/String;
        //    76: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    79: pop            
        //    80: aload_0        
        //    81: invokevirtual   android/content/Context.getResources:()Landroid/content/res/Resources;
        //    84: invokevirtual   android/content/res/Resources.getDisplayMetrics:()Landroid/util/DisplayMetrics;
        //    87: astore          7
        //    89: aload_1        
        //    90: ldc             "density"
        //    92: new             Ljava/lang/Float;
        //    95: dup            
        //    96: aload           7
        //    98: getfield        android/util/DisplayMetrics.density:F
        //   101: invokespecial   java/lang/Float.<init>:(F)V
        //   104: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   107: pop            
        //   108: aload_1        
        //   109: ldc             "height"
        //   111: new             Ljava/lang/Integer;
        //   114: dup            
        //   115: aload           7
        //   117: getfield        android/util/DisplayMetrics.heightPixels:I
        //   120: invokespecial   java/lang/Integer.<init>:(I)V
        //   123: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   126: pop            
        //   127: aload_1        
        //   128: ldc             "width"
        //   130: new             Ljava/lang/Integer;
        //   133: dup            
        //   134: aload           7
        //   136: getfield        android/util/DisplayMetrics.widthPixels:I
        //   139: invokespecial   java/lang/Integer.<init>:(I)V
        //   142: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   145: pop            
        //   146: invokestatic    java/util/Locale.getDefault:()Ljava/util/Locale;
        //   149: astore          11
        //   151: aload           11
        //   153: ifnull          180
        //   156: aload_1        
        //   157: ldc             "language"
        //   159: aload           11
        //   161: invokevirtual   java/util/Locale.getLanguage:()Ljava/lang/String;
        //   164: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   167: pop            
        //   168: aload_1        
        //   169: ldc             "country"
        //   171: aload           11
        //   173: invokevirtual   java/util/Locale.getCountry:()Ljava/lang/String;
        //   176: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   179: pop            
        //   180: new             Lorg/json/JSONObject;
        //   183: dup            
        //   184: invokespecial   org/json/JSONObject.<init>:()V
        //   187: astore          14
        //   189: aload           14
        //   191: ldc             "name"
        //   193: ldc             "MAC-ID"
        //   195: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   198: pop            
        //   199: aload           14
        //   201: ldc             "path"
        //   203: ldc             "/"
        //   205: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   208: pop            
        //   209: aload           14
        //   211: ldc             "value"
        //   213: getstatic       com/millennialmedia/android/MMSDK.macId:Ljava/lang/String;
        //   216: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   219: pop            
        //   220: new             Lorg/json/JSONArray;
        //   223: dup            
        //   224: invokespecial   org/json/JSONArray.<init>:()V
        //   227: astore          18
        //   229: aload           18
        //   231: aload           14
        //   233: invokevirtual   org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;
        //   236: pop            
        //   237: aload_1        
        //   238: ldc             "cookies"
        //   240: aload           18
        //   242: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   245: pop            
        //   246: aload_1        
        //   247: areturn        
        //   248: astore          23
        //   250: aconst_null    
        //   251: astore_1       
        //   252: aload           23
        //   254: astore_2       
        //   255: ldc             "BridgeMMDevice"
        //   257: ldc             "Bridge getting deviceInfo json exception: "
        //   259: aload_2        
        //   260: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   263: aload_1        
        //   264: areturn        
        //   265: astore_2       
        //   266: goto            255
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                    
        //  -----  -----  -----  -----  ------------------------
        //  0      8      248    255    Lorg/json/JSONException;
        //  8      53     265    269    Lorg/json/JSONException;
        //  53     69     265    269    Lorg/json/JSONException;
        //  69     151    265    269    Lorg/json/JSONException;
        //  156    180    265    269    Lorg/json/JSONException;
        //  180    246    265    269    Lorg/json/JSONException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0053:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public MMJSResponse call(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("number");
        if (context != null && s != null) {
            MMLog.d("BridgeMMDevice", String.format("Dialing Phone: %s", s));
            Intent intent;
            if (Boolean.parseBoolean(map.get("dial")) && context.checkCallingOrSelfPermission("android.permission.CALL_PHONE") == 0) {
                intent = new Intent("android.intent.action.CALL", Uri.parse("tel:" + s));
            }
            else {
                intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + s));
            }
            Utils$IntentUtils.startActivity(context, intent);
            MMSDK$Event.intentStarted(context, "tel", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    public MMJSResponse composeEmail(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("recipient");
        final String s2 = map.get("subject");
        final String s3 = map.get("message");
        if (context != null) {
            MMLog.d("BridgeMMDevice", "Creating email");
            final Intent intent = new Intent("android.intent.action.SEND");
            intent.setType("plain/text");
            if (s != null) {
                intent.putExtra("android.intent.extra.EMAIL", s.split(","));
            }
            if (s2 != null) {
                intent.putExtra("android.intent.extra.SUBJECT", s2);
            }
            if (s3 != null) {
                intent.putExtra("android.intent.extra.TEXT", s3);
            }
            Utils$IntentUtils.startActivity(context, intent);
            MMSDK$Event.intentStarted(context, "email", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    public MMJSResponse composeSms(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("number");
        final String s2 = map.get("message");
        if (context != null && s != null) {
            MMLog.d("BridgeMMDevice", String.format("Creating sms: %s", s));
            final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse("sms:" + s));
            if (s2 != null) {
                intent.putExtra("sms_body", s2);
            }
            Utils$IntentUtils.startActivity(context, intent);
            MMSDK$Event.intentStarted(context, "sms", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            return MMJSResponse.responseWithSuccess("SMS Sent");
        }
        return null;
    }
    
    public MMJSResponse enableHardwareAcceleration(final Map map) {
        MMLog.d("BridgeMMDevice", "hardware accel call" + map);
        final String s = map.get("enabled");
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null && mmWebView != null) {
            if (Boolean.parseBoolean(s)) {
                mmWebView.enableHardwareAcceleration();
            }
            else {
                mmWebView.disableAllAcceleration();
            }
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map mmdid) {
        MMJSResponse call;
        if ("call".equals(s)) {
            call = this.call(mmdid);
        }
        else {
            if ("composeEmail".equals(s)) {
                return this.composeEmail(mmdid);
            }
            if ("composeSms".equals(s)) {
                return this.composeSms(mmdid);
            }
            if ("enableHardwareAcceleration".equals(s)) {
                return this.enableHardwareAcceleration(mmdid);
            }
            if ("getAvailableSchemes".equals(s)) {
                return this.getAvailableSchemes(mmdid);
            }
            if ("getInfo".equals(s)) {
                return this.getInfo(mmdid);
            }
            if ("getLocation".equals(s)) {
                return this.getLocation(mmdid);
            }
            if ("getOrientation".equals(s)) {
                return this.getOrientation(mmdid);
            }
            if ("isSchemeAvailable".equals(s)) {
                return this.isSchemeAvailable(mmdid);
            }
            if ("openAppStore".equals(s)) {
                return this.openAppStore(mmdid);
            }
            if ("openUrl".equals(s)) {
                return this.openUrl(mmdid);
            }
            if ("setMMDID".equals(s)) {
                return this.setMMDID(mmdid);
            }
            if ("showMap".equals(s)) {
                return this.showMap(mmdid);
            }
            final boolean equals = "tweet".equals(s);
            call = null;
            if (equals) {
                return this.tweet(mmdid);
            }
        }
        return call;
    }
    
    public MMJSResponse getAvailableSchemes(final Map map) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final HandShake sharedHandShake = HandShake.sharedHandShake(context);
            final MMJSResponse mmjsResponse = new MMJSResponse();
            mmjsResponse.result = 1;
            mmjsResponse.response = sharedHandShake.getSchemesJSONArray(context);
            return mmjsResponse;
        }
        return null;
    }
    
    public MMJSResponse getInfo(final Map map) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final MMJSResponse mmjsResponse = new MMJSResponse();
            mmjsResponse.result = 1;
            mmjsResponse.response = getDeviceInfo(context);
            return mmjsResponse;
        }
        return null;
    }
    
    public MMJSResponse getLocation(final Map p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //     3: ifnull          229
        //     6: new             Lorg/json/JSONObject;
        //     9: dup            
        //    10: invokespecial   org/json/JSONObject.<init>:()V
        //    13: astore_2       
        //    14: aload_2        
        //    15: ldc_w           "lat"
        //    18: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    21: invokevirtual   android/location/Location.getLatitude:()D
        //    24: invokestatic    java/lang/Double.toString:(D)Ljava/lang/String;
        //    27: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    30: pop            
        //    31: aload_2        
        //    32: ldc_w           "long"
        //    35: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    38: invokevirtual   android/location/Location.getLongitude:()D
        //    41: invokestatic    java/lang/Double.toString:(D)Ljava/lang/String;
        //    44: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    47: pop            
        //    48: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    51: invokevirtual   android/location/Location.hasAccuracy:()Z
        //    54: ifeq            91
        //    57: aload_2        
        //    58: ldc_w           "ha"
        //    61: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    64: invokevirtual   android/location/Location.getAccuracy:()F
        //    67: invokestatic    java/lang/Float.toString:(F)Ljava/lang/String;
        //    70: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    73: pop            
        //    74: aload_2        
        //    75: ldc_w           "va"
        //    78: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    81: invokevirtual   android/location/Location.getAccuracy:()F
        //    84: invokestatic    java/lang/Float.toString:(F)Ljava/lang/String;
        //    87: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    90: pop            
        //    91: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //    94: invokevirtual   android/location/Location.hasSpeed:()Z
        //    97: ifeq            117
        //   100: aload_2        
        //   101: ldc_w           "spd"
        //   104: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   107: invokevirtual   android/location/Location.getSpeed:()F
        //   110: invokestatic    java/lang/Float.toString:(F)Ljava/lang/String;
        //   113: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   116: pop            
        //   117: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   120: invokevirtual   android/location/Location.hasBearing:()Z
        //   123: ifeq            143
        //   126: aload_2        
        //   127: ldc_w           "brg"
        //   130: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   133: invokevirtual   android/location/Location.getBearing:()F
        //   136: invokestatic    java/lang/Float.toString:(F)Ljava/lang/String;
        //   139: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   142: pop            
        //   143: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   146: invokevirtual   android/location/Location.hasAltitude:()Z
        //   149: ifeq            169
        //   152: aload_2        
        //   153: ldc_w           "alt"
        //   156: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   159: invokevirtual   android/location/Location.getAltitude:()D
        //   162: invokestatic    java/lang/Double.toString:(D)Ljava/lang/String;
        //   165: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   168: pop            
        //   169: aload_2        
        //   170: ldc_w           "tslr"
        //   173: getstatic       com/millennialmedia/android/MMRequest.location:Landroid/location/Location;
        //   176: invokevirtual   android/location/Location.getTime:()J
        //   179: invokestatic    java/lang/Long.toString:(J)Ljava/lang/String;
        //   182: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   185: pop            
        //   186: new             Lcom/millennialmedia/android/MMJSResponse;
        //   189: dup            
        //   190: invokespecial   com/millennialmedia/android/MMJSResponse.<init>:()V
        //   193: astore          4
        //   195: aload           4
        //   197: iconst_1       
        //   198: putfield        com/millennialmedia/android/MMJSResponse.result:I
        //   201: aload           4
        //   203: aload_2        
        //   204: putfield        com/millennialmedia/android/MMJSResponse.response:Ljava/lang/Object;
        //   207: aload           4
        //   209: areturn        
        //   210: astore          13
        //   212: aconst_null    
        //   213: astore_2       
        //   214: aload           13
        //   216: astore_3       
        //   217: ldc             "BridgeMMDevice"
        //   219: ldc_w           "Bridge getLocation json exception: "
        //   222: aload_3        
        //   223: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   226: goto            186
        //   229: ldc_w           "location object has not been set"
        //   232: invokestatic    com/millennialmedia/android/MMJSResponse.responseWithError:(Ljava/lang/String;)Lcom/millennialmedia/android/MMJSResponse;
        //   235: areturn        
        //   236: astore_3       
        //   237: goto            217
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                    
        //  -----  -----  -----  -----  ------------------------
        //  6      14     210    217    Lorg/json/JSONException;
        //  14     91     236    240    Lorg/json/JSONException;
        //  91     117    236    240    Lorg/json/JSONException;
        //  117    143    236    240    Lorg/json/JSONException;
        //  143    169    236    240    Lorg/json/JSONException;
        //  169    186    236    240    Lorg/json/JSONException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0091:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public MMJSResponse getOrientation(final Map map) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final int orientation = context.getResources().getConfiguration().orientation;
            int orientation2;
            if (orientation == 0) {
                orientation2 = ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getOrientation();
            }
            else {
                orientation2 = orientation;
            }
            final MMJSResponse mmjsResponse = new MMJSResponse();
            mmjsResponse.result = 1;
            switch (orientation2) {
                default: {
                    mmjsResponse.response = "portrait";
                    break;
                }
                case 2: {
                    mmjsResponse.response = "landscape";
                    break;
                }
            }
            return mmjsResponse;
        }
        return null;
    }
    
    public MMJSResponse isSchemeAvailable(final Map map) {
        final String s = map.get("scheme");
        String string;
        if (!s.contains(":")) {
            string = s + ":";
        }
        else {
            string = s;
        }
        final Context context = (Context)this.contextRef.get();
        if (string != null && context != null && context.getPackageManager().queryIntentActivities(new Intent("android.intent.action.VIEW", Uri.parse(string)), 65536).size() > 0) {
            return MMJSResponse.responseWithSuccess(string);
        }
        return MMJSResponse.responseWithError(string);
    }
    
    public MMJSResponse openAppStore(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("appId");
        final String s2 = map.get("referrer");
        if (context != null && s != null) {
            MMLog.d("BridgeMMDevice", String.format("Opening marketplace: %s", s));
            final Intent intent = new Intent("android.intent.action.VIEW");
            if (Build.MANUFACTURER.equals("Amazon")) {
                intent.setData(Uri.parse(String.format("amzn://apps/android?p=%s", s)));
            }
            else if (s2 != null) {
                intent.setData(Uri.parse(String.format("market://details?id=%s&referrer=%s", s, URLEncoder.encode(s2))));
            }
            else {
                intent.setData(Uri.parse("market://details?id=" + s));
            }
            MMSDK$Event.intentStarted(context, "market", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            Utils$IntentUtils.startActivity(context, intent);
            return MMJSResponse.responseWithSuccess();
        }
        return null;
    }
    
    public MMJSResponse openUrl(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("url");
        if (context != null && s != null) {
            MMLog.d("BridgeMMDevice", String.format("Opening: %s", s));
            final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
            if (intent.getScheme().startsWith("http") || intent.getScheme().startsWith("https")) {
                MMSDK$Event.intentStarted(context, "browser", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            }
            Utils$IntentUtils.startActivity(context, intent);
            return MMJSResponse.responseWithSuccess("Overlay opened");
        }
        return MMJSResponse.responseWithError("URL could not be opened");
    }
    
    public MMJSResponse setMMDID(final Map map) {
        final String s = map.get("mmdid");
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            HandShake.sharedHandShake(context).setMMdid(context, s);
            return MMJSResponse.responseWithSuccess("MMDID is set");
        }
        return null;
    }
    
    public MMJSResponse showMap(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("location");
        if (context != null && s != null) {
            MMLog.d("BridgeMMDevice", String.format("Launching Google Maps: %s", s));
            Utils$IntentUtils.startActivity(context, new Intent("android.intent.action.VIEW", Uri.parse("geo:" + s)));
            MMSDK$Event.intentStarted(context, "geo", this.getAdImplId(map.get("PROPERTY_EXPANDING")));
            return MMJSResponse.responseWithSuccess("Map successfully opened");
        }
        return null;
    }
    
    public MMJSResponse tweet(final Map map) {
        return null;
    }
}
