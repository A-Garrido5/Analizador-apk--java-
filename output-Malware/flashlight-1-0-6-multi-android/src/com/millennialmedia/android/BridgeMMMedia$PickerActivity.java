// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.os.Bundle;
import android.content.Intent;
import android.net.Uri;

class BridgeMMMedia$PickerActivity extends MMBaseActivity
{
    private Uri fileUri;
    boolean hasRequestedPic;
    
    BridgeMMMedia$PickerActivity() {
        this.hasRequestedPic = false;
    }
    
    @Override
    protected void onActivityResult(final int p0, final int p1, final Intent p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore          4
        //     3: aload_0        
        //     4: iload_1        
        //     5: iload_2        
        //     6: aload_3        
        //     7: invokespecial   com/millennialmedia/android/MMBaseActivity.onActivityResult:(IILandroid/content/Intent;)V
        //    10: aload_3        
        //    11: ifnull          166
        //    14: aload_3        
        //    15: invokevirtual   android/content/Intent.getData:()Landroid/net/Uri;
        //    18: astore          8
        //    20: aload           8
        //    22: ifnonnull       267
        //    25: aload_3        
        //    26: invokevirtual   android/content/Intent.getExtras:()Landroid/os/Bundle;
        //    29: ifnull          166
        //    32: aload_3        
        //    33: invokevirtual   android/content/Intent.getExtras:()Landroid/os/Bundle;
        //    36: ldc             "data"
        //    38: invokevirtual   android/os/Bundle.get:(Ljava/lang/String;)Ljava/lang/Object;
        //    41: checkcast       Landroid/graphics/Bitmap;
        //    44: astore          9
        //    46: new             Ljava/io/File;
        //    49: dup            
        //    50: aload_0        
        //    51: invokevirtual   com/millennialmedia/android/BridgeMMMedia$PickerActivity.getIntent:()Landroid/content/Intent;
        //    54: invokevirtual   android/content/Intent.getData:()Landroid/net/Uri;
        //    57: invokevirtual   android/net/Uri.getPath:()Ljava/lang/String;
        //    60: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //    63: astore          10
        //    65: new             Ljava/io/ByteArrayOutputStream;
        //    68: dup            
        //    69: invokespecial   java/io/ByteArrayOutputStream.<init>:()V
        //    72: astore          11
        //    74: aload           9
        //    76: getstatic       android/graphics/Bitmap$CompressFormat.PNG:Landroid/graphics/Bitmap$CompressFormat;
        //    79: iconst_0       
        //    80: aload           11
        //    82: invokevirtual   android/graphics/Bitmap.compress:(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
        //    85: pop            
        //    86: new             Ljava/io/ByteArrayInputStream;
        //    89: dup            
        //    90: aload           11
        //    92: invokevirtual   java/io/ByteArrayOutputStream.toByteArray:()[B
        //    95: invokespecial   java/io/ByteArrayInputStream.<init>:([B)V
        //    98: astore          18
        //   100: new             Ljava/io/FileOutputStream;
        //   103: dup            
        //   104: aload           10
        //   106: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //   109: astore          13
        //   111: sipush          1024
        //   114: newarray        B
        //   116: astore          19
        //   118: aload           18
        //   120: aload           19
        //   122: invokevirtual   java/io/ByteArrayInputStream.read:([B)I
        //   125: istore          20
        //   127: iload           20
        //   129: ifle            188
        //   132: aload           13
        //   134: aload           19
        //   136: iconst_0       
        //   137: iload           20
        //   139: invokevirtual   java/io/OutputStream.write:([BII)V
        //   142: goto            118
        //   145: astore          12
        //   147: ldc             "BridgeMMMedia"
        //   149: ldc             "Problem getting bitmap from data"
        //   151: aload           12
        //   153: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   156: aload           13
        //   158: ifnull          166
        //   161: aload           13
        //   163: invokevirtual   java/io/OutputStream.close:()V
        //   166: invokestatic    com/millennialmedia/android/BridgeMMMedia.access$000:()Ljava/lang/Object;
        //   169: astore          5
        //   171: aload           5
        //   173: monitorenter   
        //   174: invokestatic    com/millennialmedia/android/BridgeMMMedia.access$000:()Ljava/lang/Object;
        //   177: invokevirtual   java/lang/Object.notify:()V
        //   180: aload           5
        //   182: monitorexit    
        //   183: aload_0        
        //   184: invokevirtual   com/millennialmedia/android/BridgeMMMedia$PickerActivity.finish:()V
        //   187: return         
        //   188: aload           13
        //   190: invokevirtual   java/io/OutputStream.close:()V
        //   193: goto            166
        //   196: astore          21
        //   198: ldc             "BridgeMMMedia"
        //   200: ldc             "Error closing file"
        //   202: aload           21
        //   204: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   207: goto            166
        //   210: astore          7
        //   212: ldc             "BridgeMMMedia"
        //   214: ldc             "Error with picture: "
        //   216: aload           7
        //   218: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   221: goto            166
        //   224: astore          16
        //   226: ldc             "BridgeMMMedia"
        //   228: ldc             "Error closing file"
        //   230: aload           16
        //   232: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   235: goto            166
        //   238: astore          14
        //   240: aload           4
        //   242: ifnull          250
        //   245: aload           4
        //   247: invokevirtual   java/io/OutputStream.close:()V
        //   250: aload           14
        //   252: athrow         
        //   253: astore          15
        //   255: ldc             "BridgeMMMedia"
        //   257: ldc             "Error closing file"
        //   259: aload           15
        //   261: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   264: goto            250
        //   267: aload           8
        //   269: ifnull          166
        //   272: iconst_1       
        //   273: anewarray       Ljava/lang/String;
        //   276: dup            
        //   277: iconst_0       
        //   278: ldc             "_data"
        //   280: aastore        
        //   281: astore          22
        //   283: aload_0        
        //   284: invokevirtual   com/millennialmedia/android/BridgeMMMedia$PickerActivity.getContentResolver:()Landroid/content/ContentResolver;
        //   287: astore          23
        //   289: aload           23
        //   291: ifnull          166
        //   294: aload           23
        //   296: aload           8
        //   298: aload           22
        //   300: aconst_null    
        //   301: aconst_null    
        //   302: aconst_null    
        //   303: invokevirtual   android/content/ContentResolver.query:(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
        //   306: astore          24
        //   308: aload           24
        //   310: ifnull          166
        //   313: aload           24
        //   315: ldc             "_data"
        //   317: invokeinterface android/database/Cursor.getColumnIndex:(Ljava/lang/String;)I
        //   322: istore          25
        //   324: iload           25
        //   326: iconst_m1      
        //   327: if_icmpeq       166
        //   330: aload           24
        //   332: invokeinterface android/database/Cursor.moveToFirst:()Z
        //   337: pop            
        //   338: new             Ljava/io/File;
        //   341: dup            
        //   342: aload           24
        //   344: iload           25
        //   346: invokeinterface android/database/Cursor.getString:(I)Ljava/lang/String;
        //   351: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //   354: astore          27
        //   356: aload           24
        //   358: invokeinterface android/database/Cursor.close:()V
        //   363: new             Ljava/io/File;
        //   366: dup            
        //   367: aload_0        
        //   368: invokevirtual   com/millennialmedia/android/BridgeMMMedia$PickerActivity.getIntent:()Landroid/content/Intent;
        //   371: invokevirtual   android/content/Intent.getData:()Landroid/net/Uri;
        //   374: invokevirtual   android/net/Uri.getPath:()Ljava/lang/String;
        //   377: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //   380: astore          28
        //   382: new             Ljava/io/FileInputStream;
        //   385: dup            
        //   386: aload           27
        //   388: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //   391: astore          29
        //   393: new             Ljava/io/FileOutputStream;
        //   396: dup            
        //   397: aload           28
        //   399: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //   402: astore          30
        //   404: sipush          1024
        //   407: newarray        B
        //   409: astore          36
        //   411: aload           29
        //   413: aload           36
        //   415: invokevirtual   java/io/InputStream.read:([B)I
        //   418: istore          37
        //   420: iload           37
        //   422: ifle            494
        //   425: aload           30
        //   427: aload           36
        //   429: iconst_0       
        //   430: iload           37
        //   432: invokevirtual   java/io/OutputStream.write:([BII)V
        //   435: goto            411
        //   438: astore          33
        //   440: aload           30
        //   442: astore          4
        //   444: aload           29
        //   446: astore          34
        //   448: ldc             "BridgeMMMedia"
        //   450: ldc             "Error copying image"
        //   452: aload           33
        //   454: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   457: aload           34
        //   459: ifnull          467
        //   462: aload           34
        //   464: invokevirtual   java/io/InputStream.close:()V
        //   467: aload           4
        //   469: ifnull          166
        //   472: aload           4
        //   474: invokevirtual   java/io/OutputStream.close:()V
        //   477: goto            166
        //   480: astore          35
        //   482: ldc             "BridgeMMMedia"
        //   484: ldc             "Error closing file"
        //   486: aload           35
        //   488: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   491: goto            166
        //   494: aload           29
        //   496: invokevirtual   java/io/InputStream.close:()V
        //   499: aload           30
        //   501: invokevirtual   java/io/OutputStream.close:()V
        //   504: goto            166
        //   507: astore          38
        //   509: ldc             "BridgeMMMedia"
        //   511: ldc             "Error closing file"
        //   513: aload           38
        //   515: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   518: goto            166
        //   521: astore          31
        //   523: aconst_null    
        //   524: astore          29
        //   526: aload           29
        //   528: ifnull          536
        //   531: aload           29
        //   533: invokevirtual   java/io/InputStream.close:()V
        //   536: aload           4
        //   538: ifnull          546
        //   541: aload           4
        //   543: invokevirtual   java/io/OutputStream.close:()V
        //   546: aload           31
        //   548: athrow         
        //   549: astore          32
        //   551: ldc             "BridgeMMMedia"
        //   553: ldc             "Error closing file"
        //   555: aload           32
        //   557: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   560: goto            546
        //   563: astore          6
        //   565: aload           5
        //   567: monitorexit    
        //   568: aload           6
        //   570: athrow         
        //   571: astore          31
        //   573: aconst_null    
        //   574: astore          4
        //   576: goto            526
        //   579: astore          31
        //   581: aload           30
        //   583: astore          4
        //   585: goto            526
        //   588: astore          31
        //   590: aload           34
        //   592: astore          29
        //   594: goto            526
        //   597: astore          33
        //   599: aconst_null    
        //   600: astore          34
        //   602: aconst_null    
        //   603: astore          4
        //   605: goto            448
        //   608: astore          33
        //   610: aload           29
        //   612: astore          34
        //   614: aconst_null    
        //   615: astore          4
        //   617: goto            448
        //   620: astore          14
        //   622: aload           13
        //   624: astore          4
        //   626: goto            240
        //   629: astore          12
        //   631: aconst_null    
        //   632: astore          13
        //   634: goto            147
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  14     20     210    224    Ljava/lang/Exception;
        //  25     46     210    224    Ljava/lang/Exception;
        //  46     111    629    637    Ljava/lang/Exception;
        //  46     111    238    240    Any
        //  111    118    145    147    Ljava/lang/Exception;
        //  111    118    620    629    Any
        //  118    127    145    147    Ljava/lang/Exception;
        //  118    127    620    629    Any
        //  132    142    145    147    Ljava/lang/Exception;
        //  132    142    620    629    Any
        //  147    156    620    629    Any
        //  161    166    224    238    Ljava/lang/Exception;
        //  174    183    563    571    Any
        //  188    193    196    210    Ljava/lang/Exception;
        //  198    207    210    224    Ljava/lang/Exception;
        //  226    235    210    224    Ljava/lang/Exception;
        //  245    250    253    267    Ljava/lang/Exception;
        //  250    253    210    224    Ljava/lang/Exception;
        //  255    264    210    224    Ljava/lang/Exception;
        //  272    289    210    224    Ljava/lang/Exception;
        //  294    308    210    224    Ljava/lang/Exception;
        //  313    324    210    224    Ljava/lang/Exception;
        //  330    363    210    224    Ljava/lang/Exception;
        //  363    393    597    608    Ljava/lang/Exception;
        //  363    393    521    526    Any
        //  393    404    608    620    Ljava/lang/Exception;
        //  393    404    571    579    Any
        //  404    411    438    448    Ljava/lang/Exception;
        //  404    411    579    588    Any
        //  411    420    438    448    Ljava/lang/Exception;
        //  411    420    579    588    Any
        //  425    435    438    448    Ljava/lang/Exception;
        //  425    435    579    588    Any
        //  448    457    588    597    Any
        //  462    467    480    494    Ljava/lang/Exception;
        //  472    477    480    494    Ljava/lang/Exception;
        //  482    491    210    224    Ljava/lang/Exception;
        //  494    504    507    521    Ljava/lang/Exception;
        //  509    518    210    224    Ljava/lang/Exception;
        //  531    536    549    563    Ljava/lang/Exception;
        //  541    546    549    563    Ljava/lang/Exception;
        //  546    549    210    224    Ljava/lang/Exception;
        //  551    560    210    224    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 288, Size: 288
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        if (this.getLastNonConfigurationInstance() != null) {
            this.hasRequestedPic = ((Bundle)this.getLastNonConfigurationInstance()).getBoolean("hasRequestedPic");
        }
        if (!this.hasRequestedPic) {
            if (!this.getIntent().getStringExtra("type").equalsIgnoreCase("Camera")) {
                final Intent intent = new Intent();
                intent.setType("image/*");
                intent.setAction("android.intent.action.GET_CONTENT");
                this.hasRequestedPic = true;
                this.startActivityForResult(intent, 0);
                return;
            }
            final Intent intent2 = new Intent("android.media.action.IMAGE_CAPTURE");
            this.fileUri = this.getIntent().getData();
            intent2.putExtra("return-data", true);
            this.hasRequestedPic = true;
            this.startActivityForResult(intent2, 0);
        }
    }
    
    @Override
    public Object onRetainNonConfigurationInstance() {
        super.onRetainNonConfigurationInstance();
        final Bundle bundle = new Bundle();
        bundle.putBoolean("hasRequestedPic", this.hasRequestedPic);
        return bundle;
    }
}
