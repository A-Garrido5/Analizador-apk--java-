// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.content.SharedPreferences$Editor;
import java.util.concurrent.ConcurrentHashMap;
import android.content.SharedPreferences;
import android.text.TextUtils;
import android.os.Environment;
import java.util.Iterator;
import java.io.File;
import java.io.ObjectInputStream;
import java.util.Date;
import java.util.HashSet;
import android.content.Context;
import java.util.Map;
import java.util.Set;

final class AdCache
{
    private static final String CACHED_AD_FILE = "ad.dat";
    private static final String CACHE_INCOMPLETE_PREFIX = "incompleteDownload_";
    private static final String CACHE_PREFIX = "nextCachedAd_";
    private static final String CACHE_PREFIX_APID = "nextCachedAd_apids";
    private static final String LOCK_FILE = "ad.lock";
    static final int PRIORITY_FETCH = 3;
    static final int PRIORITY_PRECACHE = 1;
    static final int PRIORITY_REFRESH = 2;
    private static final String PRIVATE_CACHE_DIR = ".mmsyscache";
    private static final String TAG = "AdCache";
    private static Set apidListSet;
    private static String cachedVideoList;
    private static boolean cachedVideoListLoaded;
    private static Set cachedVideoSet;
    private static Map incompleteDownloadHashMap;
    private static boolean incompleteDownloadHashMapLoaded;
    static boolean isExternalEnabled;
    private static Map nextCachedAdHashMap;
    private static boolean nextCachedAdHashMapLoaded;
    
    static {
        AdCache.isExternalEnabled = true;
    }
    
    static void cachedVideoWasAdded(final Context context, final String s) {
        // monitorenter(AdCache.class)
        if (s == null) {
            return;
        }
        try {
            if (!AdCache.cachedVideoListLoaded) {
                getCachedVideoList(context);
            }
            if (AdCache.cachedVideoSet == null) {
                AdCache.cachedVideoSet = new HashSet();
            }
            AdCache.cachedVideoSet.add(s);
            AdCache.cachedVideoList = null;
        }
        finally {
        }
        // monitorexit(AdCache.class)
    }
    
    static void cachedVideoWasRemoved(final Context context, final String s) {
        // monitorenter(AdCache.class)
        if (s == null) {
            return;
        }
        try {
            if (!AdCache.cachedVideoListLoaded) {
                getCachedVideoList(context);
            }
            if (AdCache.cachedVideoSet != null) {
                AdCache.cachedVideoSet.remove(s);
                AdCache.cachedVideoList = null;
            }
        }
        finally {
        }
        // monitorexit(AdCache.class)
    }
    
    static void cleanCache(final Context context) {
        Utils$ThreadUtils.execute(new Runnable() {
            @Override
            public final void run() {
                MMLog.d("AdCache", "AdCache");
                AdCache.cleanUpExpiredAds(context);
                AdCache.cleanupCache(context);
            }
        });
    }
    
    static void cleanUpExpiredAds(final Context context) {
        iterateCachedAds(context, 1, new AdCache$Iterator() {
            @Override
            final boolean callback(final String s, final int n, final Date date, final String s2, final long n2, final ObjectInputStream objectInputStream) {
                if (date == null || date.getTime() > System.currentTimeMillis()) {
                    return true;
                }
                try {
                    MMLog.e("AdCache", String.format("Deleting expired ad %s.", ((CachedAd)objectInputStream.readObject()).getId()));
                    return true;
                }
                catch (Exception ex) {
                    MMLog.e("AdCache", String.format("There was a problem reading the cached ad %s.", s), ex);
                    return true;
                }
            }
        });
    }
    
    static void cleanupCache(final Context context) {
        cleanupInternalCache(context);
        if (isExternalStorageAvailable(context)) {
            cleanupExternalCache(context);
        }
    }
    
    static void cleanupDirectory(final File file, final long n) {
        for (final File file2 : file.listFiles()) {
            if (file2.isFile()) {
                if (System.currentTimeMillis() - file2.lastModified() > n) {
                    file2.delete();
                }
            }
            else if (file2.isDirectory()) {
                try {
                    cleanupDirectory(file2, n);
                    if (file2.list() != null && file2.list().length == 0) {
                        file2.delete();
                    }
                }
                catch (SecurityException ex) {
                    MMLog.e("AdCache", "Security Exception cleaning up directory", ex);
                }
            }
        }
    }
    
    private static void cleanupExternalCache(final Context context) {
        final File externalCacheDirectory = getExternalCacheDirectory(context);
        if (externalCacheDirectory != null && externalCacheDirectory.exists() && externalCacheDirectory.isDirectory()) {
            cleanupDirectory(externalCacheDirectory, HandShake.sharedHandShake(context).creativeCacheTimeout);
        }
    }
    
    private static void cleanupInternalCache(final Context context) {
        final File internalCacheDirectory = getInternalCacheDirectory(context);
        if (internalCacheDirectory != null && internalCacheDirectory.exists() && internalCacheDirectory.isDirectory()) {
            cleanupDirectory(internalCacheDirectory, HandShake.sharedHandShake(context).creativeCacheTimeout);
        }
    }
    
    static boolean deleteFile(final Context context, final String s) {
        final File cachedAdFile = getCachedAdFile(context, s);
        return cachedAdFile != null && cachedAdFile.delete();
    }
    
    private static boolean downloadComponent(final String p0, final String p1, final File p2, final Context p3) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //     4: ifeq            16
        //     7: ldc             "AdCache"
        //     9: ldc             "No Url ..."
        //    11: invokestatic    com/millennialmedia/android/MMLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    14: iconst_0       
        //    15: ireturn        
        //    16: new             Ljava/io/File;
        //    19: dup            
        //    20: aload_2        
        //    21: aload_1        
        //    22: invokespecial   java/io/File.<init>:(Ljava/io/File;Ljava/lang/String;)V
        //    25: astore          4
        //    27: ldc             "AdCache"
        //    29: ldc             "Downloading Component: %s from %s"
        //    31: iconst_2       
        //    32: anewarray       Ljava/lang/Object;
        //    35: dup            
        //    36: iconst_0       
        //    37: aload_1        
        //    38: aastore        
        //    39: dup            
        //    40: iconst_1       
        //    41: aload_0        
        //    42: aastore        
        //    43: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //    46: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    49: aload           4
        //    51: invokevirtual   java/io/File.getParentFile:()Ljava/io/File;
        //    54: astore          5
        //    56: aload           5
        //    58: invokevirtual   java/io/File.exists:()Z
        //    61: ifne            99
        //    64: aload           5
        //    66: invokevirtual   java/io/File.mkdirs:()Z
        //    69: ifne            99
        //    72: ldc             "AdCache"
        //    74: new             Ljava/lang/StringBuilder;
        //    77: dup            
        //    78: invokespecial   java/lang/StringBuilder.<init>:()V
        //    81: aload           5
        //    83: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //    86: ldc             " does not exist and cannot create directory."
        //    88: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    91: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    94: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    97: iconst_0       
        //    98: ireturn        
        //    99: aload           4
        //   101: invokevirtual   java/io/File.exists:()Z
        //   104: ifeq            143
        //   107: aload           4
        //   109: invokevirtual   java/io/File.length:()J
        //   112: lconst_0       
        //   113: lcmp           
        //   114: ifle            143
        //   117: ldc             "AdCache"
        //   119: new             Ljava/lang/StringBuilder;
        //   122: dup            
        //   123: invokespecial   java/lang/StringBuilder.<init>:()V
        //   126: aload_1        
        //   127: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   130: ldc             " already exists, skipping..."
        //   132: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   135: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   138: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
        //   141: iconst_1       
        //   142: ireturn        
        //   143: ldc2_w          -1
        //   146: lstore          6
        //   148: new             Ljava/net/URL;
        //   151: dup            
        //   152: aload_0        
        //   153: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
        //   156: astore          8
        //   158: iconst_1       
        //   159: invokestatic    java/net/HttpURLConnection.setFollowRedirects:(Z)V
        //   162: aload           8
        //   164: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
        //   167: checkcast       Ljava/net/HttpURLConnection;
        //   170: astore          19
        //   172: aload           19
        //   174: sipush          30000
        //   177: invokevirtual   java/net/HttpURLConnection.setConnectTimeout:(I)V
        //   180: aload           19
        //   182: ldc_w           "GET"
        //   185: invokevirtual   java/net/HttpURLConnection.setRequestMethod:(Ljava/lang/String;)V
        //   188: aload           19
        //   190: invokevirtual   java/net/HttpURLConnection.connect:()V
        //   193: aload           19
        //   195: invokevirtual   java/net/HttpURLConnection.getInputStream:()Ljava/io/InputStream;
        //   198: astore          20
        //   200: aload           20
        //   202: astore          13
        //   204: aload           19
        //   206: ldc_w           "Content-Length"
        //   209: invokevirtual   java/net/HttpURLConnection.getHeaderField:(Ljava/lang/String;)Ljava/lang/String;
        //   212: astore          21
        //   214: aload           21
        //   216: ifnull          226
        //   219: aload           21
        //   221: invokestatic    java/lang/Long.parseLong:(Ljava/lang/String;)J
        //   224: lstore          6
        //   226: aload           13
        //   228: ifnonnull       282
        //   231: ldc             "AdCache"
        //   233: ldc_w           "Connection stream is null downloading %s."
        //   236: iconst_1       
        //   237: anewarray       Ljava/lang/Object;
        //   240: dup            
        //   241: iconst_0       
        //   242: aload_1        
        //   243: aastore        
        //   244: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   247: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;)V
        //   250: aload           13
        //   252: ifnull          260
        //   255: aload           13
        //   257: invokevirtual   java/io/InputStream.close:()V
        //   260: iconst_0       
        //   261: ireturn        
        //   262: astore          22
        //   264: ldc             "AdCache"
        //   266: ldc_w           "Content caching error downloading component: "
        //   269: aload           22
        //   271: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   274: aload           4
        //   276: invokevirtual   java/io/File.delete:()Z
        //   279: pop            
        //   280: iconst_0       
        //   281: ireturn        
        //   282: new             Ljava/io/FileOutputStream;
        //   285: dup            
        //   286: aload           4
        //   288: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //   291: astore          24
        //   293: sipush          4096
        //   296: newarray        B
        //   298: astore          25
        //   300: aload           13
        //   302: aload           25
        //   304: invokevirtual   java/io/InputStream.read:([B)I
        //   307: istore          26
        //   309: iload           26
        //   311: ifle            389
        //   314: aload           24
        //   316: aload           25
        //   318: iconst_0       
        //   319: iload           26
        //   321: invokevirtual   java/io/FileOutputStream.write:([BII)V
        //   324: goto            300
        //   327: astore          9
        //   329: aload           24
        //   331: astore          10
        //   333: aload           13
        //   335: astore          11
        //   337: ldc             "AdCache"
        //   339: ldc_w           "Exception downloading component %s: %s"
        //   342: iconst_2       
        //   343: anewarray       Ljava/lang/Object;
        //   346: dup            
        //   347: iconst_0       
        //   348: aload_1        
        //   349: aastore        
        //   350: dup            
        //   351: iconst_1       
        //   352: aload           9
        //   354: aastore        
        //   355: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   358: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;)V
        //   361: aload           11
        //   363: ifnull          371
        //   366: aload           11
        //   368: invokevirtual   java/io/InputStream.close:()V
        //   371: aload           10
        //   373: ifnull          381
        //   376: aload           10
        //   378: invokevirtual   java/io/FileOutputStream.close:()V
        //   381: aload           4
        //   383: invokevirtual   java/io/File.delete:()Z
        //   386: pop            
        //   387: iconst_0       
        //   388: ireturn        
        //   389: aload           4
        //   391: invokevirtual   java/io/File.length:()J
        //   394: lstore          30
        //   396: lload           30
        //   398: lload           6
        //   400: lcmp           
        //   401: ifeq            413
        //   404: lload           6
        //   406: ldc2_w          -1
        //   409: lcmp           
        //   410: ifne            450
        //   413: aload           13
        //   415: ifnull          423
        //   418: aload           13
        //   420: invokevirtual   java/io/InputStream.close:()V
        //   423: aload           24
        //   425: invokevirtual   java/io/FileOutputStream.close:()V
        //   428: iconst_1       
        //   429: ireturn        
        //   430: astore          32
        //   432: ldc             "AdCache"
        //   434: ldc_w           "Content caching error downloading component: "
        //   437: aload           32
        //   439: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   442: aload           4
        //   444: invokevirtual   java/io/File.delete:()Z
        //   447: pop            
        //   448: iconst_0       
        //   449: ireturn        
        //   450: ldc             "AdCache"
        //   452: ldc_w           "Content-Length does not match actual length."
        //   455: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;)V
        //   458: aload           13
        //   460: ifnull          468
        //   463: aload           13
        //   465: invokevirtual   java/io/InputStream.close:()V
        //   468: aload           24
        //   470: invokevirtual   java/io/FileOutputStream.close:()V
        //   473: goto            381
        //   476: astore          28
        //   478: ldc             "AdCache"
        //   480: ldc_w           "Content caching error downloading component: "
        //   483: aload           28
        //   485: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   488: aload           4
        //   490: invokevirtual   java/io/File.delete:()Z
        //   493: pop            
        //   494: iconst_0       
        //   495: ireturn        
        //   496: astore          27
        //   498: ldc             "AdCache"
        //   500: ldc_w           "Exception downloading component %s: "
        //   503: iconst_1       
        //   504: anewarray       Ljava/lang/Object;
        //   507: dup            
        //   508: iconst_0       
        //   509: aload_1        
        //   510: aastore        
        //   511: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   514: aload           27
        //   516: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   519: goto            458
        //   522: astore          12
        //   524: aload           24
        //   526: astore          10
        //   528: aload           13
        //   530: ifnull          538
        //   533: aload           13
        //   535: invokevirtual   java/io/InputStream.close:()V
        //   538: aload           10
        //   540: ifnull          548
        //   543: aload           10
        //   545: invokevirtual   java/io/FileOutputStream.close:()V
        //   548: aload           12
        //   550: athrow         
        //   551: astore          16
        //   553: ldc             "AdCache"
        //   555: ldc_w           "Content caching error downloading component: "
        //   558: aload           16
        //   560: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   563: aload           4
        //   565: invokevirtual   java/io/File.delete:()Z
        //   568: pop            
        //   569: iconst_0       
        //   570: ireturn        
        //   571: astore          14
        //   573: ldc             "AdCache"
        //   575: ldc_w           "Content caching error downloading component: "
        //   578: aload           14
        //   580: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   583: aload           4
        //   585: invokevirtual   java/io/File.delete:()Z
        //   588: pop            
        //   589: iconst_0       
        //   590: ireturn        
        //   591: astore          12
        //   593: aconst_null    
        //   594: astore          10
        //   596: aconst_null    
        //   597: astore          13
        //   599: goto            528
        //   602: astore          12
        //   604: aconst_null    
        //   605: astore          10
        //   607: goto            528
        //   610: astore          12
        //   612: aload           11
        //   614: astore          13
        //   616: goto            528
        //   619: astore          9
        //   621: aconst_null    
        //   622: astore          10
        //   624: aconst_null    
        //   625: astore          11
        //   627: goto            337
        //   630: astore          9
        //   632: aload           13
        //   634: astore          11
        //   636: aconst_null    
        //   637: astore          10
        //   639: goto            337
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                         
        //  -----  -----  -----  -----  -----------------------------
        //  148    200    619    630    Ljava/lang/Exception;
        //  148    200    591    602    Any
        //  204    214    630    642    Ljava/lang/Exception;
        //  204    214    602    610    Any
        //  219    226    630    642    Ljava/lang/Exception;
        //  219    226    602    610    Any
        //  231    250    630    642    Ljava/lang/Exception;
        //  231    250    602    610    Any
        //  255    260    262    282    Ljava/io/IOException;
        //  282    293    630    642    Ljava/lang/Exception;
        //  282    293    602    610    Any
        //  293    300    327    337    Ljava/lang/Exception;
        //  293    300    522    528    Any
        //  300    309    327    337    Ljava/lang/Exception;
        //  300    309    522    528    Any
        //  314    324    327    337    Ljava/lang/Exception;
        //  314    324    522    528    Any
        //  337    361    610    619    Any
        //  366    371    551    571    Ljava/io/IOException;
        //  376    381    551    571    Ljava/io/IOException;
        //  389    396    496    522    Ljava/lang/SecurityException;
        //  389    396    327    337    Ljava/lang/Exception;
        //  389    396    522    528    Any
        //  418    423    430    450    Ljava/io/IOException;
        //  423    428    430    450    Ljava/io/IOException;
        //  450    458    496    522    Ljava/lang/SecurityException;
        //  450    458    327    337    Ljava/lang/Exception;
        //  450    458    522    528    Any
        //  463    468    476    496    Ljava/io/IOException;
        //  468    473    476    496    Ljava/io/IOException;
        //  498    519    327    337    Ljava/lang/Exception;
        //  498    519    522    528    Any
        //  533    538    571    591    Ljava/io/IOException;
        //  543    548    571    591    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 305, Size: 305
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static boolean downloadComponentExternalStorage(final String s, final String s2, final Context context) {
        final File externalCacheDirectory = getExternalCacheDirectory(context);
        return externalCacheDirectory != null && externalCacheDirectory.isDirectory() && downloadComponent(s, s2, externalCacheDirectory, context);
    }
    
    static boolean downloadComponentExternalStorage(final String s, final String s2, final String s3, final Context context) {
        final File externalCacheDirectory = getExternalCacheDirectory(context);
        return externalCacheDirectory != null && externalCacheDirectory.isDirectory() && downloadComponent(s, s3, new File(externalCacheDirectory, s2), context);
    }
    
    static boolean downloadComponentInternalCache(final String s, final String s2, final Context context) {
        final File internalCacheDirectory = getInternalCacheDirectory(context);
        return internalCacheDirectory != null && internalCacheDirectory.isDirectory() && downloadComponent(s, s2, internalCacheDirectory, context);
    }
    
    static File getCacheDirectory(final Context context) {
        if (isExternalStorageAvailable(context)) {
            return getExternalCacheDirectory(context);
        }
        return getInternalCacheDirectory(context);
    }
    
    private static File getCachedAdFile(final Context context, final String s) {
        final String string = s + "ad.dat";
        final boolean externalStorageAvailable = isExternalStorageAvailable(context);
        final File internalCacheDirectory = getInternalCacheDirectory(context);
        while (true) {
            Label_0157: {
                if (internalCacheDirectory == null) {
                    break Label_0157;
                }
                File file;
                try {
                    if (!internalCacheDirectory.isDirectory()) {
                        break Label_0157;
                    }
                    file = new File(internalCacheDirectory, string);
                    if ((file == null || !file.exists()) && !externalStorageAvailable) {
                        final File filesDir = context.getFilesDir();
                        if (filesDir != null) {
                            final File file2 = new File(filesDir, ".mmsyscache" + File.separator + string);
                            if (file2.exists() && file2.isFile()) {
                                return file2;
                            }
                        }
                    }
                }
                catch (Exception ex) {
                    MMLog.e("AdCache", "getCachedAdFile: ", ex);
                    return null;
                }
                return file;
            }
            File file = null;
            continue;
        }
    }
    
    static String getCachedVideoList(final Context context) {
        while (true) {
            StringBuilder sb = null;
        Label_0161:
            while (true) {
                String s = null;
                Label_0147: {
                    synchronized (AdCache.class) {
                        if (AdCache.cachedVideoList != null) {
                            break;
                        }
                        if (!AdCache.cachedVideoListLoaded) {
                            final HashSet cachedVideoSet = new HashSet();
                            iterateCachedAds(context, 2, new AdCache$Iterator() {
                                @Override
                                final boolean callback(final CachedAd cachedAd) {
                                    if (cachedAd.acid != null && cachedAd.getType() == 1 && cachedAd.isOnDisk(context)) {
                                        cachedVideoSet.add(cachedAd.acid);
                                    }
                                    return true;
                                }
                            });
                            AdCache.cachedVideoSet = cachedVideoSet;
                            AdCache.cachedVideoListLoaded = true;
                        }
                        if (AdCache.cachedVideoSet != null && AdCache.cachedVideoSet.size() > 0) {
                            sb = new StringBuilder();
                            final Iterator<String> iterator = (Iterator<String>)AdCache.cachedVideoSet.iterator();
                            while (iterator.hasNext()) {
                                s = iterator.next();
                                if (sb.length() <= 0) {
                                    break Label_0147;
                                }
                                sb.append("," + s);
                            }
                            break Label_0161;
                        }
                        break;
                    }
                }
                sb.append(s);
                continue;
            }
            AdCache.cachedVideoList = sb.toString();
            break;
        }
        // monitorexit(AdCache.class)
        return AdCache.cachedVideoList;
    }
    
    static File getDownloadFile(final Context context, final String s) {
        final File externalCacheDirectory = getExternalCacheDirectory(context);
        File file = null;
        if (externalCacheDirectory != null) {
            file = new File(externalCacheDirectory, s);
        }
        return file;
    }
    
    static File getDownloadFile(final Context context, final String s, final String s2) {
        final File externalCacheDirectory = getExternalCacheDirectory(context);
        File file = null;
        if (externalCacheDirectory != null) {
            file = new File(externalCacheDirectory, s + File.separator + s2);
        }
        return file;
    }
    
    static File getExternalCacheDirectory(final Context context) {
        final File externalStorageDirectory = Environment.getExternalStorageDirectory();
        if (externalStorageDirectory != null) {
            final File file = new File(externalStorageDirectory, ".mmsyscache");
            if (file.exists() || file.mkdirs()) {
                return file;
            }
        }
        return null;
    }
    
    static String getIncompleteDownload(final Context context, final String s) {
        synchronized (AdCache.class) {
            if (!AdCache.incompleteDownloadHashMapLoaded) {
                loadIncompleteDownloadHashMap(context);
            }
            String s2;
            if (s == null) {
                s2 = null;
            }
            else {
                s2 = AdCache.incompleteDownloadHashMap.get(s);
            }
            return s2;
        }
    }
    
    static File getInternalCacheDirectory(final Context context) {
        if (context != null) {
            final File file = new File(context.getFilesDir(), ".mmsyscache");
            if (file.exists() || file.mkdirs()) {
                return file;
            }
        }
        return null;
    }
    
    static String getNextCachedAd(final Context context, final String s) {
        synchronized (AdCache.class) {
            if (!AdCache.nextCachedAdHashMapLoaded) {
                loadNextCachedAdHashMap(context);
            }
            String s2;
            if (s == null) {
                s2 = null;
            }
            else {
                s2 = AdCache.nextCachedAdHashMap.get(s);
            }
            return s2;
        }
    }
    
    static boolean hasDownloadFile(final Context context, final String s) {
        final File downloadFile = getDownloadFile(context, s);
        return downloadFile != null && downloadFile.exists();
    }
    
    static boolean isExternalMounted() {
        return Environment.getExternalStorageState().equals("mounted");
    }
    
    static boolean isExternalStorageAvailable(final Context context) {
        if (context != null) {
            final String externalStorageState = Environment.getExternalStorageState();
            if (context.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0 && !TextUtils.isEmpty((CharSequence)externalStorageState) && externalStorageState.equals("mounted") && AdCache.isExternalEnabled) {
                return true;
            }
        }
        return false;
    }
    
    static void iterateCachedAds(final Context p0, final int p1, final AdCache$Iterator p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokestatic    com/millennialmedia/android/AdCache.getInternalCacheDirectory:(Landroid/content/Context;)Ljava/io/File;
        //     4: astore_3       
        //     5: aload_3        
        //     6: ifnull          133
        //     9: aload_3        
        //    10: new             Lcom/millennialmedia/android/AdCache$2;
        //    13: dup            
        //    14: invokespecial   com/millennialmedia/android/AdCache$2.<init>:()V
        //    17: invokevirtual   java/io/File.listFiles:(Ljava/io/FileFilter;)[Ljava/io/File;
        //    20: astore          4
        //    22: aload           4
        //    24: ifnull          133
        //    27: aload           4
        //    29: arraylength    
        //    30: istore          5
        //    32: iconst_0       
        //    33: istore          6
        //    35: aconst_null    
        //    36: astore          7
        //    38: iload           6
        //    40: iload           5
        //    42: if_icmpge       133
        //    45: aload           4
        //    47: iload           6
        //    49: aaload         
        //    50: astore          8
        //    52: aload           8
        //    54: ifnull          69
        //    57: aload           8
        //    59: invokevirtual   java/io/File.exists:()Z
        //    62: istore          17
        //    64: iload           17
        //    66: ifne            103
        //    69: aload           7
        //    71: ifnull          82
        //    74: aload           7
        //    76: invokevirtual   java/io/ObjectInputStream.close:()V
        //    79: aconst_null    
        //    80: astore          7
        //    82: iinc            6, 1
        //    85: goto            38
        //    88: astore          9
        //    90: ldc             "AdCache"
        //    92: ldc_w           "Failed to close"
        //    95: aload           9
        //    97: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   100: goto            82
        //   103: iload_1        
        //   104: ifne            184
        //   107: aload_2        
        //   108: aload           8
        //   110: invokevirtual   java/io/File.getName:()Ljava/lang/String;
        //   113: invokevirtual   com/millennialmedia/android/AdCache$Iterator.callback:(Ljava/lang/String;)Z
        //   116: istore          25
        //   118: iload           25
        //   120: ifne            153
        //   123: aload           7
        //   125: ifnull          133
        //   128: aload           7
        //   130: invokevirtual   java/io/ObjectInputStream.close:()V
        //   133: aload_2        
        //   134: invokevirtual   com/millennialmedia/android/AdCache$Iterator.done:()V
        //   137: return         
        //   138: astore          27
        //   140: ldc             "AdCache"
        //   142: ldc_w           "Failed to close"
        //   145: aload           27
        //   147: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   150: goto            133
        //   153: aload           7
        //   155: ifnull          82
        //   158: aload           7
        //   160: invokevirtual   java/io/ObjectInputStream.close:()V
        //   163: aconst_null    
        //   164: astore          7
        //   166: goto            82
        //   169: astore          26
        //   171: ldc             "AdCache"
        //   173: ldc_w           "Failed to close"
        //   176: aload           26
        //   178: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   181: goto            82
        //   184: new             Ljava/io/ObjectInputStream;
        //   187: dup            
        //   188: new             Ljava/io/FileInputStream;
        //   191: dup            
        //   192: aload           8
        //   194: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //   197: invokespecial   java/io/ObjectInputStream.<init>:(Ljava/io/InputStream;)V
        //   200: astore          12
        //   202: aload           12
        //   204: invokevirtual   java/io/ObjectInputStream.readInt:()I
        //   207: istore          19
        //   209: aload           12
        //   211: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //   214: checkcast       Ljava/util/Date;
        //   217: astore          20
        //   219: aload           12
        //   221: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //   224: checkcast       Ljava/lang/String;
        //   227: astore          21
        //   229: aload           12
        //   231: invokevirtual   java/io/ObjectInputStream.readLong:()J
        //   234: lstore          22
        //   236: iload_1        
        //   237: iconst_1       
        //   238: if_icmpne       327
        //   241: aload_2        
        //   242: aload           8
        //   244: invokevirtual   java/io/File.getName:()Ljava/lang/String;
        //   247: iload           19
        //   249: aload           20
        //   251: aload           21
        //   253: lload           22
        //   255: aload           12
        //   257: invokevirtual   com/millennialmedia/android/AdCache$Iterator.callback:(Ljava/lang/String;ILjava/util/Date;Ljava/lang/String;JLjava/io/ObjectInputStream;)Z
        //   260: ifne            365
        //   263: aload           12
        //   265: invokevirtual   java/io/ObjectInputStream.close:()V
        //   268: goto            133
        //   271: astore          18
        //   273: aload           18
        //   275: astore          10
        //   277: aload           12
        //   279: astore          7
        //   281: iconst_1       
        //   282: anewarray       Ljava/lang/Object;
        //   285: astore          15
        //   287: aload           15
        //   289: iconst_0       
        //   290: aload           8
        //   292: invokevirtual   java/io/File.getName:()Ljava/lang/String;
        //   295: aastore        
        //   296: ldc             "AdCache"
        //   298: ldc_w           "There was a problem reading the cached ad %s."
        //   301: aload           15
        //   303: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   306: aload           10
        //   308: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   311: aload           7
        //   313: ifnull          82
        //   316: aload           7
        //   318: invokevirtual   java/io/ObjectInputStream.close:()V
        //   321: aconst_null    
        //   322: astore          7
        //   324: goto            82
        //   327: aload_2        
        //   328: aload           12
        //   330: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //   333: checkcast       Lcom/millennialmedia/android/CachedAd;
        //   336: invokevirtual   com/millennialmedia/android/AdCache$Iterator.callback:(Lcom/millennialmedia/android/CachedAd;)Z
        //   339: ifne            365
        //   342: aload           12
        //   344: invokevirtual   java/io/ObjectInputStream.close:()V
        //   347: goto            133
        //   350: astore          13
        //   352: aload           12
        //   354: ifnull          362
        //   357: aload           12
        //   359: invokevirtual   java/io/ObjectInputStream.close:()V
        //   362: aload           13
        //   364: athrow         
        //   365: aload           12
        //   367: invokevirtual   java/io/ObjectInputStream.close:()V
        //   370: aconst_null    
        //   371: astore          7
        //   373: goto            82
        //   376: astore          24
        //   378: ldc             "AdCache"
        //   380: ldc_w           "Failed to close"
        //   383: aload           24
        //   385: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   388: aload           12
        //   390: astore          7
        //   392: goto            82
        //   395: astore          16
        //   397: ldc             "AdCache"
        //   399: ldc_w           "Failed to close"
        //   402: aload           16
        //   404: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   407: goto            82
        //   410: astore          14
        //   412: ldc             "AdCache"
        //   414: ldc_w           "Failed to close"
        //   417: aload           14
        //   419: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   422: goto            362
        //   425: astore          11
        //   427: aload           7
        //   429: astore          12
        //   431: aload           11
        //   433: astore          13
        //   435: goto            352
        //   438: astore          10
        //   440: goto            281
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  57     64     438    443    Ljava/lang/Exception;
        //  57     64     425    438    Any
        //  74     79     88     103    Ljava/io/IOException;
        //  107    118    438    443    Ljava/lang/Exception;
        //  107    118    425    438    Any
        //  128    133    138    153    Ljava/io/IOException;
        //  158    163    169    184    Ljava/io/IOException;
        //  184    202    438    443    Ljava/lang/Exception;
        //  184    202    425    438    Any
        //  202    236    271    281    Ljava/lang/Exception;
        //  202    236    350    352    Any
        //  241    268    271    281    Ljava/lang/Exception;
        //  241    268    350    352    Any
        //  281    311    425    438    Any
        //  316    321    395    410    Ljava/io/IOException;
        //  327    347    271    281    Ljava/lang/Exception;
        //  327    347    350    352    Any
        //  357    362    410    425    Ljava/io/IOException;
        //  365    370    376    395    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0327:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static CachedAd load(final Context p0, final String p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_1        
        //     1: ifnull          14
        //     4: aload_1        
        //     5: ldc_w           ""
        //     8: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //    11: ifeq            16
        //    14: aconst_null    
        //    15: areturn        
        //    16: aload_0        
        //    17: aload_1        
        //    18: invokestatic    com/millennialmedia/android/AdCache.getCachedAdFile:(Landroid/content/Context;Ljava/lang/String;)Ljava/io/File;
        //    21: astore_2       
        //    22: aload_2        
        //    23: ifnull          14
        //    26: new             Ljava/io/ObjectInputStream;
        //    29: dup            
        //    30: new             Ljava/io/FileInputStream;
        //    33: dup            
        //    34: aload_2        
        //    35: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //    38: invokespecial   java/io/ObjectInputStream.<init>:(Ljava/io/InputStream;)V
        //    41: astore_3       
        //    42: aload_3        
        //    43: invokevirtual   java/io/ObjectInputStream.readInt:()I
        //    46: pop            
        //    47: aload_3        
        //    48: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //    51: pop            
        //    52: aload_3        
        //    53: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //    56: pop            
        //    57: aload_3        
        //    58: invokevirtual   java/io/ObjectInputStream.readLong:()J
        //    61: pop2           
        //    62: aload_3        
        //    63: invokevirtual   java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
        //    66: checkcast       Lcom/millennialmedia/android/CachedAd;
        //    69: astore          7
        //    71: aload_3        
        //    72: invokevirtual   java/io/ObjectInputStream.close:()V
        //    75: aload           7
        //    77: areturn        
        //    78: astore          16
        //    80: ldc             "AdCache"
        //    82: ldc_w           "Failed to close"
        //    85: aload           16
        //    87: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //    90: goto            75
        //    93: astore          4
        //    95: aconst_null    
        //    96: astore_3       
        //    97: ldc             "AdCache"
        //    99: new             Ljava/lang/StringBuilder;
        //   102: dup            
        //   103: ldc_w           "There was a problem loading up the cached ad "
        //   106: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //   109: aload_1        
        //   110: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   113: ldc_w           ". Ad is not on disk."
        //   116: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   119: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   122: aload           4
        //   124: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   127: aload_3        
        //   128: ifnull          135
        //   131: aload_3        
        //   132: invokevirtual   java/io/ObjectInputStream.close:()V
        //   135: aconst_null    
        //   136: astore          7
        //   138: goto            75
        //   141: astore          8
        //   143: ldc             "AdCache"
        //   145: ldc_w           "Failed to close"
        //   148: aload           8
        //   150: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   153: aconst_null    
        //   154: astore          7
        //   156: goto            75
        //   159: astore          9
        //   161: aconst_null    
        //   162: astore_3       
        //   163: ldc             "AdCache"
        //   165: ldc_w           "There was a problem loading up the cached ad %s."
        //   168: iconst_1       
        //   169: anewarray       Ljava/lang/Object;
        //   172: dup            
        //   173: iconst_0       
        //   174: aload_1        
        //   175: aastore        
        //   176: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   179: aload           9
        //   181: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   184: aload_3        
        //   185: ifnull          192
        //   188: aload_3        
        //   189: invokevirtual   java/io/ObjectInputStream.close:()V
        //   192: aconst_null    
        //   193: astore          7
        //   195: goto            75
        //   198: astore          10
        //   200: ldc             "AdCache"
        //   202: ldc_w           "Failed to close"
        //   205: aload           10
        //   207: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   210: aconst_null    
        //   211: astore          7
        //   213: goto            75
        //   216: astore          5
        //   218: aconst_null    
        //   219: astore_3       
        //   220: aload_3        
        //   221: ifnull          228
        //   224: aload_3        
        //   225: invokevirtual   java/io/ObjectInputStream.close:()V
        //   228: aload           5
        //   230: athrow         
        //   231: astore          6
        //   233: ldc             "AdCache"
        //   235: ldc_w           "Failed to close"
        //   238: aload           6
        //   240: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   243: goto            228
        //   246: astore          5
        //   248: goto            220
        //   251: astore          9
        //   253: goto            163
        //   256: astore          4
        //   258: goto            97
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                           
        //  -----  -----  -----  -----  -------------------------------
        //  26     42     93     97     Ljava/io/FileNotFoundException;
        //  26     42     159    163    Ljava/lang/Exception;
        //  26     42     216    220    Any
        //  42     71     256    261    Ljava/io/FileNotFoundException;
        //  42     71     251    256    Ljava/lang/Exception;
        //  42     71     246    251    Any
        //  71     75     78     93     Ljava/io/IOException;
        //  97     127    246    251    Any
        //  131    135    141    159    Ljava/io/IOException;
        //  163    184    246    251    Any
        //  188    192    198    216    Ljava/io/IOException;
        //  224    228    231    246    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0075:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static void loadApidListSet(final SharedPreferences sharedPreferences) {
        AdCache.apidListSet = new HashSet();
        final String string = sharedPreferences.getString("nextCachedAd_apids", (String)null);
        if (string != null) {
            final String[] split = string.split(MMSDK.COMMA);
            if (split != null && split.length > 0) {
                for (int length = split.length, i = 0; i < length; ++i) {
                    AdCache.apidListSet.add(split[i]);
                }
            }
        }
    }
    
    static CachedAd loadIncompleteDownload(final Context context, final String s) {
        final String incompleteDownload = getIncompleteDownload(context, s);
        if (incompleteDownload == null) {
            return null;
        }
        return load(context, incompleteDownload);
    }
    
    private static void loadIncompleteDownloadHashMap(final Context context) {
        final SharedPreferences sharedPreferences = context.getSharedPreferences("MillennialMediaSettings", 0);
        AdCache.incompleteDownloadHashMap = new ConcurrentHashMap();
        if (AdCache.apidListSet == null) {
            loadApidListSet(sharedPreferences);
        }
        for (final String s : AdCache.apidListSet) {
            for (final String s2 : MMAdImpl.getAdTypes()) {
                final String string = sharedPreferences.getString("incompleteDownload_" + s2 + '_' + s, (String)null);
                if (string != null) {
                    AdCache.incompleteDownloadHashMap.put(s2 + '_' + s, string);
                }
            }
        }
        AdCache.incompleteDownloadHashMapLoaded = true;
    }
    
    static CachedAd loadNextCachedAd(final Context context, final String s) {
        final String nextCachedAd = getNextCachedAd(context, s);
        if (nextCachedAd == null || nextCachedAd.equals("")) {
            return null;
        }
        return load(context, nextCachedAd);
    }
    
    private static void loadNextCachedAdHashMap(final Context context) {
        final SharedPreferences sharedPreferences = context.getSharedPreferences("MillennialMediaSettings", 0);
        AdCache.nextCachedAdHashMap = new ConcurrentHashMap();
        if (AdCache.apidListSet == null) {
            loadApidListSet(sharedPreferences);
        }
        for (final String s : AdCache.apidListSet) {
            for (final String s2 : MMAdImpl.getAdTypes()) {
                final String string = sharedPreferences.getString("nextCachedAd_" + s2 + '_' + s, (String)null);
                if (string != null) {
                    AdCache.nextCachedAdHashMap.put(s2 + '_' + s, string);
                }
            }
        }
        AdCache.nextCachedAdHashMapLoaded = true;
    }
    
    static void resetCache(final Context context) {
        iterateCachedAds(context, 2, new AdCache$Iterator() {
            @Override
            final boolean callback(final CachedAd cachedAd) {
                MMLog.d("AdCache", String.format("Deleting ad %s.", cachedAd.getId()));
                cachedAd.delete(context);
                return true;
            }
        });
        AdCache.cachedVideoSet = null;
        AdCache.cachedVideoList = null;
        AdCache.cachedVideoListLoaded = false;
        if (AdCache.nextCachedAdHashMap != null) {
            final Iterator<String> iterator = AdCache.nextCachedAdHashMap.keySet().iterator();
            while (iterator.hasNext()) {
                setNextCachedAd(context, iterator.next(), null);
            }
        }
        if (AdCache.incompleteDownloadHashMap != null) {
            final Iterator<String> iterator2 = AdCache.incompleteDownloadHashMap.keySet().iterator();
            while (iterator2.hasNext()) {
                setIncompleteDownload(context, iterator2.next(), null);
            }
        }
    }
    
    static boolean save(final Context p0, final CachedAd p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_2       
        //     2: aload_1        
        //     3: ifnonnull       8
        //     6: iconst_0       
        //     7: ireturn        
        //     8: aload_0        
        //     9: aload_1        
        //    10: invokevirtual   com/millennialmedia/android/CachedAd.getId:()Ljava/lang/String;
        //    13: invokestatic    com/millennialmedia/android/AdCache.getCachedAdFile:(Landroid/content/Context;Ljava/lang/String;)Ljava/io/File;
        //    16: astore_3       
        //    17: aload_3        
        //    18: ifnull          6
        //    21: iconst_2       
        //    22: anewarray       Ljava/lang/Object;
        //    25: astore          4
        //    27: aload           4
        //    29: iconst_0       
        //    30: aload_1        
        //    31: invokevirtual   com/millennialmedia/android/CachedAd.getId:()Ljava/lang/String;
        //    34: aastore        
        //    35: aload           4
        //    37: iconst_1       
        //    38: aload_3        
        //    39: aastore        
        //    40: ldc             "AdCache"
        //    42: ldc_w           "Saving CachedAd %s to %s"
        //    45: aload           4
        //    47: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //    50: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    53: new             Ljava/io/File;
        //    56: dup            
        //    57: aload_3        
        //    58: invokevirtual   java/io/File.getParent:()Ljava/lang/String;
        //    61: new             Ljava/lang/StringBuilder;
        //    64: dup            
        //    65: invokespecial   java/lang/StringBuilder.<init>:()V
        //    68: aload_1        
        //    69: invokevirtual   com/millennialmedia/android/CachedAd.getId:()Ljava/lang/String;
        //    72: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    75: ldc             "ad.lock"
        //    77: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    80: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    83: invokespecial   java/io/File.<init>:(Ljava/lang/String;Ljava/lang/String;)V
        //    86: astore          5
        //    88: aload           5
        //    90: invokevirtual   java/io/File.createNewFile:()Z
        //    93: ifne            145
        //    96: iconst_1       
        //    97: anewarray       Ljava/lang/Object;
        //   100: astore          17
        //   102: aload           17
        //   104: iconst_0       
        //   105: aload_1        
        //   106: invokevirtual   com/millennialmedia/android/CachedAd.getId:()Ljava/lang/String;
        //   109: aastore        
        //   110: ldc             "AdCache"
        //   112: ldc_w           "Could not save the cached ad %s. Ad was locked."
        //   115: aload           17
        //   117: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   120: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
        //   123: aload           5
        //   125: invokevirtual   java/io/File.delete:()Z
        //   128: pop            
        //   129: iconst_0       
        //   130: ireturn        
        //   131: astore          18
        //   133: ldc             "AdCache"
        //   135: ldc_w           "Failed to close"
        //   138: aload           18
        //   140: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   143: iconst_0       
        //   144: ireturn        
        //   145: new             Ljava/io/ObjectOutputStream;
        //   148: dup            
        //   149: new             Ljava/io/FileOutputStream;
        //   152: dup            
        //   153: aload_3        
        //   154: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //   157: invokespecial   java/io/ObjectOutputStream.<init>:(Ljava/io/OutputStream;)V
        //   160: astore          14
        //   162: aload           14
        //   164: aload_1        
        //   165: invokevirtual   com/millennialmedia/android/CachedAd.getType:()I
        //   168: invokevirtual   java/io/ObjectOutputStream.writeInt:(I)V
        //   171: aload           14
        //   173: aload_1        
        //   174: getfield        com/millennialmedia/android/CachedAd.expiration:Ljava/util/Date;
        //   177: invokevirtual   java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
        //   180: aload           14
        //   182: aload_1        
        //   183: getfield        com/millennialmedia/android/CachedAd.acid:Ljava/lang/String;
        //   186: invokevirtual   java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
        //   189: aload           14
        //   191: aload_1        
        //   192: getfield        com/millennialmedia/android/CachedAd.deferredViewStart:J
        //   195: invokevirtual   java/io/ObjectOutputStream.writeLong:(J)V
        //   198: aload           14
        //   200: aload_1        
        //   201: invokevirtual   java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
        //   204: aload           5
        //   206: invokevirtual   java/io/File.delete:()Z
        //   209: pop            
        //   210: aload           14
        //   212: invokevirtual   java/io/ObjectOutputStream.close:()V
        //   215: aload_1        
        //   216: aload_0        
        //   217: invokevirtual   com/millennialmedia/android/CachedAd.saveAssets:(Landroid/content/Context;)Z
        //   220: ifne            346
        //   223: aload_1        
        //   224: aload_0        
        //   225: invokevirtual   com/millennialmedia/android/CachedAd.delete:(Landroid/content/Context;)V
        //   228: iconst_0       
        //   229: ireturn        
        //   230: astore          15
        //   232: ldc             "AdCache"
        //   234: ldc_w           "Failed to close"
        //   237: aload           15
        //   239: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   242: goto            215
        //   245: astore          6
        //   247: aconst_null    
        //   248: astore          7
        //   250: iconst_1       
        //   251: anewarray       Ljava/lang/Object;
        //   254: astore          11
        //   256: aload           11
        //   258: iconst_0       
        //   259: aload_1        
        //   260: invokevirtual   com/millennialmedia/android/CachedAd.getId:()Ljava/lang/String;
        //   263: aastore        
        //   264: ldc             "AdCache"
        //   266: ldc_w           "There was a problem saving the cached ad %s."
        //   269: aload           11
        //   271: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   274: aload           6
        //   276: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   279: aload           7
        //   281: invokevirtual   java/io/File.delete:()Z
        //   284: pop            
        //   285: aload_2        
        //   286: ifnull          6
        //   289: aload_2        
        //   290: invokevirtual   java/io/ObjectOutputStream.close:()V
        //   293: iconst_0       
        //   294: ireturn        
        //   295: astore          12
        //   297: ldc             "AdCache"
        //   299: ldc_w           "Failed to close"
        //   302: aload           12
        //   304: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   307: iconst_0       
        //   308: ireturn        
        //   309: astore          8
        //   311: aconst_null    
        //   312: astore          5
        //   314: aload           5
        //   316: invokevirtual   java/io/File.delete:()Z
        //   319: pop            
        //   320: aload_2        
        //   321: ifnull          328
        //   324: aload_2        
        //   325: invokevirtual   java/io/ObjectOutputStream.close:()V
        //   328: aload           8
        //   330: athrow         
        //   331: astore          9
        //   333: ldc             "AdCache"
        //   335: ldc_w           "Failed to close"
        //   338: aload           9
        //   340: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   343: goto            328
        //   346: iconst_1       
        //   347: ireturn        
        //   348: astore          8
        //   350: aconst_null    
        //   351: astore_2       
        //   352: goto            314
        //   355: astore          8
        //   357: aload           14
        //   359: astore_2       
        //   360: goto            314
        //   363: astore          8
        //   365: aload           7
        //   367: astore          5
        //   369: goto            314
        //   372: astore          6
        //   374: aload           5
        //   376: astore          7
        //   378: aconst_null    
        //   379: astore_2       
        //   380: goto            250
        //   383: astore          6
        //   385: aload           14
        //   387: astore_2       
        //   388: aload           5
        //   390: astore          7
        //   392: goto            250
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  53     88     245    250    Ljava/lang/Exception;
        //  53     88     309    314    Any
        //  88     123    372    383    Ljava/lang/Exception;
        //  88     123    348    355    Any
        //  123    129    131    145    Ljava/io/IOException;
        //  145    162    372    383    Ljava/lang/Exception;
        //  145    162    348    355    Any
        //  162    204    383    395    Ljava/lang/Exception;
        //  162    204    355    363    Any
        //  204    215    230    245    Ljava/io/IOException;
        //  250    279    363    372    Any
        //  279    285    295    309    Ljava/io/IOException;
        //  289    293    295    309    Ljava/io/IOException;
        //  314    320    331    346    Ljava/io/IOException;
        //  324    328    331    346    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 197, Size: 197
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static void saveApidListSet(final SharedPreferences$Editor sharedPreferences$Editor, final String s) {
        final int index = s.indexOf(95);
        if (index >= 0 && index < s.length()) {
            final String substring = s.substring(index + 1);
            if (substring != null && !AdCache.apidListSet.contains(substring)) {
                final boolean empty = AdCache.apidListSet.isEmpty();
                StringBuilder sb = null;
                if (!empty) {
                    final Iterator<String> iterator = (Iterator<String>)AdCache.apidListSet.iterator();
                    final StringBuilder sb2 = new StringBuilder();
                    while (iterator.hasNext()) {
                        sb2.append(iterator.next() + MMSDK.COMMA);
                    }
                    sb = sb2;
                }
                final StringBuilder sb3 = new StringBuilder();
                String string;
                if (sb == null) {
                    string = "";
                }
                else {
                    string = sb.toString();
                }
                sharedPreferences$Editor.putString("nextCachedAd_apids", sb3.append(string).append(substring).toString());
                AdCache.apidListSet.add(substring);
            }
        }
    }
    
    private static void saveIncompleteDownloadHashMap(final Context context, final String s) {
        if (s != null) {
            final SharedPreferences$Editor edit = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
            saveApidListSet(edit, s);
            edit.putString("incompleteDownload_" + s, (String)AdCache.incompleteDownloadHashMap.get(s));
            edit.commit();
        }
    }
    
    private static void saveNextCachedAdHashMapValue(final Context context, final String s) {
        if (s != null) {
            final SharedPreferences$Editor edit = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
            saveApidListSet(edit, s);
            edit.putString("nextCachedAd_" + s, (String)AdCache.nextCachedAdHashMap.get(s));
            edit.commit();
        }
    }
    
    static void setEnableExternalStorage(final boolean isExternalEnabled) {
        AdCache.isExternalEnabled = isExternalEnabled;
    }
    
    static void setIncompleteDownload(final Context context, final String s, String s2) {
        synchronized (AdCache.class) {
            if (!AdCache.incompleteDownloadHashMapLoaded) {
                loadIncompleteDownloadHashMap(context);
            }
            if (s != null) {
                final Map incompleteDownloadHashMap = AdCache.incompleteDownloadHashMap;
                if (s2 == null) {
                    s2 = "";
                }
                incompleteDownloadHashMap.put(s, s2);
                saveIncompleteDownloadHashMap(context, s);
            }
        }
    }
    
    static void setNextCachedAd(final Context context, final String s, String s2) {
        synchronized (AdCache.class) {
            if (!AdCache.nextCachedAdHashMapLoaded) {
                loadNextCachedAdHashMap(context);
            }
            if (s != null) {
                final Map nextCachedAdHashMap = AdCache.nextCachedAdHashMap;
                if (s2 == null) {
                    s2 = "";
                }
                nextCachedAdHashMap.put(s, s2);
                saveNextCachedAdHashMapValue(context, s);
            }
        }
    }
    
    static boolean startDownloadTask(final Context context, final String s, final CachedAd cachedAd, final AdCache$AdCacheTaskListener adCache$AdCacheTaskListener) {
        return AdCacheThreadPool.sharedThreadPool().startDownloadTask(context, s, cachedAd, adCache$AdCacheTaskListener);
    }
}
