// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.os.Environment;
import java.util.Map;
import android.os.Build$VERSION;
import android.provider.Settings$System;
import android.media.AudioManager;
import java.security.MessageDigest;
import android.provider.Settings$Secure;
import java.util.Enumeration;
import org.apache.http.conn.util.InetAddressUtils;
import java.net.InetAddress;
import java.net.NetworkInterface;
import android.net.ConnectivityManager;
import android.content.res.Configuration;
import android.telephony.TelephonyManager;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import java.io.IOException;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.ads.identifier.AdvertisingIdClient$Info;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.app.AlertDialog;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager$NameNotFoundException;
import android.content.ComponentName;
import android.os.Looper;
import android.os.Handler;
import android.text.TextUtils;
import java.io.Serializable;
import android.content.Context;
import android.content.Intent;

class MMSDK$Event
{
    public static final String INTENT_CALENDAR_EVENT = "calendar";
    public static final String INTENT_EMAIL = "email";
    public static final String INTENT_EXTERNAL_BROWSER = "browser";
    public static final String INTENT_MAPS = "geo";
    public static final String INTENT_MARKET = "market";
    public static final String INTENT_PHONE_CALL = "tel";
    public static final String INTENT_STREAMING_VIDEO = "streamingVideo";
    public static final String INTENT_TXT_MESSAGE = "sms";
    private static final String KEY_ERROR = "error";
    static final String KEY_INTENT_TYPE = "intentType";
    static final String KEY_INTERNAL_ID = "internalId";
    static final String KEY_PACKAGE_NAME = "packageName";
    protected static final String TAG;
    
    static {
        TAG = MMSDK$Event.class.getName();
    }
    
    static void adSingleTap(final MMAdImpl mmAdImpl) {
        if (mmAdImpl != null) {
            MMSDK.runOnUiThread(new Runnable() {
                @Override
                public final void run() {
                    if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                        return;
                    }
                    try {
                        mmAdImpl.requestListener.onSingleTap(mmAdImpl.getCallingAd());
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                    }
                }
            });
            if (MMSDK.isBroadcastingEvents) {
                sendIntent(mmAdImpl.getContext(), new Intent("millennialmedia.action.ACTION_OVERLAY_TAP"), mmAdImpl.internalId);
                sendIntent(mmAdImpl.getContext(), new Intent("millennialmedia.action.ACTION_AD_SINGLE_TAP"), mmAdImpl.internalId);
            }
        }
    }
    
    static void displayStarted(final MMAdImpl mmAdImpl) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
            return;
        }
        if (MMSDK.isBroadcastingEvents) {
            sendIntent(mmAdImpl.getContext(), new Intent("millennialmedia.action.ACTION_DISPLAY_STARTED"), mmAdImpl.internalId);
        }
        overlayOpened(mmAdImpl);
    }
    
    static void fetchStartedCaching(final MMAdImpl mmAdImpl) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
        }
        else {
            MMSDK.runOnUiThread(new Runnable() {
                @Override
                public final void run() {
                    if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                        return;
                    }
                    try {
                        mmAdImpl.requestListener.MMAdRequestIsCaching(mmAdImpl.getCallingAd());
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                    }
                }
            });
            if (MMSDK.isBroadcastingEvents) {
                sendIntent(mmAdImpl.getContext(), new Intent("millennialmedia.action.ACTION_FETCH_STARTED_CACHING"), mmAdImpl.internalId);
            }
        }
    }
    
    static void intentStarted(final Context context, final String s, final long n) {
        if (MMSDK.isBroadcastingEvents && s != null) {
            sendIntent(context, new Intent("millennialmedia.action.ACTION_INTENT_STARTED").putExtra("intentType", s), n);
        }
    }
    
    protected static void logEvent(final String s) {
        MMLog.d("Logging event to: %s", s);
        Utils$ThreadUtils.execute(new Runnable() {
            @Override
            public final void run() {
                final HttpGetRequest httpGetRequest = new HttpGetRequest();
                try {
                    httpGetRequest.get(s);
                }
                catch (Exception ex) {
                    MMLog.e(MMSDK$Event.TAG, "Error logging event: ", ex);
                }
            }
        });
    }
    
    static void overlayClosed(final MMAdImpl mmAdImpl) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
        }
        else {
            MMSDK.runOnUiThread(new Runnable() {
                @Override
                public final void run() {
                    if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                        return;
                    }
                    try {
                        mmAdImpl.requestListener.MMAdOverlayClosed(mmAdImpl.getCallingAd());
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                    }
                }
            });
            if (MMSDK.isBroadcastingEvents && mmAdImpl.getContext() != null) {
                sendIntent(mmAdImpl.getContext(), new Intent("millennialmedia.action.ACTION_OVERLAY_CLOSED"), mmAdImpl.internalId);
            }
        }
    }
    
    static void overlayOpened(final MMAdImpl mmAdImpl) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
            return;
        }
        MMSDK.runOnUiThread(new Runnable() {
            @Override
            public final void run() {
                if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                    return;
                }
                try {
                    mmAdImpl.requestListener.MMAdOverlayLaunched(mmAdImpl.getCallingAd());
                }
                catch (Exception ex) {
                    MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                }
            }
        });
        overlayOpenedBroadCast(mmAdImpl.getContext(), mmAdImpl.internalId);
    }
    
    static void overlayOpenedBroadCast(final Context context, final long n) {
        if (MMSDK.isBroadcastingEvents) {
            sendIntent(context, new Intent("millennialmedia.action.ACTION_OVERLAY_OPENED"), n);
        }
    }
    
    static void requestCompleted(final MMAdImpl mmAdImpl) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
        }
        else {
            MMSDK.runOnUiThread(new Runnable() {
                @Override
                public final void run() {
                    if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                        return;
                    }
                    try {
                        mmAdImpl.requestListener.requestCompleted(mmAdImpl.getCallingAd());
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                    }
                }
            });
            if (MMSDK.isBroadcastingEvents) {
                sendIntent(mmAdImpl.getContext(), new Intent(mmAdImpl.getRequestCompletedAction()), mmAdImpl.internalId);
            }
        }
    }
    
    static void requestFailed(final MMAdImpl mmAdImpl, final MMException ex) {
        if (mmAdImpl == null) {
            MMLog.w("MMSDK", "No Context in the listener: ");
        }
        else {
            MMSDK.runOnUiThread(new Runnable() {
                @Override
                public final void run() {
                    if (mmAdImpl == null || mmAdImpl.requestListener == null) {
                        return;
                    }
                    try {
                        mmAdImpl.requestListener.requestFailed(mmAdImpl.getCallingAd(), ex);
                    }
                    catch (Exception ex) {
                        MMLog.e("MMSDK", "Exception raised in your RequestListener: ", ex);
                    }
                }
            });
            if (MMSDK.isBroadcastingEvents) {
                sendIntent(mmAdImpl.getContext(), new Intent(mmAdImpl.getRequestFailedAction()).putExtra("error", (Serializable)ex), mmAdImpl.internalId);
            }
        }
    }
    
    private static final void sendIntent(final Context context, final Intent intent, final long n) {
        if (context != null) {
            intent.addCategory("millennialmedia.category.CATEGORY_SDK");
            if (n != -4L) {
                intent.putExtra("internalId", n);
            }
            intent.putExtra("packageName", context.getPackageName());
            final String stringExtra = intent.getStringExtra("intentType");
            String format;
            if (!TextUtils.isEmpty((CharSequence)stringExtra)) {
                format = String.format(" Type[%s]", stringExtra);
            }
            else {
                format = "";
            }
            MMLog.v("MMSDK", " @@ Intent: " + intent.getAction() + " " + format + " for " + n);
            context.sendBroadcast(intent);
        }
    }
}
