// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.content.Context;

public final class MMInterstitial implements MMAd
{
    private static final String TAG = "MMInterstitial";
    MMAdImpl adImpl;
    int externalId;
    
    public MMInterstitial(final Context context) {
        this.adImpl = new MMInterstitial$MMInterstitialAdImpl(this, context.getApplicationContext());
        this.adImpl.adType = "i";
    }
    
    private void fetchInternal() {
        if (this.isAdAvailable()) {
            MMLog.d("MMInterstitial", "Ad already fetched and ready for display...");
            MMSDK$Event.requestFailed(this.adImpl, new MMException(17));
            return;
        }
        MMLog.d("MMInterstitial", "Fetching new ad...");
        this.adImpl.requestAd();
    }
    
    public final boolean display() {
        return this.display(false);
    }
    
    public final boolean display(final boolean b) {
        if (!MMSDK.isUiThread()) {
            MMLog.e("MMInterstitial", MMException.getErrorCodeMessage(3));
        }
        else {
            int displayInternal;
            try {
                displayInternal = this.displayInternal();
                if (displayInternal != 0 && b) {
                    throw new MMException(displayInternal);
                }
            }
            catch (Exception ex) {
                if (b) {
                    throw new MMException(ex);
                }
                return false;
            }
            if (displayInternal == 0) {
                return true;
            }
        }
        return false;
    }
    
    final int displayInternal() {
        try {
            MMAdImplController.assignAdViewController(this.adImpl);
            if (this.adImpl.controller != null) {
                return this.adImpl.controller.display(this.adImpl);
            }
        }
        catch (Exception ex) {
            MMLog.e("MMInterstitial", "There was an exception displaying a cached ad. ", ex);
            ex.printStackTrace();
        }
        return 100;
    }
    
    public final void fetch() {
        if (this.adImpl != null && this.adImpl.requestListener != null) {
            this.fetch(this.adImpl.mmRequest, this.adImpl.requestListener);
            return;
        }
        this.fetchInternal();
    }
    
    public final void fetch(final MMRequest mmRequest) {
        if (this.adImpl != null && this.adImpl.requestListener != null) {
            this.fetch(mmRequest, this.adImpl.requestListener);
            return;
        }
        this.fetchInternal();
    }
    
    public final void fetch(final MMRequest mmRequest, final RequestListener requestListener) {
        if (this.adImpl != null) {
            this.adImpl.mmRequest = mmRequest;
            this.adImpl.requestListener = requestListener;
        }
        this.fetchInternal();
    }
    
    @Override
    public final String getApid() {
        return this.adImpl.getApid();
    }
    
    @Override
    public final boolean getIgnoresDensityScaling() {
        return this.adImpl.getIgnoresDensityScaling();
    }
    
    @Override
    public final RequestListener getListener() {
        return this.adImpl.getListener();
    }
    
    @Override
    public final MMRequest getMMRequest() {
        return this.adImpl.getMMRequest();
    }
    
    public final boolean isAdAvailable() {
        if (!MMSDK.isUiThread()) {
            MMLog.e("MMInterstitial", MMException.getErrorCodeMessage(3));
        }
        else {
            try {
                MMAdImplController.assignAdViewController(this.adImpl);
                if (this.adImpl.controller != null && this.adImpl.controller.isAdAvailable(this.adImpl) == 0) {
                    return true;
                }
            }
            catch (Exception ex) {
                MMLog.e("MMInterstitial", "There was an exception checking for a cached ad. ", ex);
                ex.printStackTrace();
                return false;
            }
        }
        return false;
    }
    
    @Override
    public final void setApid(final String apid) {
        this.adImpl.setApid(apid);
    }
    
    @Override
    public final void setIgnoresDensityScaling(final boolean ignoresDensityScaling) {
        this.adImpl.setIgnoresDensityScaling(ignoresDensityScaling);
    }
    
    @Override
    public final void setListener(final RequestListener listener) {
        this.adImpl.setListener(listener);
    }
    
    @Override
    public final void setMMRequest(final MMRequest mmRequest) {
        this.adImpl.setMMRequest(mmRequest);
    }
}
