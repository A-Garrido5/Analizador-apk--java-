// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.lang.ref.WeakReference;
import android.graphics.Bitmap;
import android.webkit.WebView;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import android.webkit.WebViewClient;

abstract class MMWebViewClient extends WebViewClient
{
    private static final String TAG = "MMWebViewClient";
    private ExecutorService cachedExecutor;
    boolean isLastMMCommandResize;
    MMWebViewClient$MMWebViewClientListener mmWebViewClientListener;
    HttpRedirection$RedirectionListenerImpl redirectListenerImpl;
    
    MMWebViewClient(final MMWebViewClient$MMWebViewClientListener mmWebViewClientListener, final HttpRedirection$RedirectionListenerImpl redirectListenerImpl) {
        this.cachedExecutor = Executors.newCachedThreadPool();
        this.mmWebViewClientListener = mmWebViewClientListener;
        this.redirectListenerImpl = redirectListenerImpl;
    }
    
    public void onPageFinished(final WebView webView, final String s) {
        final MMWebView mraidState = (MMWebView)webView;
        if (!mraidState.isOriginalUrl(s)) {
            this.mmWebViewClientListener.onPageFinished(s);
            mraidState.setAdProperties();
            this.setMraidState(mraidState);
            MMLog.d("MMWebViewClient", "onPageFinished webview: " + mraidState.toString() + "url is " + s);
        }
        super.onPageFinished(webView, s);
    }
    
    public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
        MMLog.d("MMWebViewClient", String.format("onPageStarted: %s", s));
        this.mmWebViewClientListener.onPageStarted(s);
        final MMWebView mmWebView = (MMWebView)webView;
        mmWebView.mraidState = "loading";
        mmWebView.requiresPreAdSizeFix = false;
        super.onPageStarted(webView, s, bitmap);
    }
    
    public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
        MMLog.e("MMWebViewClient", String.format("Error: %s %s %s", n, s, s2));
    }
    
    abstract void setMraidState(final MMWebView p0);
    
    public boolean shouldOverrideUrlLoading(final WebView webView, final String url) {
        final MMWebView mmWebView = (MMWebView)webView;
        if (!mmWebView.isOriginalUrl(url)) {
            MMLog.v("MMWebViewClient", "@@@@@@@@@@SHOULDOVERRIDELOADING@@@@@@@@@@@@@ Url is " + url + " for " + webView);
            if (url.substring(0, 6).equalsIgnoreCase("mmsdk:")) {
                MMLog.v("MMWebViewClient", "Running JS bridge command: " + url);
                final MMCommand mmCommand = new MMCommand((MMWebView)webView, url);
                this.isLastMMCommandResize = mmCommand.isResizeCommand();
                this.cachedExecutor.execute(mmCommand);
                return true;
            }
            if (this.redirectListenerImpl.isExpandingToUrl()) {
                return false;
            }
            this.redirectListenerImpl.url = url;
            this.redirectListenerImpl.weakContext = new WeakReference((T)webView.getContext());
            this.redirectListenerImpl.creatorAdImplInternalId = mmWebView.creatorAdImplId;
            HttpRedirection.startActivityFromUri(this.redirectListenerImpl);
        }
        return true;
    }
}
