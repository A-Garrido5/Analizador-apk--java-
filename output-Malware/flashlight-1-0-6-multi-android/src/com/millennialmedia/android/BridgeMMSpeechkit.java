// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.media.MediaPlayer;
import android.webkit.URLUtil;
import android.text.TextUtils;
import java.io.File;
import android.net.Uri;
import java.util.Map;
import android.content.Context;
import android.media.MediaPlayer$OnCompletionListener;

public class BridgeMMSpeechkit extends MMJSObject implements MediaPlayer$OnCompletionListener, BridgeMMMedia$Audio$PeriodicListener
{
    private static final String TAG = "BridgeMMSpeechkit";
    private String ADD_CUSTOM_VOICE_WORDS;
    private String CACHE_AUDIO;
    private String DELETE_CUSTOM_VOICE_WORDS;
    private String END_RECORDING;
    private String GET_SESSION_ID;
    private String PLAY_AUDIO;
    private String RELEASE_VOICE;
    private String SAMPLE_BACKGROUND_AUDIO_LEVEL;
    private String START_RECORDING;
    private String STOP_AUDIO;
    private String TEXT_TO_SPEECH;
    
    BridgeMMSpeechkit() {
        this.START_RECORDING = "startRecording";
        this.END_RECORDING = "endRecording";
        this.CACHE_AUDIO = "cacheAudio";
        this.GET_SESSION_ID = "getSessionId";
        this.PLAY_AUDIO = "playAudio";
        this.TEXT_TO_SPEECH = "textToSpeech";
        this.STOP_AUDIO = "stopAudio";
        this.SAMPLE_BACKGROUND_AUDIO_LEVEL = "sampleBackgroundAudioLevel";
        this.RELEASE_VOICE = "releaseVoice";
        this.ADD_CUSTOM_VOICE_WORDS = "addCustomVoiceWords";
        this.DELETE_CUSTOM_VOICE_WORDS = "deleteCustomVoiceWords";
    }
    
    private NVASpeechKit getCreateSpeechKit() {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null && mmWebView.allowSpeechCreationCommands()) {
            if (getSpeechKitInternal() != null) {
                return getSpeechKitInternal();
            }
            final Context context = mmWebView.getContext();
            if (context != null) {
                final NVASpeechKit speechKit = new NVASpeechKit(mmWebView);
                setSpeechKit(speechKit);
                final HandShake$NuanceCredentials nuanceCredentials = HandShake.sharedHandShake(context).nuanceCredentials;
                if (nuanceCredentials != null) {
                    speechKit.initialize(nuanceCredentials, context.getApplicationContext());
                }
                return speechKit;
            }
        }
        return null;
    }
    
    static BridgeMMSpeechkit$SpeechKitHolder getInstance() {
        return BridgeMMSpeechkit$SingletonHolder.INSTANCE;
    }
    
    private NVASpeechKit getSpeechKit() {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null && mmWebView.allowRecordingCommands()) {
            return getSpeechKitInternal();
        }
        return null;
    }
    
    static NVASpeechKit getSpeechKitInternal() {
        return getInstance().getSpeechKit();
    }
    
    private NVASpeechKit getSpeechKitRelease() {
        return getSpeechKitInternal();
    }
    
    private MMJSResponse playAudioInternal(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("path");
        if (context != null && s != null) {
            final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio(context);
            if (sharedAudio == null) {
                return null;
            }
            if (sharedAudio.isPlaying()) {
                return MMJSResponse.responseWithError("Audio already playing.");
            }
            if (s.startsWith("http")) {
                return sharedAudio.playAudio(Uri.parse(s), Boolean.parseBoolean(map.get("repeat")));
            }
            final File downloadFile = AdCache.getDownloadFile(context, s);
            if (downloadFile.exists()) {
                return sharedAudio.playAudio(Uri.fromFile(downloadFile), Boolean.parseBoolean(map.get("repeat")));
            }
        }
        return null;
    }
    
    static boolean releaseSpeechKit() {
        return getInstance().release();
    }
    
    static void setSpeechKit(final NVASpeechKit speechKit) {
        getInstance().release();
        getInstance().setSpeechKit(speechKit);
    }
    
    public MMJSResponse addCustomVoiceWords(final Map map) {
        final NVASpeechKit createSpeechKit = this.getCreateSpeechKit();
        if (createSpeechKit == null) {
            return MMJSResponse.responseWithError("Unable to create speech kit");
        }
        final String s = map.get("words");
        if (!TextUtils.isEmpty((CharSequence)s)) {
            createSpeechKit.updateCustomWords(NVASpeechKit$CustomWordsOp.Add, s.split(","));
            this.injectJavascript("javascript:MMJS.sdk.customVoiceWordsAdded()");
            return MMJSResponse.responseWithSuccess("Added " + s);
        }
        return null;
    }
    
    public MMJSResponse cacheAudio(final Map map) {
        final String s = map.get("url");
        if (!URLUtil.isValidUrl(s)) {
            return MMJSResponse.responseWithError("Invalid url");
        }
        if (this.contextRef != null) {
            final Context context = (Context)this.contextRef.get();
            if (context != null && AdCache.downloadComponentExternalStorage(s, s.substring(1 + s.lastIndexOf("/")), context)) {
                this.injectJavascript("javascript:MMJS.sdk.audioCached()");
                return MMJSResponse.responseWithSuccess("Successfully cached audio at " + s);
            }
        }
        return MMJSResponse.responseWithError("Failed to cache audio at" + s);
    }
    
    public MMJSResponse deleteCustomVoiceWords(final Map map) {
        final NVASpeechKit createSpeechKit = this.getCreateSpeechKit();
        if (createSpeechKit == null) {
            return MMJSResponse.responseWithError("Unable to create speech kit");
        }
        final String s = map.get("words");
        if (!TextUtils.isEmpty((CharSequence)s)) {
            createSpeechKit.updateCustomWords(NVASpeechKit$CustomWordsOp.Remove, s.split(","));
            this.injectJavascript("javascript:MMJS.sdk.customVoiceWordsDeleted()");
            return MMJSResponse.responseWithSuccess("Deleted " + s);
        }
        return null;
    }
    
    public MMJSResponse endRecording(final Map map) {
        final NVASpeechKit speechKit = this.getSpeechKit();
        if (speechKit == null) {
            return MMJSResponse.responseWithError("Unable to get speech kit");
        }
        synchronized (speechKit) {
            if (speechKit.endRecording()) {
                return MMJSResponse.responseWithSuccess();
            }
        }
        // monitorexit(speechKit)
        return MMJSResponse.responseWithError("Failed in speechKit");
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map map) {
        MMJSResponse startRecording;
        if (this.START_RECORDING.equals(s)) {
            startRecording = this.startRecording(map);
        }
        else {
            if (this.END_RECORDING.equals(s)) {
                return this.endRecording(map);
            }
            if (this.CACHE_AUDIO.equals(s)) {
                return this.cacheAudio(map);
            }
            if (this.GET_SESSION_ID.equals(s)) {
                return this.getSessionId(map);
            }
            if (this.PLAY_AUDIO.equals(s)) {
                return this.playAudio(map);
            }
            if (this.TEXT_TO_SPEECH.equals(s)) {
                return this.textToSpeech(map);
            }
            if (this.STOP_AUDIO.equals(s)) {
                return this.stopAudio(map);
            }
            if (this.SAMPLE_BACKGROUND_AUDIO_LEVEL.equals(s)) {
                return this.sampleBackgroundAudioLevel(map);
            }
            if (this.RELEASE_VOICE.equals(s)) {
                return this.releaseVoice(map);
            }
            if (this.ADD_CUSTOM_VOICE_WORDS.equals(s)) {
                return this.addCustomVoiceWords(map);
            }
            final boolean equals = this.DELETE_CUSTOM_VOICE_WORDS.equals(s);
            startRecording = null;
            if (equals) {
                return this.deleteCustomVoiceWords(map);
            }
        }
        return startRecording;
    }
    
    public MMJSResponse getSessionId(final Map map) {
        final NVASpeechKit speechKit = this.getSpeechKit();
        if (speechKit == null) {
            return MMJSResponse.responseWithError("No SpeechKit session open.");
        }
        final String sessionId = speechKit.getSessionId();
        if (!TextUtils.isEmpty((CharSequence)sessionId)) {
            return MMJSResponse.responseWithSuccess(sessionId);
        }
        return MMJSResponse.responseWithError("No SpeechKit session open.");
    }
    
    void injectJavascript(final String s) {
        final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
        if (mmWebView != null) {
            mmWebView.loadUrl(s);
        }
    }
    
    public void onCompletion(final MediaPlayer mediaPlayer) {
        this.injectJavascript("javascript:MMJS.sdk.audioCompleted()");
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio(context);
            if (sharedAudio != null) {
                sharedAudio.removeCompletionListener((MediaPlayer$OnCompletionListener)this);
                sharedAudio.removePeriodicListener(this);
            }
        }
    }
    
    public void onUpdate(final int n) {
        this.injectJavascript("javascript:MMJS.sdk.audioPositionChange(" + n + ")");
    }
    
    public MMJSResponse playAudio(final Map map) {
        MMJSResponse mmjsResponse;
        if (this.getCreateSpeechKit() == null) {
            mmjsResponse = MMJSResponse.responseWithError("Unable to create speech kit");
        }
        else {
            if (!URLUtil.isValidUrl((String)map.get("url"))) {
                return MMJSResponse.responseWithError("Invalid url");
            }
            final String s = map.get("url");
            if (!TextUtils.isEmpty((CharSequence)s)) {
                final Context context = (Context)this.contextRef.get();
                if (context != null) {
                    final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio(context);
                    if (sharedAudio != null) {
                        sharedAudio.addCompletionListener((MediaPlayer$OnCompletionListener)this);
                        sharedAudio.addPeriodicListener(this);
                    }
                    map.put("path", s);
                    mmjsResponse = this.playAudioInternal(map);
                    if (mmjsResponse != null && mmjsResponse.result == 1) {
                        this.injectJavascript("javascript:MMJS.sdk.audioStarted()");
                        return mmjsResponse;
                    }
                    return mmjsResponse;
                }
            }
            return null;
        }
        return mmjsResponse;
    }
    
    public MMJSResponse releaseVoice(final Map map) {
        if (releaseSpeechKit()) {
            return MMJSResponse.responseWithError("Unable to get speech kit");
        }
        return MMJSResponse.responseWithSuccess("released speechkit");
    }
    
    public MMJSResponse sampleBackgroundAudioLevel(final Map map) {
        final NVASpeechKit createSpeechKit = this.getCreateSpeechKit();
        if (createSpeechKit == null) {
            return MMJSResponse.responseWithError("Unable to create speech kit");
        }
        createSpeechKit.startSampleRecording();
        return null;
    }
    
    public MMJSResponse startRecording(final Map map) {
        final NVASpeechKit createSpeechKit = this.getCreateSpeechKit();
        if (createSpeechKit == null) {
            return MMJSResponse.responseWithError("Unable to create speech kit");
        }
        String s = map.get("language");
        if (TextUtils.isEmpty((CharSequence)s)) {
            s = "en_GB";
        }
        if (createSpeechKit.startRecording(s)) {
            return MMJSResponse.responseWithSuccess();
        }
        return MMJSResponse.responseWithError("Failed in speechKit");
    }
    
    public MMJSResponse stopAudio(final Map map) {
        final NVASpeechKit speechKit = this.getSpeechKit();
        if (speechKit == null) {
            return MMJSResponse.responseWithError("Unable to get speech kit");
        }
        speechKit.stopActions();
        if (this.contextRef != null) {
            final BridgeMMMedia$Audio sharedAudio = BridgeMMMedia$Audio.sharedAudio((Context)this.contextRef.get());
            if (sharedAudio != null) {
                return sharedAudio.stop();
            }
        }
        return MMJSResponse.responseWithSuccess();
    }
    
    public MMJSResponse textToSpeech(final Map map) {
        MMLog.d("BridgeMMSpeechkit", "@@-Calling textToSpeech");
        final NVASpeechKit createSpeechKit = this.getCreateSpeechKit();
        if (createSpeechKit == null) {
            return MMJSResponse.responseWithError("Unable to create speech kit");
        }
        String s = map.get("language");
        final String s2 = map.get("text");
        if (TextUtils.isEmpty((CharSequence)s)) {
            s = "en_GB";
        }
        createSpeechKit.stopActions();
        if (createSpeechKit.textToSpeech(s2, s)) {
            return MMJSResponse.responseWithSuccess();
        }
        return MMJSResponse.responseWithError("Failed in speechKit");
    }
}
