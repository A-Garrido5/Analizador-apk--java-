// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.graphics.drawable.Drawable;
import android.view.ViewParent;
import android.view.ViewGroup;
import android.view.animation.Animation$AnimationListener;
import android.view.animation.AlphaAnimation;
import android.view.View$OnClickListener;
import android.view.animation.Animation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.view.View;
import android.app.Activity;
import android.content.Context;
import android.widget.ProgressBar;
import java.lang.ref.WeakReference;
import android.widget.Button;

class AdViewOverlayView extends MMLayout
{
    private static final String MRAID_CLOSE_BUTTON_DESRIPTION = "mraidCloseButton";
    private static final String TAG = "AdViewOverlayView";
    private Button mraidCloseButton;
    AdViewOverlayView$CloseTopDrawable mraidCloseDrawable;
    WeakReference overlayActivityRef;
    private ProgressBar progressBar;
    private boolean progressDone;
    OverlaySettings settings;
    
    AdViewOverlayView(final AdViewOverlayActivity adViewOverlayActivity, final OverlaySettings settings) {
        super((Context)adViewOverlayActivity.activity);
        this.overlayActivityRef = new WeakReference((T)adViewOverlayActivity);
        this.adImpl = new AdViewOverlayView$AdViewOverlayViewMMAdImpl(this, (Context)adViewOverlayActivity.activity);
        this.setId(15062);
        this.adImpl.adType = "i";
        this.settings = settings;
        final boolean b = adViewOverlayActivity.activity instanceof Activity;
        AdViewOverlayView$NonConfigurationInstance adViewOverlayView$NonConfigurationInstance = null;
        if (b) {
            adViewOverlayView$NonConfigurationInstance = (AdViewOverlayView$NonConfigurationInstance)adViewOverlayActivity.activity.getLastNonConfigurationInstance();
            if (adViewOverlayView$NonConfigurationInstance != null) {
                this.progressDone = adViewOverlayView$NonConfigurationInstance.progressDone;
                this.adImpl.controller = adViewOverlayView$NonConfigurationInstance.controller;
                this.settings = adViewOverlayView$NonConfigurationInstance.settings;
                if (this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
                    this.addView((View)this.adImpl.controller.webView);
                }
                MMLog.d("AdViewOverlayView", "Restoring configurationinstance w/ controller= " + adViewOverlayView$NonConfigurationInstance.controller);
            }
            else {
                MMLog.d("AdViewOverlayView", "Null configurationinstance ");
            }
        }
        final float density = adViewOverlayActivity.activity.getResources().getDisplayMetrics().density;
        RelativeLayout$LayoutParams layoutParams;
        if (this.settings.height != 0 && this.settings.width != 0) {
            layoutParams = new RelativeLayout$LayoutParams((int)(density * this.settings.width), (int)(density * this.settings.height));
        }
        else {
            layoutParams = new RelativeLayout$LayoutParams(-1, -1);
        }
        layoutParams.addRule(13);
        this.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        final Integer value = (int)(0.0625f * density * this.settings.shouldResizeOverlay);
        this.setPadding((int)value, (int)value, (int)value, (int)value);
        this.mraidCloseButton = this.initMRaidCloseButton((Context)adViewOverlayActivity.activity, density);
        if (this.settings.isExpanded() && !this.settings.hasExpandUrl()) {
            this.adImpl.linkForExpansionId = this.settings.creatorAdImplId;
        }
        MMAdImplController.assignAdViewController(this.adImpl);
        if (this.mraidCloseButton != null) {
            this.addView((View)this.mraidCloseButton);
        }
        if (!this.progressDone && !this.settings.isExpanded() && !this.settings.isFromInterstitial()) {
            this.initProgressBar();
        }
        if (this.settings.getIsTransparent()) {
            if (this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
                this.adImpl.controller.webView.setBackgroundColor(0);
            }
            this.setBackgroundColor(0);
        }
        else {
            if (this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
                this.adImpl.controller.webView.setBackgroundColor(-1);
            }
            this.setBackgroundColor(-1);
        }
        if (this.settings.enableHardwareAccel() && this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
            this.adImpl.controller.webView.enableHardwareAcceleration();
        }
        if (adViewOverlayView$NonConfigurationInstance == null) {
            this.animateView();
        }
        this.setUseCustomClose(this.settings.getUseCustomClose());
    }
    
    private void animateView() {
        Object o;
        if (this.settings.getTransition().equals("slideup")) {
            o = new TranslateAnimation(1, 0.0f, 1, 0.0f, 1, 1.0f, 1, 0.0f);
            MMLog.v("AdViewOverlayView", "Translate up");
        }
        else if (this.settings.getTransition().equals("slidedown")) {
            o = new TranslateAnimation(1, 0.0f, 1, 0.0f, 1, -1.0f, 1, 0.0f);
            MMLog.v("AdViewOverlayView", "Translate down");
        }
        else {
            if (!this.settings.getTransition().equals("explode")) {
                return;
            }
            final ScaleAnimation scaleAnimation = new ScaleAnimation(1.1f, 0.9f, 0.1f, 0.9f, 1, 0.5f, 1, 0.5f);
            MMLog.v("AdViewOverlayView", "Explode");
            o = scaleAnimation;
        }
        ((Animation)o).setDuration(this.settings.getTransitionDurationInMillis());
        this.startAnimation((Animation)o);
    }
    
    private RelativeLayout$LayoutParams getCloseAreaParams(final float n) {
        final int n2 = (int)(0.5f + 50.0f * n);
        final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(n2, n2);
        relativeLayout$LayoutParams.addRule(11);
        relativeLayout$LayoutParams.addRule(10);
        return relativeLayout$LayoutParams;
    }
    
    private Button initMRaidCloseButton(final Context context, final float n) {
        final Button button = new Button(context);
        button.setId(301);
        button.setContentDescription((CharSequence)"mraidCloseButton");
        this.mraidCloseDrawable = new AdViewOverlayView$CloseTopDrawable(true, n);
        button.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                MMLog.v("AdViewOverlayView", "Close button clicked.");
                AdViewOverlayView.this.finishOverlayWithAnimation();
            }
        });
        final RelativeLayout$LayoutParams closeAreaParams = this.getCloseAreaParams(n);
        button.setLayoutParams((ViewGroup$LayoutParams)closeAreaParams);
        button.post((Runnable)new AdViewOverlayView$SetCloseButtonTouchDelegateRunnable(button, closeAreaParams.topMargin, closeAreaParams.leftMargin, closeAreaParams.bottomMargin, closeAreaParams.rightMargin));
        return button;
    }
    
    private void initProgressBar() {
        final AdViewOverlayActivity adViewOverlayActivity = (AdViewOverlayActivity)this.overlayActivityRef.get();
        if (adViewOverlayActivity != null) {
            (this.progressBar = new ProgressBar((Context)adViewOverlayActivity.activity)).setIndeterminate(true);
            this.progressBar.setVisibility(0);
            final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-2, -2);
            relativeLayout$LayoutParams.addRule(13);
            this.addView((View)this.progressBar, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
        }
    }
    
    private void removeProgressBar() {
        if (!this.progressDone && this.progressBar != null) {
            this.progressDone = true;
            this.progressBar.setVisibility(8);
            this.removeView((View)this.progressBar);
            this.progressBar = null;
        }
    }
    
    @Override
    void addInlineVideo() {
        super.addInlineVideo();
        this.bringMraidCloseToFront();
    }
    
    boolean attachWebViewToLink() {
        return this.adImpl != null && this.adImpl.linkForExpansionId != 0L && MMAdImplController.attachWebViewFromOverlay(this.adImpl);
    }
    
    void bringMraidCloseToFront() {
        if (this.mraidCloseButton != null) {
            this.mraidCloseButton.bringToFront();
        }
    }
    
    @Override
    void closeAreaTouched() {
        this.post((Runnable)new Runnable() {
            @Override
            public void run() {
                AdViewOverlayView.this.finishOverlayWithAnimation();
            }
        });
    }
    
    void finishOverlayWithAnimation() {
        MMLog.d("AdViewOverlayView", "Ad overlay closed");
        if (this.getContext() == null) {
            return;
        }
        final AlphaAnimation alphaAnimation = new AlphaAnimation(1.0f, 0.0f);
        alphaAnimation.setAnimationListener((Animation$AnimationListener)new AdViewOverlayView$AnimationListener(this));
        alphaAnimation.setFillEnabled(true);
        alphaAnimation.setFillBefore(true);
        alphaAnimation.setFillAfter(true);
        alphaAnimation.setDuration(400L);
        this.startAnimation((Animation)alphaAnimation);
    }
    
    @Override
    void fullScreenVideoLayout() {
        this.removeView((View)this.inlineVideoLayout);
        this.addView((View)this.inlineVideoLayout, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
        this.bringMraidCloseToFront();
    }
    
    Object getNonConfigurationInstance() {
        final AdViewOverlayView$NonConfigurationInstance adViewOverlayView$NonConfigurationInstance = new AdViewOverlayView$NonConfigurationInstance(null);
        if (this.adImpl != null) {
            MMLog.d("AdViewOverlayView", "Saving getNonConfigurationInstance for " + this.adImpl);
            if (this.adImpl.controller != null && this.adImpl.controller.webView != null) {
                this.adImpl.controller.webView.removeFromParent();
            }
            adViewOverlayView$NonConfigurationInstance.controller = this.adImpl.controller;
        }
        adViewOverlayView$NonConfigurationInstance.progressDone = this.progressDone;
        adViewOverlayView$NonConfigurationInstance.settings = this.settings;
        return adViewOverlayView$NonConfigurationInstance;
    }
    
    void getWebContent(final String s) {
        new AdViewOverlayView$FetchWebViewContentTask(this, s).execute((Object[])new Void[0]);
    }
    
    void injectJS(final String s) {
        if (this.adImpl.controller != null) {
            this.adImpl.controller.loadUrl(s);
        }
    }
    
    void inlineConfigChange() {
        if (this.inlineVideoView != null && this.inlineVideoLayout != null) {
            this.inlineVideoLayout.setLayoutParams((ViewGroup$LayoutParams)this.inlineVideoView.getCustomLayoutParams());
            this.bringMraidCloseToFront();
        }
    }
    
    void killWebView() {
        BridgeMMSpeechkit.releaseSpeechKit();
        if (this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
            this.adImpl.controller.webView.clearFocus();
            this.adImpl.controller.webView.setMraidViewableHidden();
            if (this.adImpl.adType == "i") {
                this.adImpl.controller.webView.setMraidHidden();
            }
            this.adImpl.controller.webView.onPauseWebView();
        }
    }
    
    void removeSelfAndAll() {
        this.removeAllViews();
        final ViewParent parent = this.getParent();
        if (parent != null && parent instanceof ViewGroup) {
            ((ViewGroup)parent).removeView((View)this);
        }
    }
    
    @Override
    void repositionVideoLayout() {
        this.removeView((View)this.inlineVideoLayout);
        this.addView((View)this.inlineVideoLayout, (ViewGroup$LayoutParams)this.inlineVideoView.getCustomLayoutParams());
        this.bringMraidCloseToFront();
    }
    
    void setUseCustomClose(final boolean useCustomClose) {
        this.settings.setUseCustomClose(useCustomClose);
        final Button mraidCloseButton = this.mraidCloseButton;
        Drawable mraidCloseDrawable;
        if (useCustomClose) {
            mraidCloseDrawable = null;
        }
        else {
            mraidCloseDrawable = this.mraidCloseDrawable;
        }
        mraidCloseButton.setBackgroundDrawable(mraidCloseDrawable);
    }
}
