// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.net.Uri;
import android.content.Intent;
import android.content.ActivityNotFoundException;
import android.os.Parcelable;
import android.content.Context;
import java.lang.ref.WeakReference;
import java.net.URISyntaxException;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.net.MalformedURLException;
import java.net.URI;
import android.text.TextUtils;
import java.net.URL;
import java.net.HttpURLConnection;

final class HttpRedirection
{
    private static final String HEADER_LOCATION = "Location";
    private static final String HTTPS = "https";
    private static final String LOG_URL_FORMAT = "Redirecting to: %s";
    private static final String METHOD_GET = "GET";
    private static final String TAG = "HttpRedirection";
    
    static final String navigateRedirects(final String s) {
        if (s == null) {
            return null;
        }
        HttpURLConnection.setFollowRedirects(false);
        String string = s;
        try {
            while (!string.startsWith("https")) {
                final URL url = new URL(string);
                final HttpURLConnection httpURLConnection = (HttpURLConnection)url.openConnection();
                httpURLConnection.setConnectTimeout(10000);
                httpURLConnection.setRequestMethod("GET");
                httpURLConnection.connect();
                final int responseCode = httpURLConnection.getResponseCode();
                final String headerField = httpURLConnection.getHeaderField("Location");
                if (responseCode < 300 || responseCode >= 400 || TextUtils.isEmpty((CharSequence)headerField)) {
                    goto Label_0183;
                }
                final URI uri = new URI(headerField);
                if (uri.isAbsolute()) {
                    goto Label_0172;
                }
                string = url.toURI().resolve(uri).toString();
                MMLog.v("HttpRedirection", String.format("Redirecting to: %s", string));
            }
            goto Label_0183;
        }
        catch (MalformedURLException ex) {
            final String s2 = string;
            MMLog.e("HttpRedirection", "Bad url scheme", ex);
            return s2;
        }
        catch (SocketTimeoutException ex2) {
            final String s3 = string;
            MMLog.e("HttpRedirection", "Connection timeout.", ex2);
            return s3;
        }
        catch (IOException ex3) {
            final String s4 = string;
            MMLog.e("HttpRedirection", "IOException following redirects: ", ex3);
            return s4;
        }
        catch (URISyntaxException ex4) {
            final String s5 = string;
            MMLog.e("HttpRedirection", "URI Syntax incorrect.", ex4);
            return s5;
        }
    }
    
    static void startActivityFromUri(final HttpRedirection$RedirectionListenerImpl httpRedirection$RedirectionListenerImpl) {
        if (httpRedirection$RedirectionListenerImpl == null || httpRedirection$RedirectionListenerImpl.url == null || httpRedirection$RedirectionListenerImpl.weakContext == null) {
            return;
        }
        Utils$ThreadUtils.execute(new Runnable() {
            final /* synthetic */ WeakReference val$listenerReference = new WeakReference((T)httpRedirection$RedirectionListenerImpl);
            
            private void handleDestinationUri(final HttpRedirection$RedirectionListenerImpl httpRedirection$RedirectionListenerImpl) {
                final Context context = (Context)httpRedirection$RedirectionListenerImpl.weakContext.get();
                if (context == null) {
                    return;
                }
                final String scheme = httpRedirection$RedirectionListenerImpl.destinationUri.getScheme();
                Intent intentForUri = null;
                Label_0145: {
                    if (scheme != null) {
                        if (scheme.equalsIgnoreCase("mmvideo")) {
                            break Label_0145;
                        }
                        intentForUri = Utils$IntentUtils.getIntentForUri(httpRedirection$RedirectionListenerImpl);
                    }
                Block_11_Outer:
                    while (true) {
                        if (intentForUri == null) {
                            return;
                        }
                        final OverlaySettings overlaySettings = httpRedirection$RedirectionListenerImpl.getOverlaySettings();
                        if (intentForUri != null && overlaySettings != null) {
                            if (httpRedirection$RedirectionListenerImpl.orientation != null) {
                                overlaySettings.orientation = httpRedirection$RedirectionListenerImpl.orientation;
                            }
                            intentForUri.putExtra("settings", (Parcelable)overlaySettings);
                        }
                        final String stringExtra = intentForUri.getStringExtra("class");
                        if (stringExtra != null) {
                            if (stringExtra.equals(AdViewOverlayActivity.class.getCanonicalName())) {
                                return;
                            }
                        }
                        try {
                            if (httpRedirection$RedirectionListenerImpl.isActivityStartable(httpRedirection$RedirectionListenerImpl.destinationUri)) {
                                Utils$IntentUtils.startActivity(context, intentForUri);
                                httpRedirection$RedirectionListenerImpl.startingActivity(httpRedirection$RedirectionListenerImpl.destinationUri);
                            }
                            return;
                            while (true) {
                                VideoAd.playAd(context, httpRedirection$RedirectionListenerImpl.destinationUri.getHost(), httpRedirection$RedirectionListenerImpl);
                                intentForUri = null;
                                continue Block_11_Outer;
                                final boolean handlingMMVideo = httpRedirection$RedirectionListenerImpl.isHandlingMMVideo(httpRedirection$RedirectionListenerImpl.destinationUri);
                                intentForUri = null;
                                continue;
                            }
                        }
                        // iftrue(Label_0045:, handlingMMVideo)
                        catch (ActivityNotFoundException ex) {
                            MMLog.e("HttpRedirection", String.format("No activity found for %s", httpRedirection$RedirectionListenerImpl.destinationUri), (Throwable)ex);
                        }
                        break;
                    }
                }
            }
            
            @Override
            public final void run() {
                final HttpRedirection$RedirectionListenerImpl httpRedirection$RedirectionListenerImpl = (HttpRedirection$RedirectionListenerImpl)this.val$listenerReference.get();
                if (httpRedirection$RedirectionListenerImpl != null) {
                    final String navigateRedirects = HttpRedirection.navigateRedirects(httpRedirection$RedirectionListenerImpl.url);
                    if (navigateRedirects != null) {
                        httpRedirection$RedirectionListenerImpl.destinationUri = Uri.parse(navigateRedirects);
                        if (httpRedirection$RedirectionListenerImpl.destinationUri == null) {
                            MMLog.e("HttpRedirection", String.format("Could not start activity for %s", navigateRedirects));
                            return;
                        }
                        this.handleDestinationUri(httpRedirection$RedirectionListenerImpl);
                    }
                }
            }
        });
    }
}
