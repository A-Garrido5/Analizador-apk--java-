// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Iterator;
import android.content.SharedPreferences$Editor;
import org.json.JSONException;
import android.content.SharedPreferences;
import android.webkit.URLUtil;
import org.json.JSONArray;
import android.text.TextUtils;
import com.millennialmedia.a.a.e;
import java.util.Collection;
import android.view.WindowManager$BadTokenException;
import android.widget.Toast;
import org.json.JSONObject;
import android.content.Context;
import android.os.Looper;
import java.util.ArrayList;
import android.os.Handler;
import java.lang.ref.WeakReference;
import java.util.LinkedHashMap;

class HandShake
{
    static final String BASE_URL = "http://androidsdk.ads.mp.mydas.mobi/";
    static final String BASE_URL_PATH = "getAd.php5?";
    private static final String HANDSHAKE_FALLBACK_URL = "http://ads.mp.mydas.mobi/appConfigServlet?apid=";
    private static final String HANDSHAKE_HTTPS_SCHEME = "https://";
    private static final String HANDSHAKE_HTTP_SCHEME = "http://";
    private static final String HANDSHAKE_URL_HOST = "ads.mp.mydas.mobi/";
    private static final String HANDSHAKE_URL_OVERRIDE_PARMS = "?apid=";
    private static final String HANDSHAKE_URL_PARMS = "appConfigServlet?apid=";
    private static final String KEY_CACHED_VIDEOS = "handshake_cachedvideos5.0";
    private static final String TAG = "HandShake";
    private static String adUrl;
    static String apid;
    private static boolean forceRefresh;
    private static String handShakeURL;
    private static HandShake sharedInstance;
    long adRefreshSecs;
    private final LinkedHashMap adTypeHandShakes;
    private WeakReference appContextRef;
    DTOCachedVideo[] cachedVideos;
    private WeakReference contextRef;
    long creativeCacheTimeout;
    private long deferredViewTimeout;
    String endSessionURL;
    private long handShakeCallback;
    private final Handler handler;
    boolean hardwareAccelerationEnabled;
    boolean kill;
    private long lastHandShake;
    String mmdid;
    String mmjsUrl;
    private String noVideosToCacheURL;
    HandShake$NuanceCredentials nuanceCredentials;
    private final ArrayList schemes;
    private String schemesList;
    String startSessionURL;
    private final Runnable updateHandShakeRunnable;
    
    static {
        HandShake.apid = "28913";
        HandShake.handShakeURL = "https://ads.mp.mydas.mobi/appConfigServlet?apid=";
        HandShake.adUrl = "http://androidsdk.ads.mp.mydas.mobi/getAd.php5?";
    }
    
    private HandShake() {
        this.handler = new Handler(Looper.getMainLooper());
        this.adTypeHandShakes = new LinkedHashMap();
        this.schemes = new ArrayList();
        this.deferredViewTimeout = 3600000L;
        this.kill = false;
        this.handShakeCallback = 86400000L;
        this.creativeCacheTimeout = 259200000L;
        this.updateHandShakeRunnable = new Runnable() {
            @Override
            public void run() {
                Context context = (Context)HandShake.this.contextRef.get();
                if (context == null) {
                    context = (Context)HandShake.this.appContextRef.get();
                }
                if (context != null) {
                    HandShake.sharedHandShake(context);
                }
            }
        };
    }
    
    private HandShake(final Context context) {
        this.handler = new Handler(Looper.getMainLooper());
        this.adTypeHandShakes = new LinkedHashMap();
        this.schemes = new ArrayList();
        this.deferredViewTimeout = 3600000L;
        this.kill = false;
        this.handShakeCallback = 86400000L;
        this.creativeCacheTimeout = 259200000L;
        this.updateHandShakeRunnable = new Runnable() {
            @Override
            public void run() {
                Context context = (Context)HandShake.this.contextRef.get();
                if (context == null) {
                    context = (Context)HandShake.this.appContextRef.get();
                }
                if (context != null) {
                    HandShake.sharedHandShake(context);
                }
            }
        };
        this.contextRef = new WeakReference((T)context);
        this.appContextRef = new WeakReference((T)context.getApplicationContext());
        if (HandShake.forceRefresh || !this.loadHandShake(context) || System.currentTimeMillis() - this.lastHandShake > this.handShakeCallback) {
            HandShake.forceRefresh = false;
            this.lastHandShake = System.currentTimeMillis();
            this.requestHandshake(false);
        }
    }
    
    private void deserializeFromObj(final JSONObject jsonObject) {
        final Context context = (Context)this.contextRef.get();
        Context context2;
        if (context == null) {
            context2 = (Context)this.appContextRef.get();
        }
        else {
            context2 = context;
        }
        if (context2 == null) {
            MMLog.e("HandShake", "No context for handshake");
        }
        else if (jsonObject != null) {
            while (true) {
                while (true) {
                    int n = 0;
                    Label_0626: {
                        try {
                            final JSONArray optJSONArray = jsonObject.optJSONArray("errors");
                            if (optJSONArray != null) {
                                n = 0;
                                if (n < optJSONArray.length()) {
                                    final JSONObject optJSONObject = optJSONArray.optJSONObject(n);
                                    if (optJSONObject == null) {
                                        break Label_0626;
                                    }
                                    final String optString = optJSONObject.optString("message", (String)null);
                                    final String optString2 = optJSONObject.optString("type", (String)null);
                                    if (optString == null || optString2 == null) {
                                        break Label_0626;
                                    }
                                    if (optString2.equalsIgnoreCase("log")) {
                                        MMLog.e("HandShake", optString);
                                        break Label_0626;
                                    }
                                    if (optString2.equalsIgnoreCase("prompt")) {
                                        this.handler.post((Runnable)new Runnable() {
                                            @Override
                                            public void run() {
                                                try {
                                                    Toast.makeText(context2, (CharSequence)("Error: " + optString), 1).show();
                                                }
                                                catch (WindowManager$BadTokenException ex) {
                                                    MMLog.e("HandShake", "Error with toast token", (Throwable)ex);
                                                }
                                            }
                                        });
                                    }
                                    break Label_0626;
                                }
                            }
                        }
                        catch (Exception ex) {
                            MMLog.e("HandShake", "Error deserializing handshake", ex);
                            return;
                        }
                        break;
                    }
                    ++n;
                    continue;
                }
            }
            final JSONObject optJSONObject2 = jsonObject.optJSONObject("adtypes");
            if (optJSONObject2 != null) {
                final String[] adTypes = MMAdImpl.getAdTypes();
                for (int i = 0; i < adTypes.length; ++i) {
                    final JSONObject optJSONObject3 = optJSONObject2.optJSONObject(adTypes[i]);
                    if (optJSONObject3 != null) {
                        final HandShake$AdTypeHandShake handShake$AdTypeHandShake = new HandShake$AdTypeHandShake(this);
                        handShake$AdTypeHandShake.deserializeFromObj(optJSONObject3);
                        handShake$AdTypeHandShake.loadLastVideo(context2, adTypes[i]);
                        this.adTypeHandShakes.put(adTypes[i], handShake$AdTypeHandShake);
                    }
                }
            }
            while (true) {
                while (true) {
                    int n2 = 0;
                    Label_0644: {
                        Label_0638: {
                            synchronized (this) {
                                final JSONArray optJSONArray2 = jsonObject.optJSONArray("schemes");
                                if (optJSONArray2 != null) {
                                    if (this.schemes != null && this.schemes.size() > 0) {
                                        this.schemes.removeAll(this.schemes);
                                    }
                                    break Label_0638;
                                }
                                Label_0373: {
                                    this.adRefreshSecs = jsonObject.optLong("adrefresh", 0L);
                                }
                                // monitorexit(this)
                                this.deferredViewTimeout = 1000L * jsonObject.optLong("deferredviewtimeout", 3600L);
                                this.kill = jsonObject.optBoolean("kill");
                                setAdUrl(jsonObject.optString("baseURL"));
                                this.handShakeCallback = 1000L * jsonObject.optLong("handshakecallback", 86400L);
                                this.creativeCacheTimeout = 1000L * jsonObject.optLong("creativeCacheTimeout", 259200L);
                                this.hardwareAccelerationEnabled = jsonObject.optBoolean("hardwareAccelerationEnabled");
                                this.startSessionURL = jsonObject.optString("startSessionURL");
                                this.endSessionURL = jsonObject.optString("endSessionURL");
                                this.nuanceCredentials = (HandShake$NuanceCredentials)new e().a(jsonObject.optString("nuanceCredentials"), HandShake$NuanceCredentials.class);
                                this.mmjsUrl = jsonObject.optString("mmjs");
                                this.handleCachedVideos(jsonObject, context2);
                                if (!TextUtils.isEmpty((CharSequence)this.mmjsUrl) && !MRaid.isMRaidUpdated(context2, this.mmjsUrl)) {
                                    MRaid.downloadMraidJs((Context)this.appContextRef.get(), this.mmjsUrl);
                                    return;
                                }
                                break;
                                // iftrue(Label_0373:, n2 >= optJSONArray2.length())
                                final JSONObject optJSONObject4 = optJSONArray2.optJSONObject(n2);
                                // iftrue(Label_0644:, optJSONObject4 == null)
                                final HandShake$Scheme handShake$Scheme = new HandShake$Scheme(this);
                                handShake$Scheme.deserializeFromObj(optJSONObject4);
                                this.schemes.add(handShake$Scheme);
                                break Label_0644;
                            }
                            break;
                        }
                        n2 = 0;
                        continue;
                    }
                    ++n2;
                    continue;
                }
            }
            MMLog.w("HandShake", "Not downloading MMJS - (" + this.mmjsUrl + ")");
        }
    }
    
    static String getAdUrl() {
        if (!TextUtils.isEmpty((CharSequence)HandShake.adUrl) && URLUtil.isHttpUrl(HandShake.adUrl.replace("getAd.php5?", ""))) {
            return HandShake.adUrl;
        }
        return "http://androidsdk.ads.mp.mydas.mobi/getAd.php5?";
    }
    
    private void handleCachedVideos(final JSONObject jsonObject, final Context context) {
        final JSONArray optJSONArray = jsonObject.optJSONArray("cachedVideos");
        if (optJSONArray != null) {
            this.cachedVideos = (DTOCachedVideo[])new e().a(optJSONArray.toString(), DTOCachedVideo[].class);
            MMLog.d("HandShake", this.cachedVideos.toString());
        }
        this.noVideosToCacheURL = jsonObject.optString("noVideosToCacheURL");
        if (this.cachedVideos != null) {
            PreCacheWorker.preCacheVideos(this.cachedVideos, context, this.noVideosToCacheURL);
        }
    }
    
    private boolean isFirstLaunch(final Context context) {
        return context != null && context.getSharedPreferences("MillennialMediaSettings", 0).getBoolean("firstlaunchHandshake", true);
    }
    
    private boolean loadHandShake(final Context context) {
        final SharedPreferences sharedPreferences = context.getSharedPreferences("MillennialMediaSettings", 0);
        int n = 0;
        if (sharedPreferences != null) {
            int n2;
            if (sharedPreferences.contains("handshake_deferredviewtimeout")) {
                this.deferredViewTimeout = sharedPreferences.getLong("handshake_deferredviewtimeout", this.deferredViewTimeout);
                n2 = 1;
            }
            else {
                n2 = 0;
            }
            if (sharedPreferences.contains("handshake_baseUrl")) {
                HandShake.adUrl = sharedPreferences.getString("handshake_baseUrl", HandShake.adUrl);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_callback")) {
                this.handShakeCallback = sharedPreferences.getLong("handshake_callback", this.handShakeCallback);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_hardwareAccelerationEnabled")) {
                this.hardwareAccelerationEnabled = sharedPreferences.getBoolean("handshake_hardwareAccelerationEnabled", false);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_startSessionURL")) {
                this.startSessionURL = sharedPreferences.getString("handshake_startSessionURL", "");
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_endSessionURL")) {
                this.endSessionURL = sharedPreferences.getString("handshake_endSessionURL", "");
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_nuanceCredentials")) {
                this.nuanceCredentials = (HandShake$NuanceCredentials)new e().a(sharedPreferences.getString("handshake_nuanceCredentials", ""), HandShake$NuanceCredentials.class);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_mmdid")) {
                this.setMMdid(context, sharedPreferences.getString("handshake_mmdid", this.mmdid), false);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_creativecachetimeout")) {
                this.creativeCacheTimeout = sharedPreferences.getLong("handshake_creativecachetimeout", this.creativeCacheTimeout);
                n2 = 1;
            }
            if (sharedPreferences.contains("handshake_mmjs")) {
                this.mmjsUrl = sharedPreferences.getString("handshake_mmjs", this.mmjsUrl);
                n2 = 1;
            }
            final String[] adTypes = MMAdImpl.getAdTypes();
            int n3 = n2;
            for (int i = 0; i < adTypes.length; ++i) {
                final HandShake$AdTypeHandShake handShake$AdTypeHandShake = new HandShake$AdTypeHandShake(this);
                if (handShake$AdTypeHandShake.load(sharedPreferences, adTypes[i])) {
                    this.adTypeHandShakes.put(adTypes[i], handShake$AdTypeHandShake);
                    n3 = 1;
                }
            }
        Label_0529_Outer:
            while (true) {
            Label_0529:
                while (true) {
                    String string;
                    String[] split;
                    int length;
                    String[] split2;
                    String string2;
                    Label_0731:Block_21_Outer:Label_0669_Outer:
                    while (true) {
                        Label_0725: {
                            Label_0713: {
                                synchronized (this) {
                                    if (!sharedPreferences.contains("handshake_schemes")) {
                                        break Label_0713;
                                    }
                                    string = sharedPreferences.getString("handshake_schemes", "");
                                    if (string.length() <= 0) {
                                        break Label_0713;
                                    }
                                    split = string.split("\n");
                                    length = split.length;
                                    if (n >= length) {
                                        break Label_0731;
                                    }
                                    split2 = split[n].split("\t");
                                    if (split2.length >= 2) {
                                        this.schemes.add(new HandShake$Scheme(this, split2[0], Integer.parseInt(split2[1])));
                                    }
                                    break Label_0725;
                                    // iftrue(Label_0585:, string2.length() <= 0)
                                    // iftrue(Label_0669:, System.currentTimeMillis() - this.lastHandShake >= this.handShakeCallback)
                                    // iftrue(Label_0015:, n == 0)
                                    // iftrue(Label_0015:, this.cachedVideos == null)
                                    // monitorexit(this)
                                    // iftrue(Label_0585:, !sharedPreferences.contains("handshake_cachedvideos5.0"))
                                    // iftrue(Label_0616:, !sharedPreferences.contains("handshake_lasthandshake"))
                                    while (true) {
                                        Block_23: {
                                        Block_24:
                                            while (true) {
                                            Label_0616_Outer:
                                                while (true) {
                                                    string2 = sharedPreferences.getString("handshake_cachedvideos5.0", "");
                                                    while (true) {
                                                        Block_20: {
                                                            break Block_20;
                                                            while (true) {
                                                                MMLog.d("HandShake", "Handshake successfully loaded from shared preferences.");
                                                                break Block_23;
                                                                continue Label_0616_Outer;
                                                            }
                                                        }
                                                        this.cachedVideos = (DTOCachedVideo[])new e().a(string2, DTOCachedVideo[].class);
                                                        break Label_0616_Outer;
                                                        this.lastHandShake = sharedPreferences.getLong("handshake_lasthandshake", this.lastHandShake);
                                                        n = 1;
                                                        continue Block_21_Outer;
                                                    }
                                                    this.noVideosToCacheURL = sharedPreferences.getString("handshake_novideostocacheurl", "");
                                                    break Block_24;
                                                    continue Label_0616_Outer;
                                                }
                                                continue Label_0669_Outer;
                                            }
                                            PreCacheWorker.preCacheVideos(this.cachedVideos, context, this.noVideosToCacheURL);
                                            return n != 0;
                                        }
                                        this.handler.postDelayed(this.updateHandShakeRunnable, this.handShakeCallback - (System.currentTimeMillis() - this.lastHandShake));
                                        continue Label_0529_Outer;
                                    }
                                }
                            }
                            n = n3;
                            continue Label_0529;
                        }
                        ++n;
                        continue Label_0529_Outer;
                    }
                    n = 1;
                    continue Label_0529;
                }
            }
        }
        Label_0015: {
            return n != 0;
        }
    }
    
    private JSONObject parseJson(final String s) {
        MMLog.d("HandShake", String.format("JSON String: %s", s));
        if (s != null) {
            try {
                final JSONObject jsonObject = new JSONObject(s);
                MMLog.v("HandShake", jsonObject.toString());
                if (jsonObject.has("mmishake")) {
                    return jsonObject.getJSONObject("mmishake");
                }
            }
            catch (JSONException ex) {
                MMLog.e("HandShake", "Error parsing json", (Throwable)ex);
            }
        }
        return null;
    }
    
    private void requestHandshake(final boolean b) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final String string = context.getSharedPreferences("MillennialMediaSettings", 0).getString("handShakeUrl", (String)null);
            if (string != null) {
                setHandShakeURL(string);
            }
        }
        Utils$ThreadUtils.execute(new Runnable() {
            @Override
            public void run() {
                // 
                // This method could not be decompiled.
                // 
                // Original Bytecode:
                // 
                //     0: aload_0        
                //     1: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //     4: invokestatic    com/millennialmedia/android/HandShake.access$000:(Lcom/millennialmedia/android/HandShake;)Ljava/lang/ref/WeakReference;
                //     7: invokevirtual   java/lang/ref/WeakReference.get:()Ljava/lang/Object;
                //    10: checkcast       Landroid/content/Context;
                //    13: astore_1       
                //    14: aload_1        
                //    15: ifnonnull       726
                //    18: aload_0        
                //    19: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //    22: invokestatic    com/millennialmedia/android/HandShake.access$100:(Lcom/millennialmedia/android/HandShake;)Ljava/lang/ref/WeakReference;
                //    25: invokevirtual   java/lang/ref/WeakReference.get:()Ljava/lang/Object;
                //    28: checkcast       Landroid/content/Context;
                //    31: astore_2       
                //    32: aload_2        
                //    33: ifnonnull       37
                //    36: return         
                //    37: new             Ljava/lang/StringBuilder;
                //    40: dup            
                //    41: invokespecial   java/lang/StringBuilder.<init>:()V
                //    44: astore_3       
                //    45: new             Ljava/util/TreeMap;
                //    48: dup            
                //    49: invokespecial   java/util/TreeMap.<init>:()V
                //    52: astore          4
                //    54: aload           4
                //    56: ldc             "ua"
                //    58: new             Ljava/lang/StringBuilder;
                //    61: dup            
                //    62: ldc             "Android:"
                //    64: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //    67: getstatic       android/os/Build.MODEL:Ljava/lang/String;
                //    70: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //    73: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //    76: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
                //    81: pop            
                //    82: aload_0        
                //    83: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //    86: aload_2        
                //    87: invokestatic    com/millennialmedia/android/HandShake.access$200:(Lcom/millennialmedia/android/HandShake;Landroid/content/Context;)Z
                //    90: istore          10
                //    92: iload           10
                //    94: istore          6
                //    96: iload           6
                //    98: ifeq            113
                //   101: aload           4
                //   103: ldc             "firstlaunch"
                //   105: ldc             "1"
                //   107: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
                //   112: pop            
                //   113: aload_0        
                //   114: getfield        com/millennialmedia/android/HandShake$1.val$isInitialize:Z
                //   117: ifeq            132
                //   120: aload           4
                //   122: ldc             "init"
                //   124: ldc             "1"
                //   126: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
                //   131: pop            
                //   132: aload_2        
                //   133: aload           4
                //   135: invokestatic    com/millennialmedia/android/MMSDK.insertUrlCommonValues:(Landroid/content/Context;Ljava/util/Map;)V
                //   138: aload           4
                //   140: invokeinterface java/util/Map.entrySet:()Ljava/util/Set;
                //   145: invokeinterface java/util/Set.iterator:()Ljava/util/Iterator;
                //   150: astore          11
                //   152: aload           11
                //   154: invokeinterface java/util/Iterator.hasNext:()Z
                //   159: ifeq            255
                //   162: aload           11
                //   164: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
                //   169: checkcast       Ljava/util/Map$Entry;
                //   172: astore          27
                //   174: iconst_2       
                //   175: anewarray       Ljava/lang/Object;
                //   178: astore          28
                //   180: aload           28
                //   182: iconst_0       
                //   183: aload           27
                //   185: invokeinterface java/util/Map$Entry.getKey:()Ljava/lang/Object;
                //   190: aastore        
                //   191: aload           28
                //   193: iconst_1       
                //   194: aload           27
                //   196: invokeinterface java/util/Map$Entry.getValue:()Ljava/lang/Object;
                //   201: checkcast       Ljava/lang/String;
                //   204: ldc             "UTF-8"
                //   206: invokestatic    java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
                //   209: aastore        
                //   210: aload_3        
                //   211: ldc             "&%s=%s"
                //   213: aload           28
                //   215: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
                //   218: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   221: pop            
                //   222: goto            152
                //   225: astore          5
                //   227: ldc             "HandShake"
                //   229: ldc             "Could not get a handshake. "
                //   231: aload           5
                //   233: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   236: return         
                //   237: astore          7
                //   239: iload           6
                //   241: ifeq            252
                //   244: aload_0        
                //   245: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   248: aload_2        
                //   249: invokestatic    com/millennialmedia/android/HandShake.access$1000:(Lcom/millennialmedia/android/HandShake;Landroid/content/Context;)V
                //   252: aload           7
                //   254: athrow         
                //   255: new             Ljava/lang/StringBuilder;
                //   258: dup            
                //   259: invokespecial   java/lang/StringBuilder.<init>:()V
                //   262: invokestatic    com/millennialmedia/android/HandShake.access$300:()Ljava/lang/String;
                //   265: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   268: getstatic       com/millennialmedia/android/HandShake.apid:Ljava/lang/String;
                //   271: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   274: aload_3        
                //   275: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   278: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   281: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   284: astore          12
                //   286: ldc             "HandShake"
                //   288: ldc             "Performing handshake: %s"
                //   290: iconst_1       
                //   291: anewarray       Ljava/lang/Object;
                //   294: dup            
                //   295: iconst_0       
                //   296: aload           12
                //   298: aastore        
                //   299: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
                //   302: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
                //   305: new             Lcom/millennialmedia/android/HttpGetRequest;
                //   308: dup            
                //   309: sipush          3000
                //   312: invokespecial   com/millennialmedia/android/HttpGetRequest.<init>:(I)V
                //   315: aload           12
                //   317: invokevirtual   com/millennialmedia/android/HttpGetRequest.get:(Ljava/lang/String;)Lorg/apache/http/HttpResponse;
                //   320: astore          26
                //   322: aload           26
                //   324: astore          14
                //   326: aload           14
                //   328: ifnull          353
                //   331: aload           14
                //   333: invokeinterface org/apache/http/HttpResponse.getStatusLine:()Lorg/apache/http/StatusLine;
                //   338: invokeinterface org/apache/http/StatusLine.getStatusCode:()I
                //   343: istore          25
                //   345: iload           25
                //   347: sipush          200
                //   350: if_icmpeq       435
                //   353: invokestatic    com/millennialmedia/android/HandShake.access$300:()Ljava/lang/String;
                //   356: ldc             "https://"
                //   358: ldc             "http://"
                //   360: invokevirtual   java/lang/String.replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
                //   363: invokestatic    com/millennialmedia/android/HandShake.access$302:(Ljava/lang/String;)Ljava/lang/String;
                //   366: pop            
                //   367: new             Ljava/lang/StringBuilder;
                //   370: dup            
                //   371: invokespecial   java/lang/StringBuilder.<init>:()V
                //   374: invokestatic    com/millennialmedia/android/HandShake.access$300:()Ljava/lang/String;
                //   377: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   380: getstatic       com/millennialmedia/android/HandShake.apid:Ljava/lang/String;
                //   383: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   386: aload_3        
                //   387: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   390: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   393: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   396: astore          23
                //   398: ldc             "HandShake"
                //   400: ldc             "Performing handshake (HTTP Fallback): %s"
                //   402: iconst_1       
                //   403: anewarray       Ljava/lang/Object;
                //   406: dup            
                //   407: iconst_0       
                //   408: aload           23
                //   410: aastore        
                //   411: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
                //   414: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
                //   417: new             Lcom/millennialmedia/android/HttpGetRequest;
                //   420: dup            
                //   421: invokespecial   com/millennialmedia/android/HttpGetRequest.<init>:()V
                //   424: aload           23
                //   426: invokevirtual   com/millennialmedia/android/HttpGetRequest.get:(Ljava/lang/String;)Lorg/apache/http/HttpResponse;
                //   429: astore          24
                //   431: aload           24
                //   433: astore          14
                //   435: aload           14
                //   437: ifnull          462
                //   440: aload           14
                //   442: invokeinterface org/apache/http/HttpResponse.getStatusLine:()Lorg/apache/http/StatusLine;
                //   447: invokeinterface org/apache/http/StatusLine.getStatusCode:()I
                //   452: istore          21
                //   454: iload           21
                //   456: sipush          200
                //   459: if_icmpeq       689
                //   462: new             Ljava/lang/StringBuilder;
                //   465: dup            
                //   466: ldc             "http://ads.mp.mydas.mobi/appConfigServlet?apid="
                //   468: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //   471: getstatic       com/millennialmedia/android/HandShake.apid:Ljava/lang/String;
                //   474: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   477: aload_3        
                //   478: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   481: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   484: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   487: astore          19
                //   489: ldc             "HandShake"
                //   491: new             Ljava/lang/StringBuilder;
                //   494: dup            
                //   495: ldc             "Performing handshake (HTTP Fallback Original): "
                //   497: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //   500: aload           19
                //   502: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //   505: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //   508: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
                //   511: new             Lcom/millennialmedia/android/HttpGetRequest;
                //   514: dup            
                //   515: invokespecial   com/millennialmedia/android/HttpGetRequest.<init>:()V
                //   518: aload           19
                //   520: invokevirtual   com/millennialmedia/android/HttpGetRequest.get:(Ljava/lang/String;)Lorg/apache/http/HttpResponse;
                //   523: astore          20
                //   525: aload           20
                //   527: astore          17
                //   529: aload           17
                //   531: ifnull          696
                //   534: aload           17
                //   536: invokeinterface org/apache/http/HttpResponse.getStatusLine:()Lorg/apache/http/StatusLine;
                //   541: invokeinterface org/apache/http/StatusLine.getStatusCode:()I
                //   546: sipush          200
                //   549: if_icmpne       696
                //   552: aload_0        
                //   553: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   556: aload_0        
                //   557: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   560: aload           17
                //   562: invokeinterface org/apache/http/HttpResponse.getEntity:()Lorg/apache/http/HttpEntity;
                //   567: invokeinterface org/apache/http/HttpEntity.getContent:()Ljava/io/InputStream;
                //   572: invokestatic    com/millennialmedia/android/HttpGetRequest.convertStreamToString:(Ljava/io/InputStream;)Ljava/lang/String;
                //   575: invokestatic    com/millennialmedia/android/HandShake.access$400:(Lcom/millennialmedia/android/HandShake;Ljava/lang/String;)Lorg/json/JSONObject;
                //   578: invokestatic    com/millennialmedia/android/HandShake.access$500:(Lcom/millennialmedia/android/HandShake;Lorg/json/JSONObject;)V
                //   581: aload_0        
                //   582: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   585: aload_2        
                //   586: invokestatic    com/millennialmedia/android/HandShake.access$600:(Lcom/millennialmedia/android/HandShake;Landroid/content/Context;)V
                //   589: aload_0        
                //   590: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   593: invokestatic    com/millennialmedia/android/HandShake.access$900:(Lcom/millennialmedia/android/HandShake;)Landroid/os/Handler;
                //   596: aload_0        
                //   597: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   600: invokestatic    com/millennialmedia/android/HandShake.access$700:(Lcom/millennialmedia/android/HandShake;)Ljava/lang/Runnable;
                //   603: aload_0        
                //   604: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   607: invokestatic    com/millennialmedia/android/HandShake.access$800:(Lcom/millennialmedia/android/HandShake;)J
                //   610: invokevirtual   android/os/Handler.postDelayed:(Ljava/lang/Runnable;J)Z
                //   613: pop            
                //   614: ldc             "HandShake"
                //   616: ldc             "Obtained a new handshake"
                //   618: invokestatic    com/millennialmedia/android/MMLog.v:(Ljava/lang/String;Ljava/lang/String;)V
                //   621: iload           6
                //   623: ifeq            36
                //   626: aload_0        
                //   627: getfield        com/millennialmedia/android/HandShake$1.this$0:Lcom/millennialmedia/android/HandShake;
                //   630: aload_2        
                //   631: invokestatic    com/millennialmedia/android/HandShake.access$1000:(Lcom/millennialmedia/android/HandShake;Landroid/content/Context;)V
                //   634: return         
                //   635: astore          13
                //   637: ldc             "HandShake"
                //   639: ldc             "Could not get a handshake. "
                //   641: aload           13
                //   643: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   646: aconst_null    
                //   647: astore          14
                //   649: goto            326
                //   652: astore          8
                //   654: ldc             "HandShake"
                //   656: ldc             "Could not get a handshake. "
                //   658: aload           8
                //   660: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   663: return         
                //   664: astore          15
                //   666: ldc             "HandShake"
                //   668: ldc             "Could not get a handshake. "
                //   670: aload           15
                //   672: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   675: goto            435
                //   678: astore          16
                //   680: ldc             "HandShake"
                //   682: ldc             "Could not get a handshake. "
                //   684: aload           16
                //   686: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   689: aload           14
                //   691: astore          17
                //   693: goto            529
                //   696: iconst_0       
                //   697: istore          6
                //   699: goto            621
                //   702: astore          7
                //   704: iconst_0       
                //   705: istore          6
                //   707: goto            239
                //   710: astore          8
                //   712: iconst_0       
                //   713: istore          6
                //   715: goto            654
                //   718: astore          5
                //   720: iconst_0       
                //   721: istore          6
                //   723: goto            227
                //   726: aload_1        
                //   727: astore_2       
                //   728: goto            32
                //    Exceptions:
                //  Try           Handler
                //  Start  End    Start  End    Type                 
                //  -----  -----  -----  -----  ---------------------
                //  37     92     718    726    Ljava/io/IOException;
                //  37     92     710    718    Ljava/lang/Exception;
                //  37     92     702    710    Any
                //  101    113    225    227    Ljava/io/IOException;
                //  101    113    652    654    Ljava/lang/Exception;
                //  101    113    237    239    Any
                //  113    132    225    227    Ljava/io/IOException;
                //  113    132    652    654    Ljava/lang/Exception;
                //  113    132    237    239    Any
                //  132    152    225    227    Ljava/io/IOException;
                //  132    152    652    654    Ljava/lang/Exception;
                //  132    152    237    239    Any
                //  152    222    225    227    Ljava/io/IOException;
                //  152    222    652    654    Ljava/lang/Exception;
                //  152    222    237    239    Any
                //  227    236    237    239    Any
                //  255    305    225    227    Ljava/io/IOException;
                //  255    305    652    654    Ljava/lang/Exception;
                //  255    305    237    239    Any
                //  305    322    635    652    Ljava/io/IOException;
                //  305    322    652    654    Ljava/lang/Exception;
                //  305    322    237    239    Any
                //  331    345    225    227    Ljava/io/IOException;
                //  331    345    652    654    Ljava/lang/Exception;
                //  331    345    237    239    Any
                //  353    431    664    678    Ljava/io/IOException;
                //  353    431    652    654    Ljava/lang/Exception;
                //  353    431    237    239    Any
                //  440    454    225    227    Ljava/io/IOException;
                //  440    454    652    654    Ljava/lang/Exception;
                //  440    454    237    239    Any
                //  462    525    678    689    Ljava/io/IOException;
                //  462    525    652    654    Ljava/lang/Exception;
                //  462    525    237    239    Any
                //  534    621    225    227    Ljava/io/IOException;
                //  534    621    652    654    Ljava/lang/Exception;
                //  534    621    237    239    Any
                //  637    646    225    227    Ljava/io/IOException;
                //  637    646    652    654    Ljava/lang/Exception;
                //  637    646    237    239    Any
                //  654    663    237    239    Any
                //  666    675    225    227    Ljava/io/IOException;
                //  666    675    652    654    Ljava/lang/Exception;
                //  666    675    237    239    Any
                //  680    689    225    227    Ljava/io/IOException;
                //  680    689    652    654    Ljava/lang/Exception;
                //  680    689    237    239    Any
                // 
                // The error that occurred was:
                // 
                // java.lang.IndexOutOfBoundsException: Index: 311, Size: 311
                //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
                //     at java.util.ArrayList.get(ArrayList.java:429)
                //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
                //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3417)
                //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformCall(AstMethodBodyBuilder.java:1163)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:1010)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformNode(AstMethodBodyBuilder.java:392)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformBlock(AstMethodBodyBuilder.java:333)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:294)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
                //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
                //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
                //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
                // 
                throw new IllegalStateException("An error occurred while decompiling this method.");
            }
        });
    }
    
    private void saveHandShake(final Context context) {
        final SharedPreferences$Editor edit = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
        edit.putLong("handshake_deferredviewtimeout", this.deferredViewTimeout);
        edit.putBoolean("handshake_kill", this.kill);
        edit.putString("handshake_baseUrl", HandShake.adUrl);
        edit.putLong("handshake_callback", this.handShakeCallback);
        edit.putBoolean("handshake_hardwareAccelerationEnabled", this.hardwareAccelerationEnabled);
        edit.putString("handshake_startSessionURL", this.startSessionURL);
        if (this.nuanceCredentials != null) {
            edit.putString("handshake_nuanceCredentials", new e().a(this.nuanceCredentials));
        }
        edit.putString("handshake_endSessionURL", this.endSessionURL);
        edit.putLong("handshake_creativecaetimeout", this.creativeCacheTimeout);
        edit.putString("handshake_mmjs", this.mmjsUrl);
        for (final String s : this.adTypeHandShakes.keySet()) {
            ((HandShake$AdTypeHandShake)this.adTypeHandShakes.get(s)).save(edit, s);
        }
        synchronized (this) {
            final StringBuilder sb = new StringBuilder();
            for (int i = 0; i < this.schemes.size(); ++i) {
                final HandShake$Scheme handShake$Scheme = this.schemes.get(i);
                if (i > 0) {
                    sb.append("\n");
                }
                sb.append(handShake$Scheme.scheme + "\t" + handShake$Scheme.id);
            }
            edit.putString("handshake_schemes", sb.toString());
            // monitorexit(this)
            if (this.cachedVideos != null) {
                edit.putString("handshake_cachedvideos5.0", new e().a(this.cachedVideos));
            }
            edit.putString("handshake_novideostocacheurl", this.noVideosToCacheURL);
            edit.putLong("handshake_lasthandshake", this.lastHandShake);
            edit.commit();
        }
    }
    
    private void sentFirstLaunch(final Context context) {
        if (context != null) {
            final SharedPreferences$Editor edit = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
            edit.putBoolean("firstlaunchHandshake", false);
            edit.commit();
        }
    }
    
    static void setAdUrl(final String s) {
        if (!TextUtils.isEmpty((CharSequence)s)) {
            if (s.endsWith("/")) {
                HandShake.adUrl = s + "getAd.php5?";
                return;
            }
            HandShake.adUrl = s + "/getAd.php5?";
        }
    }
    
    static void setHandShakeURL(final Context context, final String handShakeURL) {
        synchronized (HandShake.class) {
            if (setHandShakeURL(handShakeURL)) {
                HandShake.forceRefresh = true;
                HandShake.sharedInstance = new HandShake(context);
            }
        }
    }
    
    static boolean setHandShakeURL(String replaceFirst) {
        synchronized (HandShake.class) {
            boolean b;
            if (TextUtils.isEmpty((CharSequence)replaceFirst)) {
                b = false;
            }
            else {
                if (replaceFirst.startsWith("http://")) {
                    replaceFirst = replaceFirst.replaceFirst("http://", "https://");
                }
                HandShake.handShakeURL = replaceFirst + "?apid=";
                b = true;
            }
            return b;
        }
    }
    
    static HandShake sharedHandShake(final Context context) {
        synchronized (HandShake.class) {
            HandShake sharedInstance;
            if (HandShake.apid == null) {
                MMLog.e("HandShake", "No apid set for the handshake.");
                sharedInstance = null;
            }
            else {
                if (HandShake.sharedInstance == null) {
                    HandShake.sharedInstance = new HandShake(context);
                }
                else if (System.currentTimeMillis() - HandShake.sharedInstance.lastHandShake > HandShake.sharedInstance.handShakeCallback) {
                    MMLog.d("HandShake", "Handshake expired, requesting new handshake from the server.");
                    HandShake.sharedInstance = new HandShake(context);
                }
                sharedInstance = HandShake.sharedInstance;
            }
            return sharedInstance;
        }
    }
    
    boolean canDisplayCachedAd(final String s, final long n) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            return handShake$AdTypeHandShake == null || handShake$AdTypeHandShake.canDisplayCachedAd(n);
        }
    }
    
    boolean canRequestVideo(final Context context, final String s) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            return handShake$AdTypeHandShake == null || handShake$AdTypeHandShake.canRequestVideo(context);
        }
    }
    
    void endSession() {
        if (!TextUtils.isEmpty((CharSequence)this.endSessionURL)) {
            Utils$HttpUtils.executeUrl(this.endSessionURL);
        }
    }
    
    JSONArray getSchemesJSONArray(final Context context) {
        final JSONArray jsonArray;
        synchronized (this) {
            jsonArray = new JSONArray();
            if (this.schemes.size() > 0) {
                for (final HandShake$Scheme handShake$Scheme : this.schemes) {
                    if (handShake$Scheme.checkAvailability(context)) {
                        try {
                            final JSONObject jsonObject = new JSONObject();
                            jsonObject.put("scheme", (Object)handShake$Scheme.scheme);
                            jsonObject.put("schemeid", handShake$Scheme.id);
                            jsonArray.put((Object)jsonObject);
                        }
                        catch (JSONException ex) {
                            MMLog.e("HandShake", "Json error getting scheme", (Throwable)ex);
                        }
                    }
                }
            }
        }
        // monitorexit(this)
        return jsonArray;
    }
    
    String getSchemesList(final Context context) {
        while (true) {
            StringBuilder sb = null;
        Label_0128:
            while (true) {
                HandShake$Scheme handShake$Scheme = null;
                Label_0111: {
                    synchronized (this) {
                        if (this.schemesList == null && this.schemes.size() > 0) {
                            sb = new StringBuilder();
                            final Iterator<HandShake$Scheme> iterator = (Iterator<HandShake$Scheme>)this.schemes.iterator();
                            while (iterator.hasNext()) {
                                handShake$Scheme = iterator.next();
                                if (handShake$Scheme.checkAvailability(context)) {
                                    if (sb.length() <= 0) {
                                        break Label_0111;
                                    }
                                    sb.append("," + handShake$Scheme.id);
                                }
                            }
                            break Label_0128;
                        }
                        break;
                    }
                }
                sb.append(Integer.toString(handShake$Scheme.id));
                continue;
            }
            if (sb.length() > 0) {
                this.schemesList = sb.toString();
                break;
            }
            break;
        }
        // monitorexit(this)
        return this.schemesList;
    }
    
    boolean isAdTypeDownloading(final String s) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            return handShake$AdTypeHandShake != null && handShake$AdTypeHandShake.downloading;
        }
    }
    
    void lockAdTypeDownload(final String s) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            if (handShake$AdTypeHandShake != null) {
                handShake$AdTypeHandShake.downloading = true;
            }
        }
    }
    
    void sendInitRequest() {
        this.requestHandshake(true);
    }
    
    void setMMdid(final Context context, final String s) {
        this.setMMdid(context, s, true);
    }
    
    void setMMdid(final Context context, final String mmdid, final boolean b) {
        // monitorenter(this)
        Label_0080: {
            if (mmdid == null) {
                break Label_0080;
            }
            try {
                if (mmdid.length() == 0 || mmdid.equals("NULL")) {
                    this.mmdid = null;
                }
                else {
                    this.mmdid = mmdid;
                }
                MMSDK.setMMdid(this.mmdid);
                if (b) {
                    final SharedPreferences$Editor edit = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
                    edit.putString("handshake_mmdid", this.mmdid);
                    edit.commit();
                }
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    void startSession() {
        if (!TextUtils.isEmpty((CharSequence)this.startSessionURL)) {
            Utils$HttpUtils.executeUrl(this.startSessionURL);
        }
    }
    
    void unlockAdTypeDownload(final String s) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            if (handShake$AdTypeHandShake != null) {
                handShake$AdTypeHandShake.downloading = false;
            }
        }
    }
    
    void updateLastVideoViewedTime(final Context context, final String s) {
        synchronized (this) {
            final HandShake$AdTypeHandShake handShake$AdTypeHandShake = this.adTypeHandShakes.get(s);
            if (handShake$AdTypeHandShake != null) {
                handShake$AdTypeHandShake.updateLastVideoViewedTime(context, s);
            }
        }
    }
}
