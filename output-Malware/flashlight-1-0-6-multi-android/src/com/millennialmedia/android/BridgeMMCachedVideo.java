// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.util.concurrent.Callable;
import org.json.JSONArray;
import android.content.Context;
import java.util.Map;
import android.app.Activity;

class BridgeMMCachedVideo extends MMJSObject implements AdCache$AdCacheTaskListener
{
    private static final String AVAILABLE_CACHED_VIDEOS = "availableCachedVideos";
    private static final String CACHE_VIDEO = "cacheVideo";
    private static final String END_VIDEO = "endVideo";
    private static final String PAUSE_VIDEO = "pauseVideo";
    private static final String PLAY_CACHED_VIDEO = "playCachedVideo";
    private static final String PLAY_VIDEO = "playVideo";
    private static final String RESTART_VIDEO = "restartVideo";
    private static final String TAG = "BridgeMMCachedVideo";
    private static final String VIDEO_ID_EXISTS = "videoIdExists";
    private boolean success;
    
    private VideoPlayerActivity getVPA() {
        if (this.mmWebViewRef != null && this.mmWebViewRef.get() != null && ((MMWebView)this.mmWebViewRef.get()).getActivity() instanceof MMActivity) {
            final MMWebView mmWebView = (MMWebView)this.mmWebViewRef.get();
            if (mmWebView != null) {
                final Activity activity = mmWebView.getActivity();
                if (activity != null && activity instanceof MMActivity) {
                    final MMActivity mmActivity = (MMActivity)activity;
                    if (mmActivity.getWrappedActivity() != null && mmActivity.getWrappedActivity() instanceof VideoPlayerActivity) {
                        return (VideoPlayerActivity)mmActivity.getWrappedActivity();
                    }
                }
            }
        }
        return null;
    }
    
    public MMJSResponse availableCachedVideos(final Map map) {
        final Context context = (Context)this.contextRef.get();
        if (context != null) {
            final JSONArray response = new JSONArray();
            AdCache.iterateCachedAds(context, 2, new AdCache$Iterator() {
                @Override
                boolean callback(final CachedAd cachedAd) {
                    if (cachedAd instanceof VideoAd && cachedAd.isOnDisk(context) && !cachedAd.isExpired()) {
                        response.put((Object)cachedAd.getId());
                    }
                    return true;
                }
            });
            final MMJSResponse mmjsResponse = new MMJSResponse();
            mmjsResponse.result = 1;
            mmjsResponse.response = response;
            return mmjsResponse;
        }
        return null;
    }
    
    public MMJSResponse cacheVideo(final Map p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: monitorenter   
        //     2: aload_0        
        //     3: getfield        com/millennialmedia/android/BridgeMMCachedVideo.contextRef:Ljava/lang/ref/WeakReference;
        //     6: invokevirtual   java/lang/ref/WeakReference.get:()Ljava/lang/Object;
        //     9: checkcast       Landroid/content/Context;
        //    12: astore_3       
        //    13: aload_1        
        //    14: ldc             "url"
        //    16: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    21: checkcast       Ljava/lang/String;
        //    24: astore          4
        //    26: aload           4
        //    28: ifnull          313
        //    31: aload_3        
        //    32: ifnull          313
        //    35: new             Lcom/millennialmedia/android/HttpGetRequest;
        //    38: dup            
        //    39: invokespecial   com/millennialmedia/android/HttpGetRequest.<init>:()V
        //    42: aload           4
        //    44: invokevirtual   com/millennialmedia/android/HttpGetRequest.get:(Ljava/lang/String;)Lorg/apache/http/HttpResponse;
        //    47: astore          7
        //    49: aload           7
        //    51: ifnonnull       69
        //    54: ldc             "BridgeMMCachedVideo"
        //    56: ldc             "HTTP response is null"
        //    58: invokestatic    com/millennialmedia/android/MMLog.i:(Ljava/lang/String;Ljava/lang/String;)V
        //    61: aconst_null    
        //    62: astore          5
        //    64: aload_0        
        //    65: monitorexit    
        //    66: aload           5
        //    68: areturn        
        //    69: aload           7
        //    71: invokeinterface org/apache/http/HttpResponse.getEntity:()Lorg/apache/http/HttpEntity;
        //    76: astore          8
        //    78: aload           8
        //    80: ifnonnull       113
        //    83: ldc             "BridgeMMCachedVideo"
        //    85: ldc             "Null HTTP entity"
        //    87: invokestatic    com/millennialmedia/android/MMLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    90: aconst_null    
        //    91: astore          5
        //    93: goto            64
        //    96: astore          6
        //    98: ldc             "BridgeMMCachedVideo"
        //   100: ldc             "HTTP error: "
        //   102: aload           6
        //   104: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   107: aconst_null    
        //   108: astore          5
        //   110: goto            64
        //   113: aload           8
        //   115: invokeinterface org/apache/http/HttpEntity.getContentLength:()J
        //   120: lconst_0       
        //   121: lcmp           
        //   122: ifne            138
        //   125: ldc             "BridgeMMCachedVideo"
        //   127: ldc             "Millennial ad return failed. Zero content length returned."
        //   129: invokestatic    com/millennialmedia/android/MMLog.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   132: aconst_null    
        //   133: astore          5
        //   135: goto            64
        //   138: aload           8
        //   140: invokeinterface org/apache/http/HttpEntity.getContentType:()Lorg/apache/http/Header;
        //   145: astore          9
        //   147: aload           9
        //   149: ifnull          313
        //   152: aload           9
        //   154: invokeinterface org/apache/http/Header.getValue:()Ljava/lang/String;
        //   159: ifnull          313
        //   162: aload           9
        //   164: invokeinterface org/apache/http/Header.getValue:()Ljava/lang/String;
        //   169: ldc             "application/json"
        //   171: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        //   174: istore          10
        //   176: iload           10
        //   178: ifeq            313
        //   181: new             Lcom/millennialmedia/android/VideoAd;
        //   184: dup            
        //   185: aload           8
        //   187: invokeinterface org/apache/http/HttpEntity.getContent:()Ljava/io/InputStream;
        //   192: invokestatic    com/millennialmedia/android/HttpGetRequest.convertStreamToString:(Ljava/io/InputStream;)Ljava/lang/String;
        //   195: invokespecial   com/millennialmedia/android/VideoAd.<init>:(Ljava/lang/String;)V
        //   198: astore          11
        //   200: aload           11
        //   202: invokevirtual   com/millennialmedia/android/VideoAd.isValid:()Z
        //   205: ifeq            313
        //   208: aload           11
        //   210: iconst_3       
        //   211: putfield        com/millennialmedia/android/VideoAd.downloadPriority:I
        //   214: aload_3        
        //   215: aconst_null    
        //   216: aload           11
        //   218: aload_0        
        //   219: invokestatic    com/millennialmedia/android/AdCache.startDownloadTask:(Landroid/content/Context;Ljava/lang/String;Lcom/millennialmedia/android/CachedAd;Lcom/millennialmedia/android/AdCache$AdCacheTaskListener;)Z
        //   222: istore          12
        //   224: iload           12
        //   226: ifeq            346
        //   229: aload_0        
        //   230: invokevirtual   java/lang/Object.wait:()V
        //   233: aload_0        
        //   234: getfield        com/millennialmedia/android/BridgeMMCachedVideo.success:Z
        //   237: ifeq            309
        //   240: ldc             "Cached video(%s)"
        //   242: iconst_1       
        //   243: anewarray       Ljava/lang/Object;
        //   246: dup            
        //   247: iconst_0       
        //   248: aload           4
        //   250: aastore        
        //   251: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   254: invokestatic    com/millennialmedia/android/MMJSResponse.responseWithSuccess:(Ljava/lang/String;)Lcom/millennialmedia/android/MMJSResponse;
        //   257: astore          16
        //   259: aload           16
        //   261: astore          5
        //   263: aload_0        
        //   264: invokevirtual   java/lang/Object.notify:()V
        //   267: goto            64
        //   270: astore_2       
        //   271: aload_0        
        //   272: monitorexit    
        //   273: aload_2        
        //   274: athrow         
        //   275: astore          18
        //   277: ldc             "BridgeMMCachedVideo"
        //   279: ldc             "Millennial ad return failed. Invalid response data."
        //   281: aload           18
        //   283: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   286: aconst_null    
        //   287: astore          5
        //   289: goto            64
        //   292: astore          17
        //   294: ldc             "BridgeMMCachedVideo"
        //   296: ldc             "Millennial ad return failed. Invalid response data."
        //   298: aload           17
        //   300: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   303: aconst_null    
        //   304: astore          5
        //   306: goto            64
        //   309: aload_0        
        //   310: invokevirtual   java/lang/Object.notify:()V
        //   313: aconst_null    
        //   314: astore          5
        //   316: goto            64
        //   319: astore          15
        //   321: ldc             "BridgeMMCachedVideo"
        //   323: ldc             "Caching interrupted: "
        //   325: aload           15
        //   327: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   330: aload_0        
        //   331: invokevirtual   java/lang/Object.notify:()V
        //   334: goto            313
        //   337: astore          14
        //   339: aload_0        
        //   340: invokevirtual   java/lang/Object.notify:()V
        //   343: aload           14
        //   345: athrow         
        //   346: ldc             "Unable to start download for Cached video(%s)"
        //   348: iconst_1       
        //   349: anewarray       Ljava/lang/Object;
        //   352: dup            
        //   353: iconst_0       
        //   354: aload           4
        //   356: aastore        
        //   357: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   360: invokestatic    com/millennialmedia/android/MMJSResponse.responseWithError:(Ljava/lang/String;)Lcom/millennialmedia/android/MMJSResponse;
        //   363: astore          13
        //   365: aload           13
        //   367: astore          5
        //   369: goto            64
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                             
        //  -----  -----  -----  -----  ---------------------------------
        //  2      26     270    275    Any
        //  35     49     96     113    Ljava/lang/Exception;
        //  35     49     270    275    Any
        //  54     61     96     113    Ljava/lang/Exception;
        //  54     61     270    275    Any
        //  69     78     96     113    Ljava/lang/Exception;
        //  69     78     270    275    Any
        //  83     90     270    275    Any
        //  98     107    270    275    Any
        //  113    132    270    275    Any
        //  138    147    270    275    Any
        //  152    176    270    275    Any
        //  181    200    275    292    Ljava/lang/IllegalStateException;
        //  181    200    292    309    Ljava/io/IOException;
        //  181    200    270    275    Any
        //  200    224    270    275    Any
        //  229    259    319    337    Ljava/lang/InterruptedException;
        //  229    259    337    346    Any
        //  263    267    270    275    Any
        //  277    286    270    275    Any
        //  294    303    270    275    Any
        //  309    313    270    275    Any
        //  321    330    337    346    Any
        //  330    334    270    275    Any
        //  339    346    270    275    Any
        //  346    365    270    275    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 171, Size: 171
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public void downloadCompleted(final CachedAd cachedAd, final boolean success) {
        synchronized (this) {
            final Context context = (Context)this.contextRef.get();
            if (success && context != null) {
                AdCache.save(context, cachedAd);
            }
            this.success = success;
            this.notify();
        }
    }
    
    @Override
    public void downloadStart(final CachedAd cachedAd) {
    }
    
    public MMJSResponse endVideo(final Map map) {
        final VideoPlayerActivity vpa = this.getVPA();
        if (vpa != null) {
            return this.runOnUiThreadFuture(new Callable() {
                @Override
                public MMJSResponse call() {
                    vpa.endVideo();
                    return MMJSResponse.responseWithSuccess();
                }
            });
        }
        return null;
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map map) {
        MMJSResponse availableCachedVideos;
        if ("availableCachedVideos".equals(s)) {
            availableCachedVideos = this.availableCachedVideos(map);
        }
        else {
            if ("cacheVideo".equals(s)) {
                return this.cacheVideo(map);
            }
            if ("endVideo".equals(s)) {
                return this.endVideo(map);
            }
            if ("pauseVideo".equals(s)) {
                return this.pauseVideo(map);
            }
            if ("playCachedVideo".equals(s)) {
                return this.playCachedVideo(map);
            }
            if ("playVideo".equals(s)) {
                return this.playVideo(map);
            }
            if ("restartVideo".equals(s)) {
                return this.restartVideo(map);
            }
            final boolean equals = "videoIdExists".equals(s);
            availableCachedVideos = null;
            if (equals) {
                return this.videoIdExists(map);
            }
        }
        return availableCachedVideos;
    }
    
    public MMJSResponse pauseVideo(final Map map) {
        final VideoPlayerActivity vpa = this.getVPA();
        if (vpa != null) {
            return this.runOnUiThreadFuture(new Callable() {
                @Override
                public MMJSResponse call() {
                    vpa.pauseVideoByUser();
                    return MMJSResponse.responseWithSuccess();
                }
            });
        }
        return null;
    }
    
    public MMJSResponse playCachedVideo(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("videoId");
        if (s != null && context != null) {
            final VideoAd videoAd = (VideoAd)AdCache.load(context, s);
            if (videoAd != null && videoAd.canShow(context, null, false)) {
                videoAd.show(context, this.getAdImplId(map.get("PROPERTY_EXPANDING")));
                return MMJSResponse.responseWithSuccess(String.format("Playing Video(%s)", s));
            }
        }
        return null;
    }
    
    public MMJSResponse playVideo(final Map map) {
        final VideoPlayerActivity vpa = this.getVPA();
        if (vpa != null) {
            return this.runOnUiThreadFuture(new Callable() {
                @Override
                public MMJSResponse call() {
                    vpa.resumeVideo();
                    return MMJSResponse.responseWithSuccess();
                }
            });
        }
        return null;
    }
    
    public MMJSResponse restartVideo(final Map map) {
        final VideoPlayerActivity vpa = this.getVPA();
        if (vpa != null) {
            return this.runOnUiThreadFuture(new Callable() {
                @Override
                public MMJSResponse call() {
                    vpa.restartVideo();
                    return MMJSResponse.responseWithSuccess();
                }
            });
        }
        return null;
    }
    
    @Deprecated
    public MMJSResponse videoIdExists(final Map map) {
        final Context context = (Context)this.contextRef.get();
        final String s = map.get("videoId");
        if (s != null && context != null) {
            final VideoAd videoAd = (VideoAd)AdCache.load(context, s);
            if (videoAd != null && videoAd.isOnDisk(context) && !videoAd.isExpired()) {
                return MMJSResponse.responseWithSuccess(s);
            }
        }
        return null;
    }
}
