// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.util.concurrent.Callable;
import java.util.Map;

class BridgeMMInlineVideo extends MMJSObject
{
    private static final String ADJUST_VIDEO = "adjustVideo";
    private static final String INSERT_VIDEO = "insertVideo";
    private static final String PAUSE_VIDEO = "pauseVideo";
    private static final String PLAY_VIDEO = "playVideo";
    private static final String REMOVE_VIDEO = "removeVideo";
    private static final String RESUME_VIDEO = "resumeVideo";
    private static final String SET_STREAM_VIDEO_SOURCE = "setStreamVideoSource";
    private static final String STOP_VIDEO = "stopVideo";
    
    public MMJSResponse adjustVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null && mmWebView != null && mmWebView.getMMLayout().adjustVideo(new InlineVideoView$InlineParams(map, mmWebView.getContext()))) {
                    return MMJSResponse.responseWithSuccess();
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    @Override
    MMJSResponse executeCommand(final String s, final Map streamVideoSource) {
        MMJSResponse adjustVideo;
        if ("adjustVideo".equals(s)) {
            adjustVideo = this.adjustVideo(streamVideoSource);
        }
        else {
            if ("insertVideo".equals(s)) {
                return this.insertVideo(streamVideoSource);
            }
            if ("pauseVideo".equals(s)) {
                return this.pauseVideo(streamVideoSource);
            }
            if ("playVideo".equals(s)) {
                return this.playVideo(streamVideoSource);
            }
            if ("removeVideo".equals(s)) {
                return this.removeVideo(streamVideoSource);
            }
            if ("resumeVideo".equals(s)) {
                return this.resumeVideo(streamVideoSource);
            }
            if ("setStreamVideoSource".equals(s)) {
                return this.setStreamVideoSource(streamVideoSource);
            }
            final boolean equals = "stopVideo".equals(s);
            adjustVideo = null;
            if (equals) {
                return this.stopVideo(streamVideoSource);
            }
        }
        return adjustVideo;
    }
    
    public MMJSResponse insertVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    mmLayout.initInlineVideo(new InlineVideoView$InlineParams(map, mmWebView.getContext()));
                    return MMJSResponse.responseWithSuccess("usingStreaming=" + mmLayout.isVideoPlayingStreaming());
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse pauseVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    if (mmLayout != null) {
                        mmLayout.pauseVideo();
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse playVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    if (mmLayout != null) {
                        mmLayout.playVideo();
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse removeVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    if (mmLayout != null) {
                        mmLayout.removeVideo();
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse resumeVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    if (mmLayout != null) {
                        mmLayout.resumeVideo();
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse setStreamVideoSource(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    final String videoSource = map.get("streamVideoURI");
                    if (mmLayout != null && videoSource != null) {
                        mmLayout.setVideoSource(videoSource);
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
    
    public MMJSResponse stopVideo(final Map map) {
        return this.runOnUiThreadFuture(new Callable() {
            @Override
            public MMJSResponse call() {
                final MMWebView mmWebView = (MMWebView)BridgeMMInlineVideo.this.mmWebViewRef.get();
                if (mmWebView != null) {
                    final MMLayout mmLayout = mmWebView.getMMLayout();
                    if (mmLayout != null) {
                        mmLayout.stopVideo();
                        return MMJSResponse.responseWithSuccess();
                    }
                }
                return MMJSResponse.responseWithError();
            }
        });
    }
}
