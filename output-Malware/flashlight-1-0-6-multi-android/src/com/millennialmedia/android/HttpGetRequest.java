// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import java.util.Iterator;
import java.net.URLEncoder;
import java.util.Map;
import java.util.TreeMap;
import org.apache.http.client.methods.HttpUriRequest;
import java.net.URI;
import android.text.TextUtils;
import org.apache.http.HttpResponse;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.HttpClient;

class HttpGetRequest
{
    private static final String TAG = "HttpGetRequest";
    private HttpClient client;
    private HttpGet getRequest;
    
    HttpGetRequest() {
        final BasicHttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout((HttpParams)basicHttpParams, 10000);
        this.client = (HttpClient)new DefaultHttpClient((HttpParams)basicHttpParams);
        this.getRequest = new HttpGet();
    }
    
    HttpGetRequest(final int n) {
        final BasicHttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout((HttpParams)basicHttpParams, 10000);
        HttpConnectionParams.setSoTimeout((HttpParams)basicHttpParams, n);
        this.client = (HttpClient)new DefaultHttpClient((HttpParams)basicHttpParams);
        this.getRequest = new HttpGet();
    }
    
    static String convertStreamToString(final InputStream inputStream) {
        if (inputStream == null) {
            throw new IOException("Stream is null.");
        }
        while (true) {
            try {
                final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream), 4096);
                Label_0112: {
                    try {
                        try {
                            final StringBuilder sb = new StringBuilder();
                            while (true) {
                                final String line = bufferedReader.readLine();
                                if (line == null) {
                                    break Label_0112;
                                }
                                sb.append(line + "\n");
                            }
                        }
                        catch (OutOfMemoryError outOfMemoryError2) {}
                        final OutOfMemoryError outOfMemoryError;
                        MMLog.e("HttpGetRequest", "Out of Memeory: ", outOfMemoryError);
                        throw new IOException("Out of memory.");
                    }
                    finally {}
                    Label_0110: {
                        if (bufferedReader == null) {
                            break Label_0110;
                        }
                        try {
                            bufferedReader.close();
                            throw;
                            try {
                                bufferedReader.close();
                                final StringBuilder sb;
                                return sb.toString();
                            }
                            catch (IOException ex) {
                                MMLog.e("HttpGetRequest", "Error closing file", ex);
                            }
                        }
                        catch (IOException ex2) {
                            MMLog.e("HttpGetRequest", "Error closing file", ex2);
                        }
                    }
                }
            }
            catch (OutOfMemoryError outOfMemoryError) {}
            finally {
                final BufferedReader bufferedReader = null;
                continue;
            }
            break;
        }
    }
    
    static void log(final String[] array) {
        if (array != null && array.length > 0) {
            Utils$ThreadUtils.execute(new Runnable() {
                @Override
                public final void run() {
                    final String[] val$urls = array;
                    final int length = val$urls.length;
                    int i = 0;
                Label_0052_Outer:
                    while (i < length) {
                        final String s = val$urls[i];
                        MMLog.v("HttpGetRequest", String.format("Logging event to: %s", s));
                        while (true) {
                            try {
                                new HttpGetRequest().get(s);
                                ++i;
                                continue Label_0052_Outer;
                            }
                            catch (Exception ex) {
                                MMLog.e("HttpGetRequest", "Logging request failed.", ex);
                                continue;
                            }
                            break;
                        }
                        break;
                    }
                }
            });
        }
    }
    
    HttpResponse get(final String s) {
        final boolean empty = TextUtils.isEmpty((CharSequence)s);
        HttpResponse execute = null;
        if (empty) {
            return execute;
        }
        try {
            this.getRequest.setURI(new URI(s));
            execute = this.client.execute((HttpUriRequest)this.getRequest);
            return execute;
        }
        catch (OutOfMemoryError outOfMemoryError) {
            MMLog.e("HttpGetRequest", "Out of memory!", outOfMemoryError);
            return null;
        }
        catch (Exception ex) {
            MMLog.e("HttpGetRequest", "Error connecting:", ex);
            return null;
        }
    }
    
    void trackConversion(final String s, final boolean b, final long n, final TreeMap treeMap) {
        int n2 = 1;
        while (true) {
            Label_0194: {
                if (!b) {
                    break Label_0194;
                }
                StringBuilder sb = null;
                Label_0200: {
                    try {
                        sb = new StringBuilder("http://cvt.mydas.mobi/handleConversion?firstlaunch=" + n2);
                        if (s != null) {
                            sb.append("&goalId=" + s);
                        }
                        if (n > 0L) {
                            sb.append("&installtime=" + n / 1000L);
                        }
                        if (treeMap != null) {
                            for (final Map.Entry<Object, V> entry : treeMap.entrySet()) {
                                sb.append(String.format("&%s=%s", entry.getKey(), URLEncoder.encode((String)entry.getValue(), "UTF-8")));
                            }
                        }
                        break Label_0200;
                    }
                    catch (IOException ex) {
                        MMLog.e("HttpGetRequest", "Conversion tracking error: ", ex);
                        return;
                    }
                    break Label_0194;
                }
                final String string = sb.toString();
                MMLog.d("HttpGetRequest", String.format("Sending conversion tracker report: %s", string));
                this.getRequest.setURI(new URI(string));
                final HttpResponse execute = this.client.execute((HttpUriRequest)this.getRequest);
                if (execute.getStatusLine().getStatusCode() == 200) {
                    MMLog.v("HttpGetRequest", String.format("Successful conversion tracking event: %d", execute.getStatusLine().getStatusCode()));
                    return;
                }
                MMLog.e("HttpGetRequest", String.format("Conversion tracking error: %d", execute.getStatusLine().getStatusCode()));
                return;
            }
            n2 = 0;
            continue;
        }
    }
}
