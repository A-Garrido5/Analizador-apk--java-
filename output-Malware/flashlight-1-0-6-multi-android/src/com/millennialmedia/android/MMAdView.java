// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.android;

import android.view.MotionEvent;
import android.view.animation.Animation;
import android.graphics.Bitmap;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.ImageView$ScaleType;
import android.view.ViewParent;
import android.view.Window;
import android.view.ViewGroup;
import android.app.Activity;
import android.view.View;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.content.Context;
import android.widget.ImageView;
import android.view.animation.Animation$AnimationListener;
import android.view.View$OnClickListener;

public final class MMAdView extends MMLayout implements View$OnClickListener, Animation$AnimationListener
{
    static final int DEFAULT_RESIZE_PARAM_VALUES = -50;
    private static final String TAG = "MMAdView";
    public static final int TRANSITION_DOWN = 3;
    public static final int TRANSITION_FADE = 1;
    public static final int TRANSITION_NONE = 0;
    public static final int TRANSITION_RANDOM = 4;
    public static final int TRANSITION_UP = 2;
    int height;
    int oldHeight;
    int oldWidth;
    ImageView refreshAnimationimageView;
    int transitionType;
    MMAdView$ResizeView view;
    int width;
    
    public MMAdView(final Context context) {
        super(context);
        this.transitionType = 4;
        this.height = 0;
        this.width = 0;
        this.oldHeight = -50;
        this.oldWidth = -50;
        this.adImpl = new MMAdView$MMAdViewMMAdImpl(this, context);
        this.init(context);
    }
    
    public MMAdView(final Context context, final AttributeSet set) {
        this(context, set, 0);
    }
    
    public MMAdView(final Context context, final AttributeSet set, final int n) {
        super(context, set, n);
        this.transitionType = 4;
        this.height = 0;
        this.width = 0;
        this.oldHeight = -50;
        this.oldWidth = -50;
        if (!this.isInEditMode()) {
            MMLog.d("MMAdView", "Creating MMAdView from XML layout.");
            this.adImpl = new MMAdView$MMAdViewMMAdImpl(this, context);
            Label_0399: {
                if (set == null) {
                    break Label_0399;
                }
                super.setApid(set.getAttributeValue("http://millennialmedia.com/android/schema", "apid"));
                this.adImpl.ignoreDensityScaling = set.getAttributeBooleanValue("http://millennialmedia.com/android/schema", "ignoreDensityScaling", false);
                final String attributeValue = set.getAttributeValue("http://millennialmedia.com/android/schema", "height");
                final String attributeValue2 = set.getAttributeValue("http://millennialmedia.com/android/schema", "width");
                while (true) {
                    try {
                        if (!TextUtils.isEmpty((CharSequence)attributeValue)) {
                            this.height = Integer.parseInt(attributeValue);
                        }
                        if (!TextUtils.isEmpty((CharSequence)attributeValue2)) {
                            this.width = Integer.parseInt(attributeValue2);
                        }
                        if (this.adImpl.mmRequest != null) {
                            this.adImpl.mmRequest.age = set.getAttributeValue("http://millennialmedia.com/android/schema", "age");
                            this.adImpl.mmRequest.children = set.getAttributeValue("http://millennialmedia.com/android/schema", "children");
                            this.adImpl.mmRequest.education = set.getAttributeValue("http://millennialmedia.com/android/schema", "education");
                            this.adImpl.mmRequest.ethnicity = set.getAttributeValue("http://millennialmedia.com/android/schema", "ethnicity");
                            this.adImpl.mmRequest.gender = set.getAttributeValue("http://millennialmedia.com/android/schema", "gender");
                            this.adImpl.mmRequest.income = set.getAttributeValue("http://millennialmedia.com/android/schema", "income");
                            this.adImpl.mmRequest.keywords = set.getAttributeValue("http://millennialmedia.com/android/schema", "keywords");
                            this.adImpl.mmRequest.marital = set.getAttributeValue("http://millennialmedia.com/android/schema", "marital");
                            this.adImpl.mmRequest.politics = set.getAttributeValue("http://millennialmedia.com/android/schema", "politics");
                            this.adImpl.mmRequest.vendor = set.getAttributeValue("http://millennialmedia.com/android/schema", "vendor");
                            this.adImpl.mmRequest.zip = set.getAttributeValue("http://millennialmedia.com/android/schema", "zip");
                        }
                        this.goalId = set.getAttributeValue("http://millennialmedia.com/android/schema", "goalId");
                        this.init(context);
                        return;
                    }
                    catch (NumberFormatException ex) {
                        MMLog.e("MMAdView", "Error reading attrs file from xml", ex);
                        continue;
                    }
                    break;
                }
            }
        }
        this.initEclipseAd(context);
    }
    
    private void attachToWindow(final View view) {
        synchronized (this) {
            this.detachFromParent(view);
            final Context context = this.getContext();
            if (context != null && context instanceof Activity) {
                final Window window = ((Activity)context).getWindow();
                if (window != null) {
                    final View decorView = window.getDecorView();
                    if (decorView != null && decorView instanceof ViewGroup) {
                        ((ViewGroup)decorView).addView(view);
                    }
                }
            }
        }
    }
    
    private void callSetTranslationX(final int n) {
        try {
            View.class.getMethod("setTranslationX", Float.TYPE).invoke(this, n);
        }
        catch (Exception ex) {
            MMLog.e("MMAdView", "Unable to call setTranslationX", ex);
        }
    }
    
    private void callSetTranslationY(final int n) {
        try {
            View.class.getMethod("setTranslationY", Float.TYPE).invoke(this, n);
        }
        catch (Exception ex) {
            MMLog.e("MMAdView", "Unable to call setTranslationY", ex);
        }
    }
    
    private void detachFromParent(final View view) {
        // monitorenter(this)
        if (view == null) {
            return;
        }
        try {
            final ViewParent parent = this.getParent();
            if (parent != null && parent instanceof ViewGroup) {
                final ViewGroup viewGroup = (ViewGroup)parent;
                if (view.getParent() != null) {
                    viewGroup.removeView(view);
                }
            }
        }
        finally {
        }
        // monitorexit(this)
    }
    
    private void getAdInternal() {
        if (this.adImpl != null) {
            this.adImpl.requestAd();
        }
    }
    
    private boolean hasDefaultResizeParams() {
        return this.oldWidth == -50 && this.oldHeight == -50;
    }
    
    private void init(final Context context) {
        this.setBackgroundColor(0);
        this.adImpl.adType = "b";
        this.setOnClickListener((View$OnClickListener)this);
        this.setFocusable(true);
        (this.refreshAnimationimageView = new ImageView(context)).setScaleType(ImageView$ScaleType.FIT_XY);
        this.refreshAnimationimageView.setVisibility(8);
        this.addView((View)this.refreshAnimationimageView, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-2, -2));
        this.setLayoutParams((ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-2, -2));
    }
    
    private void initEclipseAd(final Context p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_2       
        //     2: new             Landroid/widget/ImageView;
        //     5: dup            
        //     6: aload_1        
        //     7: invokespecial   android/widget/ImageView.<init>:(Landroid/content/Context;)V
        //    10: astore_3       
        //    11: ldc_w           "java.io.tmpdir"
        //    14: invokestatic    java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
        //    17: astore          11
        //    19: aload           11
        //    21: ifnull          58
        //    24: aload           11
        //    26: getstatic       java/io/File.separator:Ljava/lang/String;
        //    29: invokevirtual   java/lang/String.endsWith:(Ljava/lang/String;)Z
        //    32: ifne            58
        //    35: new             Ljava/lang/StringBuilder;
        //    38: dup            
        //    39: invokespecial   java/lang/StringBuilder.<init>:()V
        //    42: aload           11
        //    44: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    47: getstatic       java/io/File.separator:Ljava/lang/String;
        //    50: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    53: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    56: astore          11
        //    58: new             Ljava/io/File;
        //    61: dup            
        //    62: new             Ljava/lang/StringBuilder;
        //    65: dup            
        //    66: invokespecial   java/lang/StringBuilder.<init>:()V
        //    69: aload           11
        //    71: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    74: ldc_w           "millenial355jns6u3l1nmedia.png"
        //    77: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    80: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    83: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //    86: astore          12
        //    88: aload           12
        //    90: invokevirtual   java/io/File.exists:()Z
        //    93: ifne            409
        //    96: new             Ljava/net/URL;
        //    99: dup            
        //   100: ldc_w           "http://images.millennialmedia.com/9513/192134.gif"
        //   103: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
        //   106: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
        //   109: checkcast       Ljava/net/HttpURLConnection;
        //   112: astore          14
        //   114: aload           14
        //   116: iconst_1       
        //   117: invokevirtual   java/net/HttpURLConnection.setDoOutput:(Z)V
        //   120: aload           14
        //   122: sipush          10000
        //   125: invokevirtual   java/net/HttpURLConnection.setConnectTimeout:(I)V
        //   128: aload           14
        //   130: invokevirtual   java/net/HttpURLConnection.connect:()V
        //   133: aload           14
        //   135: invokevirtual   java/net/HttpURLConnection.getInputStream:()Ljava/io/InputStream;
        //   138: astore          15
        //   140: new             Ljava/io/FileOutputStream;
        //   143: dup            
        //   144: aload           12
        //   146: invokespecial   java/io/FileOutputStream.<init>:(Ljava/io/File;)V
        //   149: astore          16
        //   151: sipush          1024
        //   154: newarray        B
        //   156: astore          17
        //   158: aload           15
        //   160: aload           17
        //   162: invokevirtual   java/io/InputStream.read:([B)I
        //   165: istore          18
        //   167: iload           18
        //   169: ifle            228
        //   172: aload           16
        //   174: aload           17
        //   176: iconst_0       
        //   177: iload           18
        //   179: invokevirtual   java/io/OutputStream.write:([BII)V
        //   182: goto            158
        //   185: astore          4
        //   187: aload           16
        //   189: astore_2       
        //   190: aload           15
        //   192: astore          5
        //   194: ldc             "MMAdView"
        //   196: ldc_w           "Error with eclipse xml image display: "
        //   199: aload           4
        //   201: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   204: aload           5
        //   206: ifnull          214
        //   209: aload           5
        //   211: invokevirtual   java/io/InputStream.close:()V
        //   214: aload_2        
        //   215: ifnull          222
        //   218: aload_2        
        //   219: invokevirtual   java/io/OutputStream.close:()V
        //   222: aload_0        
        //   223: aload_3        
        //   224: invokevirtual   com/millennialmedia/android/MMAdView.addView:(Landroid/view/View;)V
        //   227: return         
        //   228: aload           16
        //   230: astore_2       
        //   231: aload           15
        //   233: astore          5
        //   235: aload           12
        //   237: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //   240: invokestatic    android/graphics/BitmapFactory.decodeFile:(Ljava/lang/String;)Landroid/graphics/Bitmap;
        //   243: astore          13
        //   245: aload           13
        //   247: ifnull          256
        //   250: aload_3        
        //   251: aload           13
        //   253: invokevirtual   android/widget/ImageView.setImageBitmap:(Landroid/graphics/Bitmap;)V
        //   256: aload           5
        //   258: ifnull          266
        //   261: aload           5
        //   263: invokevirtual   java/io/InputStream.close:()V
        //   266: aload_2        
        //   267: ifnull          222
        //   270: aload_2        
        //   271: invokevirtual   java/io/OutputStream.close:()V
        //   274: goto            222
        //   277: astore          8
        //   279: ldc             "MMAdView"
        //   281: astore          9
        //   283: ldc_w           "Error closing file"
        //   286: astore          10
        //   288: aload           9
        //   290: aload           10
        //   292: aload           8
        //   294: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   297: goto            222
        //   300: astore          6
        //   302: aconst_null    
        //   303: astore          5
        //   305: aload           5
        //   307: ifnull          315
        //   310: aload           5
        //   312: invokevirtual   java/io/InputStream.close:()V
        //   315: aload_2        
        //   316: ifnull          323
        //   319: aload_2        
        //   320: invokevirtual   java/io/OutputStream.close:()V
        //   323: aload           6
        //   325: athrow         
        //   326: astore          7
        //   328: ldc             "MMAdView"
        //   330: ldc_w           "Error closing file"
        //   333: aload           7
        //   335: invokestatic    com/millennialmedia/android/MMLog.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   338: goto            323
        //   341: astore          8
        //   343: ldc             "MMAdView"
        //   345: astore          9
        //   347: ldc_w           "Error closing file"
        //   350: astore          10
        //   352: goto            288
        //   355: astore          6
        //   357: aload           15
        //   359: astore          5
        //   361: aconst_null    
        //   362: astore_2       
        //   363: goto            305
        //   366: astore          6
        //   368: aload           16
        //   370: astore_2       
        //   371: aload           15
        //   373: astore          5
        //   375: goto            305
        //   378: astore          6
        //   380: goto            305
        //   383: astore          4
        //   385: aconst_null    
        //   386: astore_2       
        //   387: aconst_null    
        //   388: astore          5
        //   390: goto            194
        //   393: astore          4
        //   395: aload           15
        //   397: astore          5
        //   399: aconst_null    
        //   400: astore_2       
        //   401: goto            194
        //   404: astore          4
        //   406: goto            194
        //   409: aconst_null    
        //   410: astore_2       
        //   411: aconst_null    
        //   412: astore          5
        //   414: goto            235
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  11     19     383    393    Ljava/lang/Exception;
        //  11     19     300    305    Any
        //  24     58     383    393    Ljava/lang/Exception;
        //  24     58     300    305    Any
        //  58     140    383    393    Ljava/lang/Exception;
        //  58     140    300    305    Any
        //  140    151    393    404    Ljava/lang/Exception;
        //  140    151    355    366    Any
        //  151    158    185    194    Ljava/lang/Exception;
        //  151    158    366    378    Any
        //  158    167    185    194    Ljava/lang/Exception;
        //  158    167    366    378    Any
        //  172    182    185    194    Ljava/lang/Exception;
        //  172    182    366    378    Any
        //  194    204    378    383    Any
        //  209    214    341    355    Ljava/lang/Exception;
        //  218    222    341    355    Ljava/lang/Exception;
        //  235    245    404    409    Ljava/lang/Exception;
        //  235    245    378    383    Any
        //  250    256    404    409    Ljava/lang/Exception;
        //  250    256    378    383    Any
        //  261    266    277    288    Ljava/lang/Exception;
        //  270    274    277    288    Ljava/lang/Exception;
        //  310    315    326    341    Ljava/lang/Exception;
        //  319    323    326    341    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 189, Size: 189
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void setUnresizeParameters() {
        if (this.hasDefaultResizeParams()) {
            final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
            this.oldWidth = layoutParams.width;
            this.oldHeight = layoutParams.height;
            if (this.oldWidth <= 0) {
                this.oldWidth = this.getWidth();
            }
            if (this.oldHeight <= 0) {
                this.oldHeight = this.getHeight();
            }
        }
    }
    
    @Override
    final void closeAreaTouched() {
        this.adImpl.unresizeToDefault();
    }
    
    public final void getAd() {
        if (this.adImpl != null && this.adImpl.requestListener != null) {
            this.getAd(this.adImpl.requestListener);
            return;
        }
        this.getAdInternal();
    }
    
    public final void getAd(final RequestListener requestListener) {
        if (this.adImpl != null) {
            this.adImpl.requestListener = requestListener;
        }
        this.getAdInternal();
    }
    
    final void handleMraidResize(final DTOResizeParameters dtoResizeParameters) {
        synchronized (this) {
            this.refreshAnimationimageView.setImageBitmap((Bitmap)null);
            if (MMSDK.hasSetTranslationMethod()) {
                if (this.view == null) {
                    (this.view = new MMAdView$ResizeView(this, this.getContext())).setId(304025022);
                    this.view.setLayoutParams((ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(1, 1));
                    this.view.setBackgroundColor(0);
                }
                if (this.view.getParent() == null) {
                    final ViewParent parent = this.getParent();
                    if (parent != null && parent instanceof ViewGroup) {
                        ((ViewGroup)parent).addView((View)this.view);
                    }
                }
                final MMAdView$BannerBounds mmAdView$BannerBounds = new MMAdView$BannerBounds(this, dtoResizeParameters);
                if (!dtoResizeParameters.allowOffScreen) {
                    mmAdView$BannerBounds.calculateOnScreenBounds();
                }
                final int[] array = new int[2];
                this.getLocationInWindow(array);
                this.attachToWindow((View)this);
                final int[] array2 = new int[2];
                this.getLocationInWindow(array2);
                this.setUnresizeParameters();
                final int n = array[0] - array2[0];
                final int n2 = array[1] - array2[1];
                mmAdView$BannerBounds.modifyLayoutParams(this.getLayoutParams());
                this.callSetTranslationX(n + mmAdView$BannerBounds.translationX);
                this.callSetTranslationY(n2 + mmAdView$BannerBounds.translationY);
                this.setCloseArea(dtoResizeParameters.customClosePosition);
            }
        }
    }
    
    final void handleUnresize() {
        synchronized (this) {
            if (MMSDK.hasSetTranslationMethod()) {
                this.removeCloseTouchDelegate();
                if (!this.hasDefaultResizeParams()) {
                    final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
                    layoutParams.width = this.oldWidth;
                    layoutParams.height = this.oldHeight;
                    this.callSetTranslationX(0);
                    this.callSetTranslationY(0);
                    this.oldWidth = -50;
                    this.oldHeight = -50;
                }
                if (this.view != null) {
                    this.isResizing = true;
                    this.view.attachToContext((View)this);
                    final ViewParent parent = this.getParent();
                    if (parent != null && parent instanceof ViewGroup) {
                        final ViewGroup viewGroup = (ViewGroup)parent;
                        if (this.view.getParent() != null) {
                            viewGroup.removeView((View)this.view);
                        }
                    }
                    this.isResizing = false;
                }
            }
        }
    }
    
    @Deprecated
    public final void onAnimationEnd(final Animation animation) {
        this.refreshAnimationimageView.setVisibility(8);
    }
    
    @Deprecated
    public final void onAnimationRepeat(final Animation animation) {
    }
    
    @Deprecated
    public final void onAnimationStart(final Animation animation) {
    }
    
    @Deprecated
    public final void onClick(final View view) {
        MMLog.d("MMAdView", "On click for " + view.getId() + " view, " + view + " adimpl" + this.adImpl);
        this.onTouchEvent(MotionEvent.obtain(0L, System.currentTimeMillis(), 1, 0.0f, 0.0f, 0));
    }
    
    protected final void onLayout(final boolean b, final int n, final int n2, final int n3, final int n4) {
        super.onLayout(b, n, n2, n3, n4);
        Utils$ThreadUtils.execute(new Runnable() {
            @Override
            public void run() {
                final float density = MMAdView.this.getContext().getResources().getDisplayMetrics().density;
                if (MMAdView.this.width <= 0) {
                    MMAdView.this.width = (int)(MMAdView.this.getWidth() / density);
                }
                if (MMAdView.this.height <= 0) {
                    MMAdView.this.height = (int)(MMAdView.this.getHeight() / density);
                }
            }
        });
    }
    
    @Override
    public final void onWindowFocusChanged(final boolean b) {
        super.onWindowFocusChanged(b);
        if (b && this.adImpl != null && this.adImpl.controller != null) {
            if (this.adImpl.controller.webView == null) {
                this.adImpl.controller.webView = MMAdImplController.getWebViewFromExistingAdImpl(this.adImpl);
            }
            final MMWebView webView = this.adImpl.controller.webView;
            if (webView != null && !webView.isCurrentParent(this.adImpl.internalId) && !webView.mraidState.equals("expanded")) {
                webView.removeFromParent();
                this.addView((View)webView);
            }
        }
    }
    
    public final void setBackgroundColor(final int n) {
        super.setBackgroundColor(n);
        if (this.adImpl != null && this.adImpl.controller != null && this.adImpl.controller.webView != null) {
            this.adImpl.controller.webView.setBackgroundColor(n);
        }
    }
    
    public final void setHeight(final int height) {
        this.height = height;
    }
    
    public final void setTransitionType(final int transitionType) {
        this.transitionType = transitionType;
    }
    
    public final void setWidth(final int width) {
        this.width = width;
    }
}
