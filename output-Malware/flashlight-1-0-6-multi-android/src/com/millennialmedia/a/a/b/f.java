// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.a.a.b;

import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.SortedMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.LinkedHashSet;
import java.util.Set;
import com.millennialmedia.a.a.k;
import java.lang.reflect.ParameterizedType;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.SortedSet;
import java.util.Collection;
import java.lang.reflect.Type;
import com.millennialmedia.a.a.g;
import com.millennialmedia.a.a.c.a;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Constructor;
import java.util.Map;

public final class f
{
    private final Map a;
    
    public f(final Map a) {
        this.a = a;
    }
    
    private q a(final Class clazz) {
        try {
            final Constructor declaredConstructor = clazz.getDeclaredConstructor((Class[])new Class[0]);
            if (!declaredConstructor.isAccessible()) {
                declaredConstructor.setAccessible(true);
            }
            return new q() {
                @Override
                public final Object a() {
                    try {
                        return declaredConstructor.newInstance((Object[])null);
                    }
                    catch (InstantiationException ex) {
                        throw new RuntimeException("Failed to invoke " + declaredConstructor + " with no args", ex);
                    }
                    catch (InvocationTargetException ex2) {
                        throw new RuntimeException("Failed to invoke " + declaredConstructor + " with no args", ex2.getTargetException());
                    }
                    catch (IllegalAccessException ex3) {
                        throw new AssertionError((Object)ex3);
                    }
                }
            };
        }
        catch (NoSuchMethodException ex) {
            return null;
        }
    }
    
    public final q a(final a a) {
        final Type b = a.b();
        final Class a2 = a.a();
        final g g = this.a.get(b);
        q a3;
        if (g != null) {
            a3 = new q() {
                @Override
                public final Object a() {
                    final g a = g;
                    final Type b = b;
                    return a.a();
                }
            };
        }
        else {
            final g g2 = this.a.get(a2);
            if (g2 != null) {
                return new q() {
                    @Override
                    public final Object a() {
                        final g a = g2;
                        final Type b = b;
                        return a.a();
                    }
                };
            }
            a3 = this.a(a2);
            if (a3 == null) {
                if (Collection.class.isAssignableFrom(a2)) {
                    if (SortedSet.class.isAssignableFrom(a2)) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new TreeSet();
                            }
                        };
                    }
                    else if (EnumSet.class.isAssignableFrom(a2)) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                if (!(b instanceof ParameterizedType)) {
                                    throw new k("Invalid EnumSet type: " + b.toString());
                                }
                                final Type type = ((ParameterizedType)b).getActualTypeArguments()[0];
                                if (type instanceof Class) {
                                    return EnumSet.noneOf((Class<Enum>)type);
                                }
                                throw new k("Invalid EnumSet type: " + b.toString());
                            }
                        };
                    }
                    else if (Set.class.isAssignableFrom(a2)) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new LinkedHashSet();
                            }
                        };
                    }
                    else if (Queue.class.isAssignableFrom(a2)) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new LinkedList();
                            }
                        };
                    }
                    else {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new ArrayList();
                            }
                        };
                    }
                }
                else if (Map.class.isAssignableFrom(a2)) {
                    if (SortedMap.class.isAssignableFrom(a2)) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new TreeMap();
                            }
                        };
                    }
                    else if (b instanceof ParameterizedType && !String.class.isAssignableFrom(a.a(((ParameterizedType)b).getActualTypeArguments()[0]).a())) {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new LinkedHashMap();
                            }
                        };
                    }
                    else {
                        a3 = new q() {
                            @Override
                            public final Object a() {
                                return new j();
                            }
                        };
                    }
                }
                else {
                    a3 = null;
                }
                if (a3 == null) {
                    return new q() {
                        private final v d = v.a();
                        
                        @Override
                        public final Object a() {
                            try {
                                return this.d.a(a2);
                            }
                            catch (Exception ex) {
                                throw new RuntimeException("Unable to invoke no-args constructor for " + b + ". Register an InstanceCreator with Gson for this type may fix this problem.", ex);
                            }
                        }
                    };
                }
            }
        }
        return a3;
    }
    
    @Override
    public final String toString() {
        return this.a.toString();
    }
}
