// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.a.a.b;

import java.util.Set;
import java.util.Arrays;
import java.util.Map;
import java.util.Comparator;
import java.io.Serializable;
import java.util.AbstractMap;

public final class j extends AbstractMap implements Serializable
{
    static final /* synthetic */ boolean g;
    private static final Comparator h;
    Comparator a;
    p[] b;
    final p c;
    int d;
    int e;
    int f;
    private m i;
    private n j;
    
    static {
        g = !j.class.desiredAssertionStatus();
        h = new Comparator() {};
    }
    
    public j() {
        this(com.millennialmedia.a.a.b.j.h);
    }
    
    private j(Comparator h) {
        this.d = 0;
        this.e = 0;
        if (h == null) {
            h = com.millennialmedia.a.a.b.j.h;
        }
        this.a = h;
        this.c = new p();
        this.b = new p[16];
        this.f = this.b.length / 2 + this.b.length / 4;
    }
    
    private p a(final Object o, final boolean b) {
        final Comparator a = this.a;
        final p[] b2 = this.b;
        final int hashCode = o.hashCode();
        final int n = hashCode ^ (hashCode >>> 20 ^ hashCode >>> 12);
        final int n2 = n ^ n >>> 7 ^ n >>> 4;
        final int n3 = n2 & -1 + b2.length;
        p p2 = b2[n3];
        int n4 = 0;
        Label_0175: {
            if (p2 == null) {
                n4 = 0;
                break Label_0175;
            }
            Comparable<Object> comparable;
            if (a == com.millennialmedia.a.a.b.j.h) {
                comparable = (Comparable<Object>)o;
            }
            else {
                comparable = null;
            }
            p p3;
            while (true) {
                int n5;
                if (comparable != null) {
                    n5 = comparable.compareTo(p2.f);
                }
                else {
                    n5 = a.compare(o, p2.f);
                }
                if (n5 == 0) {
                    p3 = p2;
                    break;
                }
                p p4;
                if (n5 < 0) {
                    p4 = p2.b;
                }
                else {
                    p4 = p2.c;
                }
                if (p4 == null) {
                    n4 = n5;
                    break Label_0175;
                }
                p2 = p4;
            }
            return p3;
        }
        p p3 = null;
        if (b) {
            final p c = this.c;
            p p5;
            if (p2 == null) {
                if (a == com.millennialmedia.a.a.b.j.h && !(o instanceof Comparable)) {
                    throw new ClassCastException(o.getClass().getName() + " is not Comparable");
                }
                p5 = new p(p2, o, n2, c, c.e);
                b2[n3] = p5;
            }
            else {
                p5 = new p(p2, o, n2, c, c.e);
                if (n4 < 0) {
                    p2.b = p5;
                }
                else {
                    p2.c = p5;
                }
                this.b(p2, true);
            }
            if (this.d++ > this.f) {
                this.b = a(this.b);
                this.f = this.b.length / 2 + this.b.length / 4;
            }
            ++this.e;
            return p5;
        }
        return p3;
    }
    
    private void a(final p p) {
        final p b = p.b;
        final p c = p.c;
        final p b2 = c.b;
        final p c2 = c.c;
        p.c = b2;
        if (b2 != null) {
            b2.a = p;
        }
        this.a(p, c);
        c.b = p;
        p.a = c;
        int i;
        if (b != null) {
            i = b.i;
        }
        else {
            i = 0;
        }
        int j;
        if (b2 != null) {
            j = b2.i;
        }
        else {
            j = 0;
        }
        p.i = 1 + Math.max(i, j);
        final int k = p.i;
        int l = 0;
        if (c2 != null) {
            l = c2.i;
        }
        c.i = 1 + Math.max(k, l);
    }
    
    private void a(final p p2, final p p3) {
        final p a = p2.a;
        p2.a = null;
        if (p3 != null) {
            p3.a = a;
        }
        if (a == null) {
            this.b[p2.g & -1 + this.b.length] = p3;
            return;
        }
        if (a.b == p2) {
            a.b = p3;
            return;
        }
        if (!com.millennialmedia.a.a.b.j.g && a.c != p2) {
            throw new AssertionError();
        }
        a.c = p3;
    }
    
    private static p[] a(final p[] array) {
        final int length = array.length;
        final p[] array2 = new p[length * 2];
        final l l = new l();
        final k k = new k();
        final k i = new k();
        for (int j = 0; j < length; ++j) {
            p a = array[j];
            if (a != null) {
                l.a(a);
                int n = 0;
                int n2 = 0;
                while (true) {
                    final p a2 = l.a();
                    if (a2 == null) {
                        break;
                    }
                    if ((length & a2.g) == 0x0) {
                        ++n2;
                    }
                    else {
                        ++n;
                    }
                }
                p a4;
                if (n2 > 0 && n > 0) {
                    k.a(n2);
                    i.a(n);
                    l.a(a);
                    while (true) {
                        final p a3 = l.a();
                        if (a3 == null) {
                            break;
                        }
                        if ((length & a3.g) == 0x0) {
                            k.a(a3);
                        }
                        else {
                            i.a(a3);
                        }
                    }
                    a = k.a();
                    a4 = i.a();
                }
                else if (n2 > 0) {
                    a4 = null;
                }
                else {
                    a4 = a;
                    a = null;
                }
                array2[j] = a;
                array2[j + length] = a4;
            }
        }
        return array2;
    }
    
    private p b(final Object o) {
        p a = null;
        if (o == null) {
            return a;
        }
        try {
            a = this.a(o, false);
            return a;
        }
        catch (ClassCastException ex) {
            return null;
        }
    }
    
    private void b(final p p) {
        final p b = p.b;
        final p c = p.c;
        final p b2 = b.b;
        final p c2 = b.c;
        p.b = c2;
        if (c2 != null) {
            c2.a = p;
        }
        this.a(p, b);
        b.c = p;
        p.a = b;
        int i;
        if (c != null) {
            i = c.i;
        }
        else {
            i = 0;
        }
        int j;
        if (c2 != null) {
            j = c2.i;
        }
        else {
            j = 0;
        }
        p.i = 1 + Math.max(i, j);
        final int k = p.i;
        int l = 0;
        if (b2 != null) {
            l = b2.i;
        }
        b.i = 1 + Math.max(k, l);
    }
    
    private void b(p a, final boolean b) {
        while (a != null) {
            final p b2 = a.b;
            final p c = a.c;
            int i;
            if (b2 != null) {
                i = b2.i;
            }
            else {
                i = 0;
            }
            int j;
            if (c != null) {
                j = c.i;
            }
            else {
                j = 0;
            }
            final int n = i - j;
            if (n == -2) {
                final p b3 = c.b;
                final p c2 = c.c;
                int k;
                if (c2 != null) {
                    k = c2.i;
                }
                else {
                    k = 0;
                }
                int l;
                if (b3 != null) {
                    l = b3.i;
                }
                else {
                    l = 0;
                }
                final int n2 = l - k;
                if (n2 == -1 || (n2 == 0 && !b)) {
                    this.a(a);
                }
                else {
                    if (!com.millennialmedia.a.a.b.j.g && n2 != 1) {
                        throw new AssertionError();
                    }
                    this.b(c);
                    this.a(a);
                }
                if (b) {
                    break;
                }
            }
            else if (n == 2) {
                final p b4 = b2.b;
                final p c3 = b2.c;
                int m;
                if (c3 != null) {
                    m = c3.i;
                }
                else {
                    m = 0;
                }
                int i2;
                if (b4 != null) {
                    i2 = b4.i;
                }
                else {
                    i2 = 0;
                }
                final int n3 = i2 - m;
                if (n3 == 1 || (n3 == 0 && !b)) {
                    this.b(a);
                }
                else {
                    if (!com.millennialmedia.a.a.b.j.g && n3 != -1) {
                        throw new AssertionError();
                    }
                    this.a(b2);
                    this.b(a);
                }
                if (b) {
                    break;
                }
            }
            else if (n == 0) {
                a.i = i + 1;
                if (b) {
                    return;
                }
            }
            else {
                if (!com.millennialmedia.a.a.b.j.g && n != -1 && n != 1) {
                    throw new AssertionError();
                }
                a.i = 1 + Math.max(i, j);
                if (!b) {
                    break;
                }
            }
            a = a.a;
        }
    }
    
    final p a(final Object o) {
        final p b = this.b(o);
        if (b != null) {
            this.a(b, true);
        }
        return b;
    }
    
    final p a(final Entry entry) {
        int n = 1;
        final p b = this.b(entry.getKey());
        while (true) {
            Label_0073: {
                if (b == null) {
                    break Label_0073;
                }
                final Object h = b.h;
                final V value = entry.getValue();
                int n2;
                if (h == value || (h != null && h.equals(value))) {
                    n2 = n;
                }
                else {
                    n2 = 0;
                }
                if (n2 == 0) {
                    break Label_0073;
                }
                if (n != 0) {
                    return b;
                }
                return null;
            }
            n = 0;
            continue;
        }
    }
    
    final void a(final p p2, final boolean b) {
        if (b) {
            p2.e.d = p2.d;
            p2.d.e = p2.e;
            p2.e = null;
            p2.d = null;
        }
        final p b2 = p2.b;
        final p c = p2.c;
        final p a = p2.a;
        if (b2 != null && c != null) {
            p p3;
            if (b2.i > c.i) {
                p3 = b2.b();
            }
            else {
                p3 = c.a();
            }
            this.a(p3, false);
            final p b3 = p2.b;
            int i;
            if (b3 != null) {
                i = b3.i;
                p3.b = b3;
                b3.a = p3;
                p2.b = null;
            }
            else {
                i = 0;
            }
            final p c2 = p2.c;
            int j = 0;
            if (c2 != null) {
                j = c2.i;
                p3.c = c2;
                c2.a = p3;
                p2.c = null;
            }
            p3.i = 1 + Math.max(i, j);
            this.a(p2, p3);
            return;
        }
        if (b2 != null) {
            this.a(p2, b2);
            p2.b = null;
        }
        else if (c != null) {
            this.a(p2, c);
            p2.c = null;
        }
        else {
            this.a(p2, null);
        }
        this.b(a, false);
        --this.d;
        ++this.e;
    }
    
    @Override
    public final void clear() {
        Arrays.fill(this.b, null);
        this.d = 0;
        ++this.e;
        final p c = this.c;
        p d2;
        for (p d = c.d; d != c; d = d2) {
            d2 = d.d;
            d.e = null;
            d.d = null;
        }
        c.e = c;
        c.d = c;
    }
    
    @Override
    public final boolean containsKey(final Object o) {
        return this.b(o) != null;
    }
    
    @Override
    public final Set entrySet() {
        final m i = this.i;
        if (i != null) {
            return i;
        }
        return this.i = new m(this);
    }
    
    @Override
    public final Object get(final Object o) {
        final p b = this.b(o);
        if (b != null) {
            return b.h;
        }
        return null;
    }
    
    @Override
    public final Set keySet() {
        final n j = this.j;
        if (j != null) {
            return j;
        }
        return this.j = new n(this);
    }
    
    @Override
    public final Object put(final Object o, final Object h) {
        if (o == null) {
            throw new NullPointerException("key == null");
        }
        final p a = this.a(o, true);
        final Object h2 = a.h;
        a.h = h;
        return h2;
    }
    
    @Override
    public final Object remove(final Object o) {
        final p a = this.a(o);
        if (a != null) {
            return a.h;
        }
        return null;
    }
    
    @Override
    public final int size() {
        return this.d;
    }
}
