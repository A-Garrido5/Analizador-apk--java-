// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.a.a.b.a;

import java.io.IOException;
import com.millennialmedia.a.a.h;
import com.millennialmedia.a.a.m;
import com.millennialmedia.a.a.l;
import java.util.ArrayList;
import com.millennialmedia.a.a.j;
import java.util.List;
import com.millennialmedia.a.a.o;
import java.io.Writer;
import com.millennialmedia.a.a.d.c;

public final class f extends c
{
    private static final Writer a;
    private static final o b;
    private final List c;
    private String d;
    private j e;
    
    static {
        a = new Writer() {
            @Override
            public final void close() {
                throw new AssertionError();
            }
            
            @Override
            public final void flush() {
                throw new AssertionError();
            }
            
            @Override
            public final void write(final char[] array, final int n, final int n2) {
                throw new AssertionError();
            }
        };
        b = new o("closed");
    }
    
    public f() {
        super(f.a);
        this.c = new ArrayList();
        this.e = l.a;
    }
    
    private void a(final j e) {
        if (this.d != null) {
            if (!e.j() || this.i()) {
                ((m)this.j()).a(this.d, e);
            }
            this.d = null;
            return;
        }
        if (this.c.isEmpty()) {
            this.e = e;
            return;
        }
        final j j = this.j();
        if (j instanceof h) {
            ((h)j).a(e);
            return;
        }
        throw new IllegalStateException();
    }
    
    private j j() {
        return this.c.get(-1 + this.c.size());
    }
    
    @Override
    public final c a(final long n) {
        this.a(new o(n));
        return this;
    }
    
    @Override
    public final c a(final Number n) {
        if (n == null) {
            return this.f();
        }
        if (!this.g()) {
            final double doubleValue = n.doubleValue();
            if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {
                throw new IllegalArgumentException("JSON forbids NaN and infinities: " + n);
            }
        }
        this.a(new o(n));
        return this;
    }
    
    @Override
    public final c a(final String d) {
        if (this.c.isEmpty() || this.d != null) {
            throw new IllegalStateException();
        }
        if (this.j() instanceof m) {
            this.d = d;
            return this;
        }
        throw new IllegalStateException();
    }
    
    @Override
    public final c a(final boolean b) {
        this.a(new o(Boolean.valueOf(b)));
        return this;
    }
    
    public final j a() {
        if (!this.c.isEmpty()) {
            throw new IllegalStateException("Expected one JSON element but was " + this.c);
        }
        return this.e;
    }
    
    @Override
    public final c b() {
        final h h = new h();
        this.a(h);
        this.c.add(h);
        return this;
    }
    
    @Override
    public final c b(final String s) {
        if (s == null) {
            return this.f();
        }
        this.a(new o(s));
        return this;
    }
    
    @Override
    public final c c() {
        if (this.c.isEmpty() || this.d != null) {
            throw new IllegalStateException();
        }
        if (this.j() instanceof h) {
            this.c.remove(-1 + this.c.size());
            return this;
        }
        throw new IllegalStateException();
    }
    
    @Override
    public final void close() {
        if (!this.c.isEmpty()) {
            throw new IOException("Incomplete document");
        }
        this.c.add(f.b);
    }
    
    @Override
    public final c d() {
        final m m = new m();
        this.a(m);
        this.c.add(m);
        return this;
    }
    
    @Override
    public final c e() {
        if (this.c.isEmpty() || this.d != null) {
            throw new IllegalStateException();
        }
        if (this.j() instanceof m) {
            this.c.remove(-1 + this.c.size());
            return this;
        }
        throw new IllegalStateException();
    }
    
    @Override
    public final c f() {
        this.a(l.a);
        return this;
    }
    
    @Override
    public final void flush() {
    }
}
