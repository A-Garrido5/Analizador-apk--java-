// 
// Decompiled by Procyon v0.5.30
// 

package com.millennialmedia.a.a;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;

public enum c implements d
{
    a {
        @Override
        public final String a(final Field field) {
            return field.getName();
        }
    }, 
    b {
        @Override
        public final String a(final Field field) {
            return c.a(field.getName());
        }
    }, 
    c {
        @Override
        public final String a(final Field field) {
            return c.a(c.a(field.getName(), " "));
        }
    }, 
    d {
        @Override
        public final String a(final Field field) {
            return c.a(field.getName(), "_").toLowerCase();
        }
    }, 
    e {
        @Override
        public final String a(final Field field) {
            return c.a(field.getName(), "-").toLowerCase();
        }
    };
    
    private c(final String s, final int n) {
    }
    
    static /* synthetic */ String a(String string) {
        int n = 0;
        final StringBuilder sb = new StringBuilder();
        char c;
        for (c = string.charAt(0); n < -1 + string.length() && !Character.isLetter(c); ++n, c = string.charAt(n)) {
            sb.append(c);
        }
        if (n == string.length()) {
            string = sb.toString();
        }
        else if (!Character.isUpperCase(c)) {
            final char upperCase = Character.toUpperCase(c);
            final int n2 = n + 1;
            String s;
            if (n2 < string.length()) {
                s = upperCase + string.substring(n2);
            }
            else {
                s = String.valueOf(upperCase);
            }
            return sb.append(s).toString();
        }
        return string;
    }
    
    static /* synthetic */ String a(final String s, final String s2) {
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); ++i) {
            final char char1 = s.charAt(i);
            if (Character.isUpperCase(char1) && sb.length() != 0) {
                sb.append(s2);
            }
            sb.append(char1);
        }
        return sb.toString();
    }
}
