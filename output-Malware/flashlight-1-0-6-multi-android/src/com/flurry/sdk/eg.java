// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.Collection;
import java.util.HashSet;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.Callable;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.HashMap;

public class eg
{
    private static final String a;
    private final ds b;
    private final HashMap c;
    private final HashMap d;
    private final ThreadPoolExecutor e;
    
    static {
        a = eg.class.getSimpleName();
    }
    
    public eg(final String s, final int n, final int n2, final long n3, final TimeUnit timeUnit, final BlockingQueue blockingQueue) {
        this.b = new ds();
        this.c = new HashMap();
        this.d = new HashMap();
        (this.e = new ThreadPoolExecutor(n, n2, n3, timeUnit, blockingQueue) {
            @Override
            protected void afterExecute(final Runnable runnable, final Throwable t) {
                super.afterExecute(runnable, t);
                final fg a = eg.this.a(runnable);
                if (a == null) {
                    return;
                }
                synchronized (eg.this.d) {
                    eg.this.d.remove(a);
                    // monitorexit(eg.a(this.a))
                    eg.this.b(a);
                    new ff() {
                        @Override
                        public void a() {
                            a.k();
                        }
                    }.run();
                }
            }
            
            @Override
            protected void beforeExecute(final Thread thread, final Runnable runnable) {
                super.beforeExecute(thread, runnable);
                final fg a = eg.this.a(runnable);
                if (a == null) {
                    return;
                }
                new ff() {
                    @Override
                    public void a() {
                        a.j();
                    }
                }.run();
            }
            
            @Override
            protected RunnableFuture newTaskFor(final Runnable runnable, final Object o) {
                final ef ef = new ef(runnable, o);
                synchronized (eg.this.d) {
                    eg.this.d.put(runnable, ef);
                    return ef;
                }
            }
            
            @Override
            protected RunnableFuture newTaskFor(final Callable callable) {
                throw new UnsupportedOperationException("Callable not supported");
            }
        }).setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy() {
            @Override
            public void rejectedExecution(final Runnable runnable, final ThreadPoolExecutor threadPoolExecutor) {
                super.rejectedExecution(runnable, threadPoolExecutor);
                final fg a = eg.this.a(runnable);
                if (a == null) {
                    return;
                }
                synchronized (eg.this.d) {
                    eg.this.d.remove(a);
                    // monitorexit(eg.a(this.a))
                    eg.this.b(a);
                    new ff() {
                        @Override
                        public void a() {
                            a.l();
                        }
                    }.run();
                }
            }
        });
        this.e.setThreadFactory(new ez(s, 1));
    }
    
    private fg a(final Runnable runnable) {
        if (runnable instanceof ef) {
            return (fg)((ef)runnable).a();
        }
        if (runnable instanceof fg) {
            return (fg)runnable;
        }
        eo.a(6, eg.a, "Unknown runnable class: " + runnable.getClass().getName());
        return null;
    }
    
    private void b(final fg fg) {
        synchronized (this) {
            this.c(this.c.get(fg), fg);
        }
    }
    
    private void b(final Object o, final fg fg) {
        synchronized (this) {
            this.b.a(o, fg);
            this.c.put(fg, o);
        }
    }
    
    private void c(final Object o, final fg fg) {
        synchronized (this) {
            this.b.b(o, fg);
            this.c.remove(fg);
        }
    }
    
    public void a(final fg p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: monitorenter   
        //     2: aload_1        
        //     3: ifnonnull       9
        //     6: aload_0        
        //     7: monitorexit    
        //     8: return         
        //     9: aload_0        
        //    10: getfield        com/flurry/sdk/eg.d:Ljava/util/HashMap;
        //    13: astore_3       
        //    14: aload_3        
        //    15: monitorenter   
        //    16: aload_0        
        //    17: getfield        com/flurry/sdk/eg.d:Ljava/util/HashMap;
        //    20: aload_1        
        //    21: invokevirtual   java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
        //    24: checkcast       Ljava/util/concurrent/Future;
        //    27: astore          5
        //    29: aload_3        
        //    30: monitorexit    
        //    31: aload_0        
        //    32: aload_1        
        //    33: invokespecial   com/flurry/sdk/eg.b:(Lcom/flurry/sdk/fg;)V
        //    36: aload           5
        //    38: ifnull          50
        //    41: aload           5
        //    43: iconst_1       
        //    44: invokeinterface java/util/concurrent/Future.cancel:(Z)Z
        //    49: pop            
        //    50: new             Lcom/flurry/sdk/eg$3;
        //    53: dup            
        //    54: aload_0        
        //    55: aload_1        
        //    56: invokespecial   com/flurry/sdk/eg$3.<init>:(Lcom/flurry/sdk/eg;Lcom/flurry/sdk/fg;)V
        //    59: invokevirtual   com/flurry/sdk/eg$3.run:()V
        //    62: goto            6
        //    65: astore_2       
        //    66: aload_0        
        //    67: monitorexit    
        //    68: aload_2        
        //    69: athrow         
        //    70: astore          4
        //    72: aload_3        
        //    73: monitorexit    
        //    74: aload           4
        //    76: athrow         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  9      16     65     70     Any
        //  16     31     70     77     Any
        //  31     36     65     70     Any
        //  41     50     65     70     Any
        //  50     62     65     70     Any
        //  72     77     65     70     Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0050:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public void a(final Object o) {
        // monitorenter(this)
        if (o != null) {
            try {
                final HashSet<fg> set = new HashSet<fg>();
                set.addAll((Collection<?>)this.b.a(o));
                final Iterator<Object> iterator = set.iterator();
                while (iterator.hasNext()) {
                    this.a(iterator.next());
                }
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    // monitorexit(this)
    
    public void a(final Object o, final fg fg) {
        // monitorenter(this)
        if (o != null && fg != null) {
            try {
                this.b(o, fg);
                this.e.submit(fg);
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    // monitorexit(this)
    
    public long b(final Object o) {
        // monitorenter(this)
        long n;
        if (o == null) {
            n = 0L;
        }
        else {
            try {
                n = this.b.a(o).size();
            }
            finally {
            }
            // monitorexit(this)
        }
        // monitorexit(this)
        return n;
    }
}
