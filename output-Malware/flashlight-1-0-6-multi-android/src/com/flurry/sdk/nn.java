// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$As;

public class nn extends nj
{
    protected final String a;
    
    public nn(final sh sh, final nh nh, final is is, final Class clazz, final String a) {
        super(sh, nh, is, clazz);
        this.a = a;
    }
    
    @Override
    public JsonTypeInfo$As a() {
        return JsonTypeInfo$As.PROPERTY;
    }
    
    @Override
    public Object a(hj a, final iz iz) {
        hm hm = a.e();
        if (hm == com.flurry.sdk.hm.b) {
            hm = a.b();
        }
        else {
            if (hm == com.flurry.sdk.hm.d) {
                return this.a(a, iz, null);
            }
            if (hm != com.flurry.sdk.hm.f) {
                return this.a(a, iz, null);
            }
        }
        hm b = hm;
        sq sq = null;
        while (b == com.flurry.sdk.hm.f) {
            final String g = a.g();
            a.b();
            if (this.a.equals(g)) {
                final jg a2 = this.a(iz, a.k());
                if (sq != null) {
                    a = so.a(sq.a(a), a);
                }
                a.b();
                return a2.a(a, iz);
            }
            if (sq == null) {
                sq = new sq(null);
            }
            sq.a(g);
            sq.c(a);
            b = a.b();
        }
        return this.a(a, iz, sq);
    }
    
    protected Object a(hj a, final iz iz, final sq sq) {
        Object o;
        if (this.e != null) {
            final jg a2 = this.a(iz);
            if (sq != null) {
                sq.e();
                a = sq.a(a);
                a.b();
            }
            o = a2.a(a, iz);
        }
        else {
            o = this.f(a, iz);
            if (o == null) {
                if (a.e() == hm.d) {
                    return super.d(a, iz);
                }
                throw iz.a(a, hm.f, "missing property '" + this.a + "' that is to contain type id  (for class " + this.c() + ")");
            }
        }
        return o;
    }
    
    @Override
    public String b() {
        return this.a;
    }
    
    @Override
    public Object d(final hj hj, final iz iz) {
        if (hj.e() == hm.d) {
            return super.b(hj, iz);
        }
        return this.a(hj, iz);
    }
    
    protected Object f(final hj hj, final iz iz) {
        switch (nn$1.a[hj.e().ordinal()]) {
            case 1: {
                if (this.c.p().isAssignableFrom(String.class)) {
                    return hj.k();
                }
                break;
            }
            case 2: {
                if (this.c.p().isAssignableFrom(Integer.class)) {
                    return hj.t();
                }
                break;
            }
            case 3: {
                if (this.c.p().isAssignableFrom(Double.class)) {
                    return hj.x();
                }
                break;
            }
            case 4: {
                if (this.c.p().isAssignableFrom(Boolean.class)) {
                    return Boolean.TRUE;
                }
                break;
            }
            case 5: {
                if (this.c.p().isAssignableFrom(Boolean.class)) {
                    return Boolean.FALSE;
                }
                break;
            }
        }
        return null;
    }
}
