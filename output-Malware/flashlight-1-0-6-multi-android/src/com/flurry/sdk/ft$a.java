// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.AbstractList;

public class ft$a extends AbstractList implements fr, Comparable
{
    private static final Object[] a;
    private final fn b;
    private int c;
    private Object[] d;
    
    static {
        a = new Object[0];
    }
    
    public ft$a(final int n, final fn b) {
        this.d = ft$a.a;
        if (b == null || !fn$v.c.equals(b.a())) {
            throw new fk("Not an array schema: " + b);
        }
        this.b = b;
        if (n != 0) {
            this.d = new Object[n];
        }
    }
    
    public int a(final fr fr) {
        return ft.a().a(this, fr, this.a());
    }
    
    @Override
    public fn a() {
        return this.b;
    }
    
    @Override
    public void add(final int n, final Object o) {
        if (n > this.c || n < 0) {
            throw new IndexOutOfBoundsException("Index " + n + " out of bounds.");
        }
        if (this.c == this.d.length) {
            final Object[] d = new Object[1 + 3 * this.c / 2];
            System.arraycopy(this.d, 0, d, 0, this.c);
            this.d = d;
        }
        System.arraycopy(this.d, n, this.d, n + 1, this.c - n);
        this.d[n] = o;
        ++this.c;
    }
    
    @Override
    public boolean add(final Object o) {
        if (this.c == this.d.length) {
            final Object[] d = new Object[1 + 3 * this.c / 2];
            System.arraycopy(this.d, 0, d, 0, this.c);
            this.d = d;
        }
        this.d[this.c++] = o;
        return true;
    }
    
    @Override
    public Object b() {
        if (this.c < this.d.length) {
            return this.d[this.c];
        }
        return null;
    }
    
    @Override
    public void clear() {
        this.c = 0;
    }
    
    @Override
    public Object get(final int n) {
        if (n >= this.c) {
            throw new IndexOutOfBoundsException("Index " + n + " out of bounds.");
        }
        return this.d[n];
    }
    
    @Override
    public Iterator iterator() {
        return new Iterator() {
            private int b = 0;
            
            @Override
            public boolean hasNext() {
                return this.b < ft$a.this.c;
            }
            
            @Override
            public Object next() {
                return ft$a.this.d[this.b++];
            }
            
            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }
    
    @Override
    public Object remove(final int n) {
        if (n >= this.c) {
            throw new IndexOutOfBoundsException("Index " + n + " out of bounds.");
        }
        final Object o = this.d[n];
        --this.c;
        System.arraycopy(this.d, n + 1, this.d, n, this.c - n);
        this.d[this.c] = null;
        return o;
    }
    
    @Override
    public Object set(final int n, final Object o) {
        if (n >= this.c) {
            throw new IndexOutOfBoundsException("Index " + n + " out of bounds.");
        }
        final Object o2 = this.d[n];
        this.d[n] = o;
        return o2;
    }
    
    @Override
    public int size() {
        return this.c;
    }
    
    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer();
        sb.append("[");
        int n = 0;
        for (final Object next : this) {
            String string;
            if (next == null) {
                string = "null";
            }
            else {
                string = next.toString();
            }
            sb.append(string);
            if (++n < this.size()) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }
}
