// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.text.DateFormat;

public class ku extends iz
{
    protected hj c;
    protected final jc d;
    protected final jf e;
    protected qw f;
    protected re g;
    protected DateFormat h;
    
    public ku(final iy iy, final hj c, final jc d, final jf e) {
        super(iy);
        this.c = c;
        this.d = d;
        this.e = e;
    }
    
    @Override
    public jh a(final hj hj, final hm hm, final String s) {
        return jh.a(hj, "Unexpected token (" + hj.e() + "), expected " + hm + ": " + s);
    }
    
    @Override
    public jh a(final sh sh, final String s) {
        return jh.a(this.c, "Could not resolve type id '" + s + "' into a subtype of " + sh);
    }
    
    @Override
    public jh a(final Class clazz, final hm hm) {
        return jh.a(this.c, "Can not deserialize instance of " + this.c(clazz) + " out of " + hm + " token");
    }
    
    @Override
    public jh a(final Class clazz, final String s) {
        return jh.a(this.c, "Can not construct instance of " + clazz.getName() + ", problem: " + s);
    }
    
    @Override
    public jh a(final Class clazz, final String s, final String s2) {
        return jh.a(this.c, "Can not construct Map key of type " + clazz.getName() + " from String \"" + this.c(s) + "\": " + s2);
    }
    
    @Override
    public jh a(final Class clazz, final Throwable t) {
        return jh.a(this.c, "Can not construct instance of " + clazz.getName() + ", problem: " + t.getMessage(), t);
    }
    
    @Override
    public jh a(final Object o, final String s) {
        return mk.a(this.c, o, s);
    }
    
    @Override
    public Object a(final Object o, final is is, final Object o2) {
        if (this.e == null) {
            throw new IllegalStateException("No 'injectableValues' configured, can not inject value with id [" + o + "]");
        }
        return this.e.a(o, this, is, o2);
    }
    
    @Override
    public Calendar a(final Date time) {
        final Calendar instance = Calendar.getInstance();
        instance.setTime(time);
        return instance;
    }
    
    @Override
    public Date a(final String s) {
        try {
            return this.i().parse(s);
        }
        catch (ParseException ex) {
            throw new IllegalArgumentException(ex.getMessage());
        }
    }
    
    @Override
    public final void a(final re g) {
        if (this.g == null || g.b() >= this.g.b()) {
            this.g = g;
        }
    }
    
    @Override
    public boolean a(final hj c, final jg jg, final Object o, final String s) {
        final rd f = this.a.f();
        if (f == null) {
            return false;
        }
        final hj c2 = this.c;
        this.c = c;
        rd a = f;
        while (true) {
            if (a == null) {
                return false;
            }
            try {
                if (((ja)a.b()).a(this, jg, o, s)) {
                    return true;
                }
                a = a.a();
                continue;
            }
            finally {
                this.c = c2;
            }
            break;
        }
    }
    
    @Override
    public jc b() {
        return this.d;
    }
    
    @Override
    public jh b(final Class clazz) {
        return this.a(clazz, this.c.e());
    }
    
    @Override
    public jh b(final Class clazz, final String s) {
        return jh.a(this.c, "Can not construct instance of " + clazz.getName() + " from String value '" + this.j() + "': " + s);
    }
    
    @Override
    public jh c(final Class clazz, final String s) {
        return jh.a(this.c, "Can not construct instance of " + clazz.getName() + " from number value (" + this.j() + "): " + s);
    }
    
    protected String c(final Class clazz) {
        if (clazz.isArray()) {
            return this.c(clazz.getComponentType()) + "[]";
        }
        return clazz.getName();
    }
    
    protected String c(String string) {
        if (string.length() > 500) {
            string = string.substring(0, 500) + "]...[" + string.substring(-500 + string.length());
        }
        return string;
    }
    
    @Override
    public hj d() {
        return this.c;
    }
    
    @Override
    public final re g() {
        final re g = this.g;
        if (g == null) {
            return new re();
        }
        this.g = null;
        return g;
    }
    
    @Override
    public final qw h() {
        if (this.f == null) {
            this.f = new qw();
        }
        return this.f;
    }
    
    protected DateFormat i() {
        if (this.h == null) {
            this.h = (DateFormat)this.a.n().clone();
        }
        return this.h;
    }
    
    protected String j() {
        try {
            return this.c(this.c.k());
        }
        catch (Exception ex) {
            return "[N/A]";
        }
    }
}
