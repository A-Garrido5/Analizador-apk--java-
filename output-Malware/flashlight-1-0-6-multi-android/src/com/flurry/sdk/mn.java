// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Map;
import java.util.Iterator;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Method;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import java.lang.reflect.Field;
import java.util.Collections;
import java.util.List;

public final class mn extends mm
{
    private static final mv[] l;
    protected final Class a;
    protected final List b;
    protected final iq c;
    protected final iu$a d;
    protected final Class e;
    protected mv f;
    protected mo g;
    protected List h;
    protected List i;
    protected ms j;
    protected List k;
    
    static {
        l = new mv[0];
    }
    
    private mn(final Class a, final List b, final iq c, final iu$a d, final mv f) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        Class a2;
        if (this.d == null) {
            a2 = null;
        }
        else {
            a2 = this.d.a(this.a);
        }
        this.e = a2;
        this.f = f;
    }
    
    public static mn a(final Class clazz, final iq iq, final iu$a iu$a) {
        final mn mn = new mn(clazz, qy.a(clazz, null), iq, iu$a, null);
        mn.m();
        return mn;
    }
    
    private mv[] a(final int n) {
        mv[] l;
        if (n == 0) {
            l = mn.l;
        }
        else {
            l = new mv[n];
            for (int i = 0; i < n; ++i) {
                l[i] = this.o();
            }
        }
        return l;
    }
    
    public static mn b(final Class clazz, final iq iq, final iu$a iu$a) {
        final mn mn = new mn(clazz, Collections.emptyList(), iq, iu$a, null);
        mn.m();
        return mn;
    }
    
    private boolean b(final Field field) {
        if (!field.isSynthetic()) {
            final int modifiers = field.getModifiers();
            if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)) {
                return true;
            }
        }
        return false;
    }
    
    private mv o() {
        return new mv();
    }
    
    protected final mo a(final Constructor constructor, final boolean b) {
        if (this.c == null) {
            return new mo(constructor, this.o(), this.a(constructor.getParameterTypes().length));
        }
        if (b) {
            return new mo(constructor, this.a(constructor.getDeclaredAnnotations()), null);
        }
        final Annotation[][] parameterAnnotations = constructor.getParameterAnnotations();
        final int length = constructor.getParameterTypes().length;
        mv[] array2;
        if (length != parameterAnnotations.length) {
            final Class declaringClass = constructor.getDeclaringClass();
            Annotation[][] array;
            if (declaringClass.isEnum() && length == 2 + parameterAnnotations.length) {
                array = new Annotation[2 + parameterAnnotations.length][];
                System.arraycopy(parameterAnnotations, 0, array, 2, parameterAnnotations.length);
                array2 = this.a(array);
            }
            else if (declaringClass.isMemberClass() && length == 1 + parameterAnnotations.length) {
                array = new Annotation[1 + parameterAnnotations.length][];
                System.arraycopy(parameterAnnotations, 0, array, 1, parameterAnnotations.length);
                array2 = this.a(array);
            }
            else {
                array = parameterAnnotations;
                array2 = null;
            }
            if (array2 == null) {
                throw new IllegalStateException("Internal error: constructor for " + constructor.getDeclaringClass().getName() + " has mismatch: " + length + " parameters; " + array.length + " sets of annotations");
            }
        }
        else {
            array2 = this.a(parameterAnnotations);
        }
        return new mo(constructor, this.a(constructor.getDeclaredAnnotations()), array2);
    }
    
    protected final mp a(final Field field) {
        if (this.c == null) {
            return new mp(field, this.o());
        }
        return new mp(field, this.a(field.getDeclaredAnnotations()));
    }
    
    public final mr a(final String s, final Class[] array) {
        return this.j.a(s, array);
    }
    
    protected final mr a(final Method method) {
        if (this.c == null) {
            return new mr(method, this.o(), null);
        }
        return new mr(method, this.a(method.getDeclaredAnnotations()), null);
    }
    
    protected final mv a(final Annotation[] array) {
        final mv mv = new mv();
        if (array != null) {
            for (final Annotation annotation : array) {
                if (this.c.a(annotation)) {
                    mv.b(annotation);
                }
            }
        }
        return mv;
    }
    
    @Override
    public final Annotation a(final Class clazz) {
        if (this.f == null) {
            return null;
        }
        return this.f.a(clazz);
    }
    
    protected final void a(final mv mv, final Class clazz) {
        if (this.d != null) {
            this.a(mv, clazz, this.d.a(clazz));
        }
    }
    
    protected final void a(final mv mv, final Class clazz, final Class clazz2) {
        if (clazz2 != null) {
            for (final Annotation annotation : clazz2.getDeclaredAnnotations()) {
                if (this.c.a(annotation)) {
                    mv.a(annotation);
                }
            }
            final Iterator<Class> iterator = (Iterator<Class>)qy.a(clazz2, clazz).iterator();
            while (iterator.hasNext()) {
                for (final Annotation annotation2 : iterator.next().getDeclaredAnnotations()) {
                    if (this.c.a(annotation2)) {
                        mv.a(annotation2);
                    }
                }
            }
        }
    }
    
    public final void a(final na na) {
        this.j = new ms();
        final ms ms = new ms();
        this.a(this.a, na, this.j, this.e, ms);
        for (final Class clazz : this.b) {
            Class a;
            if (this.d == null) {
                a = null;
            }
            else {
                a = this.d.a(clazz);
            }
            this.a(clazz, na, this.j, a, ms);
        }
        if (this.d != null) {
            final Class a2 = this.d.a(Object.class);
            if (a2 != null) {
                this.a(na, this.j, a2, ms);
            }
        }
        if (this.c != null && !ms.a()) {
            for (final mr mr : ms) {
                try {
                    final Method declaredMethod = Object.class.getDeclaredMethod(mr.b(), (Class<?>[])mr.m());
                    if (declaredMethod == null) {
                        continue;
                    }
                    final mr a3 = this.a(declaredMethod);
                    this.a(mr.e(), a3, false);
                    this.j.a(a3);
                }
                catch (Exception ex) {}
            }
        }
    }
    
    protected final void a(final na na, final ms ms, final Class clazz, final ms ms2) {
        for (final Method method : clazz.getDeclaredMethods()) {
            if (this.a(method, na)) {
                final mr b = ms.b(method);
                if (b != null) {
                    this.a(method, b);
                }
                else {
                    ms2.a(this.a(method));
                }
            }
        }
    }
    
    protected final void a(final Class clazz, final na na, final ms ms, final Class clazz2, final ms ms2) {
        if (clazz2 != null) {
            this.a(na, ms, clazz2, ms2);
        }
        if (clazz != null) {
            for (final Method method : clazz.getDeclaredMethods()) {
                if (this.a(method, na)) {
                    final mr b = ms.b(method);
                    if (b == null) {
                        final mr a = this.a(method);
                        ms.a(a);
                        final mr a2 = ms2.a(method);
                        if (a2 != null) {
                            this.a(a2.e(), a, false);
                        }
                    }
                    else {
                        this.a(method, b);
                        if (b.h().isInterface() && !method.getDeclaringClass().isInterface()) {
                            ms.a(b.a(method));
                        }
                    }
                }
            }
        }
    }
    
    protected final void a(final Class clazz, final Map map) {
        for (final Field field : clazz.getDeclaredFields()) {
            if (this.b(field)) {
                final mp mp = map.get(field.getName());
                if (mp != null) {
                    for (final Annotation annotation : field.getDeclaredAnnotations()) {
                        if (this.c.a(annotation)) {
                            mp.a(annotation);
                        }
                    }
                }
            }
        }
    }
    
    protected final void a(final Constructor constructor, final mo mo, final boolean b) {
        for (final Annotation annotation : constructor.getDeclaredAnnotations()) {
            if (this.c.a(annotation)) {
                mo.a(annotation);
            }
        }
        if (b) {
            final Annotation[][] parameterAnnotations = constructor.getParameterAnnotations();
            for (int length2 = parameterAnnotations.length, j = 0; j < length2; ++j) {
                final Annotation[] array = parameterAnnotations[j];
                for (int length3 = array.length, k = 0; k < length3; ++k) {
                    mo.a(j, array[k]);
                }
            }
        }
    }
    
    protected final void a(final Method method, final mr mr) {
        for (final Annotation annotation : method.getDeclaredAnnotations()) {
            if (this.c.a(annotation)) {
                mr.b(annotation);
            }
        }
    }
    
    protected final void a(final Method method, final mr mr, final boolean b) {
        for (final Annotation annotation : method.getDeclaredAnnotations()) {
            if (this.c.a(annotation)) {
                mr.a(annotation);
            }
        }
        if (b) {
            final Annotation[][] parameterAnnotations = method.getParameterAnnotations();
            for (int length2 = parameterAnnotations.length, j = 0; j < length2; ++j) {
                final Annotation[] array = parameterAnnotations[j];
                for (int length3 = array.length, k = 0; k < length3; ++k) {
                    mr.a(j, array[k]);
                }
            }
        }
    }
    
    protected final void a(final Map map, final Class clazz) {
        final Class superclass = clazz.getSuperclass();
        if (superclass != null) {
            this.a(map, superclass);
            for (final Field field : clazz.getDeclaredFields()) {
                if (this.b(field)) {
                    map.put(field.getName(), this.a(field));
                }
            }
            if (this.d != null) {
                final Class a = this.d.a(clazz);
                if (a != null) {
                    this.a(a, map);
                }
            }
        }
    }
    
    public final void a(final boolean b) {
        this.h = null;
        for (final Constructor constructor : this.a.getDeclaredConstructors()) {
            if (constructor.getParameterTypes().length == 0) {
                this.g = this.a(constructor, true);
            }
            else if (b) {
                if (this.h == null) {
                    final Constructor[] declaredConstructors;
                    this.h = new ArrayList(Math.max(10, declaredConstructors.length));
                }
                this.h.add(this.a(constructor, false));
            }
        }
        if (this.e != null && (this.g != null || this.h != null)) {
            this.c(this.e);
        }
        if (this.c != null) {
            if (this.g != null && this.c.a(this.g)) {
                this.g = null;
            }
            if (this.h != null) {
                int size = this.h.size();
                while (true) {
                    final int n = size - 1;
                    if (n < 0) {
                        break;
                    }
                    if (this.c.a((mo)this.h.get(n))) {
                        this.h.remove(n);
                        size = n;
                    }
                    else {
                        size = n;
                    }
                }
            }
        }
        this.i = null;
        if (b) {
            for (final Method method : this.a.getDeclaredMethods()) {
                if (Modifier.isStatic(method.getModifiers()) && method.getParameterTypes().length > 0) {
                    if (this.i == null) {
                        this.i = new ArrayList(8);
                    }
                    this.i.add(this.b(method));
                }
            }
            if (this.e != null && this.i != null) {
                this.d(this.e);
            }
            if (this.c != null && this.i != null) {
                int size2 = this.i.size();
                while (true) {
                    final int n2 = size2 - 1;
                    if (n2 < 0) {
                        break;
                    }
                    if (this.c.a((mr)this.i.get(n2))) {
                        this.i.remove(n2);
                        size2 = n2;
                    }
                    else {
                        size2 = n2;
                    }
                }
            }
        }
    }
    
    protected final boolean a(final Method method, final na na) {
        return (na == null || na.a(method)) && !method.isSynthetic() && !method.isBridge();
    }
    
    protected final mv[] a(final Annotation[][] array) {
        final int length = array.length;
        final mv[] array2 = new mv[length];
        for (int i = 0; i < length; ++i) {
            array2[i] = this.a(array[i]);
        }
        return array2;
    }
    
    protected final mr b(final Method method) {
        if (this.c == null) {
            return new mr(method, this.o(), this.a(method.getParameterTypes().length));
        }
        return new mr(method, this.a(method.getDeclaredAnnotations()), this.a(method.getParameterAnnotations()));
    }
    
    @Override
    public final String b() {
        return this.a.getName();
    }
    
    @Override
    public final Type c() {
        return this.a;
    }
    
    protected final void c(final Class clazz) {
        int size;
        if (this.h == null) {
            size = 0;
        }
        else {
            size = this.h.size();
        }
        final Constructor[] declaredConstructors = clazz.getDeclaredConstructors();
        final int length = declaredConstructors.length;
        int i = 0;
        mz[] array = null;
        while (i < length) {
            final Constructor constructor = declaredConstructors[i];
            Label_0064: {
                if (constructor.getParameterTypes().length == 0) {
                    if (this.g != null) {
                        this.a(constructor, this.g, false);
                    }
                }
                else {
                    mz[] array2;
                    if (array == null) {
                        array2 = new mz[size];
                        for (int j = 0; j < size; ++j) {
                            array2[j] = new mz(((mo)this.h.get(j)).e());
                        }
                    }
                    else {
                        array2 = array;
                    }
                    final mz mz = new mz(constructor);
                    for (int k = 0; k < size; ++k) {
                        if (mz.equals(array2[k])) {
                            this.a(constructor, (mo)this.h.get(k), true);
                            array = array2;
                            break Label_0064;
                        }
                    }
                    array = array2;
                }
            }
            ++i;
        }
    }
    
    @Override
    public final Class d() {
        return this.a;
    }
    
    protected final void d(final Class clazz) {
        mz[] array = null;
        final int size = this.i.size();
        final Method[] declaredMethods = clazz.getDeclaredMethods();
        mz[] array2;
        for (int length = declaredMethods.length, i = 0; i < length; ++i, array = array2) {
            final Method method = declaredMethods[i];
            if (Modifier.isStatic(method.getModifiers()) && method.getParameterTypes().length != 0) {
                if (array == null) {
                    array2 = new mz[size];
                    for (int j = 0; j < size; ++j) {
                        array2[j] = new mz(((mr)this.i.get(j)).e());
                    }
                }
                else {
                    array2 = array;
                }
                final mz mz = new mz(method);
                for (int k = 0; k < size; ++k) {
                    if (mz.equals(array2[k])) {
                        this.a(method, (mr)this.i.get(k), true);
                        break;
                    }
                }
            }
            else {
                array2 = array;
            }
        }
    }
    
    public final Class e() {
        return this.a;
    }
    
    public final qv f() {
        return this.f;
    }
    
    public final boolean g() {
        return this.f.a() > 0;
    }
    
    public final mo h() {
        return this.g;
    }
    
    public final List i() {
        if (this.h == null) {
            return Collections.emptyList();
        }
        return this.h;
    }
    
    public final List j() {
        if (this.i == null) {
            return Collections.emptyList();
        }
        return this.i;
    }
    
    public final Iterable k() {
        return this.j;
    }
    
    public final Iterable l() {
        if (this.k == null) {
            return Collections.emptyList();
        }
        return this.k;
    }
    
    public final void m() {
        this.f = new mv();
        if (this.c == null) {
            return;
        }
        if (this.e != null) {
            this.a(this.f, this.a, this.e);
        }
        for (final Annotation annotation : this.a.getDeclaredAnnotations()) {
            if (this.c.a(annotation)) {
                this.f.a(annotation);
            }
        }
        for (final Class clazz : this.b) {
            this.a(this.f, clazz);
            for (final Annotation annotation2 : clazz.getDeclaredAnnotations()) {
                if (this.c.a(annotation2)) {
                    this.f.a(annotation2);
                }
            }
        }
        this.a(this.f, Object.class);
    }
    
    public final void n() {
        final LinkedHashMap<Object, Object> linkedHashMap = new LinkedHashMap<Object, Object>();
        this.a(linkedHashMap, this.a);
        if (linkedHashMap.isEmpty()) {
            this.k = Collections.emptyList();
            return;
        }
        (this.k = new ArrayList(linkedHashMap.size())).addAll(linkedHashMap.values());
    }
    
    @Override
    public final String toString() {
        return "[AnnotedClass " + this.a.getName() + "]";
    }
}
