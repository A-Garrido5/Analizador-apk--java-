// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.UnsupportedEncodingException;

public class gy implements CharSequence, Comparable
{
    private static final byte[] a;
    private byte[] b;
    private int c;
    private String d;
    
    static {
        a = new byte[0];
    }
    
    public gy() {
        this.b = gy.a;
    }
    
    public gy(final gy gy) {
        this.b = gy.a;
        this.c = gy.c;
        this.b = new byte[gy.c];
        System.arraycopy(gy.b, 0, this.b, 0, this.c);
        this.d = gy.d;
    }
    
    public gy(final String d) {
        this.b = gy.a;
        this.b = a(d);
        this.c = this.b.length;
        this.d = d;
    }
    
    public static final byte[] a(final String s) {
        try {
            return s.getBytes("UTF-8");
        }
        catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
            return new byte[0];
        }
    }
    
    public int a(final gy gy) {
        return ga.a(this.b, 0, this.c, gy.b, 0, gy.c);
    }
    
    public gy a(final int c) {
        if (this.c < c) {
            final byte[] b = new byte[c];
            System.arraycopy(this.b, 0, b, 0, this.c);
            this.b = b;
        }
        this.c = c;
        this.d = null;
        return this;
    }
    
    public byte[] a() {
        return this.b;
    }
    
    public int b() {
        return this.c;
    }
    
    @Override
    public char charAt(final int n) {
        return this.toString().charAt(n);
    }
    
    @Override
    public boolean equals(final Object o) {
        boolean b;
        if (o == this) {
            b = true;
        }
        else {
            final boolean b2 = o instanceof gy;
            b = false;
            if (b2) {
                final gy gy = (gy)o;
                final int c = this.c;
                final int c2 = gy.c;
                b = false;
                if (c == c2) {
                    final byte[] b3 = gy.b;
                    for (int i = 0; i < this.c; ++i) {
                        final byte b4 = this.b[i];
                        final byte b5 = b3[i];
                        b = false;
                        if (b4 != b5) {
                            return b;
                        }
                    }
                    return true;
                }
            }
        }
        return b;
    }
    
    @Override
    public int hashCode() {
        int i = 0;
        int n = 0;
        while (i < this.c) {
            n = n * 31 + this.b[i];
            ++i;
        }
        return n;
    }
    
    @Override
    public int length() {
        return this.toString().length();
    }
    
    @Override
    public CharSequence subSequence(final int n, final int n2) {
        return this.toString().subSequence(n, n2);
    }
    
    @Override
    public String toString() {
        Label_0029: {
            if (this.d != null) {
                break Label_0029;
            }
            try {
                this.d = new String(this.b, 0, this.c, "UTF-8");
                return this.d;
            }
            catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
                return this.d;
            }
        }
    }
}
