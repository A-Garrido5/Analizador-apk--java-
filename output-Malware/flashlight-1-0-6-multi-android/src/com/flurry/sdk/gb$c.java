// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.EOFException;
import java.nio.ByteBuffer;
import java.io.IOException;
import java.io.InputStream;

abstract class gb$c extends InputStream
{
    protected gb$a a;
    
    protected void a() {
        this.a.a();
    }
    
    protected void a(final int n, final gb gb) {
        gb.b = new byte[n];
        gb.d = 0;
        gb.c = 0;
        gb.e = 0;
        this.a = new gb$a(gb, null);
    }
    
    protected abstract void a(final long p0);
    
    protected abstract void a(final byte[] p0, final int p1, final int p2);
    
    protected void a(final byte[] array, final int n, final int n2, final int n3) {
        System.arraycopy(array, n, array, n2, n3);
        this.a.a(n2);
        this.a.b(n3 + this.b(array, n2 + n3, array.length - n3));
    }
    
    @Override
    public int available() {
        return this.a.c() - this.a.b();
    }
    
    protected abstract int b(final byte[] p0, final int p1, final int p2);
    
    protected abstract long b(final long p0);
    
    @Override
    public int read(final byte[] array, final int n, int n2) {
        final int c = this.a.c();
        final int b = this.a.b();
        final byte[] d = this.a.d();
        final int n3 = c - b;
        if (n3 >= n2) {
            System.arraycopy(d, b, array, n, n2);
            this.a.a(b + n2);
        }
        else {
            System.arraycopy(d, b, array, n, n3);
            this.a.a(b + n3);
            n2 = n3 + this.b(array, n + n3, n2 - n3);
            if (n2 == 0) {
                return -1;
            }
        }
        return n2;
    }
    
    @Override
    public long skip(final long n) {
        final int c = this.a.c();
        final int b = this.a.b();
        final int n2 = c - b;
        if (n2 > n) {
            this.a.a((int)(n + b));
            return n;
        }
        this.a.a(c);
        return this.b(n - n2) + n2;
    }
}
