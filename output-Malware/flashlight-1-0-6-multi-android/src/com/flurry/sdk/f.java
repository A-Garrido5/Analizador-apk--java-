// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import android.view.MotionEvent;
import android.view.KeyEvent;
import android.content.DialogInterface;
import android.app.Activity;
import java.io.IOException;
import android.content.Intent;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import android.widget.FrameLayout;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;
import com.flurry.android.impl.ads.avro.protocol.v10.AdFrame;
import com.flurry.android.impl.ads.FlurryAdModule;
import android.content.Context;
import java.util.concurrent.atomic.AtomicBoolean;
import android.app.ProgressDialog;
import com.flurry.android.FlurryFullscreenTakeoverActivity;
import android.view.ViewGroup;
import android.media.MediaPlayer;
import android.view.SurfaceHolder;
import android.net.Uri;
import android.view.SurfaceHolder$Callback;
import android.media.MediaPlayer$OnPreparedListener;
import android.media.MediaPlayer$OnVideoSizeChangedListener;
import android.media.MediaPlayer$OnBufferingUpdateListener;
import android.media.MediaPlayer$OnErrorListener;
import android.media.MediaPlayer$OnCompletionListener;
import android.content.DialogInterface$OnKeyListener;
import android.view.SurfaceView;

public class f extends SurfaceView implements DialogInterface$OnKeyListener, af
{
    private static final String A;
    private MediaPlayer$OnCompletionListener B;
    private MediaPlayer$OnErrorListener C;
    private MediaPlayer$OnBufferingUpdateListener D;
    MediaPlayer$OnVideoSizeChangedListener a;
    MediaPlayer$OnPreparedListener b;
    SurfaceHolder$Callback c;
    private Uri d;
    private int e;
    private int f;
    private int g;
    private SurfaceHolder h;
    private MediaPlayer i;
    private int j;
    private int k;
    private int l;
    private int m;
    private z n;
    private MediaPlayer$OnCompletionListener o;
    private MediaPlayer$OnPreparedListener p;
    private int q;
    private MediaPlayer$OnErrorListener r;
    private int s;
    private boolean t;
    private int u;
    private ViewGroup v;
    private g w;
    private FlurryFullscreenTakeoverActivity x;
    private ProgressDialog y;
    private AtomicBoolean z;
    
    static {
        A = f.class.getSimpleName();
    }
    
    public f(final Context context, final g g, final FlurryFullscreenTakeoverActivity flurryFullscreenTakeoverActivity, final z z) {
        super(context);
        this.f = 0;
        this.g = 0;
        this.h = null;
        this.i = null;
        this.z = new AtomicBoolean(false);
        this.a = (MediaPlayer$OnVideoSizeChangedListener)new MediaPlayer$OnVideoSizeChangedListener() {
            public void onVideoSizeChanged(final MediaPlayer mediaPlayer, final int n, final int n2) {
                com.flurry.sdk.f.this.j = mediaPlayer.getVideoWidth();
                com.flurry.sdk.f.this.k = mediaPlayer.getVideoHeight();
                if (com.flurry.sdk.f.this.j != 0 && com.flurry.sdk.f.this.k != 0) {
                    com.flurry.sdk.f.this.getHolder().setFixedSize(com.flurry.sdk.f.this.j, com.flurry.sdk.f.this.k);
                }
            }
        };
        this.b = (MediaPlayer$OnPreparedListener)new MediaPlayer$OnPreparedListener() {
            public void onPrepared(final MediaPlayer mediaPlayer) {
                com.flurry.sdk.f.this.f = 2;
                com.flurry.sdk.f.this.t = true;
                if (com.flurry.sdk.f.this.p != null) {
                    com.flurry.sdk.f.this.p.onPrepared(com.flurry.sdk.f.this.i);
                }
                if (com.flurry.sdk.f.this.n != null) {
                    com.flurry.sdk.f.this.n.setEnabled(true);
                }
                com.flurry.sdk.f.this.j = mediaPlayer.getVideoWidth();
                com.flurry.sdk.f.this.k = mediaPlayer.getVideoHeight();
                final int f = com.flurry.sdk.f.this.s;
                if (f != 0) {
                    com.flurry.sdk.f.this.seekTo(f);
                }
                if (!com.flurry.sdk.f.this.n.getAutoPlay() && com.flurry.sdk.f.this.getCurrentPosition() <= com.flurry.sdk.f.this.n.getOffsetStartTime()) {
                    com.flurry.sdk.f.this.seekTo(3);
                    com.flurry.sdk.f.this.n.setOffsetStartTime(3);
                }
                com.flurry.sdk.f.this.b();
                if (com.flurry.sdk.f.this.w != null) {
                    final am c = FlurryAdModule.getInstance().c(com.flurry.sdk.f.this.w.getAdUnit().d().get(com.flurry.sdk.f.this.w.getAdFrameIndex()).g().toString());
                    if (!c.g()) {
                        com.flurry.sdk.f.this.w.a("rendered", Collections.emptyMap(), com.flurry.sdk.f.this.w.getAdUnit(), com.flurry.sdk.f.this.w.getAdLog(), com.flurry.sdk.f.this.w.getAdFrameIndex(), 0);
                        c.f(true);
                    }
                }
                if (com.flurry.sdk.f.this.n != null) {
                    com.flurry.sdk.f.this.n.a();
                }
                if (com.flurry.sdk.f.this.w == null || !com.flurry.sdk.f.this.w.d()) {
                    com.flurry.sdk.f.this.j();
                }
            }
        };
        this.B = (MediaPlayer$OnCompletionListener)new MediaPlayer$OnCompletionListener() {
            public void onCompletion(final MediaPlayer mediaPlayer) {
                com.flurry.sdk.f.this.n.d();
                com.flurry.sdk.f.this.f = 5;
                com.flurry.sdk.f.this.g = 5;
                if (com.flurry.sdk.f.this.n != null) {
                    com.flurry.sdk.f.this.n.h();
                }
                if (com.flurry.sdk.f.this.o != null) {
                    com.flurry.sdk.f.this.o.onCompletion(com.flurry.sdk.f.this.i);
                }
                if (com.flurry.sdk.f.this.w != null) {
                    com.flurry.sdk.f.this.w.a("videoCompleted", Collections.emptyMap(), com.flurry.sdk.f.this.w.getAdUnit(), com.flurry.sdk.f.this.w.getAdLog(), com.flurry.sdk.f.this.w.getAdFrameIndex(), 0);
                }
            }
        };
        this.C = (MediaPlayer$OnErrorListener)new MediaPlayer$OnErrorListener() {
            public boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
                eo.a(6, com.flurry.sdk.f.A, "Video Playback Error: " + n + "," + n2);
                com.flurry.sdk.f.this.f = -1;
                com.flurry.sdk.f.this.g = -1;
                com.flurry.sdk.f.this.b();
                if (com.flurry.sdk.f.this.n != null) {
                    com.flurry.sdk.f.this.n.h();
                    com.flurry.sdk.f.this.n.d();
                }
                if (com.flurry.sdk.f.this.r == null || !com.flurry.sdk.f.this.r.onError(com.flurry.sdk.f.this.i, n, n2)) {
                    if (com.flurry.sdk.f.this.getWindowToken() != null) {
                        com.flurry.sdk.f.this.getContext().getResources();
                        String s;
                        if (n == 200) {
                            s = "Sorry, this video is not valid for streaming to this device.";
                        }
                        else {
                            s = "Sorry, this video cannot be played.";
                        }
                        eo.a(3, com.flurry.sdk.f.A, s);
                    }
                    com.flurry.sdk.f.this.b();
                    if (com.flurry.sdk.f.this.w != null) {
                        final HashMap<String, String> hashMap = new HashMap<String, String>();
                        hashMap.put("errorCode", Integer.toString(com.flurry.sdk.b.r.a()));
                        hashMap.put("frameworkError", Integer.toString(n));
                        hashMap.put("implError", Integer.toString(n2));
                        com.flurry.sdk.f.this.w.a("renderFailed", hashMap, com.flurry.sdk.f.this.w.getAdUnit(), com.flurry.sdk.f.this.w.getAdLog(), com.flurry.sdk.f.this.w.getAdFrameIndex(), 0);
                    }
                    if (com.flurry.sdk.f.this.x != null) {
                        com.flurry.sdk.f.this.x.terminateVideoPlaybackDueToError();
                        return true;
                    }
                }
                return true;
            }
        };
        this.D = (MediaPlayer$OnBufferingUpdateListener)new MediaPlayer$OnBufferingUpdateListener() {
            public void onBufferingUpdate(final MediaPlayer mediaPlayer, final int n) {
                com.flurry.sdk.f.this.q = n;
            }
        };
        this.c = (SurfaceHolder$Callback)new SurfaceHolder$Callback() {
            public void surfaceChanged(final SurfaceHolder surfaceHolder, final int n, final int n2, final int n3) {
                int n4 = 1;
                com.flurry.sdk.f.this.l = n2;
                com.flurry.sdk.f.this.m = n3;
                int n5;
                if (com.flurry.sdk.f.this.g == 3) {
                    n5 = n4;
                }
                else {
                    n5 = 0;
                }
                if (com.flurry.sdk.f.this.j != n2 || com.flurry.sdk.f.this.k != n3) {
                    n4 = 0;
                }
                if (com.flurry.sdk.f.this.i != null && n5 != 0 && n4 != 0) {
                    if (com.flurry.sdk.f.this.s != 0) {
                        com.flurry.sdk.f.this.seekTo(com.flurry.sdk.f.this.s);
                    }
                    if (com.flurry.sdk.f.this.w != null && !com.flurry.sdk.f.this.w.d()) {
                        com.flurry.sdk.f.this.start();
                    }
                    else if (com.flurry.sdk.f.this.w == null) {
                        com.flurry.sdk.f.this.start();
                    }
                    if (com.flurry.sdk.f.this.n != null) {
                        if (com.flurry.sdk.f.this.n.g()) {
                            com.flurry.sdk.f.this.n.h();
                        }
                        com.flurry.sdk.f.this.n.e();
                    }
                }
            }
            
            public void surfaceCreated(final SurfaceHolder surfaceHolder) {
                com.flurry.sdk.f.this.h = surfaceHolder;
                eo.a(4, com.flurry.sdk.f.A, "mCurrentState is ....:" + com.flurry.sdk.f.this.f);
                eo.a(4, com.flurry.sdk.f.A, "mTargetState is ....:" + com.flurry.sdk.f.this.g);
                if (com.flurry.sdk.f.this.i == null && com.flurry.sdk.f.this.k()) {
                    com.flurry.sdk.f.this.a(false);
                }
            }
            
            public void surfaceDestroyed(final SurfaceHolder surfaceHolder) {
                com.flurry.sdk.f.this.h = null;
                if (com.flurry.sdk.f.this.n != null) {
                    com.flurry.sdk.f.this.n.d();
                    com.flurry.sdk.f.this.n.k();
                }
                eo.a(4, com.flurry.sdk.f.A, "mCurrentState is :" + com.flurry.sdk.f.this.f);
                com.flurry.sdk.f.this.b(false);
            }
        };
        this.a(context, g, flurryFullscreenTakeoverActivity, z);
    }
    
    private void a(final Context context, final g g, final FlurryFullscreenTakeoverActivity x, final z n) {
        final FrameLayout v = new FrameLayout(context);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(-1, -2);
        layoutParams.gravity = 16;
        v.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        this.v = (ViewGroup)v;
        this.j = 0;
        this.k = 0;
        this.getHolder().addCallback(this.c);
        this.getHolder().setType(3);
        this.setFocusable(true);
        this.setFocusableInTouchMode(true);
        this.requestFocus();
        this.f = 0;
        this.g = 0;
        this.w = g;
        this.x = x;
        (this.n = n).setAdUnityView(g);
    }
    
    private void a(final boolean b) {
        if (this.d == null || this.h == null || FlurryFullscreenTakeoverActivity.fBasicWebViewClosingHandlerFired) {
            return;
        }
        final Intent intent = new Intent("com.android.music.musicservicecommand");
        intent.putExtra("command", "pause");
        this.getContext().sendBroadcast(intent);
        this.b(false);
        try {
            this.a();
            (this.i = new MediaPlayer()).setOnPreparedListener(this.b);
            this.i.setOnVideoSizeChangedListener(this.a);
            this.e = -1;
            this.i.setOnCompletionListener(this.B);
            this.i.setOnErrorListener(this.C);
            this.i.setOnBufferingUpdateListener(this.D);
            this.q = 0;
            if (this.h()) {
                this.i.setDataSource(this.getContext(), this.d);
                this.i.setDisplay(this.h);
                this.i.setScreenOnWhilePlaying(true);
                this.i.prepareAsync();
                this.f = 1;
                this.i();
                return;
            }
            goto Label_0250;
        }
        catch (IOException ex) {
            eo.a(5, com.flurry.sdk.f.A, "Unable to open content: " + this.d, ex);
            this.f = -1;
            this.g = -1;
            this.C.onError(this.i, 1, 0);
        }
        catch (IllegalArgumentException ex2) {
            eo.a(5, com.flurry.sdk.f.A, "Unable to open content: " + this.d, ex2);
            this.f = -1;
            this.g = -1;
            this.C.onError(this.i, 1, 0);
        }
    }
    
    private void b(final boolean b) {
        if (this.w != null) {
            FlurryAdModule.getInstance().c(this.w.getAdUnit().d().get(this.w.getAdFrameIndex()).g().toString()).a(this.getCurrentPosition());
        }
        eo.a(4, com.flurry.sdk.f.A, "media player has been released");
        if (this.i != null) {
            this.n.setIsMediaPlayerReleased(true);
            this.n.setMediaPlayer(null);
            this.i.reset();
            this.i.release();
            this.i = null;
            this.f = 0;
            if (b) {
                this.g = 0;
            }
        }
    }
    
    private boolean h() {
        return !this.d.getScheme().equalsIgnoreCase("file");
    }
    
    private void i() {
        if (this.i != null && this.n != null) {
            this.n.setMediaPlayer(this);
            this.n.setEnabled(this.m());
            this.n.setIsMediaPlayerReleased(false);
        }
    }
    
    private void j() {
        if (this.n.getAutoPlay() || this.getCurrentPosition() > this.n.getOffsetStartTime()) {
            this.start();
        }
        this.n.a(0);
    }
    
    private boolean k() {
        final Context context = this.getContext();
        if (context != null) {
            final boolean finishing = ((Activity)context).isFinishing();
            final boolean value = this.z.get();
            eo.a(4, com.flurry.sdk.f.A, "IsFinishing " + finishing + " IsAdClosed " + value);
            return !value && !finishing;
        }
        return false;
    }
    
    private void l() {
        if (this.n.g()) {
            this.n.h();
            return;
        }
        this.n.e();
    }
    
    private boolean m() {
        return this.i != null && this.f != -1 && this.f != 0 && this.f != 1;
    }
    
    public void a() {
        if (this.y == null) {
            if (this.getContext() == null) {
                eo.a(3, com.flurry.sdk.f.A, "Context is null, cannot create progress dialog.");
                return;
            }
            (this.y = new ProgressDialog(this.getContext())).setProgressStyle(0);
            this.y.setCancelable(true);
            this.y.setCanceledOnTouchOutside(false);
            this.y.setOnKeyListener((DialogInterface$OnKeyListener)this);
            this.y.show();
        }
        else if (!this.y.isShowing()) {
            this.y.show();
        }
    }
    
    public void a(final Uri d, final int s) {
        this.d = d;
        this.s = s;
        this.requestLayout();
        this.invalidate();
    }
    
    public void b() {
        if (this.y != null && this.y.isShowing()) {
            this.y.dismiss();
            this.y = null;
        }
    }
    
    public void c() {
        if (this.w != null) {
            FlurryAdModule.getInstance().c(this.w.getAdUnit().d().get(this.w.getAdFrameIndex()).g().toString()).a(this.getCurrentPosition());
        }
        if (this.i != null) {
            this.i.stop();
            this.i.release();
            this.i = null;
            this.f = 0;
            this.g = 0;
            this.n.d();
            this.n.setIsMediaPlayerReleased(true);
            this.n.setMediaPlayer(null);
        }
    }
    
    public boolean canPause() {
        return this.t;
    }
    
    public boolean canSeekBackward() {
        return false;
    }
    
    public boolean canSeekForward() {
        return false;
    }
    
    public void d() {
        eo.a(4, com.flurry.sdk.f.A, "HERE IN SUSPEND BEGIN");
        if (this.i != null) {
            eo.a(4, com.flurry.sdk.f.A, "video position suspend is :" + this.i.getCurrentPosition());
        }
        if (this.m()) {
            this.s = this.getCurrentPosition();
            this.u = this.f;
            this.f = 6;
            this.g = 6;
            eo.a(5, com.flurry.sdk.f.A, "able to suspend video.");
            if (this.i.isPlaying()) {
                this.i.pause();
            }
        }
    }
    
    public void e() {
        eo.a(4, com.flurry.sdk.f.A, "HERE IN resume BEGIN");
        if (this.i != null) {
            eo.a(3, com.flurry.sdk.f.A, "video position resume is :" + this.i.getCurrentPosition() + " mSeekWhenPrepared " + this.s);
        }
        if (this.h == null && this.f == 6) {
            this.g = 7;
        }
        else {
            while (true) {
                if (this.i == null || this.f != 6) {
                    break Label_0119;
                }
                try {
                    this.j();
                    this.f = this.u;
                    this.g = this.u;
                    if (this.f == 8 && this.k()) {
                        this.a(true);
                        return;
                    }
                }
                catch (IllegalStateException ex) {
                    eo.a(3, com.flurry.sdk.f.A, "Exception: " + ex.getLocalizedMessage());
                    continue;
                }
                break;
            }
            if (this.n != null && this.n.getMoreInfoClicked()) {
                this.n.i();
            }
        }
    }
    
    public void f() {
        this.z.set(true);
    }
    
    public int getAudioSessionId() {
        return 0;
    }
    
    public int getBufferPercentage() {
        if (this.i != null) {
            return this.q;
        }
        return 0;
    }
    
    public int getCurrentPosition() {
        if (this.m()) {
            return this.i.getCurrentPosition();
        }
        return 0;
    }
    
    public int getDuration() {
        if (!this.m()) {
            return this.e = -1;
        }
        if (this.e > 0) {
            return this.e;
        }
        return this.e = this.i.getDuration();
    }
    
    public boolean isPlaying() {
        return this.m() && this.i.isPlaying();
    }
    
    public boolean onKey(final DialogInterface dialogInterface, final int n, final KeyEvent keyEvent) {
        eo.a(3, "listeners", "onkey,keycode=" + n + ",event=" + keyEvent.getAction());
        if (dialogInterface == this.y && n == 4 && keyEvent.getAction() == 1) {
            if (this.w != null) {
                this.w.a();
            }
            dialogInterface.dismiss();
            return true;
        }
        return false;
    }
    
    public boolean onKeyDown(final int n, final KeyEvent keyEvent) {
        boolean b;
        if (n != 4 && n != 82 && n != 5 && n != 6) {
            b = true;
        }
        else {
            b = false;
        }
        if (this.m() && b && this.n != null) {
            if (n == 25 || n == 24) {
                eo.a(4, com.flurry.sdk.f.A, "Volume controls hit");
            }
            else {
                this.l();
            }
        }
        return super.onKeyDown(n, keyEvent);
    }
    
    protected void onMeasure(final int n, final int n2) {
        eo.a(4, com.flurry.sdk.f.A, "onMeasure");
        int defaultSize = getDefaultSize(this.j, n);
        int defaultSize2 = getDefaultSize(this.k, n2);
        if (this.j > 0 && this.k > 0) {
            if (defaultSize2 * this.j > defaultSize * this.k) {
                eo.a(4, com.flurry.sdk.f.A, "image too tall, correcting");
                defaultSize2 = defaultSize * this.k / this.j;
            }
            else if (defaultSize2 * this.j < defaultSize * this.k) {
                eo.a(4, com.flurry.sdk.f.A, "image too wide, correcting");
                defaultSize = defaultSize2 * this.j / this.k;
            }
            else {
                eo.a(4, com.flurry.sdk.f.A, "aspect ratio is correct: " + defaultSize + "/" + defaultSize2 + "=" + this.j + "/" + this.k);
            }
        }
        eo.a(4, com.flurry.sdk.f.A, "setting size: " + defaultSize + 'x' + defaultSize2);
        this.setMeasuredDimension(defaultSize, defaultSize2);
        this.n.b();
    }
    
    public boolean onTouchEvent(final MotionEvent motionEvent) {
        if (this.m() && this.n != null) {
            this.l();
        }
        return false;
    }
    
    public boolean onTrackballEvent(final MotionEvent motionEvent) {
        if (this.m() && this.n != null) {
            this.l();
        }
        return false;
    }
    
    public void pause() {
        eo.a(4, com.flurry.sdk.f.A, "HERE IN PAUSE BEGIN");
        if (this.i != null) {
            eo.a(4, com.flurry.sdk.f.A, "video position pause is :" + this.i.getCurrentPosition());
        }
        if (this.m() && this.i.isPlaying()) {
            this.i.pause();
            this.f = 4;
        }
        this.g = 4;
    }
    
    public void seekTo(final int s) {
        if (this.m()) {
            this.i.seekTo(s);
            this.s = 0;
            return;
        }
        this.s = s;
    }
    
    public void setCloseConfirmDialogClicked(final boolean b) {
        this.n.setmCloseConfirmDialogClicked(b);
    }
    
    public void setMediaController(final z n) {
        if (this.n != null) {
            this.n.h();
        }
        this.n = n;
        this.i();
    }
    
    public void setOnCompletionListener(final MediaPlayer$OnCompletionListener o) {
        this.o = o;
    }
    
    public void setOnErrorListener(final MediaPlayer$OnErrorListener r) {
        this.r = r;
    }
    
    public void setOnPreparedListener(final MediaPlayer$OnPreparedListener p) {
        this.p = p;
    }
    
    public void setVideoState(final am videoState) {
        if (this.n != null) {
            this.n.setVideoState(videoState);
        }
    }
    
    public void start() {
        eo.a(4, com.flurry.sdk.f.A, "HERE IN START BEGIN");
        if (this.i != null) {
            eo.a(4, com.flurry.sdk.f.A, "video position start is :" + this.i.getCurrentPosition());
        }
        if (this.m()) {
            this.i.start();
            this.f = 3;
        }
        if (this.n.c()) {
            this.n.a();
            this.n.e();
        }
        this.g = 3;
    }
}
