// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.io.IOException;
import java.io.Writer;
import java.io.StringWriter;
import java.util.Iterator;
import java.util.Map;

public class fm$a
{
    final /* synthetic */ fm a;
    private String b;
    private String c;
    private fn d;
    private final fn$r e;
    
    private fm$a(final fm a, final String b, final String c, final Map map, final fn d) {
        this.a = a;
        this.e = new fn$r(fm.d);
        this.b = b;
        this.c = c;
        this.d = d;
        if (map != null) {
            for (final Map.Entry<String, V> entry : map.entrySet()) {
                this.a(entry.getKey(), (String)entry.getValue());
            }
        }
    }
    
    void a(final hf hf) {
        hf.d();
        if (this.c != null) {
            hf.a("doc", this.c);
        }
        this.e.a(hf);
        hf.a("request");
        this.d.b(this.a.h, hf);
        this.b(hf);
        hf.e();
    }
    
    public void a(final String s, final String s2) {
        synchronized (this) {
            this.e.a(s, s2);
        }
    }
    
    void b(final hf hf) {
        hf.a("response", "null");
        hf.a("one-way", true);
    }
    
    @Override
    public boolean equals(final Object o) {
        if (o != this) {
            if (!(o instanceof fm$a)) {
                return false;
            }
            final fm$a fm$a = (fm$a)o;
            if (!this.b.equals(fm$a.b) || !this.d.equals(fm$a.d) || !this.e.equals(fm$a.e)) {
                return false;
            }
        }
        return true;
    }
    
    @Override
    public int hashCode() {
        return this.b.hashCode() + this.d.hashCode() + this.e.hashCode();
    }
    
    @Override
    public String toString() {
        try {
            final StringWriter stringWriter = new StringWriter();
            final hf a = fn.a.a(stringWriter);
            this.a(a);
            a.g();
            return stringWriter.toString();
        }
        catch (IOException ex) {
            throw new fk(ex);
        }
    }
}
