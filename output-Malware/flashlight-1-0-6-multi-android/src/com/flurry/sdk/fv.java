// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Iterator;
import java.util.Collection;

public class fv
{
    private final ft a;
    private fn b;
    
    protected fv(final fn fn, final ft ft) {
        this(ft);
        this.a(fn);
    }
    
    protected fv(final ft a) {
        this.a = a;
    }
    
    private void b(final fn fn, final Object o) {
        throw new fl("Not a " + fn + ": " + o);
    }
    
    protected int a(final fn fn, final Object o) {
        return this.a.a(fn, o);
    }
    
    protected long a(final Object o) {
        return ((Collection)o).size();
    }
    
    protected NullPointerException a(NullPointerException cause, final String s) {
        final NullPointerException ex = new NullPointerException(cause.getMessage() + s);
        if (cause.getCause() != null) {
            cause = (NullPointerException)cause.getCause();
        }
        ex.initCause(cause);
        return ex;
    }
    
    public void a(final fn b) {
        this.b = b;
    }
    
    protected void a(final fn fn, final Object o, final gi gi) {
        Label_0265: {
            Label_0253: {
                Label_0241: {
                    Label_0229: {
                        Label_0217: {
                            Label_0205: {
                                Label_0198: {
                                    Label_0190: {
                                        Label_0182: {
                                            Label_0147: {
                                                Label_0139: {
                                                    Label_0131: {
                                                        try {
                                                            switch (fv$1.a[fn.a().ordinal()]) {
                                                                default: {
                                                                    this.b(fn, o);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    this.b(fn, o, gi);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    break;
                                                                }
                                                                case 3: {
                                                                    break Label_0131;
                                                                }
                                                                case 4: {
                                                                    break Label_0139;
                                                                }
                                                                case 5: {
                                                                    break Label_0147;
                                                                }
                                                                case 6: {
                                                                    break Label_0182;
                                                                }
                                                                case 7: {
                                                                    break Label_0190;
                                                                }
                                                                case 8: {
                                                                    break Label_0198;
                                                                }
                                                                case 9: {
                                                                    break Label_0205;
                                                                }
                                                                case 10: {
                                                                    break Label_0217;
                                                                }
                                                                case 11: {
                                                                    break Label_0229;
                                                                }
                                                                case 12: {
                                                                    break Label_0241;
                                                                }
                                                                case 13: {
                                                                    break Label_0253;
                                                                }
                                                                case 14: {
                                                                    break Label_0265;
                                                                }
                                                            }
                                                        }
                                                        catch (NullPointerException ex) {
                                                            throw this.a(ex, " of " + fn.g());
                                                        }
                                                        this.c(fn, o, gi);
                                                        return;
                                                    }
                                                    this.d(fn, o, gi);
                                                    return;
                                                }
                                                this.e(fn, o, gi);
                                                return;
                                            }
                                            final int a = this.a(fn, o);
                                            gi.b(a);
                                            this.a((fn)fn.k().get(a), o, gi);
                                            return;
                                        }
                                        this.g(fn, o, gi);
                                        return;
                                    }
                                    this.f(fn, o, gi);
                                    return;
                                }
                                this.c(o, gi);
                                return;
                            }
                            gi.c(((Number)o).intValue());
                            return;
                        }
                        gi.b((long)o);
                        return;
                    }
                    gi.a((float)o);
                    return;
                }
                gi.a((double)o);
                return;
            }
            gi.a((boolean)o);
            return;
        }
        gi.a();
    }
    
    public void a(final Object o, final gi gi) {
        this.a(this.b, o, gi);
    }
    
    protected Iterator b(final Object o) {
        return ((Collection)o).iterator();
    }
    
    protected void b(final fn fn, final Object o, final gi gi) {
        final Object a = this.a.a(o, fn);
        for (final fn$f fn$f : fn.b()) {
            final Object b = this.a.b(o, fn$f.a(), fn$f.b(), a);
            try {
                this.a(fn$f.c(), b, gi);
                continue;
            }
            catch (NullPointerException ex) {
                throw this.a(ex, " in field " + fn$f.a());
            }
            break;
        }
    }
    
    protected void b(final Object o, final gi gi) {
        gi.a((CharSequence)o);
    }
    
    protected int c(final Object o) {
        return ((Map)o).size();
    }
    
    protected void c(final fn fn, final Object o, final gi gi) {
        gi.a(fn.c(o.toString()));
    }
    
    protected void c(final Object o, final gi gi) {
        gi.a((ByteBuffer)o);
    }
    
    protected Iterable d(final Object o) {
        return ((Map)o).entrySet();
    }
    
    protected void d(final fn fn, final Object o, final gi gi) {
        final fn i = fn.i();
        final long a = this.a(o);
        gi.b();
        gi.a(a);
        final Iterator b = this.b(o);
        while (b.hasNext()) {
            gi.c();
            this.a(i, b.next(), gi);
        }
        gi.d();
    }
    
    protected void e(final fn fn, final Object o, final gi gi) {
        final fn j = fn.j();
        final int c = this.c(o);
        gi.e();
        gi.a((long)c);
        for (final Map.Entry<Object, V> entry : this.d(o)) {
            gi.c();
            this.b(entry.getKey(), gi);
            this.a(j, entry.getValue(), gi);
        }
        gi.f();
    }
    
    protected void f(final fn fn, final Object o, final gi gi) {
        this.b(o, gi);
    }
    
    protected void g(final fn fn, final Object o, final gi gi) {
        gi.b(((fx)o).b(), 0, fn.l());
    }
}
