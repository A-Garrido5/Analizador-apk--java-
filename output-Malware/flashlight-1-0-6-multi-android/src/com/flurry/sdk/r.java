// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Collections;
import android.net.Uri;
import android.content.ActivityNotFoundException;
import android.view.ViewGroup;
import com.flurry.android.FlurryAdSize;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import android.os.Parcelable;
import com.flurry.android.FlurryFullscreenTakeoverActivity;
import android.content.Intent;
import com.flurry.android.impl.ads.avro.protocol.v10.AdFrame;
import java.util.List;
import android.text.TextUtils;
import android.widget.Toast;
import com.flurry.android.impl.ads.avro.protocol.v10.AdUnit;
import android.content.Context;
import java.util.Map;
import java.util.HashMap;
import com.flurry.android.impl.ads.FlurryAdModule;

public class r implements ad
{
    private static final String d;
    private static int e;
    FlurryAdModule a;
    y b;
    ag c;
    private boolean f;
    
    static {
        d = r.class.getSimpleName();
        r.e = 0;
    }
    
    public r(final FlurryAdModule a) {
        this.f = true;
        this.a = a;
        this.c = new ag(a);
        this.b = y.a();
    }
    
    private void a(final a a, final String s, final int n) {
        final Context a2 = a.c.a();
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("event", a.c.a);
        hashMap.put("url", s);
        hashMap.put("response", new StringBuilder().append(n).toString());
        this.a.a(new q("sendUrlStatusResult", hashMap, a2, c, d, a.c.e), this, 0);
    }
    
    private void a(final a a, final String s, final int n, final r$b r$b, final int n2) {
        if (n >= 5) {
            eo.a(5, r.d, "No response for url: " + s);
            if (n2 != 0) {
                this.a(a, s, n2);
            }
            if (r$b != null) {
                r$b.a(true);
            }
            return;
        }
        final el el = new el();
        el.a(s);
        el.a(new el$a() {
            public void a(final el el, final Void void1) {
                final int e = el.e();
                if (eo.c() <= 3 && eo.d()) {
                    do.a().a(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(do.a().b(), (CharSequence)("sUUS HTTP Response Code: " + e), 0).show();
                        }
                    });
                }
                if (e == 200) {
                    eo.a(3, r.d, "URL hit succeeded for: " + s);
                    r.this.a(a, s, e);
                    if (r$b != null) {
                        r$b.a(true);
                    }
                    return;
                }
                r.this.a(a, s, 1 + n, r$b, e);
            }
        });
        em.a().a(this, el);
    }
    
    private void a(final String s, final String s2, final int n, final r$a r$a) {
        if (r$a != null) {
            if (s == null || s2 == null) {
                r$a.a(null);
                return;
            }
            if (n >= 5) {
                r$a.a(null);
                return;
            }
            final String a = cf.a(s2);
            if (!TextUtils.isEmpty((CharSequence)a)) {
                if (a.startsWith("http")) {
                    final el el = new el();
                    el.a(a);
                    el.a(false);
                    el.a(new el$a() {
                        public void a(final el el, final Void void1) {
                            final int e = el.e();
                            if (eo.c() <= 3 && eo.d()) {
                                do.a().a(new Runnable() {
                                    @Override
                                    public void run() {
                                        Toast.makeText(do.a().b(), (CharSequence)("pRU HTTP Response Code: " + e), 0).show();
                                    }
                                });
                            }
                            if (e == 200) {
                                eo.a(3, r.d, "Redirect URL found for: " + s);
                                r$a.a(a);
                                return;
                            }
                            if (e >= 300 && e < 400) {
                                eo.a(3, r.d, "Num redirects: " + (1 + n));
                                final List b = el.b("Location");
                                if (b != null && b.size() > 0) {
                                    r.this.a(s, b.get(0), 1 + n, r$a);
                                    return;
                                }
                                eo.a(3, r.d, "No location for redirect url: " + a);
                            }
                            else {
                                eo.a(3, r.d, "Bad Response status code: " + e);
                            }
                            r$a.a(null);
                        }
                    });
                    em.a().a(this, el);
                    return;
                }
                if (this.a(a, "android.intent.action.VIEW")) {
                    r$a.a(a);
                    return;
                }
                if (!TextUtils.isEmpty((CharSequence)a) && a.startsWith("market://")) {
                    r$a.a(a);
                    return;
                }
                r$a.a(null);
            }
        }
    }
    
    private boolean a(final AdUnit adUnit) {
        return adUnit != null && adUnit.d().size() > 0 && adUnit.d().get(0).e().e().toString().equalsIgnoreCase("banner");
    }
    
    public int a(final a a) {
        return this.a.d().c().c(a.c.c.b().toString());
    }
    
    Intent a(final Intent intent, final String s) {
        Intent intent2;
        if (fe.b(intent)) {
            intent2 = new Intent(intent);
        }
        else {
            intent2 = new Intent(do.a().b(), (Class)FlurryFullscreenTakeoverActivity.class);
            intent2.putExtra("targetIntent", (Parcelable)intent);
        }
        intent2.putExtra("adSpaceName", s);
        return intent2;
    }
    
    public String a(final e e, final AdUnit adUnit, final a a, final String s) {
        Pattern compile;
        Matcher matcher;
        String a2;
        for (compile = Pattern.compile(".*?(%\\{\\w+\\}).*?"), matcher = compile.matcher(s), a2 = s; matcher.matches(); matcher = compile.matcher(a2)) {
            a2 = this.c.a(e, adUnit, a, a2, matcher.group(1));
        }
        return a2;
    }
    
    public void a() {
        this.f = this.b((String)null);
    }
    
    void a(final Context context, final String s, final AdUnit adUnit) {
        final Intent launchIntentForPackage = do.a().c().getLaunchIntentForPackage(s);
        if (launchIntentForPackage != null && fe.a(launchIntentForPackage)) {
            this.a(context, launchIntentForPackage, adUnit.b().toString());
            return;
        }
        this.a(context, "https://play.google.com/store/apps/details?id=" + s, false, adUnit, true);
    }
    
    public void a(final Context context, final String s, final String s2) {
        if (context != null && !TextUtils.isEmpty((CharSequence)s) && !TextUtils.isEmpty((CharSequence)s2)) {
            if (!s.startsWith("market://details?id=")) {
                eo.a(5, r.d, "Unexpected Google Play url scheme: " + s);
                return;
            }
            if (!this.f) {
                this.d(context, "https://market.android.com/details?id=" + s.substring(20), s2);
                return;
            }
            if (!this.d(context, s, s2)) {
                eo.a(6, r.d, "Cannot launch Google Play url " + s);
            }
        }
    }
    
    public void a(final Context context, final String s, final boolean b, final AdUnit adUnit, final String s2) {
        if (context == null) {
            eo.a(5, r.d, "Cannot process redirect, null context");
            return;
        }
        final am c = this.a.c(s2);
        if (c.h()) {
            c.g(false);
            if (context instanceof FlurryFullscreenTakeoverActivity) {
                ((FlurryFullscreenTakeoverActivity)context).setVideoMoreInfoInProgress(c);
            }
        }
        this.a(context, s, b, adUnit, false);
    }
    
    void a(final Context context, final String s, final boolean b, final AdUnit adUnit, final boolean b2) {
        if (context == null) {
            eo.a(5, r.d, "Unable to launch url, null context");
            return;
        }
        this.a.b(new ff() {
            @Override
            public void a() {
                if (s != null) {
                    final String string = adUnit.b().toString();
                    final String a = cf.a(s);
                    eo.a(5, r.d, "Generic Launch of " + a);
                    if (!TextUtils.isEmpty((CharSequence)a)) {
                        if (a.startsWith("market://")) {
                            r.this.a(context, a, string);
                            return;
                        }
                        if (a.startsWith("http")) {
                            boolean b;
                            if (cf.e(a)) {
                                b = r.this.b(context, a, string);
                            }
                            else {
                                b = r.this.c(context, a, string);
                            }
                            if (!b) {
                                final Intent intent = new Intent(do.a().b(), (Class)FlurryFullscreenTakeoverActivity.class);
                                intent.putExtra("url", a);
                                intent.putExtra("should_close_ad", b2);
                                if (b && fe.a(intent)) {
                                    r.this.a(context, intent, string);
                                    return;
                                }
                                eo.a(6, r.d, "Unable to launch FlurryFullscreenTakeoverActivity, falling back to browser. Fix by declaring this Activity in your AndroidManifest.xml");
                                r.this.d(context, a, string);
                            }
                        }
                        else if (!r.this.d(context, a, string)) {
                            eo.a(5, r.d, "Failed to launch intent for:" + a);
                        }
                    }
                    return;
                }
                eo.a(5, r.d, "Unable to launch intent for: " + s);
            }
        });
    }
    
    void a(final a a, final int n) {
        r.e = this.a(a);
        if (n > r.e) {
            eo.a(5, r.d, "Maximum depth for event/action loop exceeded when performing next AdUnit:");
            return;
        }
        final Context a2 = a.c.a();
        final AdUnit c = a.c.c;
        final String string = c.b().toString();
        final boolean containsKey = a.b.containsKey("delay");
        final boolean a3 = this.a(c, a.c.e);
        while (true) {
            Label_0193: {
                if (!containsKey) {
                    break Label_0193;
                }
                l c2 = null;
                Label_0201: {
                    try {
                        final long long1 = Long.parseLong(a.b.get("delay"));
                        c2 = this.a.d().c(string);
                        if (c2 != null && containsKey && a3) {
                            c2.a(long1 * 1000L);
                            return;
                        }
                        break Label_0201;
                    }
                    catch (NumberFormatException ex) {
                        eo.a(6, r.d, "caught NumberFormatException with delay parameter in nextAdUnit:" + a.b.get("delay"));
                    }
                    break Label_0193;
                }
                if (c2 != null) {
                    do.a().c(new ff() {
                        @Override
                        public void a() {
                            final u d = r.this.a.d();
                            final Context a = a2;
                            final String b = string;
                            final ViewGroup viewGroup = c2.getViewGroup();
                            FlurryAdSize flurryAdSize;
                            if (a3) {
                                flurryAdSize = FlurryAdSize.BANNER_BOTTOM;
                            }
                            else {
                                flurryAdSize = FlurryAdSize.FULLSCREEN;
                            }
                            d.a(a, b, viewGroup, flurryAdSize, true);
                        }
                    });
                    return;
                }
                if (a3) {
                    do.a().c(new ff() {
                        @Override
                        public void a() {
                            r.this.a.d().a(a2, string, null, FlurryAdSize.BANNER_BOTTOM, false);
                        }
                    });
                    return;
                }
                do.a().c(new ff() {
                    @Override
                    public void a() {
                        r.this.a.d().a(a2, string, null, FlurryAdSize.FULLSCREEN, true);
                    }
                });
                return;
            }
            final long long1 = 30L;
            continue;
        }
    }
    
    @Override
    public void a(final a a, final ae ae, final int n) {
        final q c = a.c;
        String a2 = null;
        if (c != null) {
            a2 = a.c.a;
        }
        eo.a(3, r.d, "performAction:action=" + a.a + ",params=" + a.b + ",triggering event=" + a2);
        final String a3 = a.a;
        if (n > 10) {
            eo.a(5, r.d, "Maximum depth for event/action loop exceeded when performing action:" + a3 + "," + a.b + ",triggered by:" + a2);
            return;
        }
        if (a3.equals("directOpen")) {
            this.b(a);
            return;
        }
        if (a3.equals("delete")) {
            this.c(a);
            return;
        }
        if (a3.equals("processRedirect")) {
            this.d(a);
            return;
        }
        if (a3.equals("verifyUrl")) {
            this.b(a, ae, n);
            return;
        }
        if (a3.equals("launchPackage")) {
            this.e(a);
            return;
        }
        if (a3.equals("sendUrlAsync")) {
            this.f(a);
            return;
        }
        if (a3.equals("sendAdLogs")) {
            this.g(a);
            return;
        }
        if (a3.equals("logEvent")) {
            this.h(a);
            return;
        }
        if (a3.equals("nextFrame")) {
            this.i(a);
            return;
        }
        if (a3.equals("nextAdUnit")) {
            this.a(a, n);
            return;
        }
        if (a3.equals("checkCap")) {
            this.c(a, ae, n);
            return;
        }
        if (a3.equals("updateViewCount")) {
            this.j(a);
            return;
        }
        eo.a(5, r.d, "Unknown action:" + a3 + ",triggered by:" + a2);
    }
    
    void a(final a a, final String s) {
        eo.a(3, r.d, "url after is: " + s);
        this.a(a, s, null);
    }
    
    void a(final a a, final String s, final r$b r$b) {
        this.a(a, s, 0, r$b, 0);
    }
    
    void a(final String s, final r$a r$a) {
        this.a(s, s, 0, r$a);
    }
    
    public boolean a(final Context context, final Intent intent, final String s) {
        if (context == null) {
            eo.a(5, r.d, "Cannot launch activity, null context");
        }
        else if (intent != null && s != null && fe.a(intent)) {
            final Intent a = this.a(intent, s);
            try {
                context.startActivity(a);
                return true;
            }
            catch (ActivityNotFoundException ex) {
                eo.a(6, r.d, "Cannot launch Activity", (Throwable)ex);
                return false;
            }
        }
        return false;
    }
    
    boolean a(final AdUnit adUnit, final int n) {
        return adUnit != null && adUnit.d().size() > 0 && adUnit.d().get(n).e().e().toString().equals("banner");
    }
    
    boolean a(final String s) {
        final Intent launchIntentForPackage = do.a().c().getLaunchIntentForPackage(s);
        return launchIntentForPackage != null && fe.a(launchIntentForPackage);
    }
    
    boolean a(final String s, final String s2) {
        final Intent intent = new Intent(s2);
        intent.setData(Uri.parse(s));
        return fe.a(intent);
    }
    
    void b(final Context context, final String s, final boolean b, final AdUnit adUnit, final boolean b2) {
        if (context == null) {
            eo.a(5, r.d, "Cannot process redirect, null context");
            return;
        }
        this.a(s, new r$a() {
            @Override
            public void a(final String s) {
                if (s != null) {
                    eo.a(3, r.d, "Got final url after processRedirect:" + s);
                    r.this.a(context, s, b, adUnit, b2);
                    return;
                }
                eo.a(5, r.d, "Redirect URL could not be found for: " + s);
            }
        });
    }
    
    void b(final a a) {
        final Context a2 = a.c.a();
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        final String string = c.b().toString();
        if (!a.b.containsKey("url")) {
            eo.a(6, r.d, "failed to perform directOpen action: no url in " + a.c.a);
            return;
        }
        final String s = a.b.get("url");
        if (s.startsWith("market://")) {
            this.a(a2, s, string);
            return;
        }
        if ("true".equals(a.b.get("native"))) {
            eo.a(2, r.d, "Explictly instructed to use native browser");
            this.d(a2, this.a(d, c, a, s), string);
            return;
        }
        if (this.a(c)) {
            this.a.b(d);
            this.a.b(c);
        }
        final Intent intent = new Intent(do.a().b(), (Class)FlurryFullscreenTakeoverActivity.class);
        intent.putExtra("url", s);
        intent.putExtra("is_mraid_ad", true);
        if (fe.a(intent)) {
            this.a(a2, intent, string);
            return;
        }
        eo.a(6, r.d, "Can't start FlurryFullscreenTakeoverActivity, was it declared in the manifest? Falling back to default browser");
        this.d(a2, s, string);
    }
    
    void b(final a a, final ae ae, final int n) {
        final Context a2 = a.c.a();
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        if (a.b.containsKey("url")) {
            String s;
            if (this.a(a.b.get("url"))) {
                s = "urlVerified";
            }
            else {
                s = "urlNotVerified";
            }
            this.a.a(s, 1);
            ae.a(new q(s, Collections.emptyMap(), a2, c, d, a.c.e), this, n + 1);
        }
    }
    
    public void b(final a a, final String s) {
        eo.a(3, r.d, "url after is: " + s);
        this.a(a, s, 4, null, 0);
    }
    
    public boolean b(final Context context, final String s, final String s2) {
        if (context == null || TextUtils.isEmpty((CharSequence)s) || TextUtils.isEmpty((CharSequence)s2)) {
            return false;
        }
        final Intent b = h.b(context, s);
        if (b != null) {
            return this.a(context, b, s2);
        }
        eo.a(5, r.d, "Google Play is not installed: " + s);
        return false;
    }
    
    boolean b(String string) {
        final String packageName = do.a().b().getPackageName();
        if (string == null) {
            string = "market://details?id=" + packageName;
        }
        return this.a(string, "android.intent.action.VIEW");
    }
    
    void c(final a a) {
        final String string = a.c.c.b().toString();
        Label_0105: {
            if (!a.b.containsKey("count")) {
                break Label_0105;
            }
            final String s = a.b.get("count");
            while (true) {
                try {
                    final int int1 = Integer.parseInt(s);
                    this.a.d().a(string, int1);
                    return;
                }
                catch (NumberFormatException ex) {
                    eo.a(6, r.d, "caught NumberFormatException with count parameter in deleteAds:" + s);
                    final int int1 = -1;
                    continue;
                }
                break;
            }
        }
        if (a.b.containsKey("groupId")) {
            this.a.d().a(string, a.b.get("groupId"));
        }
    }
    
    void c(final a a, final ae ae, final int n) {
        final Context a2 = a.c.a();
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        if (a.b.containsKey("idHash")) {
            final String s = a.b.get("idHash");
            x a3 = this.b.a(s);
            String s2 = "capNotExhausted";
            if (a3 != null && this.b.a(a3.h())) {
                eo.a(4, r.d, "Discarding expired frequency cap info for idHash=" + s);
                this.b.b(s);
                a3 = null;
            }
            if (a3 != null && a3.c() >= a3.e()) {
                eo.a(4, r.d, "Frequency cap exhausted for idHash=" + s);
                s2 = "capExhausted";
            }
            this.a.a(s2, 1);
            ae.a(new q(s2, Collections.emptyMap(), a2, c, d, a.c.e), this, n + 1);
        }
    }
    
    public boolean c(final Context context, final String s, final String s2) {
        if (context == null || TextUtils.isEmpty((CharSequence)s) || TextUtils.isEmpty((CharSequence)s2)) {
            return false;
        }
        final Intent a = h.a(context, s);
        if (a != null) {
            return this.a(context, a, s2);
        }
        eo.a(5, r.d, "Cannot launch App: " + s);
        return false;
    }
    
    void d(final a a) {
        final Context a2 = a.c.a();
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        if (a.b.containsKey("url")) {
            final String s = a.b.get("url");
            final boolean b = !a.b.containsKey("native") || "false".equals(a.b.get("native"));
            if (!TextUtils.isEmpty((CharSequence)s)) {
                final String a3 = cf.a(this.a(d, c, a, s));
                if (!TextUtils.isEmpty((CharSequence)a3)) {
                    if (!a3.startsWith("http")) {
                        this.a(a2, a3, false, c, true);
                        return;
                    }
                    eo.a(3, r.d, "Calling processRedirectURL for: " + a3 + " and launching in webView: " + b);
                    this.b(a2, a3, b, c, true);
                }
            }
        }
    }
    
    public boolean d(final Context context, final String s, final String s2) {
        if (context == null) {
            eo.a(5, r.d, "Cannot launch url, null context");
            return false;
        }
        return this.a(context, new Intent("android.intent.action.VIEW").setData(Uri.parse(s)), s2);
    }
    
    void e(final a a) {
        final Context a2 = a.c.a();
        final AdUnit c = a.c.c;
        if (a.b.containsKey("package")) {
            this.a(a2, a.b.get("package"), c);
        }
    }
    
    void f(final a a) {
        final e d = a.c.d;
        final AdUnit c = a.c.c;
        if (a.b.containsKey("url")) {
            this.a(a, this.a(d, c, a, a.b.get("url")));
        }
    }
    
    void g(final a a) {
        this.a.C();
    }
    
    void h(final a a) {
        final boolean b = a.b.containsKey("__sendToServer") && a.b.get("__sendToServer").equals("true");
        a.b.remove("__sendToServer");
        this.a.a(a.c.d, a.c.a, b, a.b);
    }
    
    void i(final a a) {
    }
    
    void j(final a a) {
        if (a.b.containsKey("idHash")) {
            final x a2 = this.b.a(a.b.get("idHash"));
            if (a2 != null) {
                a2.d();
                eo.a(4, r.d, "updateViewCount:idHash=" + a2.b() + ",newCap=" + a2.e() + ",prevCap=" + a2.f() + ",views=" + a2.c());
                if (a2.c() >= a2.e()) {
                    final String string = a.c.c.b().toString();
                    if (a2.c() > a2.e()) {
                        eo.a(6, r.d, "FlurryAdAction: !! rendering a capped object: " + a2.b() + " for adspace: " + string);
                    }
                    else {
                        eo.a(4, r.d, "FlurryAdAction: hit cap for object: " + a2.b() + ", cache cleared for adspace: " + string);
                    }
                    this.a.d().d(string);
                }
            }
        }
    }
}
