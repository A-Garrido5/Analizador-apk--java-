// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.UnsupportedEncodingException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.EOFException;
import java.nio.charset.Charset;
import java.io.InputStream;
import java.io.Closeable;

class fi implements Closeable
{
    private final InputStream a;
    private final Charset b;
    private byte[] c;
    private int d;
    private int e;
    
    public fi(final InputStream a, final int n, final Charset b) {
        if (a == null || b == null) {
            throw new NullPointerException();
        }
        if (n < 0) {
            throw new IllegalArgumentException("capacity <= 0");
        }
        if (!b.equals(fj.a)) {
            throw new IllegalArgumentException("Unsupported encoding");
        }
        this.a = a;
        this.b = b;
        this.c = new byte[n];
    }
    
    public fi(final InputStream inputStream, final Charset charset) {
        this(inputStream, 8192, charset);
    }
    
    private void b() {
        final int read = this.a.read(this.c, 0, this.c.length);
        if (read == -1) {
            throw new EOFException();
        }
        this.d = 0;
        this.e = read;
    }
    
    public String a() {
        synchronized (this.a) {
            if (this.c == null) {
                throw new IOException("LineReader is closed");
            }
        }
        if (this.d >= this.e) {
            this.b();
        }
        for (int i = this.d; i != this.e; ++i) {
            if (this.c[i] == 10) {
                int n;
                if (i != this.d && this.c[i - 1] == 13) {
                    n = i - 1;
                }
                else {
                    n = i;
                }
                final String s = new String(this.c, this.d, n - this.d, this.b.name());
                this.d = i + 1;
                // monitorexit(inputStream)
                return s;
            }
        }
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(80 + (this.e - this.d)) {
            @Override
            public String toString() {
                Label_0056: {
                    if (this.count <= 0 || this.buf[-1 + this.count] != 13) {
                        break Label_0056;
                    }
                    int count = -1 + this.count;
                    try {
                        return new String(this.buf, 0, count, fi.this.b.name());
                        count = this.count;
                        return new String(this.buf, 0, count, fi.this.b.name());
                    }
                    catch (UnsupportedEncodingException ex) {
                        throw new AssertionError((Object)ex);
                    }
                }
            }
        };
        int j = 0;
    Block_8:
        while (true) {
            byteArrayOutputStream.write(this.c, this.d, this.e - this.d);
            this.e = -1;
            this.b();
            for (j = this.d; j != this.e; ++j) {
                if (this.c[j] == 10) {
                    break Block_8;
                }
            }
        }
        if (j != this.d) {
            byteArrayOutputStream.write(this.c, this.d, j - this.d);
        }
        this.d = j + 1;
        // monitorexit(inputStream)
        return byteArrayOutputStream.toString();
    }
    
    @Override
    public void close() {
        synchronized (this.a) {
            if (this.c != null) {
                this.c = null;
                this.a.close();
            }
        }
    }
}
