// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.LinkedHashSet;
import java.util.Iterator;
import java.util.Set;

abstract class fn$n extends fn
{
    final fn$m f;
    final String g;
    Set h;
    
    public fn$n(final fn$v fn$v, final fn$m f, final String g) {
        super(fn$v);
        this.f = f;
        this.g = g;
        if (fn$n.e.containsKey(f.c)) {
            throw new fl("Schemas may not be named after primitives: " + f.c);
        }
    }
    
    public void a(final hf hf) {
        if (this.h == null || this.h.size() == 0) {
            return;
        }
        hf.a("aliases");
        hf.b();
        final Iterator<fn$m> iterator = this.h.iterator();
        while (iterator.hasNext()) {
            hf.b(iterator.next().a(this.f.b));
        }
        hf.c();
    }
    
    public boolean a(final fn$n fn$n) {
        return this.f.equals(fn$n.f);
    }
    
    public boolean c(final fn$o fn$o, final hf hf) {
        if (this.equals(fn$o.a(this.f))) {
            hf.b(this.f.a(fn$o.a()));
            return true;
        }
        if (this.f.a != null) {
            fn$o.a(this.f, this);
        }
        return false;
    }
    
    @Override
    public String d() {
        return this.f.a;
    }
    
    public void d(final fn$o fn$o, final hf hf) {
        this.f.a(fn$o, hf);
    }
    
    @Override
    public void d(final String s) {
        if (this.h == null) {
            this.h = new LinkedHashSet();
        }
        this.h.add(new fn$m(s, this.f.b));
    }
    
    @Override
    public String e() {
        return this.g;
    }
    
    @Override
    public String f() {
        return this.f.b;
    }
    
    @Override
    public String g() {
        return this.f.c;
    }
    
    @Override
    int m() {
        return super.m() + this.f.hashCode();
    }
}
