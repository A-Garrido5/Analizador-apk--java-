// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public class nd extends it implements Comparable
{
    protected final String a;
    protected final String b;
    protected nd$a c;
    protected nd$a d;
    protected nd$a e;
    protected nd$a f;
    
    public nd(final nd nd, final String a) {
        this.b = nd.b;
        this.a = a;
        this.c = nd.c;
        this.d = nd.d;
        this.e = nd.e;
        this.f = nd.f;
    }
    
    public nd(final String s) {
        this.b = s;
        this.a = s;
    }
    
    private mv a(final int n, final nd$a... array) {
        final mv j = ((mq)array[n].a).j();
        for (int i = n + 1; i < array.length; ++i) {
            if (array[i] != null) {
                return mv.a(j, this.a(i, array));
            }
        }
        return j;
    }
    
    private nd$a a(final nd$a nd$a) {
        if (nd$a == null) {
            return nd$a;
        }
        return nd$a.a();
    }
    
    private static nd$a a(final nd$a nd$a, final nd$a nd$a2) {
        if (nd$a == null) {
            return nd$a2;
        }
        if (nd$a2 == null) {
            return nd$a;
        }
        return nd$a.b(nd$a2);
    }
    
    private nd$a b(final nd$a nd$a) {
        if (nd$a == null) {
            return nd$a;
        }
        return nd$a.b();
    }
    
    private nd$a b(final nd$a nd$a, final nd$a nd$a2) {
        nd$a nd$a3 = nd$a2;
        for (nd$a b = nd$a; b != null; b = b.b) {
            final String c = b.c;
            if (c != null && !c.equals(this.a)) {
                if (nd$a3 == null) {
                    nd$a3 = b;
                }
                else if (!c.equals(nd$a3.c)) {
                    throw new IllegalStateException("Conflicting property name definitions: '" + nd$a3.c + "' (for " + nd$a3.a + ") vs '" + b.c + "' (for " + b.a + ")");
                }
            }
        }
        return nd$a3;
    }
    
    private nd$a c(final nd$a nd$a) {
        if (nd$a == null) {
            return nd$a;
        }
        return nd$a.c();
    }
    
    private boolean d(nd$a b) {
        while (b != null) {
            if (b.c != null && b.c.length() > 0) {
                return true;
            }
            b = b.b;
        }
        return false;
    }
    
    private boolean e(nd$a b) {
        while (b != null) {
            if (b.d) {
                return true;
            }
            b = b.b;
        }
        return false;
    }
    
    private boolean f(nd$a b) {
        while (b != null) {
            if (b.e) {
                return true;
            }
            b = b.b;
        }
        return false;
    }
    
    public int a(final nd nd) {
        if (this.d != null) {
            if (nd.d == null) {
                return -1;
            }
        }
        else if (nd.d != null) {
            return 1;
        }
        return this.a().compareTo(nd.a());
    }
    
    public nd a(final String s) {
        return new nd(this, s);
    }
    
    @Override
    public String a() {
        return this.a;
    }
    
    public void a(final mp mp, final String s, final boolean b, final boolean b2) {
        this.c = new nd$a(mp, this.c, s, b, b2);
    }
    
    public void a(final mr mr, final String s, final boolean b, final boolean b2) {
        this.e = new nd$a(mr, this.e, s, b, b2);
    }
    
    public void a(final mt mt, final String s, final boolean b, final boolean b2) {
        this.d = new nd$a(mt, this.d, s, b, b2);
    }
    
    public void a(final boolean b) {
        if (b) {
            if (this.e != null) {
                this.e = this.e.a(((mr)this.e.a).a(this.a(0, this.e, this.c, this.d, this.f)));
            }
            else if (this.c != null) {
                this.c = this.c.a(((mp)this.c.a).a(this.a(0, this.c, this.d, this.f)));
            }
        }
        else {
            if (this.d != null) {
                this.d = this.d.a(((mt)this.d.a).a(this.a(0, this.d, this.f, this.c, this.e)));
                return;
            }
            if (this.f != null) {
                this.f = this.f.a(((mr)this.f.a).a(this.a(0, this.f, this.c, this.e)));
                return;
            }
            if (this.c != null) {
                this.c = this.c.a(((mp)this.c.a).a(this.a(0, this.c, this.e)));
            }
        }
    }
    
    public void b(final mr mr, final String s, final boolean b, final boolean b2) {
        this.f = new nd$a(mr, this.f, s, b, b2);
    }
    
    public void b(final nd nd) {
        this.c = a(this.c, nd.c);
        this.d = a(this.d, nd.d);
        this.e = a(this.e, nd.e);
        this.f = a(this.f, nd.f);
    }
    
    @Override
    public boolean b() {
        return this.e != null;
    }
    
    @Override
    public boolean c() {
        return this.f != null;
    }
    
    @Override
    public boolean d() {
        return this.c != null;
    }
    
    @Override
    public boolean e() {
        return this.d != null;
    }
    
    @Override
    public mr g() {
        mr mr;
        if (this.e == null) {
            mr = null;
        }
        else {
            final mr mr2 = (mr)this.e.a;
            nd$a nd$a = this.e.b;
            mr = mr2;
            while (nd$a != null) {
                mr mr3 = (mr)nd$a.a;
                final Class h = mr.h();
                final Class h2 = mr3.h();
                if (h != h2) {
                    if (!h.isAssignableFrom(h2)) {
                        if (!h2.isAssignableFrom(h)) {
                            throw new IllegalArgumentException("Conflicting getter definitions for property \"" + this.a() + "\": " + mr.n() + " vs " + mr3.n());
                        }
                        mr3 = mr;
                    }
                    nd$a = nd$a.b;
                    mr = mr3;
                    continue;
                }
                throw new IllegalArgumentException("Conflicting getter definitions for property \"" + this.a() + "\": " + mr.n() + " vs " + mr3.n());
            }
        }
        return mr;
    }
    
    @Override
    public mr h() {
        mr mr;
        if (this.f == null) {
            mr = null;
        }
        else {
            final mr mr2 = (mr)this.f.a;
            nd$a nd$a = this.f.b;
            mr = mr2;
            while (nd$a != null) {
                mr mr3 = (mr)nd$a.a;
                final Class h = mr.h();
                final Class h2 = mr3.h();
                if (h != h2) {
                    if (!h.isAssignableFrom(h2)) {
                        if (!h2.isAssignableFrom(h)) {
                            throw new IllegalArgumentException("Conflicting setter definitions for property \"" + this.a() + "\": " + mr.n() + " vs " + mr3.n());
                        }
                        mr3 = mr;
                    }
                    nd$a = nd$a.b;
                    mr = mr3;
                    continue;
                }
                throw new IllegalArgumentException("Conflicting setter definitions for property \"" + this.a() + "\": " + mr.n() + " vs " + mr3.n());
            }
        }
        return mr;
    }
    
    @Override
    public mp i() {
        mp mp;
        if (this.c == null) {
            mp = null;
        }
        else {
            final mp mp2 = (mp)this.c.a;
            nd$a nd$a = this.c.b;
            mp = mp2;
            while (nd$a != null) {
                mp mp3 = (mp)nd$a.a;
                final Class h = mp.h();
                final Class h2 = mp3.h();
                if (h != h2) {
                    if (!h.isAssignableFrom(h2)) {
                        if (!h2.isAssignableFrom(h)) {
                            throw new IllegalArgumentException("Multiple fields representing property \"" + this.a() + "\": " + mp.f() + " vs " + mp3.f());
                        }
                        mp3 = mp;
                    }
                    nd$a = nd$a.b;
                    mp = mp3;
                    continue;
                }
                throw new IllegalArgumentException("Multiple fields representing property \"" + this.a() + "\": " + mp.f() + " vs " + mp3.f());
            }
        }
        return mp;
    }
    
    @Override
    public mq j() {
        mq mq = this.g();
        if (mq == null) {
            mq = this.i();
        }
        return mq;
    }
    
    @Override
    public mq k() {
        mq mq = this.m();
        if (mq == null) {
            mq = this.h();
            if (mq == null) {
                mq = this.i();
            }
        }
        return mq;
    }
    
    public String l() {
        return this.b;
    }
    
    public mt m() {
        if (this.d == null) {
            return null;
        }
        nd$a d;
        nd$a b;
        for (d = this.d; !(((mt)d.a).f() instanceof mo); d = b) {
            b = d.b;
            if (b == null) {
                return (mt)this.d.a;
            }
        }
        return (mt)d.a;
    }
    
    public void n() {
        this.c = this.a(this.c);
        this.e = this.a(this.e);
        this.f = this.a(this.f);
        this.d = this.a(this.d);
    }
    
    public void o() {
        this.e = this.b(this.e);
        this.d = this.b(this.d);
        if (this.e == null) {
            this.c = this.b(this.c);
            this.f = this.b(this.f);
        }
    }
    
    public void p() {
        this.c = this.c(this.c);
        this.e = this.c(this.e);
        this.f = this.c(this.f);
        this.d = this.c(this.d);
    }
    
    public boolean q() {
        return this.d(this.c) || this.d(this.e) || this.d(this.f) || this.d(this.d);
    }
    
    public boolean r() {
        return this.e(this.c) || this.e(this.e) || this.e(this.f) || this.e(this.d);
    }
    
    public boolean s() {
        return this.f(this.c) || this.f(this.e) || this.f(this.f) || this.f(this.d);
    }
    
    public boolean t() {
        return this.f(this.c) || this.f(this.f) || this.f(this.d);
    }
    
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append("[Property '").append(this.a).append("'; ctors: ").append(this.d).append(", field(s): ").append(this.c).append(", getter(s): ").append(this.e).append(", setter(s): ").append(this.f);
        sb.append("]");
        return sb.toString();
    }
    
    public String u() {
        final nd$a b = this.b(this.d, this.b(this.f, this.b(this.e, this.b(this.c, null))));
        if (b == null) {
            return null;
        }
        return b.c;
    }
}
