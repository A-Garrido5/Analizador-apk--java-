// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.Collection;
import java.util.HashMap;

public class nx extends nw
{
    protected final jn a;
    protected final HashMap b;
    protected final HashMap e;
    
    protected nx(final jn a, final sh sh, final HashMap b, final HashMap e) {
        super(sh, a.m());
        this.a = a;
        this.b = b;
        this.e = e;
    }
    
    public static nx a(final jn jn, final sh sh, final Collection collection, final boolean b, final boolean b2) {
        if (b == b2) {
            throw new IllegalArgumentException();
        }
        HashMap<String, String> hashMap;
        if (b) {
            hashMap = new HashMap<String, String>();
        }
        else {
            hashMap = null;
        }
        HashMap<String, sh> hashMap2;
        if (b2) {
            hashMap2 = new HashMap<String, sh>();
        }
        else {
            hashMap2 = null;
        }
        if (collection != null) {
            for (final nf nf : collection) {
                final Class a = nf.a();
                String s;
                if (nf.c()) {
                    s = nf.b();
                }
                else {
                    s = a(a);
                }
                if (b) {
                    hashMap.put(a.getName(), s);
                }
                if (b2) {
                    final sh sh2 = hashMap2.get(s);
                    if (sh2 != null && a.isAssignableFrom(sh2.p())) {
                        continue;
                    }
                    hashMap2.put(s, jn.b(a));
                }
            }
        }
        return new nx(jn, sh, hashMap, hashMap2);
    }
    
    protected static String a(final Class clazz) {
        final String name = clazz.getName();
        final int lastIndex = name.lastIndexOf(46);
        if (lastIndex < 0) {
            return name;
        }
        return name.substring(lastIndex + 1);
    }
    
    @Override
    public sh a(final String s) {
        return this.e.get(s);
    }
    
    @Override
    public String a(final Object o) {
        final Class<?> class1 = o.getClass();
        final String name = class1.getName();
        synchronized (this.b) {
            String s = this.b.get(name);
            if (s == null) {
                if (this.a.b()) {
                    s = this.a.a().g(((mw)this.a.c(class1)).c());
                }
                if (s == null) {
                    s = a(class1);
                }
                this.b.put(name, s);
            }
            return s;
        }
    }
    
    @Override
    public String a(final Object o, final Class clazz) {
        return this.a(o);
    }
    
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append('[').append(this.getClass().getName());
        sb.append("; id-to-type=").append(this.e);
        sb.append(']');
        return sb.toString();
    }
}
