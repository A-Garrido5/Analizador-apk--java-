// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import com.flurry.org.codehaus.jackson.annotate.JsonIgnore;
import com.flurry.org.codehaus.jackson.annotate.JsonCreator;
import com.flurry.org.codehaus.jackson.annotate.JsonPropertyOrder;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeName;
import com.flurry.org.codehaus.jackson.annotate.JsonAnyGetter;
import com.flurry.org.codehaus.jackson.annotate.JsonAnySetter;
import com.flurry.org.codehaus.jackson.annotate.JsonIgnoreType;
import com.flurry.org.codehaus.jackson.annotate.JsonSetter;
import com.flurry.org.codehaus.jackson.annotate.JsonIgnoreProperties;
import com.flurry.org.codehaus.jackson.annotate.JsonValue;
import com.flurry.org.codehaus.jackson.annotate.JsonGetter;
import com.flurry.org.codehaus.jackson.annotate.JsonRawValue;
import com.flurry.org.codehaus.jackson.annotate.JsonUnwrapped;
import com.flurry.org.codehaus.jackson.annotate.JacksonAnnotation;
import java.lang.annotation.Annotation;
import com.flurry.org.codehaus.jackson.annotate.JsonSubTypes$Type;
import java.util.ArrayList;
import com.flurry.org.codehaus.jackson.annotate.JsonSubTypes;
import java.util.List;
import com.flurry.org.codehaus.jackson.annotate.JsonProperty;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$None;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$As;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$Id;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo;
import com.flurry.org.codehaus.jackson.annotate.JsonAutoDetect;
import com.flurry.org.codehaus.jackson.annotate.JsonWriteNullProperties;
import com.flurry.org.codehaus.jackson.annotate.JsonBackReference;
import com.flurry.org.codehaus.jackson.annotate.JsonManagedReference;

public class my extends iq
{
    @Override
    public iq$a a(final mq mq) {
        final JsonManagedReference jsonManagedReference = (JsonManagedReference)mq.a(JsonManagedReference.class);
        if (jsonManagedReference != null) {
            return iq$a.a(jsonManagedReference.value());
        }
        final JsonBackReference jsonBackReference = (JsonBackReference)mq.a(JsonBackReference.class);
        if (jsonBackReference != null) {
            return iq$a.b(jsonBackReference.value());
        }
        return null;
    }
    
    @Override
    public kg$a a(final mm mm, kg$a h) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            h = kg.h();
        }
        else {
            final JsonWriteNullProperties jsonWriteNullProperties = (JsonWriteNullProperties)mm.a(JsonWriteNullProperties.class);
            if (jsonWriteNullProperties != null) {
                if (jsonWriteNullProperties.value()) {
                    return kg$a.a;
                }
                return kg$a.b;
            }
        }
        return h;
    }
    
    @Override
    public ne a(final mn mn, final ne ne) {
        final JsonAutoDetect jsonAutoDetect = (JsonAutoDetect)mn.a(JsonAutoDetect.class);
        if (jsonAutoDetect == null) {
            return ne;
        }
        return ne.a(jsonAutoDetect);
    }
    
    protected ni a(final jn jn, final mm mm, final sh sh) {
        final JsonTypeInfo jsonTypeInfo = (JsonTypeInfo)mm.a(JsonTypeInfo.class);
        final ki ki = (ki)mm.a(ki.class);
        ni ni;
        if (ki != null) {
            if (jsonTypeInfo == null) {
                return null;
            }
            ni = jn.d(mm, ki.a());
        }
        else {
            if (jsonTypeInfo == null) {
                return null;
            }
            if (jsonTypeInfo.use() == JsonTypeInfo$Id.NONE) {
                return this.c();
            }
            ni = this.b();
        }
        final kh kh = (kh)mm.a(kh.class);
        nh e = null;
        if (kh != null) {
            e = jn.e(mm, kh.a());
        }
        if (e != null) {
            e.a(sh);
        }
        final ni a = ni.a(jsonTypeInfo.use(), e);
        JsonTypeInfo$As jsonTypeInfo$As = jsonTypeInfo.include();
        if (jsonTypeInfo$As == JsonTypeInfo$As.EXTERNAL_PROPERTY && mm instanceof mn) {
            jsonTypeInfo$As = JsonTypeInfo$As.PROPERTY;
        }
        final ni a2 = a.a(jsonTypeInfo$As).a(jsonTypeInfo.property());
        final Class defaultImpl = jsonTypeInfo.defaultImpl();
        if (defaultImpl != JsonTypeInfo$None.class) {
            return a2.a(defaultImpl);
        }
        return a2;
    }
    
    @Override
    public ni a(final jn jn, final mn mn, final sh sh) {
        return this.a(jn, (mm)mn, sh);
    }
    
    @Override
    public ni a(final jn jn, final mq mq, final sh sh) {
        if (sh.f()) {
            return null;
        }
        return this.a(jn, (mm)mq, sh);
    }
    
    @Override
    public Boolean a(final mn mn) {
        final kc kc = (kc)mn.a(kc.class);
        if (kc == null) {
            return null;
        }
        if (kc.a()) {
            return Boolean.TRUE;
        }
        return Boolean.FALSE;
    }
    
    @Override
    public Class a(final mm mm, final sh sh) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class e = kg.e();
            if (e != kl.class) {
                return e;
            }
        }
        return null;
    }
    
    @Override
    public Class a(final mm mm, final sh sh, final String s) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class d = kd.d();
            if (d != kl.class) {
                return d;
            }
        }
        return null;
    }
    
    @Override
    public String a(final mt mt) {
        if (mt != null) {
            final JsonProperty jsonProperty = (JsonProperty)mt.a(JsonProperty.class);
            if (jsonProperty != null) {
                return jsonProperty.value();
            }
        }
        return null;
    }
    
    @Override
    public String a(final Enum enum1) {
        return enum1.name();
    }
    
    @Override
    public List a(final mm mm) {
        final JsonSubTypes jsonSubTypes = (JsonSubTypes)mm.a(JsonSubTypes.class);
        ArrayList<nf> list;
        if (jsonSubTypes == null) {
            list = null;
        }
        else {
            final JsonSubTypes$Type[] value = jsonSubTypes.value();
            list = new ArrayList<nf>(value.length);
            for (final JsonSubTypes$Type jsonSubTypes$Type : value) {
                list.add(new nf(jsonSubTypes$Type.value(), jsonSubTypes$Type.name()));
            }
        }
        return list;
    }
    
    @Override
    public boolean a(final mo mo) {
        return this.m(mo);
    }
    
    @Override
    public boolean a(final mp mp) {
        return this.m(mp);
    }
    
    @Override
    public boolean a(final mr mr) {
        return this.m(mr);
    }
    
    @Override
    public boolean a(final Annotation annotation) {
        return annotation.annotationType().getAnnotation(JacksonAnnotation.class) != null;
    }
    
    @Override
    public ni b(final jn jn, final mq mq, final sh sh) {
        if (!sh.f()) {
            throw new IllegalArgumentException("Must call method with a container type (got " + sh + ")");
        }
        return this.a(jn, (mm)mq, sh);
    }
    
    protected nu b() {
        return new nu();
    }
    
    @Override
    public Boolean b(final mq mq) {
        final JsonUnwrapped jsonUnwrapped = (JsonUnwrapped)mq.a(JsonUnwrapped.class);
        if (jsonUnwrapped != null && jsonUnwrapped.enabled()) {
            return Boolean.TRUE;
        }
        return null;
    }
    
    @Override
    public Class b(final mm mm, final sh sh) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class f = kg.f();
            if (f != kl.class) {
                return f;
            }
        }
        return null;
    }
    
    @Override
    public Class b(final mm mm, final sh sh, final String s) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class e = kd.e();
            if (e != kl.class) {
                return e;
            }
        }
        return null;
    }
    
    @Override
    public Object b(final mm mm) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class a = kg.a();
            if (a != jk$a.class) {
                return a;
            }
        }
        final JsonRawValue jsonRawValue = (JsonRawValue)mm.a(JsonRawValue.class);
        if (jsonRawValue != null && jsonRawValue.value()) {
            return new ps(mm.d());
        }
        return null;
    }
    
    @Override
    public String b(final mn mn) {
        final kf kf = (kf)mn.a(kf.class);
        if (kf == null) {
            return null;
        }
        return kf.a();
    }
    
    @Override
    public String b(final mp mp) {
        final JsonProperty jsonProperty = (JsonProperty)mp.a(JsonProperty.class);
        if (jsonProperty != null) {
            return jsonProperty.value();
        }
        if (mp.b(kg.class) || mp.b(kk.class)) {
            return "";
        }
        return null;
    }
    
    @Override
    public String b(final mr mr) {
        final JsonProperty jsonProperty = (JsonProperty)mr.a(JsonProperty.class);
        if (jsonProperty != null) {
            return jsonProperty.value();
        }
        final JsonGetter jsonGetter = (JsonGetter)mr.a(JsonGetter.class);
        if (jsonGetter != null) {
            return jsonGetter.value();
        }
        if (mr.b(kg.class) || mr.b(kk.class)) {
            return "";
        }
        return null;
    }
    
    protected nu c() {
        return nu.b();
    }
    
    @Override
    public Class c(final mm mm) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class c = kg.c();
            if (c != jk$a.class) {
                return c;
            }
        }
        return null;
    }
    
    @Override
    public Class c(final mm mm, final sh sh, final String s) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class f = kd.f();
            if (f != kl.class) {
                return f;
            }
        }
        return null;
    }
    
    @Override
    public String c(final mp mp) {
        final JsonProperty jsonProperty = (JsonProperty)mp.a(JsonProperty.class);
        if (jsonProperty != null) {
            return jsonProperty.value();
        }
        if (mp.b(kd.class) || mp.b(kk.class) || mp.b(JsonBackReference.class) || mp.b(JsonManagedReference.class)) {
            return "";
        }
        return null;
    }
    
    @Override
    public boolean c(final mq mq) {
        return this.m(mq);
    }
    
    @Override
    public boolean c(final mr mr) {
        final JsonValue jsonValue = (JsonValue)mr.a(JsonValue.class);
        return jsonValue != null && jsonValue.value();
    }
    
    @Override
    public String[] c(final mn mn) {
        final JsonIgnoreProperties jsonIgnoreProperties = (JsonIgnoreProperties)mn.a(JsonIgnoreProperties.class);
        if (jsonIgnoreProperties == null) {
            return null;
        }
        return jsonIgnoreProperties.value();
    }
    
    @Override
    public Boolean d(final mn mn) {
        final JsonIgnoreProperties jsonIgnoreProperties = (JsonIgnoreProperties)mn.a(JsonIgnoreProperties.class);
        if (jsonIgnoreProperties == null) {
            return null;
        }
        return jsonIgnoreProperties.ignoreUnknown();
    }
    
    @Override
    public Class d(final mm mm) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class b = kg.b();
            if (b != jk$a.class) {
                return b;
            }
        }
        return null;
    }
    
    @Override
    public Object d(final mq mq) {
        final ka ka = (ka)mq.a(ka.class);
        String a;
        if (ka == null) {
            a = null;
        }
        else {
            a = ka.a();
            if (a.length() == 0) {
                if (!(mq instanceof mr)) {
                    return mq.d().getName();
                }
                final mr mr = (mr)mq;
                if (mr.f() == 0) {
                    return mq.d().getName();
                }
                return mr.a(0).getName();
            }
        }
        return a;
    }
    
    @Override
    public String d(final mr mr) {
        final JsonProperty jsonProperty = (JsonProperty)mr.a(JsonProperty.class);
        if (jsonProperty != null) {
            return jsonProperty.value();
        }
        final JsonSetter jsonSetter = (JsonSetter)mr.a(JsonSetter.class);
        if (jsonSetter != null) {
            return jsonSetter.value();
        }
        if (mr.b(kd.class) || mr.b(kk.class) || mr.b(JsonBackReference.class) || mr.b(JsonManagedReference.class)) {
            return "";
        }
        return null;
    }
    
    @Override
    public Boolean e(final mn mn) {
        final JsonIgnoreType jsonIgnoreType = (JsonIgnoreType)mn.a(JsonIgnoreType.class);
        if (jsonIgnoreType == null) {
            return null;
        }
        return jsonIgnoreType.value();
    }
    
    @Override
    public Class e(final mm mm) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg != null) {
            final Class d = kg.d();
            if (d != kl.class) {
                return d;
            }
        }
        return null;
    }
    
    @Override
    public boolean e(final mr mr) {
        return mr.b(JsonAnySetter.class);
    }
    
    @Override
    public kg$b f(final mm mm) {
        final kg kg = (kg)mm.a(kg.class);
        if (kg == null) {
            return null;
        }
        return kg.g();
    }
    
    @Override
    public Object f(final mn mn) {
        final ke ke = (ke)mn.a(ke.class);
        if (ke != null) {
            final String a = ke.a();
            if (a.length() > 0) {
                return a;
            }
        }
        return null;
    }
    
    @Override
    public boolean f(final mr mr) {
        return mr.b(JsonAnyGetter.class);
    }
    
    @Override
    public String g(final mn mn) {
        final JsonTypeName jsonTypeName = (JsonTypeName)mn.a(JsonTypeName.class);
        if (jsonTypeName == null) {
            return null;
        }
        return jsonTypeName.value();
    }
    
    @Override
    public Class[] g(final mm mm) {
        final kk kk = (kk)mm.a(kk.class);
        if (kk == null) {
            return null;
        }
        return kk.a();
    }
    
    @Override
    public String[] h(final mn mn) {
        final JsonPropertyOrder jsonPropertyOrder = (JsonPropertyOrder)mn.a(JsonPropertyOrder.class);
        if (jsonPropertyOrder == null) {
            return null;
        }
        return jsonPropertyOrder.value();
    }
    
    @Override
    public Boolean i(final mn mn) {
        final JsonPropertyOrder jsonPropertyOrder = (JsonPropertyOrder)mn.a(JsonPropertyOrder.class);
        if (jsonPropertyOrder == null) {
            return null;
        }
        return jsonPropertyOrder.alphabetic();
    }
    
    @Override
    public Class i(final mm mm) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class c = kd.c();
            if (c != jl$a.class) {
                return c;
            }
        }
        return null;
    }
    
    @Override
    public Class j(final mm mm) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class b = kd.b();
            if (b != jg$a.class) {
                return b;
            }
        }
        return null;
    }
    
    @Override
    public Object j(final mn mn) {
        final kj kj = (kj)mn.a(kj.class);
        if (kj == null) {
            return null;
        }
        return kj.a();
    }
    
    @Override
    public boolean k(final mm mm) {
        return mm.b(JsonCreator.class);
    }
    
    public Class l(final mm mm) {
        final kd kd = (kd)mm.a(kd.class);
        if (kd != null) {
            final Class a = kd.a();
            if (a != jg$a.class) {
                return a;
            }
        }
        return null;
    }
    
    protected boolean m(final mm mm) {
        final JsonIgnore jsonIgnore = (JsonIgnore)mm.a(JsonIgnore.class);
        return jsonIgnore != null && jsonIgnore.value();
    }
}
