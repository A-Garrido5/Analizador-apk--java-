// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import android.app.Activity;
import java.util.Collections;
import android.view.View;
import com.flurry.android.FlurryAdType;
import com.flurry.android.impl.ads.avro.protocol.v10.Callback;
import android.text.TextUtils;
import java.util.Iterator;
import com.flurry.android.impl.ads.FlurryAdModule;
import com.flurry.android.FlurryAdListener;
import android.view.ViewGroup;
import java.util.Map;
import java.util.HashMap;
import android.content.Context;
import com.flurry.android.impl.ads.avro.protocol.v10.AdFrame;
import com.flurry.android.impl.ads.avro.protocol.v10.AdUnit;
import java.util.List;
import com.flurry.android.FlurryAdSize;
import java.lang.ref.WeakReference;

class u$a implements ap$b, fb$a
{
    final /* synthetic */ u a;
    private final String b;
    private u$b c;
    private WeakReference d;
    private WeakReference e;
    private FlurryAdSize f;
    private boolean g;
    private List h;
    private AdUnit i;
    private ah j;
    private int k;
    private long l;
    private long m;
    private long n;
    private long o;
    private long p;
    private String q;
    
    public u$a(final u a, final String b) {
        this.a = a;
        this.b = b;
        this.c = u$b.a;
        this.d = new WeakReference(null);
        this.e = new WeakReference(null);
        this.a();
    }
    
    private void a(final AdFrame adFrame, final ci ci) {
        synchronized (this) {
            final String e = ci.e();
            final el el = new el();
            el.a(e);
            el.b(new ey());
            el.a(new el$a() {
                public void a(final el el, final String s) {
                    eo.a(3, u.a, "VAST resolver: HTTP status code is:" + el.e() + " for url: " + e);
                    final boolean c = el.c();
                    ci a = null;
                    if (c) {
                        eo.a(3, u.a, "VAST resolver response:" + s + " for url: " + e);
                        a = ci.a(ci, ck.a(s));
                    }
                    if (a == null) {
                        eo.a(3, u.a, "VAST resolver failed for frame: " + adFrame);
                        u$a.this.a.b.a(adFrame.g().toString(), new ci$a().a().b());
                    }
                    else {
                        eo.a(3, u.a, "VAST resolver successful for frame: " + adFrame);
                        u$a.this.a.b.a(adFrame.g().toString(), a);
                    }
                    do.a().c(new ff() {
                        @Override
                        public void a() {
                            u$a.this.l();
                        }
                    });
                }
            });
            em.a().a(this, el);
        }
    }
    
    private void a(final AdUnit adUnit) {
        synchronized (this) {
            this.a("prepared", (Context)this.d.get(), new HashMap(), adUnit, this.a.b.a(adUnit.d().get(0).g().toString()), 0, 0);
        }
    }
    
    private void a(final AdUnit adUnit, b a) {
        synchronized (this) {
            this.a();
            final e a2 = this.a.b.a(adUnit.d().get(0).g().toString());
            final HashMap<String, String> hashMap = new HashMap<String, String>();
            hashMap.put("preRender", "true");
            if (a == null) {
                a = com.flurry.sdk.b.a;
            }
            hashMap.put("errorCode", Integer.toString(a.a()));
            this.a("renderFailed", (Context)this.d.get(), hashMap, adUnit, a2, 0, 0);
        }
    }
    
    private void a(final AdUnit adUnit, final String s) {
        synchronized (this) {
            eo.a(3, u.a, "Pre-render: HTTP get for url: " + s);
            final el el = new el();
            el.a(s);
            el.b(new ey());
            el.a(new el$a() {
                public void a(final el el, final String s) {
                    eo.a(3, u.a, "Prerender: HTTP status code is:" + el.e() + " for url: " + s);
                    if (el.c()) {
                        synchronized (u$a.this) {
                            u$a.this.q = s;
                            // monitorexit(this.c)
                            do.a().c(new ff() {
                                @Override
                                public void a() {
                                    u$a.this.t();
                                    u$a.this.b((Context)u$a.this.d.get(), (ViewGroup)u$a.this.e.get());
                                }
                            });
                            return;
                        }
                    }
                    do.a().c(new ff() {
                        @Override
                        public void a() {
                            u$a.this.a(adUnit, com.flurry.sdk.b.k);
                        }
                    });
                }
            });
            em.a().a(this, el);
        }
    }
    
    private void a(final b b) {
        synchronized (this) {
            if (u$b.e.equals(this.c) && this.h != null && this.h.size() != 0) {
                this.a(this.h.get(0), b);
            }
        }
    }
    
    private void a(u$b a) {
        // monitorenter(this)
        Label_0010: {
            if (a != null) {
                break Label_0010;
            }
            try {
                a = u$b.a;
                eo.a(3, u.a, "Setting state from " + this.c + " to " + a + " for adspace: " + this.b);
                if (u$b.a.equals(this.c) && !u$b.a.equals(a)) {
                    eo.a(3, u.a, "Adding listeners for adspace: " + this.b);
                    fa.a().a(this);
                    ap.a().a(this);
                    eo.a(3, u.a, "Done adding listeners for adspace: " + this.b);
                }
                else if (u$b.a.equals(a) && !u$b.a.equals(this.c)) {
                    eo.a(3, u.a, "Removing listeners for adspace: " + this.b);
                    fa.a().b(this);
                    ap.a().b(this);
                    eo.a(3, u.a, "Done removing listeners for adspace: " + this.b);
                }
                this.c = a;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    private void a(final String s, final Context context, final Map map, final AdUnit adUnit, final e e, final int n, final int n2) {
        synchronized (this) {
            eo.a(3, u.a, "fireEvent(event=" + s + ",params=" + map + ")");
            do.a().c(new ff() {
                @Override
                public void a() {
                    u$a.this.a.b.a(new q(s, map, context, adUnit, e, 0), u$a.this.a.b.a(), 0);
                }
            });
        }
    }
    
    private void b(final Context context, final ViewGroup viewGroup) {
        synchronized (this) {
            if (this.g) {
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        u$a.this.a(context, viewGroup);
                    }
                });
            }
        }
    }
    
    private void b(final AdUnit adUnit) {
        synchronized (this) {
            this.a("unfilled", (Context)this.d.get(), new HashMap(), adUnit, this.a.b.a(adUnit.d().get(0).g().toString()), 0, 0);
        }
    }
    
    private void b(final b b) {
        synchronized (this) {
            this.a();
            final FlurryAdListener ac = this.a.b.ac();
            eo.a(3, u.a, "Firing onRenderFailed, listener=" + ac);
            if (ac != null) {
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        ac.onRenderFailed(u$a.this.b);
                    }
                });
            }
        }
    }
    
    private void h() {
        synchronized (this) {
            if (this.l > 0L && System.currentTimeMillis() > this.l) {
                this.u();
            }
        }
    }
    
    private void i() {
        synchronized (this) {
            if (this.m > 0L && System.currentTimeMillis() > this.m) {
                this.n();
            }
        }
    }
    
    private void j() {
        synchronized (this) {
            if (this.o > 0L && System.currentTimeMillis() > this.o) {
                this.a(com.flurry.sdk.b.m);
            }
            else if (this.n > 0L && System.currentTimeMillis() > this.n) {
                this.m();
                this.l();
            }
        }
    }
    
    private void k() {
        synchronized (this) {
            if (this.p > 0L && System.currentTimeMillis() > this.p) {
                em.a().a(this);
                this.a(this.j.c(), com.flurry.sdk.b.o);
            }
        }
    }
    
    private void l() {
        while (true) {
            Label_0045: {
                synchronized (this) {
                    if (u$b.e.equals(this.c)) {
                        if (this.d.get() != null) {
                            break Label_0045;
                        }
                        this.u();
                    }
                    return;
                }
            }
            if (FlurryAdModule.i()) {
                this.u();
                return;
            }
            final ap a = ap.a();
            while (this.h.size() > 0) {
                final AdUnit adUnit = this.h.get(0);
                final List d = adUnit.d();
                if (d == null || d.isEmpty()) {
                    this.a(adUnit, com.flurry.sdk.b.f);
                    return;
                }
                for (final AdFrame adFrame : adUnit.d()) {
                    if (adFrame.b() == 6) {
                        adUnit.a(Boolean.valueOf(true));
                        this.a(u$b.c);
                        this.g();
                        return;
                    }
                    final ci b = this.a.b.b(adFrame.g().toString());
                    if (b == null || b.c()) {
                        continue;
                    }
                    if (!b.d()) {
                        final long longValue = adUnit.o();
                        if (longValue > 0L && this.o == 0L) {
                            eo.a(3, u.a, "Setting VAST resolve timeout for " + longValue + " ms");
                            this.o = longValue + System.currentTimeMillis();
                        }
                        this.a(adFrame, b);
                        return;
                    }
                    break;
                }
                this.o = 0L;
                if (!a.b(adUnit)) {
                    eo.a(3, u.a, "Pre-caching not required for ad");
                    break;
                }
                final ap$a c = a.c(adUnit);
                final long n = adUnit.p();
                eo.a(3, u.a, "Pre-caching required for ad, AdUnitCachedStatus: " + c + ", skip time limit: " + n);
                if (!ap$a.d.equals(c) && n > 0L && this.n == 0L) {
                    eo.a(3, u.a, "Setting skip timer for " + n + " ms");
                    this.n = n + System.currentTimeMillis();
                }
                if (ap$a.d.equals(c)) {
                    eo.a(3, u.a, "Pre-caching completed, ad may proceed");
                    break;
                }
                if (ap$a.b.equals(c)) {
                    if (n == 0L) {
                        eo.a(3, u.a, "No skip timer");
                        this.m();
                    }
                    else {
                        if (n <= 0L) {
                            continue;
                        }
                        if (System.currentTimeMillis() <= this.n) {
                            eo.a(3, u.a, "Waiting for skip timer");
                            return;
                        }
                        eo.a(3, u.a, "Skip timer expired");
                        this.m();
                    }
                }
                else if (n == 0L) {
                    eo.a(3, u.a, "No skip timer");
                    this.m();
                }
                else {
                    if (++this.k > 1) {
                        eo.a(3, u.a, "Too many precaching attempts, precaching failed");
                        this.a(com.flurry.sdk.b.h);
                        return;
                    }
                    final int e = a.e(adUnit);
                    if (e > 0) {
                        eo.a(3, u.a, "Requesting " + e + " asset(s), attempt #" + this.k);
                        return;
                    }
                    eo.a(3, u.a, "No assets to cache");
                    break;
                }
            }
            if (this.h.size() > 0) {
                this.a(u$b.f);
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        u$a.this.o();
                    }
                });
                return;
            }
            this.a.b.O();
            this.u();
            this.v();
        }
    }
    
    private void m() {
        while (true) {
            synchronized (this) {
                if (!u$b.e.equals(this.c) || this.h == null || this.h.size() == 0) {
                    return;
                }
                final String string = this.h.remove(0).f().toString();
                eo.a(3, u.a, "Precaching required for incomplete ad unit, skipping ad group -- adspace: " + this.b + " groupId: " + (Object)string);
                if (!TextUtils.isEmpty((CharSequence)string)) {
                    while (this.h.size() > 0 && string.equals(this.h.get(0).f().toString())) {
                        this.h.remove(0);
                    }
                }
            }
            this.a.b.a("precachingAdGroupSkipped", 1);
            this.k = 0;
            this.n = 0L;
        }
    }
    
    private void n() {
    Label_0139_Outer:
        while (true) {
            while (true) {
                int n2 = 0;
                Label_0283: {
                    final int n;
                    Label_0280: {
                        Label_0256: {
                            synchronized (this) {
                                if ((u$b.c.equals(this.c) || u$b.d.equals(this.c)) && this.h != null && this.h.size() != 0) {
                                    final Iterator<Callback> iterator = (Iterator<Callback>)this.h.get(0).d().get(0).f().iterator();
                                    n = 1;
                                    while (iterator.hasNext()) {
                                        final Callback callback = iterator.next();
                                        if (callback.b().toString().equals("unfilled")) {
                                            final Iterator iterator2 = callback.c().iterator();
                                            if (!iterator2.hasNext()) {
                                                continue Label_0139_Outer;
                                            }
                                            String s = iterator2.next().toString();
                                            final int index = s.indexOf(63);
                                            if (index != -1) {
                                                s = s.substring(0, index);
                                            }
                                            if (s.equals("nextAdUnit")) {
                                                n2 = 0;
                                                break Label_0283;
                                            }
                                            break Label_0280;
                                        }
                                    }
                                    if (n != 1) {
                                        break Label_0256;
                                    }
                                    this.b(this.h.get(0));
                                    this.a(this.h.get(0), com.flurry.sdk.b.n);
                                }
                                return;
                            }
                        }
                        this.b(this.h.get(0));
                        this.b();
                        return;
                    }
                    n2 = n;
                }
                int n = n2;
                continue;
            }
        }
    }
    
    private void o() {
        while (true) {
            Context context = null;
            ViewGroup viewGroup = null;
            AdUnit adUnit = null;
        Label_0127:
            while (true) {
                Label_0109: {
                    synchronized (this) {
                        if (u$b.f.equals(this.c)) {
                            eo.a(3, u.a, "Preparing ad");
                            context = (Context)this.d.get();
                            viewGroup = (ViewGroup)this.e.get();
                            adUnit = this.h.get(0);
                            if (this.i != null) {
                                break Label_0109;
                            }
                            this.a.a(this.b, adUnit);
                            if (context != null) {
                                break Label_0127;
                            }
                            this.a(adUnit, com.flurry.sdk.b.e);
                        }
                        return;
                    }
                }
                this.a.a(this.b, this.i);
                continue;
            }
            this.j = this.a.b.a(context, adUnit, this.b, viewGroup, this.f);
            this.a(u$b.g);
            do.a().c(new ff() {
                @Override
                public void a() {
                    u$a.this.p();
                }
            });
        }
    }
    
    private void p() {
        while (true) {
            Label_0039: {
                synchronized (this) {
                    if (u$b.g.equals(this.c)) {
                        if (this.j != null) {
                            break Label_0039;
                        }
                        this.u();
                    }
                    return;
                }
            }
            eo.a(3, u.a, "Pre-rendering ad");
            final AdUnit c = this.j.c();
            final List d = c.d();
            if (d == null || d.isEmpty()) {
                this.u();
                return;
            }
            final Iterator<AdFrame> iterator = d.iterator();
            while (iterator.hasNext()) {
                final ci b = this.a.b.b(iterator.next().g().toString());
                if (b != null && (!b.c() || b.d())) {
                    this.a(c, com.flurry.sdk.b.g);
                    return;
                }
            }
            final ap a = ap.a();
            if (a.b(c)) {
                eo.a(3, u.a, "Precaching required for ad, copying assets");
                if (!ap$a.d.equals(a.c(c))) {
                    eo.a(3, u.a, "Ad assets incomplete");
                    this.a.b.a("precachingAdAssetsIncomplete", 1);
                    this.a(c, com.flurry.sdk.b.j);
                    return;
                }
                this.a.b.a("precachingAdAssetsAvailable", 1);
                if (!ap.a().d(c)) {
                    eo.a(3, u.a, "Could not copy required ad assets");
                    this.a.b.a("precachingAdAssetCopyFailed", 1);
                    this.a(c, com.flurry.sdk.b.i);
                    return;
                }
            }
            else if (a.a(c)) {
                eo.a(3, u.a, "Precaching optional for ad, copying assets");
                ap.a().d(c);
            }
            this.a(c);
            final AdFrame adFrame = d.get(0);
            if (adFrame.b() == 1) {
                eo.a(3, u.a, "Binding is HTML_URL, pre-render required");
                final long longValue = c.o();
                if (longValue > 0L) {
                    eo.a(3, u.a, "Setting pre-render timeout for " + longValue + " ms");
                    this.p = longValue + System.currentTimeMillis();
                }
                this.a(c, adFrame.c().toString());
                return;
            }
            this.t();
            this.b((Context)this.d.get(), (ViewGroup)this.e.get());
        }
    }
    
    private void q() {
        synchronized (this) {
            if (u$b.i.equals(this.c)) {
                final AdUnit c = this.j.c();
                final ap a = ap.a();
                if (!a.b(c) && a.a(c)) {
                    eo.a(3, u.a, "Precaching optional for ad, copying assets before display");
                    ap.a().d(c);
                }
                this.a(u$b.j);
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        u$a.this.r();
                    }
                });
            }
        }
    }
    
    private void r() {
        while (true) {
            final Context context;
            final ViewGroup viewGroup;
            Label_0062: {
                synchronized (this) {
                    if (u$b.j.equals(this.c)) {
                        context = (Context)this.d.get();
                        viewGroup = (ViewGroup)this.e.get();
                        if (context != null) {
                            break Label_0062;
                        }
                        this.b(com.flurry.sdk.b.e);
                    }
                    return;
                }
            }
            this.a.b.a(context, this.j.c(), this.j);
            this.j.a(context, viewGroup);
            this.v();
            this.s();
        }
    }
    
    private void s() {
        synchronized (this) {
            this.a();
            final FlurryAdListener ac = this.a.b.ac();
            eo.a(3, u.a, "Firing onRendered, listener=" + ac);
            if (ac != null) {
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        ac.onRendered(u$a.this.b);
                    }
                });
            }
        }
    }
    
    private void t() {
        synchronized (this) {
            this.a(u$b.h);
            final FlurryAdListener ac = this.a.b.ac();
            eo.a(3, u.a, "Firing spaceDidReceiveAd, listener=" + ac);
            if (ac != null) {
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        ac.spaceDidReceiveAd(u$a.this.b);
                    }
                });
            }
        }
    }
    
    private void u() {
        synchronized (this) {
            this.a();
            final FlurryAdListener ac = this.a.b.ac();
            eo.a(3, u.a, "Firing spaceDidFailToReceiveAd, listener=" + ac);
            if (ac != null) {
                do.a().a(new ff() {
                    @Override
                    public void a() {
                        ac.spaceDidFailToReceiveAd(u$a.this.b);
                    }
                });
            }
        }
    }
    
    private void v() {
        synchronized (this) {
            final List e = this.a.e(this.b);
            if (e.isEmpty()) {
                eo.a(3, u.a, "Starting ad request from EnsureCacheNotEmpty size: " + e.size());
                FlurryAdModule.getInstance().e().a(this.b, (ViewGroup)this.e.get(), this.f, false, null);
            }
        }
    }
    
    public void a() {
        synchronized (this) {
            em.a().a(this);
            this.a(u$b.a);
            this.d.clear();
            this.e.clear();
            this.f = null;
            this.g = false;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = 0;
            this.l = 0L;
            this.m = 0L;
            this.n = 0L;
            this.o = 0L;
            this.p = 0L;
            this.q = null;
        }
    }
    
    public void a(final Context context, final ViewGroup viewGroup, final FlurryAdSize f, final boolean g) {
        while (true) {
            Label_0062: {
                synchronized (this) {
                    if (this.d()) {
                        this.t();
                    }
                    else if (u$b.a.equals(this.c)) {
                        if (ev.a().c()) {
                            break Label_0062;
                        }
                        eo.a(5, u.a, "There is no network connectivity (ad will not fetch)");
                        this.u();
                    }
                    return;
                }
            }
            this.a.b.L();
            this.d = new WeakReference((T)context);
            this.e = new WeakReference((T)viewGroup);
            this.f = f;
            this.g = g;
            this.h = this.a.e(this.b);
            if (this.h.isEmpty()) {
                this.a(u$b.b);
                if (15000L > 0L) {
                    eo.a(3, u.a, "Setting ad request timeout for 15000 ms");
                    this.l = 15000L + System.currentTimeMillis();
                }
                this.a.b.e().a(this.b, (ViewGroup)this.e.get(), this.f, false, null);
                return;
            }
            this.a(u$b.e);
            do.a().c(new ff() {
                @Override
                public void a() {
                    u$a.this.l();
                }
            });
        }
    }
    
    @Override
    public void a(final fb fb) {
        while (true) {
            Label_0067: {
                synchronized (this) {
                    if (u$b.b.equals(this.c)) {
                        do.a().c(new ff() {
                            @Override
                            public void a() {
                                u$a.this.h();
                            }
                        });
                    }
                    else {
                        if (!u$b.d.equals(this.c)) {
                            break Label_0067;
                        }
                        do.a().c(new ff() {
                            @Override
                            public void a() {
                                u$a.this.i();
                            }
                        });
                    }
                    return;
                }
            }
            if (u$b.e.equals(this.c)) {
                do.a().c(new ff() {
                    @Override
                    public void a() {
                        u$a.this.j();
                    }
                });
                return;
            }
            if (u$b.g.equals(this.c)) {
                do.a().c(new ff() {
                    @Override
                    public void a() {
                        u$a.this.k();
                    }
                });
            }
        }
    }
    
    @Override
    public void a(final String s, final ar ar) {
        synchronized (this) {
            eo.a(3, u.a, "Detected asset status change for asset:" + s + " status:" + ar);
            if (u$b.e.equals(this.c) && (ar.d.equals(ar) || ar.g.equals(ar))) {
                do.a().c(new ff() {
                    @Override
                    public void a() {
                        u$a.this.l();
                    }
                });
            }
        }
    }
    
    public boolean a(final Context context, final ViewGroup viewGroup) {
        while (true) {
            Label_0064: {
                synchronized (this) {
                    final boolean equals = u$b.h.equals(this.c);
                    boolean b = false;
                    if (equals) {
                        if (ev.a().c()) {
                            break Label_0064;
                        }
                        eo.a(5, u.a, "There is no network connectivity (ad will not display)");
                        this.b(com.flurry.sdk.b.c);
                        b = false;
                    }
                    return b;
                }
            }
            if (this.j == null) {
                this.b(com.flurry.sdk.b.d);
                return false;
            }
            if (context == null) {
                this.b(com.flurry.sdk.b.e);
                return false;
            }
            this.d = new WeakReference((T)context);
            this.e = new WeakReference((T)viewGroup);
            final FlurryAdListener ac = this.a.b.ac();
            eo.a(3, u.a, "Firing shouldDisplayAd, listener=" + ac);
            Label_0234: {
                if (ac == null) {
                    break Label_0234;
                }
                while (true) {
                    try {
                        final String b2 = this.b;
                        FlurryAdType flurryAdType;
                        if (this.j instanceof j) {
                            flurryAdType = FlurryAdType.WEB_BANNER;
                        }
                        else {
                            flurryAdType = FlurryAdType.WEB_TAKEOVER;
                        }
                        final int shouldDisplayAd = ac.shouldDisplayAd(b2, flurryAdType) ? 1 : 0;
                        boolean b = false;
                        if (shouldDisplayAd != 0) {
                            if (viewGroup != null && this.j instanceof j) {
                                viewGroup.setBackgroundColor(369098752);
                            }
                            this.a(u$b.i);
                            do.a().c(new ff() {
                                @Override
                                public void a() {
                                    u$a.this.q();
                                }
                            });
                            b = true;
                            return b;
                        }
                        return b;
                    }
                    catch (Throwable t) {
                        eo.a(6, u.a, "AdListener.shouldDisplayAd", t);
                        final int shouldDisplayAd = 0;
                        continue;
                    }
                    break;
                }
            }
        }
    }
    
    public boolean a(final List list) {
        while (true) {
            synchronized (this) {
                boolean b;
                if (u$b.d.equals(this.c)) {
                    if (list == null || list.isEmpty() || list.size() > 1) {
                        b = false;
                    }
                    else {
                        final AdUnit adUnit = list.get(0);
                        if (!adUnit.s()) {
                            b = false;
                        }
                        else {
                            final List d = adUnit.d();
                            if (d == null || d.isEmpty()) {
                                return false;
                            }
                            if (d.get(0).b() == 6) {
                                return false;
                            }
                            this.h.remove(0);
                            String string = null;
                            if (adUnit != null) {
                                final Map t = adUnit.t();
                                string = null;
                                if (t != null) {
                                    final boolean containsKey = t.containsKey("GROUP_ID");
                                    string = null;
                                    if (containsKey) {
                                        string = t.get("GROUP_ID").toString();
                                    }
                                }
                            }
                            if (string == null) {
                                final AdFrame adFrame = adUnit.d().get(0);
                                final List d2 = this.i.d();
                                d2.remove(0);
                                d2.add(0, adFrame);
                                adUnit.a(d2);
                                adUnit.a(this.i.f());
                                if (adUnit.t() != null && adUnit.t().isEmpty()) {
                                    adUnit.a(this.i.t());
                                }
                                adUnit.b(this.i.g());
                            }
                            this.h.add(0, adUnit);
                            this.a(u$b.e);
                            do.a().c(new ff() {
                                @Override
                                public void a() {
                                    u$a.this.l();
                                }
                            });
                            b = true;
                        }
                    }
                }
                else {
                    b = false;
                }
                return b;
            }
            return false;
        }
    }
    
    public void b() {
        synchronized (this) {
            this.a.c.a(this.b, this.h.get(0));
            this.h.remove(0);
            this.a();
        }
    }
    
    public void c() {
        synchronized (this) {
            final l a = this.a.d.a(this.b);
            if (a != null) {
                a.d();
                a.removeAllViews();
                final ViewGroup viewGroup = a.getViewGroup();
                if (viewGroup != null) {
                    viewGroup.removeView((View)a);
                }
                this.a.d.a(a);
            }
            this.a.b.g(this.b);
            this.a();
        }
    }
    
    public boolean d() {
        synchronized (this) {
            return u$b.h.equals(this.c);
        }
    }
    
    public String e() {
        synchronized (this) {
            return this.q;
        }
    }
    
    public void f() {
        synchronized (this) {
            if (u$b.b.equals(this.c)) {
                this.a(u$b.e);
                this.h = this.a.e(this.b);
                this.l();
            }
        }
    }
    
    public void g() {
        while (true) {
            final ViewGroup viewGroup;
            final FlurryAdSize f;
            Label_0087: {
                synchronized (this) {
                    if (u$b.c.equals(this.c)) {
                        viewGroup = (ViewGroup)this.e.get();
                        f = this.f;
                        this.h = this.a.e(this.b);
                        if (!this.h.isEmpty()) {
                            break Label_0087;
                        }
                        eo.a(6, u.a, "An auction is required, but there is no ad unit!");
                        this.u();
                    }
                    return;
                }
            }
            this.a(u$b.d);
            final AdUnit i = this.h.get(0);
            final long longValue = i.o();
            if (longValue > 0L) {
                eo.a(3, u.a, "Setting CSRTB auction timeout for " + longValue + " ms");
                this.m = longValue + System.currentTimeMillis();
            }
            this.i = i;
            this.a.b.e().a(this.b, viewGroup, f, false, i);
        }
    }
}
