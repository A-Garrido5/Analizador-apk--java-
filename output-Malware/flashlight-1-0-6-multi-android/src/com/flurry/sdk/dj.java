// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.IOException;
import java.util.Collections;
import android.os.SystemClock;
import java.util.Locale;
import java.util.TimeZone;
import android.os.Bundle;
import java.util.Arrays;
import android.app.Activity;
import android.content.Context;
import com.flurry.android.impl.analytics.FlurryAnalyticsModule;
import java.nio.ByteBuffer;
import java.util.Iterator;
import java.io.OutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.util.Collection;
import java.util.ArrayList;
import java.util.HashMap;
import com.google.android.gms.ads.identifier.AdvertisingIdClient$Info;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.List;
import java.util.Map;
import android.location.Location;

public class dj implements dm$b, dq$a
{
    static int a;
    static int b;
    static int c;
    static int d;
    static int e;
    static int f;
    private static final String g;
    private String A;
    private String B;
    private byte C;
    private Location D;
    private boolean E;
    private String F;
    private byte G;
    private long H;
    private long I;
    private final Map J;
    private final List K;
    private boolean L;
    private int M;
    private final List N;
    private int O;
    private int P;
    private final cy Q;
    private Map R;
    private dm S;
    private int T;
    private boolean U;
    private final AtomicInteger h;
    private final AtomicInteger i;
    private final AtomicInteger j;
    private final String k;
    private String l;
    private WeakReference m;
    private File n;
    private List o;
    private final Map p;
    private boolean q;
    private long r;
    private List s;
    private AdvertisingIdClient$Info t;
    private byte[] u;
    private String v;
    private long w;
    private long x;
    private long y;
    private long z;
    
    static {
        g = dj.class.getSimpleName();
        dj.a = 100;
        dj.b = 10;
        dj.c = 1000;
        dj.d = 160000;
        dj.e = 50;
        dj.f = 20;
    }
    
    public dj(final String k) {
        this.h = new AtomicInteger(0);
        this.i = new AtomicInteger(0);
        this.j = new AtomicInteger(0);
        this.n = null;
        this.p = new HashMap();
        this.s = new ArrayList();
        this.A = "";
        this.B = "";
        this.C = -1;
        this.J = new HashMap();
        this.K = new ArrayList();
        this.N = new ArrayList();
        this.Q = new cy();
        this.U = false;
        eo.a(4, dj.g, "Creating new Flurry session");
        this.k = k;
        this.m = new WeakReference(null);
    }
    
    private void A() {
        try {
            eo.a(3, dj.g, "generating agent report");
            final dc dc = new dc(this.k, this.l, this.q, this.o(), this.r, this.w, this.s, this.p(), this.Q.a(false), this.a(), cx.a().b(), System.currentTimeMillis());
            this.o = new ArrayList(this.s);
            if (dc.a() != null) {
                eo.a(3, dj.g, "generated report of size " + dc.a().length + " with " + this.s.size() + " reports.");
                this.a(dc.a());
                this.s.removeAll(this.o);
                this.o = null;
                this.B();
                return;
            }
            eo.d(dj.g, "Error generating report");
        }
        catch (Throwable t) {
            eo.a(6, dj.g, "", t);
        }
    }
    
    private void B() {
        synchronized (this) {
            if (!fd.a(this.n)) {
                eo.d(dj.g, "Error persisting report: could not create directory");
            }
            else {
                try {
                    final DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(this.n));
                    final dk dk = new dk();
                    dk.a(this.q);
                    dk.a(this.r);
                    dk.a(this.s);
                    dk.a(dataOutputStream, this.k, this.i());
                }
                catch (Exception ex) {
                    eo.b(dj.g, "Error saving persistent data", ex);
                }
            }
        }
    }
    
    private void C() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_1       
        //     2: aload_0        
        //     3: monitorenter   
        //     4: iconst_4       
        //     5: getstatic       com/flurry/sdk/dj.g:Ljava/lang/String;
        //     8: new             Ljava/lang/StringBuilder;
        //    11: dup            
        //    12: ldc_w           "Loading persistent data: "
        //    15: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    18: aload_0        
        //    19: getfield        com/flurry/sdk/dj.n:Ljava/io/File;
        //    22: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //    25: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    28: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    31: invokestatic    com/flurry/sdk/eo.a:(ILjava/lang/String;Ljava/lang/String;)V
        //    34: aload_0        
        //    35: getfield        com/flurry/sdk/dj.n:Ljava/io/File;
        //    38: invokevirtual   java/io/File.exists:()Z
        //    41: istore_3       
        //    42: iload_3        
        //    43: ifeq            224
        //    46: new             Ljava/io/FileInputStream;
        //    49: dup            
        //    50: aload_0        
        //    51: getfield        com/flurry/sdk/dj.n:Ljava/io/File;
        //    54: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //    57: astore          5
        //    59: new             Ljava/io/DataInputStream;
        //    62: dup            
        //    63: aload           5
        //    65: invokespecial   java/io/DataInputStream.<init>:(Ljava/io/InputStream;)V
        //    68: astore          6
        //    70: new             Lcom/flurry/sdk/dk;
        //    73: dup            
        //    74: invokespecial   com/flurry/sdk/dk.<init>:()V
        //    77: astore          7
        //    79: aload           7
        //    81: aload           6
        //    83: aload_0        
        //    84: getfield        com/flurry/sdk/dj.k:Ljava/lang/String;
        //    87: invokevirtual   com/flurry/sdk/dk.a:(Ljava/io/DataInputStream;Ljava/lang/String;)Z
        //    90: pop            
        //    91: aload_0        
        //    92: aload           7
        //    94: invokevirtual   com/flurry/sdk/dk.a:()Z
        //    97: putfield        com/flurry/sdk/dj.q:Z
        //   100: aload_0        
        //   101: aload           7
        //   103: invokevirtual   com/flurry/sdk/dk.c:()J
        //   106: putfield        com/flurry/sdk/dj.r:J
        //   109: aload_0        
        //   110: aload           7
        //   112: invokevirtual   com/flurry/sdk/dk.b:()Ljava/util/List;
        //   115: putfield        com/flurry/sdk/dj.s:Ljava/util/List;
        //   118: iconst_1       
        //   119: istore          4
        //   121: aload           6
        //   123: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   126: aload           5
        //   128: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   131: iload           4
        //   133: ifne            154
        //   136: iconst_3       
        //   137: getstatic       com/flurry/sdk/dj.g:Ljava/lang/String;
        //   140: ldc_w           "Deleting agent cache file"
        //   143: invokestatic    com/flurry/sdk/eo.a:(ILjava/lang/String;Ljava/lang/String;)V
        //   146: aload_0        
        //   147: getfield        com/flurry/sdk/dj.n:Ljava/io/File;
        //   150: invokevirtual   java/io/File.delete:()Z
        //   153: pop            
        //   154: iload           4
        //   156: ifne            172
        //   159: aload_0        
        //   160: iconst_0       
        //   161: putfield        com/flurry/sdk/dj.q:Z
        //   164: aload_0        
        //   165: aload_0        
        //   166: getfield        com/flurry/sdk/dj.w:J
        //   169: putfield        com/flurry/sdk/dj.r:J
        //   172: aload_0        
        //   173: monitorexit    
        //   174: return         
        //   175: astore          8
        //   177: aconst_null    
        //   178: astore          6
        //   180: getstatic       com/flurry/sdk/dj.g:Ljava/lang/String;
        //   183: ldc_w           "Error loading persistent data"
        //   186: aload           8
        //   188: invokestatic    com/flurry/sdk/eo.b:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   191: aload           6
        //   193: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   196: aload_1        
        //   197: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   200: iconst_0       
        //   201: istore          4
        //   203: goto            131
        //   206: aload           6
        //   208: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   211: aload           5
        //   213: invokestatic    com/flurry/sdk/fe.a:(Ljava/io/Closeable;)V
        //   216: aload           9
        //   218: athrow         
        //   219: astore_2       
        //   220: aload_0        
        //   221: monitorexit    
        //   222: aload_2        
        //   223: athrow         
        //   224: iconst_4       
        //   225: getstatic       com/flurry/sdk/dj.g:Ljava/lang/String;
        //   228: ldc_w           "Agent cache file doesn't exist."
        //   231: invokestatic    com/flurry/sdk/eo.a:(ILjava/lang/String;Ljava/lang/String;)V
        //   234: iconst_0       
        //   235: istore          4
        //   237: goto            154
        //   240: astore          9
        //   242: aconst_null    
        //   243: astore          6
        //   245: goto            206
        //   248: astore          9
        //   250: goto            206
        //   253: astore          9
        //   255: aload_1        
        //   256: astore          5
        //   258: goto            206
        //   261: astore          8
        //   263: aload           5
        //   265: astore_1       
        //   266: aconst_null    
        //   267: astore          6
        //   269: goto            180
        //   272: astore          8
        //   274: aload           5
        //   276: astore_1       
        //   277: goto            180
        //   280: astore          9
        //   282: aconst_null    
        //   283: astore          6
        //   285: aconst_null    
        //   286: astore          5
        //   288: goto            206
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  4      42     219    224    Any
        //  46     59     175    180    Ljava/lang/Exception;
        //  46     59     280    291    Any
        //  59     70     261    272    Ljava/lang/Exception;
        //  59     70     240    248    Any
        //  70     118    272    280    Ljava/lang/Exception;
        //  70     118    248    253    Any
        //  121    131    219    224    Any
        //  136    154    219    224    Any
        //  159    172    219    224    Any
        //  180    191    253    261    Any
        //  191    200    219    224    Any
        //  206    219    219    224    Any
        //  224    234    219    224    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 141, Size: 141
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3303)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void D() {
        ++this.T;
    }
    
    private void E() {
        if (this.T > 0) {
            --this.T;
        }
    }
    
    private String F() {
        return ".flurryagent." + Integer.toString(this.k.hashCode(), 16);
    }
    
    private int G() {
        return this.h.incrementAndGet();
    }
    
    private int H() {
        return this.i.incrementAndGet();
    }
    
    private void a(final long n) {
        synchronized (this) {
            for (final db db : this.K) {
                if (db.a() && !db.b()) {
                    db.a(n);
                }
            }
        }
    }
    // monitorexit(this)
    
    private void a(final dr dr, final ByteBuffer byteBuffer) {
        synchronized (this.p) {
            this.p.put(dr, byteBuffer);
        }
    }
    
    private void a(final byte[] array) {
        FlurryAnalyticsModule.getInstance().a().b(array, this.k, new StringBuilder().append(dn.a().b()).toString());
    }
    
    private Map d(final Context context) {
        final boolean b = context instanceof Activity;
        Map<String, ArrayList> map = null;
        if (b) {
            final Bundle extras = ((Activity)context).getIntent().getExtras();
            map = null;
            if (extras != null) {
                eo.a(3, dj.g, "Launch Options Bundle is present " + extras.toString());
                final HashMap<String, ArrayList> hashMap = new HashMap<String, ArrayList>();
                for (final String s : extras.keySet()) {
                    if (s != null) {
                        final Object value = extras.get(s);
                        String string;
                        if (value != null) {
                            string = value.toString();
                        }
                        else {
                            string = "null";
                        }
                        hashMap.put(s, new ArrayList(Arrays.asList(string)));
                        eo.a(3, dj.g, "Launch options Key: " + s + ". Its value: " + string);
                    }
                }
                map = hashMap;
            }
        }
        return map;
    }
    
    private void u() {
        final dq a = dp.a();
        this.G = (byte)a.a("Gender");
        a.a("Gender", this);
        eo.a(4, dj.g, "initSettings, Gender = " + this.G);
        this.F = (String)a.a("UserId");
        a.a("UserId", this);
        eo.a(4, dj.g, "initSettings, UserId = " + this.F);
        this.E = (boolean)a.a("LogEvents");
        a.a("LogEvents", this);
        eo.a(4, dj.g, "initSettings, LogEvents = " + this.E);
        this.H = (long)a.a("Age");
        a.a("Age", this);
        eo.a(4, dj.g, "initSettings, BirthDate = " + this.H);
        this.I = (long)a.a("ContinueSessionMillis");
        a.a("ContinueSessionMillis", this);
        eo.a(4, dj.g, "initSettings, ContinueSessionMillis = " + this.I);
    }
    
    private void v() {
        try {
            if (this.v != null) {
                eo.a(3, dj.g, "Fetched phone id");
                this.a(dr.a, ByteBuffer.wrap(this.v.getBytes()));
            }
            if (this.u != null) {
                eo.a(3, dj.g, "Fetched hashed IMEI");
                this.a(dr.b, ByteBuffer.wrap(this.u));
            }
            if (this.t != null) {
                eo.a(3, dj.g, "Fetched advertising id");
                this.a(dr.c, ByteBuffer.wrap(this.t.getId().getBytes()));
            }
            this.A();
        }
        catch (Throwable t) {
            eo.a(6, dj.g, "", t);
        }
    }
    
    private void w() {
        this.a(new ff() {
            @Override
            public void a() {
                final dh d = dj.this.d();
                dj.this.s.clear();
                dj.this.s.add(d);
                dj.this.B();
            }
        });
    }
    
    private void x() {
        this.a(new ff() {
            @Override
            public void a() {
                dj.this.y();
            }
        });
    }
    
    private void y() {
        while (true) {
            while (true) {
                Label_0045: {
                    try {
                        synchronized (this) {
                            if (this.s.size() <= 0) {
                                break Label_0045;
                            }
                            final int n = 1;
                            // monitorexit(this)
                            if (n != 0) {
                                this.A();
                                return;
                            }
                            break;
                        }
                    }
                    catch (Throwable t) {
                        eo.a(6, dj.g, "", t);
                    }
                    break;
                }
                final int n = 0;
                continue;
            }
        }
    }
    
    private void z() {
        this.a(new ff() {
            @Override
            public void a() {
                dz.a().d();
            }
        });
    }
    
    Map a() {
        return this.R;
    }
    
    public void a(final Context context) {
        synchronized (this) {
            eo.a(4, dj.g, "Initializing new Flurry session with context:" + context);
            this.m = new WeakReference((T)context);
            this.S = new dm(this);
            this.n = context.getFileStreamPath(this.F());
            this.l = eb.a();
            this.y = -1L;
            this.O = 0;
            this.B = TimeZone.getDefault().getID();
            this.A = Locale.getDefault().getLanguage() + "_" + Locale.getDefault().getCountry();
            this.L = true;
            this.M = 0;
            this.P = 0;
            this.R = this.d(context);
            this.u();
            final long elapsedRealtime = SystemClock.elapsedRealtime();
            this.w = System.currentTimeMillis();
            this.x = elapsedRealtime;
            this.a(new ff() {
                @Override
                public void a() {
                    dj.this.t = dw.a();
                }
            });
            this.a(new ff() {
                @Override
                public void a() {
                    dj.this.u = dy.a();
                }
            });
            this.a(new ff() {
                @Override
                public void a() {
                    dj.this.v = ea.a();
                }
            });
            this.a(new ff() {
                @Override
                public void a() {
                    dj.this.C();
                }
            });
            this.a(new ff() {
                @Override
                public void a() {
                    dj.this.v();
                }
            });
            ep.a().a(this, context);
            this.U = true;
        }
    }
    
    public void a(final ff ff) {
        do.a().c(ff);
    }
    
    @Override
    public void a(final String s, final Object o) {
        if (s.equals("Gender")) {
            this.G = (byte)o;
            eo.a(4, dj.g, "onSettingUpdate, Gender = " + this.G);
            return;
        }
        if (s.equals("UserId")) {
            this.F = (String)o;
            eo.a(4, dj.g, "onSettingUpdate, UserId = " + this.F);
            return;
        }
        if (s.equals("LogEvents")) {
            this.E = (boolean)o;
            eo.a(4, dj.g, "onSettingUpdate, LogEvents = " + this.E);
            return;
        }
        if (s.equals("Age")) {
            this.H = (long)o;
            eo.a(4, dj.g, "onSettingUpdate, Birthdate = " + this.H);
            return;
        }
        if (s.equals("ContinueSessionMillis")) {
            this.I = (long)o;
            eo.a(4, dj.g, "onSettingUpdate, ContinueSessionMillis = " + this.I);
            return;
        }
        eo.a(6, dj.g, "onSettingUpdate internal error!");
    }
    
    public void a(final String s, final String s2, final String s3, final Throwable t) {
        // monitorenter(this)
        Label_0117: {
            if (s == null) {
                break Label_0117;
            }
            while (true) {
                Label_0244: {
                    while (true) {
                        int n = 0;
                        Label_0238: {
                            try {
                                boolean b;
                                if ("uncaught".equals(s)) {
                                    b = true;
                                }
                                else {
                                    b = false;
                                }
                                ++this.O;
                                if (this.N.size() < dj.e) {
                                    final da da = new da(this.H(), Long.valueOf(System.currentTimeMillis()), s, s2, s3, t);
                                    this.N.add(da);
                                    eo.d(dj.g, "Error logged: " + da.c());
                                }
                                else {
                                    if (!b) {
                                        break Label_0244;
                                    }
                                    n = 0;
                                    if (n < this.N.size()) {
                                        final da da2 = this.N.get(n);
                                        if (da2.c() == null || "uncaught".equals(da2.c())) {
                                            break Label_0238;
                                        }
                                        this.N.set(n, new da(this.H(), Long.valueOf(System.currentTimeMillis()), s, s2, s3, t));
                                    }
                                }
                                return;
                            }
                            finally {
                            }
                            // monitorexit(this)
                        }
                        ++n;
                        continue;
                    }
                }
                eo.d(dj.g, "Max errors logged. No more errors logged.");
            }
        }
    }
    
    public void a(final String s, final Map map) {
        while (true) {
            while (true) {
                db db = null;
                HashMap hashMap = null;
                Label_0208: {
                    synchronized (this) {
                        final Iterator<db> iterator = (Iterator<db>)this.K.iterator();
                        while (iterator.hasNext()) {
                            db = iterator.next();
                            if (db.a(s)) {
                                final long n = SystemClock.elapsedRealtime() - this.x;
                                if (map != null && map.size() > 0 && this.M < dj.d) {
                                    final int n2 = this.M - db.d();
                                    hashMap = new HashMap(db.c());
                                    db.a(map);
                                    if (n2 + db.d() > dj.d) {
                                        break Label_0208;
                                    }
                                    if (db.c().size() > dj.b) {
                                        eo.d(dj.g, "MaxEventParams exceeded on endEvent: " + db.c().size());
                                        db.b(hashMap);
                                    }
                                    else {
                                        this.M = n2 + db.d();
                                    }
                                }
                                db.a(n);
                                break;
                            }
                        }
                        return;
                    }
                }
                db.b(hashMap);
                this.L = false;
                this.M = dj.d;
                eo.d(dj.g, "Event Log size exceeded. No more event details logged.");
                continue;
            }
        }
    }
    
    public void a(final String s, final Map map, final boolean b) {
    Label_0163_Outer:
        while (true) {
            while (true) {
                Label_0378: {
                    Label_0370: {
                        long n = 0L;
                        String a = null;
                        Map<Object, Object> emptyMap = null;
                    Label_0281:
                        while (true) {
                            final cx$a cx$a;
                            Label_0242: {
                                Label_0215: {
                                    synchronized (this) {
                                        n = SystemClock.elapsedRealtime() - this.x;
                                        a = fe.a(s);
                                        if (a.length() != 0) {
                                            cx$a = this.J.get(a);
                                            if (cx$a != null) {
                                                break Label_0242;
                                            }
                                            if (this.J.size() >= dj.a) {
                                                break Label_0215;
                                            }
                                            final cx$a cx$a2 = new cx$a();
                                            cx$a2.a = 1;
                                            this.J.put(a, cx$a2);
                                            eo.d(dj.g, "Event count started: " + a);
                                            if (!this.E || this.K.size() >= dj.c || this.M >= dj.d) {
                                                break Label_0370;
                                            }
                                            if (map != null) {
                                                break Label_0378;
                                            }
                                            emptyMap = Collections.emptyMap();
                                            if (emptyMap.size() <= dj.b) {
                                                break Label_0281;
                                            }
                                            eo.d(dj.g, "MaxEventParams exceeded: " + emptyMap.size());
                                        }
                                        return;
                                    }
                                }
                                eo.d(dj.g, "Too many different events. Event not counted: " + a);
                                continue Label_0163_Outer;
                            }
                            ++cx$a.a;
                            eo.d(dj.g, "Event count incremented: " + a);
                            continue Label_0163_Outer;
                        }
                        final db db = new db(this.G(), a, emptyMap, n, b);
                        if (db.d() + this.M <= dj.d) {
                            this.K.add(db);
                            this.M += db.d();
                            return;
                        }
                        this.M = dj.d;
                        this.L = false;
                        eo.d(dj.g, "Event Log size exceeded. No more event details logged.");
                        return;
                    }
                    this.L = false;
                    return;
                }
                Map<Object, Object> emptyMap = (Map<Object, Object>)map;
                continue;
            }
        }
    }
    
    public void b() {
        this.q = true;
    }
    
    public void b(final Context context) {
        synchronized (this) {
            if (this.U) {
                eo.d(dj.g, "Start session with context: " + context + " count:" + this.g());
                this.m = new WeakReference((T)context);
                if (this.S.b()) {
                    this.S.a();
                }
                this.D();
                dz.a().c();
                this.D = dz.a().f();
                ep.a().b(this, context);
            }
        }
    }
    
    public void c() {
        synchronized (this) {
            if (this.U) {
                eo.d(dj.g, "Finalize session");
                if (this.S.b()) {
                    this.S.a();
                }
                if (this.g() != 0) {
                    eo.a(6, dj.g, "Session with apiKey = " + this.j() + " was ended while getSessionCount() is not 0");
                }
                this.T = 0;
                this.x();
                ep.a().a(this);
                this.a(new ff() {
                    @Override
                    public void a() {
                        dl.a().a(dj.this.j());
                    }
                });
                dp.a().b("Gender", this);
                dp.a().b("UserId", this);
                dp.a().b("Age", this);
                dp.a().b("LogEvents", this);
                dp.a().b("ContinueSessionMillis", this);
            }
        }
    }
    
    public void c(final Context context) {
        synchronized (this) {
            if (this.U) {
                ep.a().c(this, context);
                this.D = dz.a().f();
                this.z();
                this.E();
                eo.d(dj.g, "End session with context: " + context + " count:" + this.g());
                this.a(this.y = SystemClock.elapsedRealtime() - this.x);
                this.w();
                if (this.g() == 0) {
                    this.S.a(this.I);
                }
            }
        }
    }
    
    dh d() {
        synchronized (this) {
            final di di = new di();
            di.a(this.l);
            di.a(this.w);
            di.b(this.y);
            di.c(this.z);
            di.b(this.k());
            di.c(this.l());
            di.a((int)this.C);
            di.d(this.h());
            di.a(this.D);
            di.b(this.f());
            di.a(this.G);
            di.a(Long.valueOf(this.H));
            di.a(this.t());
            di.a(this.r());
            di.a(this.L);
            di.b(this.s());
            di.c(this.O);
            try {
                final dh dh = new dh(di);
                if (dh == null) {
                    eo.d(dj.g, "New session report wasn't created");
                }
                return dh;
            }
            catch (IOException ex) {
                ex.printStackTrace();
                final dh dh = null;
            }
        }
    }
    
    public void e() {
        synchronized (this) {
            ++this.P;
        }
    }
    
    int f() {
        return this.P;
    }
    
    int g() {
        return this.T;
    }
    
    String h() {
        if (this.F == null) {
            return "";
        }
        return this.F;
    }
    
    public String i() {
        return this.v;
    }
    
    public String j() {
        return this.k;
    }
    
    public String k() {
        return this.A;
    }
    
    public String l() {
        return this.B;
    }
    
    public long m() {
        return this.w;
    }
    
    public long n() {
        return this.x;
    }
    
    public boolean o() {
        return this.t == null || !this.t.isLimitAdTrackingEnabled();
    }
    
    public Map p() {
        return new HashMap(this.p);
    }
    
    @Override
    public void q() {
        this.c();
    }
    
    List r() {
        return this.K;
    }
    
    List s() {
        return this.N;
    }
    
    Map t() {
        return this.J;
    }
}
