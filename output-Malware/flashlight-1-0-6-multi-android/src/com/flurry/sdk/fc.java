// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import android.util.Pair;
import android.util.DisplayMetrics;
import android.annotation.SuppressLint;
import java.lang.reflect.Method;
import android.view.Display;
import android.os.Build$VERSION;
import android.view.WindowManager;
import android.graphics.Point;

public class fc
{
    public static int a(final int n) {
        return Math.round(n / c().density);
    }
    
    @SuppressLint({ "NewApi" })
    public static Point a() {
        final Display defaultDisplay = ((WindowManager)do.a().b().getSystemService("window")).getDefaultDisplay();
        final Point point = new Point();
        if (Build$VERSION.SDK_INT >= 17) {
            defaultDisplay.getRealSize(point);
            return point;
        }
        if (Build$VERSION.SDK_INT >= 14) {
            try {
                final Method method = Display.class.getMethod("getRawHeight", (Class<?>[])new Class[0]);
                point.x = (int)Display.class.getMethod("getRawWidth", (Class<?>[])new Class[0]).invoke(defaultDisplay, new Object[0]);
                point.y = (int)method.invoke(defaultDisplay, new Object[0]);
                return point;
            }
            catch (Throwable t) {
                defaultDisplay.getSize(point);
                return point;
            }
        }
        if (Build$VERSION.SDK_INT >= 13) {
            defaultDisplay.getSize(point);
            return point;
        }
        point.x = defaultDisplay.getWidth();
        point.y = defaultDisplay.getHeight();
        return point;
    }
    
    public static int b(final int n) {
        return Math.round(n * c().density);
    }
    
    public static DisplayMetrics b() {
        final Display defaultDisplay = ((WindowManager)do.a().b().getSystemService("window")).getDefaultDisplay();
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        defaultDisplay.getMetrics(displayMetrics);
        return displayMetrics;
    }
    
    @SuppressLint({ "NewApi" })
    public static DisplayMetrics c() {
        final Display defaultDisplay = ((WindowManager)do.a().b().getSystemService("window")).getDefaultDisplay();
        if (Build$VERSION.SDK_INT >= 17) {
            final DisplayMetrics displayMetrics = new DisplayMetrics();
            defaultDisplay.getRealMetrics(displayMetrics);
            return displayMetrics;
        }
        if (Build$VERSION.SDK_INT >= 14) {
            try {
                final DisplayMetrics displayMetrics2 = new DisplayMetrics();
                Display.class.getMethod("getRealMetrics", (Class<?>[])new Class[0]).invoke(defaultDisplay, displayMetrics2);
                return displayMetrics2;
            }
            catch (Exception ex) {}
        }
        return b();
    }
    
    public static Pair c(final int n) {
        final int g = g();
        final int h = h();
        switch (n) {
            default: {
                return Pair.create((Object)g, (Object)h);
            }
            case 2: {
                return Pair.create((Object)h, (Object)g);
            }
        }
    }
    
    public static float d() {
        return c().density;
    }
    
    public static int e() {
        return a().x;
    }
    
    public static int f() {
        return a().y;
    }
    
    public static int g() {
        return a(e());
    }
    
    public static int h() {
        return a(f());
    }
    
    public static int i() {
        final Point a = a();
        if (a.x == a.y) {
            return 3;
        }
        if (a.x < a.y) {
            return 1;
        }
        return 2;
    }
    
    public static Pair j() {
        return Pair.create((Object)g(), (Object)h());
    }
}
