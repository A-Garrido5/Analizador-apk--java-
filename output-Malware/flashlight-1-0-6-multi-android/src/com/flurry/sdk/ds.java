// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Set;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

public class ds
{
    private final Map a;
    private int b;
    
    public ds() {
        this.a = new HashMap();
    }
    
    private List a(final Object o, final boolean b) {
        List list = this.a.get(o);
        if (b && list == null) {
            if (this.b > 0) {
                list = new ArrayList(this.b);
            }
            else {
                list = new ArrayList();
            }
            this.a.put(o, list);
        }
        return list;
    }
    
    public List a(final Object o) {
        List<Object> list;
        if (o == null) {
            list = Collections.emptyList();
        }
        else {
            list = (List<Object>)this.a(o, false);
            if (list == null) {
                return Collections.emptyList();
            }
        }
        return list;
    }
    
    public void a() {
        this.a.clear();
    }
    
    public void a(final ds ds) {
        if (ds != null) {
            for (final Map.Entry<Object, V> entry : ds.a.entrySet()) {
                this.a.put(entry.getKey(), entry.getValue());
            }
        }
    }
    
    public void a(final Object o, final Object o2) {
        if (o == null) {
            return;
        }
        this.a(o, true).add(o2);
    }
    
    public Collection b() {
        final ArrayList<AbstractMap.SimpleImmutableEntry<K, Object>> list = new ArrayList<AbstractMap.SimpleImmutableEntry<K, Object>>();
        for (final Map.Entry<K, List> entry : this.a.entrySet()) {
            final Iterator<Object> iterator2 = entry.getValue().iterator();
            while (iterator2.hasNext()) {
                list.add((AbstractMap.SimpleImmutableEntry<K, Object>)new AbstractMap.SimpleImmutableEntry<Object, Object>(entry.getKey(), iterator2.next()));
            }
        }
        return list;
    }
    
    public boolean b(final Object o) {
        return o != null && this.a.remove(o) != null;
    }
    
    public boolean b(final Object o, final Object o2) {
        boolean remove = false;
        if (o != null) {
            final List a = this.a(o, false);
            remove = false;
            if (a != null) {
                remove = a.remove(o2);
                if (a.size() == 0) {
                    this.a.remove(o);
                    return remove;
                }
            }
        }
        return remove;
    }
    
    public Set c() {
        return this.a.keySet();
    }
}
