// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.HashMap;

public abstract class nv extends jy
{
    protected final nh b;
    protected final sh c;
    protected final is d;
    protected final sh e;
    protected final HashMap f;
    protected jg g;
    
    protected nv(final sh c, final nh b, final is d, final Class clazz) {
        this.c = c;
        this.b = b;
        this.d = d;
        this.f = new HashMap();
        if (clazz == null) {
            this.e = null;
            return;
        }
        this.e = c.g(clazz);
    }
    
    protected final jg a(final iz iz) {
        if (this.e == null) {
            return null;
        }
        synchronized (this.e) {
            if (this.g == null) {
                this.g = iz.b().a(iz.a(), this.e, this.d);
            }
            return this.g;
        }
    }
    
    protected final jg a(final iz iz, final String s) {
        // monitorexit(hashMap)
        while (true) {
            sh sh = null;
            Label_0089: {
                jg jg = null;
                Label_0084: {
                    synchronized (this.f) {
                        jg = this.f.get(s);
                        if (jg != null) {
                            break Label_0084;
                        }
                        sh = this.b.a(s);
                        if (sh != null) {
                            break Label_0089;
                        }
                        if (this.e == null) {
                            throw iz.a(this.c, s);
                        }
                    }
                    jg = this.a(iz);
                    this.f.put(s, jg);
                }
                return jg;
            }
            if (this.c != null && this.c.getClass() == sh.getClass()) {
                sh = this.c.f(sh.p());
            }
            jg jg = iz.b().a(iz.a(), sh, this.d);
            continue;
        }
    }
    
    @Override
    public String b() {
        return null;
    }
    
    public String c() {
        return this.c.p().getName();
    }
    
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append('[').append(this.getClass().getName());
        sb.append("; base-type:").append(this.c);
        sb.append("; id-resolver: ").append(this.b);
        sb.append(']');
        return sb.toString();
    }
}
