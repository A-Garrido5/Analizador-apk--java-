// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.Map;
import java.util.HashSet;

@kb
public class po extends pf implements jt
{
    protected static final sh a;
    protected final is b;
    protected final HashSet c;
    protected final boolean d;
    protected final sh e;
    protected final sh f;
    protected jk g;
    protected jk h;
    protected final jz i;
    protected ov j;
    
    static {
        a = qs.b();
    }
    
    protected po() {
        this(null, null, null, false, null, null, null, null);
    }
    
    protected po(final HashSet c, final sh e, final sh f, final boolean d, final jz i, final jk g, final jk h, final is b) {
        super(Map.class, false);
        this.b = b;
        this.c = c;
        this.e = e;
        this.f = f;
        this.d = d;
        this.i = i;
        this.g = g;
        this.h = h;
        this.j = ov.a();
    }
    
    public static po a(final String[] array, final sh sh, final boolean b, final jz jz, final is is, final jk jk, final jk jk2) {
        final HashSet a = a(array);
        sh sh2;
        sh k;
        if (sh == null) {
            k = (sh2 = po.a);
        }
        else {
            k = sh.k();
            sh2 = sh.g();
        }
        boolean b2;
        if (!b) {
            b2 = (sh2 != null && sh2.u());
        }
        else {
            b2 = b;
        }
        return new po(a, k, sh2, b2, jz, jk, jk2, is);
    }
    
    private static HashSet a(final String[] array) {
        HashSet<String> set;
        if (array == null || array.length == 0) {
            set = null;
        }
        else {
            set = new HashSet<String>(array.length);
            for (int length = array.length, i = 0; i < length; ++i) {
                set.add(array[i]);
            }
        }
        return set;
    }
    
    protected final jk a(final ov ov, final sh sh, final jw jw) {
        final ov$d a = ov.a(sh, jw, this.b);
        if (ov != a.b) {
            this.j = a.b;
        }
        return a.a;
    }
    
    protected final jk a(final ov ov, final Class clazz, final jw jw) {
        final ov$d a = ov.a(clazz, jw, this.b);
        if (ov != a.b) {
            this.j = a.b;
        }
        return a.a;
    }
    
    @Override
    public pf a(final jz jz) {
        final po po = new po(this.c, this.e, this.f, this.d, jz, this.g, this.h, this.b);
        if (this.h != null) {
            po.h = this.h;
        }
        return po;
    }
    
    @Override
    public void a(final jw jw) {
        if (this.d && this.h == null) {
            this.h = jw.a(this.f, this.b);
        }
        if (this.g == null) {
            this.g = jw.b(this.e, this.b);
        }
    }
    
    public void a(final Map map, final hf hf, final jw jw) {
        hf.d();
        if (!map.isEmpty()) {
            if (this.h != null) {
                this.a(map, hf, jw, this.h);
            }
            else {
                this.b(map, hf, jw);
            }
        }
        hf.e();
    }
    
    protected void a(final Map map, final hf hf, final jw jw, final jk jk) {
        final jk g = this.g;
        final HashSet c = this.c;
        final jz i = this.i;
        final boolean b = !jw.a(ju$a.v);
        for (final Map.Entry<K, Object> entry : map.entrySet()) {
            final Object value = entry.getValue();
            final K key = entry.getKey();
            if (key == null) {
                jw.c().a(null, hf, jw);
            }
            else {
                if ((b && value == null) || (c != null && c.contains(key))) {
                    continue;
                }
                g.a(key, hf, jw);
            }
            if (value == null) {
                jw.a(hf);
            }
            else if (i == null) {
                try {
                    jk.a(value, hf, jw);
                }
                catch (Exception ex) {
                    this.a(jw, ex, map, new StringBuilder().append(key).toString());
                }
            }
            else {
                jk.a(value, hf, jw, i);
            }
        }
    }
    
    public void a(final Map map, final hf hf, final jw jw, final jz jz) {
        jz.b(map, hf);
        if (!map.isEmpty()) {
            if (this.h != null) {
                this.a(map, hf, jw, this.h);
            }
            else {
                this.b(map, hf, jw);
            }
        }
        jz.e(map, hf);
    }
    
    public void b(final Map map, final hf hf, final jw jw) {
        if (this.i != null) {
            this.c(map, hf, jw);
        }
        else {
            final jk g = this.g;
            final HashSet c = this.c;
            final boolean b = !jw.a(ju$a.v);
            final ov j = this.j;
            final Iterator<Map.Entry<K, Object>> iterator = map.entrySet().iterator();
            ov ov = j;
            Map.Entry<K, Object> entry;
            Object value;
            K key;
            Class<?> class1;
            jk a;
            jk jk;
            ov i;
            jk jk2;
            ov ov2;
            jk jk3;
            Label_0224_Outer:Label_0242_Outer:
            while (iterator.hasNext()) {
                entry = iterator.next();
                value = entry.getValue();
                key = entry.getKey();
                if (key == null) {
                    jw.c().a(null, hf, jw);
                }
                else {
                    if ((b && value == null) || (c != null && c.contains(key))) {
                        continue;
                    }
                    g.a(key, hf, jw);
                }
                if (value != null) {
                    class1 = value.getClass();
                    a = ov.a(class1);
                    while (true) {
                        Label_0304: {
                            if (a != null) {
                                break Label_0304;
                            }
                            Label_0258: {
                                if (!this.f.e()) {
                                    break Label_0258;
                                }
                                jk = this.a(ov, jw.a(this.f, class1), jw);
                                while (true) {
                                    i = this.j;
                                    jk2 = jk;
                                    ov2 = i;
                                    jk3 = jk2;
                                    try {
                                        jk3.a(value, hf, jw);
                                        ov = ov2;
                                        continue Label_0224_Outer;
                                        jk = this.a(ov, class1, jw);
                                        continue Label_0242_Outer;
                                    }
                                    catch (Exception ex) {
                                        this.a(jw, ex, map, new StringBuilder().append(key).toString());
                                        ov = ov2;
                                        continue Label_0224_Outer;
                                    }
                                    break;
                                }
                            }
                        }
                        ov2 = ov;
                        jk3 = a;
                        continue;
                    }
                }
                jw.a(hf);
            }
        }
    }
    
    protected void c(final Map map, final hf hf, final jw jw) {
        final jk g = this.g;
        final HashSet c = this.c;
        final boolean b = !jw.a(ju$a.v);
        final Iterator<Map.Entry<K, Object>> iterator = map.entrySet().iterator();
        Class<?> clazz = null;
        jk jk = null;
    Label_0177_Outer:
        while (iterator.hasNext()) {
            final Map.Entry<K, Object> entry = iterator.next();
            final Object value = entry.getValue();
            final K key = entry.getKey();
            if (key == null) {
                jw.c().a(null, hf, jw);
            }
            else {
                if ((b && value == null) || (c != null && c.contains(key))) {
                    continue;
                }
                g.a(key, hf, jw);
            }
            if (value != null) {
                Class<?> class1 = value.getClass();
                Label_0201: {
                    if (class1 != clazz) {
                        break Label_0201;
                    }
                    class1 = clazz;
                    jk a = jk;
                    try {
                        while (true) {
                            jk.a(value, hf, jw, this.i);
                            jk = a;
                            clazz = class1;
                            continue Label_0177_Outer;
                            jk = (a = jw.a(class1, this.b));
                            continue;
                        }
                    }
                    catch (Exception ex) {
                        this.a(jw, ex, map, new StringBuilder().append(key).toString());
                        jk = a;
                        clazz = class1;
                        continue;
                    }
                }
                break;
            }
            jw.a(hf);
        }
    }
}
