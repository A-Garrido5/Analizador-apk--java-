// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Collection;
import java.util.Iterator;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.lang.ref.Reference;
import java.util.HashMap;
import java.lang.ref.ReferenceQueue;
import java.util.Map;

public class gz implements Map
{
    private final ReferenceQueue a;
    private Map b;
    
    public gz() {
        this.a = new ReferenceQueue();
        this.b = new HashMap();
    }
    
    private void a() {
        synchronized (this) {
            for (Reference reference = this.a.poll(); reference != null; reference = this.a.poll()) {
                this.b.remove(reference);
            }
        }
    }
    
    @Override
    public void clear() {
        this.b.clear();
        this.a();
    }
    
    @Override
    public boolean containsKey(final Object o) {
        this.a();
        return this.b.containsKey(new gz$a(this, o));
    }
    
    @Override
    public boolean containsValue(final Object o) {
        this.a();
        return this.b.containsValue(o);
    }
    
    @Override
    public Set entrySet() {
        this.a();
        final HashSet<gz$1> set = new HashSet<gz$1>();
        for (final Entry<gz$a, V> entry : this.b.entrySet()) {
            set.add(new Entry() {
                final /* synthetic */ Object a = entry.getKey().get();
                final /* synthetic */ Object b = entry.getValue();
                
                @Override
                public Object getKey() {
                    return this.a;
                }
                
                @Override
                public Object getValue() {
                    return this.b;
                }
                
                @Override
                public Object setValue(final Object o) {
                    throw new UnsupportedOperationException();
                }
            });
        }
        return Collections.unmodifiableSet((Set<?>)set);
    }
    
    @Override
    public boolean equals(final Object o) {
        return this.b.equals(((gz)o).b);
    }
    
    @Override
    public Object get(final Object o) {
        this.a();
        return this.b.get(new gz$a(this, o));
    }
    
    @Override
    public int hashCode() {
        this.a();
        return this.b.hashCode();
    }
    
    @Override
    public boolean isEmpty() {
        this.a();
        return this.b.isEmpty();
    }
    
    @Override
    public Set keySet() {
        this.a();
        final HashSet<Object> set = new HashSet<Object>();
        final Iterator<gz$a> iterator = this.b.keySet().iterator();
        while (iterator.hasNext()) {
            set.add(iterator.next().get());
        }
        return Collections.unmodifiableSet((Set<?>)set);
    }
    
    @Override
    public Object put(final Object o, final Object o2) {
        this.a();
        return this.b.put(new gz$a(this, o), o2);
    }
    
    @Override
    public void putAll(final Map map) {
        throw new UnsupportedOperationException();
    }
    
    @Override
    public Object remove(final Object o) {
        this.a();
        return this.b.remove(new gz$a(this, o));
    }
    
    @Override
    public int size() {
        this.a();
        return this.b.size();
    }
    
    @Override
    public Collection values() {
        this.a();
        return this.b.values();
    }
}
