// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Arrays;

public final class sb
{
    static final sb a;
    protected sb b;
    protected final boolean c;
    protected final boolean d;
    protected String[] e;
    protected sb$a[] f;
    protected int g;
    protected int h;
    protected int i;
    protected boolean j;
    
    static {
        a = new sb();
    }
    
    private sb() {
        this.d = true;
        this.c = true;
        this.j = true;
        this.a(64);
    }
    
    private sb(final sb b, final boolean d, final boolean c, final String[] e, final sb$a[] f, final int g) {
        this.b = b;
        this.d = d;
        this.c = c;
        this.e = e;
        this.f = f;
        this.g = g;
        final int length = e.length;
        this.h = length - (length >> 2);
        this.i = length - 1;
        this.j = false;
    }
    
    public static int a(final String s) {
        int char1 = s.charAt(0);
        for (int i = 1; i < s.length(); ++i) {
            char1 = char1 * 31 + s.charAt(i);
        }
        return char1;
    }
    
    public static int a(final char[] array, final int n, final int n2) {
        int n3 = array[0];
        for (int i = 1; i < n2; ++i) {
            n3 = n3 * 31 + array[i];
        }
        return n3;
    }
    
    public static sb a() {
        return sb.a.e();
    }
    
    private void a(final int n) {
        this.e = new String[n];
        this.f = new sb$a[n >> 1];
        this.i = n - 1;
        this.g = 0;
        this.h = n - (n >> 2);
    }
    
    private void a(final sb sb) {
        synchronized (this) {
            if (sb.c() > 12000) {
                this.a(64);
            }
            else {
                if (sb.c() <= this.c()) {
                    return;
                }
                this.e = sb.e;
                this.f = sb.f;
                this.g = sb.g;
                this.h = sb.h;
                this.i = sb.i;
            }
            this.j = false;
        }
    }
    
    private sb e() {
        return new sb(null, true, true, this.e, this.f, this.g);
    }
    
    private void f() {
        final String[] e = this.e;
        final int length = e.length;
        System.arraycopy(e, 0, this.e = new String[length], 0, length);
        final sb$a[] f = this.f;
        final int length2 = f.length;
        System.arraycopy(f, 0, this.f = new sb$a[length2], 0, length2);
    }
    
    private void g() {
        final int length = this.e.length;
        final int n = length + length;
        if (n > 65536) {
            this.g = 0;
            Arrays.fill(this.e, null);
            Arrays.fill(this.f, null);
            this.j = true;
        }
        else {
            final String[] e = this.e;
            final sb$a[] f = this.f;
            this.e = new String[n];
            this.f = new sb$a[n >> 1];
            this.i = n - 1;
            this.h += this.h;
            int i = 0;
            int n2 = 0;
            while (i < length) {
                final String s = e[i];
                if (s != null) {
                    ++n2;
                    final int n3 = a(s) & this.i;
                    if (this.e[n3] == null) {
                        this.e[n3] = s;
                    }
                    else {
                        final int n4 = n3 >> 1;
                        this.f[n4] = new sb$a(s, this.f[n4]);
                    }
                }
                ++i;
            }
            final int n5 = length >> 1;
            int n6 = n2;
            for (sb$a b : f) {
                while (b != null) {
                    final int n7 = n6 + 1;
                    final String a = b.a();
                    final int n8 = a(a) & this.i;
                    if (this.e[n8] == null) {
                        this.e[n8] = a;
                    }
                    else {
                        final int n9 = n8 >> 1;
                        this.f[n9] = new sb$a(a, this.f[n9]);
                    }
                    b = b.b();
                    n6 = n7;
                }
            }
            if (n6 != this.g) {
                throw new Error("Internal error on SymbolTable.rehash(): had " + this.g + " entries; now have " + n6 + ".");
            }
        }
    }
    
    public final sb a(final boolean b, final boolean b2) {
        synchronized (this) {
            return new sb(this, b, b2, this.e, this.f, this.g);
        }
    }
    
    public final String a(final char[] array, final int n, final int n2, final int n3) {
        if (n2 <= 0) {
            return "";
        }
        if (!this.d) {
            return new String(array, n, n2);
        }
        final int n4 = n3 & this.i;
        final String s = this.e[n4];
        if (s != null) {
            if (s.length() == n2) {
                int n5 = 0;
                while (s.charAt(n5) == array[n + n5] && ++n5 < n2) {}
                if (n5 == n2) {
                    return s;
                }
            }
            final sb$a sb$a = this.f[n4 >> 1];
            if (sb$a != null) {
                final String a = sb$a.a(array, n, n2);
                if (a != null) {
                    return a;
                }
            }
        }
        int n6;
        if (!this.j) {
            this.f();
            this.j = true;
            n6 = n4;
        }
        else if (this.g >= this.h) {
            this.g();
            n6 = (a(array, n, n2) & this.i);
        }
        else {
            n6 = n4;
        }
        ++this.g;
        String a2 = new String(array, n, n2);
        if (this.c) {
            a2 = sm.a.a(a2);
        }
        if (this.e[n6] == null) {
            return this.e[n6] = a2;
        }
        final int n7 = n6 >> 1;
        this.f[n7] = new sb$a(a2, this.f[n7]);
        return a2;
    }
    
    public final void b() {
        if (this.d() && this.b != null) {
            this.b.a(this);
            this.j = false;
        }
    }
    
    public final int c() {
        return this.g;
    }
    
    public final boolean d() {
        return this.j;
    }
}
