// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import android.text.TextUtils;
import java.util.HashMap;
import java.util.Map;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;
import java.net.URLDecoder;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import android.content.Intent;
import java.io.Closeable;
import java.io.OutputStream;
import java.io.InputStream;

public final class fe
{
    private static final String a;
    
    static {
        a = fe.class.getSimpleName();
    }
    
    public static long a(final InputStream inputStream, final OutputStream outputStream) {
        final byte[] array = new byte[1024];
        long n = 0L;
        while (true) {
            final int read = inputStream.read(array);
            if (read < 0) {
                break;
            }
            outputStream.write(array, 0, read);
            n += read;
        }
        return n;
    }
    
    public static String a(final String s) {
        return a(s, 255);
    }
    
    public static String a(String s, final int n) {
        if (s == null) {
            s = "";
        }
        else if (s.length() > n) {
            return s.substring(0, n);
        }
        return s;
    }
    
    public static String a(final byte[] array) {
        final StringBuilder sb = new StringBuilder(2 * array.length);
        final char[] array2 = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        for (final byte b : array) {
            final byte b2 = (byte)(b & 0xF);
            sb.append(array2[(byte)((b & 0xF0) >> 4)]);
            sb.append(array2[b2]);
        }
        return sb.toString();
    }
    
    public static void a(final Closeable closeable) {
        if (closeable == null) {
            return;
        }
        try {
            closeable.close();
        }
        catch (Throwable t) {}
    }
    
    public static boolean a(final long n) {
        if (n != 0L) {
            final long n2 = lcmp(System.currentTimeMillis(), n);
            final boolean b = false;
            if (n2 > 0) {
                return b;
            }
        }
        return true;
    }
    
    public static boolean a(final Intent intent) {
        return do.a().c().queryIntentActivities(intent, 65536).size() > 0;
    }
    
    public static String b(final String s) {
        try {
            return URLEncoder.encode(s, "UTF-8");
        }
        catch (UnsupportedEncodingException ex) {
            eo.a(5, fe.a, "Cannot encode '" + s + "'");
            return "";
        }
    }
    
    public static boolean b(final Intent intent) {
        boolean equals = false;
        if (intent != null) {
            equals = do.a().b().getPackageName().equals(intent.resolveActivity(do.a().c()).getPackageName());
        }
        return equals;
    }
    
    public static String c(final String s) {
        try {
            return URLDecoder.decode(s, "UTF-8");
        }
        catch (UnsupportedEncodingException ex) {
            eo.a(5, fe.a, "Cannot decode '" + s + "'");
            return "";
        }
    }
    
    public static byte[] d(final String s) {
        try {
            final MessageDigest instance = MessageDigest.getInstance("SHA-1");
            instance.update(s.getBytes(), 0, s.length());
            return instance.digest();
        }
        catch (NoSuchAlgorithmException ex) {
            eo.a(6, fe.a, "Unsupported SHA1: " + ex.getMessage());
            return null;
        }
    }
    
    public static String e(final String s) {
        return s.replace("'", "\\'").replace("\\n", "").replace("\\r", "").replace("\\t", "");
    }
    
    public static Map f(final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        if (!TextUtils.isEmpty((CharSequence)s)) {
            final String[] split = s.split("&");
            for (int length = split.length, i = 0; i < length; ++i) {
                final String[] split2 = split[i].split("=");
                if (!split2[0].equals("event")) {
                    hashMap.put(c(split2[0]), c(split2[1]));
                }
            }
        }
        return hashMap;
    }
    
    public static long g(final String s) {
        long n;
        if (s == null) {
            n = 0L;
        }
        else {
            final int length = s.length();
            n = 1125899906842597L;
            long n2;
            for (int i = 0; i < length; ++i, n = n2) {
                n2 = n * 31L + s.charAt(i);
            }
        }
        return n;
    }
}
