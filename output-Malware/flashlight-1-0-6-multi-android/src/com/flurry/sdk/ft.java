// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.nio.ByteBuffer;
import java.util.Iterator;
import java.util.Map;
import java.util.Collection;

public class ft
{
    private static final ft a;
    private static final fn b;
    
    static {
        a = new ft();
        b = fn.a(fn$v.g);
    }
    
    public static ft a() {
        return ft.a;
    }
    
    private void a(final String s, final StringBuilder sb) {
        for (int i = 0; i < s.length(); ++i) {
            final char char1 = s.charAt(i);
            switch (char1) {
                default: {
                    if ((char1 >= '\0' && char1 <= '\u001f') || (char1 >= '\u007f' && char1 <= '\u009f') || (char1 >= '\u2000' && char1 <= '\u20ff')) {
                        Integer.toHexString(char1);
                        sb.append("\\u");
                        for (int j = 0; j < 4 - sb.length(); ++j) {
                            sb.append('0');
                        }
                        sb.append(s.toUpperCase());
                        break;
                    }
                    sb.append(char1);
                    break;
                }
                case 34: {
                    sb.append("\\\"");
                    break;
                }
                case 92: {
                    sb.append("\\\\");
                    break;
                }
                case 8: {
                    sb.append("\\b");
                    break;
                }
                case 12: {
                    sb.append("\\f");
                    break;
                }
                case 10: {
                    sb.append("\\n");
                    break;
                }
                case 13: {
                    sb.append("\\r");
                    break;
                }
                case 9: {
                    sb.append("\\t");
                    break;
                }
                case 47: {
                    sb.append("\\/");
                    break;
                }
            }
        }
    }
    
    protected int a(final int n, final Object o, final fn fn) {
        return n * 31 + this.b(o, fn);
    }
    
    public int a(final fn fn, final Object o) {
        final Integer e = fn.e(this.b(o));
        if (e != null) {
            return e;
        }
        throw new fp(fn, o);
    }
    
    public int a(final Object o, final Object o2, final fn fn) {
        return this.a(o, o2, fn, false);
    }
    
    protected int a(final Object o, final Object o2, final fn fn, final boolean b) {
        if (o == o2) {
            return 0;
        }
        switch (ft$1.a[fn.a().ordinal()]) {
            default: {
                return ((Comparable)o).compareTo(o2);
            }
            case 1: {
                for (final fn$f fn$f : fn.b()) {
                    if (fn$f.f() != fn$f$a.c) {
                        final int b2 = fn$f.b();
                        final String a = fn$f.a();
                        final int a2 = this.a(this.a(o, a, b2), this.a(o2, a, b2), fn$f.c(), b);
                        if (a2 == 0) {
                            continue;
                        }
                        if (fn$f.f() == fn$f$a.b) {
                            return -a2;
                        }
                        return a2;
                    }
                }
                return 0;
            }
            case 2: {
                return fn.c(o.toString()) - fn.c(o2.toString());
            }
            case 3: {
                final Collection collection = (Collection)o;
                final Collection collection2 = (Collection)o2;
                final Iterator<Object> iterator2 = collection.iterator();
                final Iterator<Object> iterator3 = collection2.iterator();
                final fn i = fn.i();
                while (iterator2.hasNext() && iterator3.hasNext()) {
                    final int a3 = this.a(iterator2.next(), iterator3.next(), i, b);
                    if (a3 != 0) {
                        return a3;
                    }
                }
                if (iterator2.hasNext()) {
                    return 1;
                }
                if (iterator3.hasNext()) {
                    return -1;
                }
                return 0;
            }
            case 4: {
                if (!b) {
                    throw new fk("Can't compare maps!");
                }
                if (((Map)o).equals(o2)) {
                    return 0;
                }
                return 1;
            }
            case 5: {
                final int a4 = this.a(fn, o);
                final int a5 = this.a(fn, o2);
                if (a4 == a5) {
                    return this.a(o, o2, (fn)fn.k().get(a4), b);
                }
                return a4 - a5;
            }
            case 14: {
                return 0;
            }
            case 7: {
                gy gy;
                if (o instanceof gy) {
                    gy = (gy)o;
                }
                else {
                    gy = new gy(o.toString());
                }
                gy gy2;
                if (o2 instanceof gy) {
                    gy2 = (gy)o2;
                }
                else {
                    gy2 = new gy(o2.toString());
                }
                return gy.a(gy2);
            }
        }
    }
    
    public ge a(final fn fn) {
        return new fu(fn, fn, this);
    }
    
    protected Object a(final Object o, final fn fn) {
        return null;
    }
    
    public Object a(final Object o, final String s, final int n) {
        return ((fz)o).a(n);
    }
    
    public Object a(final Object o, final byte[] array, final fn fn) {
        final fx fx = (fx)this.c(o, fn);
        System.arraycopy(array, 0, fx.b(), 0, fn.l());
        return fx;
    }
    
    public String a(final Object o) {
        final StringBuilder sb = new StringBuilder();
        this.a(o, sb);
        return sb.toString();
    }
    
    public void a(final Object o, final String s, final int n, final Object o2) {
        ((fz)o).a(n, o2);
    }
    
    protected void a(final Object o, final String s, final int n, final Object o2, final Object o3) {
        this.a(o, s, n, o2);
    }
    
    protected void a(final Object o, final StringBuilder sb) {
        int n = 0;
        if (this.d(o)) {
            sb.append("{");
            final fn e = this.e(o);
            final Iterator iterator = e.b().iterator();
            int n2 = 0;
            while (iterator.hasNext()) {
                final fn$f fn$f = iterator.next();
                this.a((Object)fn$f.a(), sb);
                sb.append(": ");
                this.a(this.a(o, fn$f.a(), fn$f.b()), sb);
                final int n3 = n2 + 1;
                if (n3 < e.b().size()) {
                    sb.append(", ");
                }
                n2 = n3;
            }
            sb.append("}");
            return;
        }
        if (o instanceof Collection) {
            final Collection collection = (Collection)o;
            sb.append("[");
            final long n4 = -1 + collection.size();
            final Iterator<Object> iterator2 = collection.iterator();
            while (iterator2.hasNext()) {
                this.a(iterator2.next(), sb);
                final int n5 = n + 1;
                if (n < n4) {
                    sb.append(", ");
                }
                n = n5;
            }
            sb.append("]");
            return;
        }
        if (o instanceof Map) {
            sb.append("{");
            final Map map = (Map)o;
            final Iterator<Map.Entry<Object, V>> iterator3 = map.entrySet().iterator();
            int n6 = 0;
            while (iterator3.hasNext()) {
                final Map.Entry<Object, V> entry = iterator3.next();
                this.a(entry.getKey(), sb);
                sb.append(": ");
                this.a(entry.getValue(), sb);
                final int n7 = n6 + 1;
                if (n7 < map.size()) {
                    sb.append(", ");
                }
                n6 = n7;
            }
            sb.append("}");
            return;
        }
        if (o instanceof CharSequence || o instanceof fw) {
            sb.append("\"");
            this.a(o.toString(), sb);
            sb.append("\"");
            return;
        }
        if (o instanceof ByteBuffer) {
            sb.append("{\"bytes\": \"");
            final ByteBuffer byteBuffer = (ByteBuffer)o;
            for (int i = byteBuffer.position(); i < byteBuffer.limit(); ++i) {
                sb.append((char)byteBuffer.get(i));
            }
            sb.append("\"}");
            return;
        }
        sb.append(o);
    }
    
    public int b(Object o, final fn fn) {
        int a = 0;
        if (o != null) {
            int a2 = 1;
            final int n = ft$1.a[fn.a().ordinal()];
            a = 0;
            switch (n) {
                case 1: {
                    final Iterator<fn$f> iterator = fn.b().iterator();
                    a = a2;
                    while (iterator.hasNext()) {
                        final fn$f fn$f = iterator.next();
                        if (fn$f.f() != fn$f$a.c) {
                            a = this.a(a, this.a(o, fn$f.a(), fn$f.b()), fn$f.c());
                        }
                    }
                }
                case 14: {
                    break;
                }
                default: {
                    return o.hashCode();
                }
                case 3: {
                    final Collection collection = (Collection)o;
                    final fn i = fn.i();
                    final Iterator<Object> iterator2 = collection.iterator();
                    while (iterator2.hasNext()) {
                        a2 = this.a(a2, iterator2.next(), i);
                    }
                    return a2;
                }
                case 5: {
                    return this.b(o, fn.k().get(this.a(fn, o)));
                }
                case 2: {
                    return fn.c(o.toString());
                }
                case 7: {
                    if (!(o instanceof gy)) {
                        o = new gy(o.toString());
                    }
                    return o.hashCode();
                }
            }
        }
        return a;
    }
    
    public Object b(final fn fn, Object o) {
        if (o == null) {
            o = null;
        }
        else {
            switch (ft$1.a[fn.a().ordinal()]) {
                case 2: {
                    break;
                }
                default: {
                    throw new fk("Deep copy failed for schema \"" + fn + "\" and value \"" + o + "\"");
                }
                case 3: {
                    final List list = (List)o;
                    final ft$a ft$a = new ft$a(list.size(), fn);
                    final Iterator<Object> iterator = list.iterator();
                    while (iterator.hasNext()) {
                        ft$a.add(this.b(fn.i(), iterator.next()));
                    }
                    return ft$a;
                }
                case 13: {
                    return new Boolean((boolean)o);
                }
                case 8: {
                    final ByteBuffer byteBuffer = (ByteBuffer)o;
                    final byte[] array = new byte[byteBuffer.capacity()];
                    byteBuffer.rewind();
                    byteBuffer.get(array);
                    byteBuffer.rewind();
                    return ByteBuffer.wrap(array);
                }
                case 12: {
                    return new Double((double)o);
                }
                case 6: {
                    return this.a(null, ((fx)o).b(), fn);
                }
                case 11: {
                    return new Float((float)o);
                }
                case 9: {
                    return new Integer((int)o);
                }
                case 10: {
                    return new Long((long)o);
                }
                case 4: {
                    final Map map = (Map)o;
                    final HashMap hashMap = new HashMap<CharSequence, Object>(map.size());
                    for (final Map.Entry<Object, V> entry : map.entrySet()) {
                        hashMap.put((CharSequence)this.b(ft.b, entry.getKey()), this.b(fn.j(), entry.getValue()));
                    }
                    return hashMap;
                }
                case 14: {
                    return null;
                }
                case 1: {
                    final fz fz = (fz)o;
                    final fz fz2 = (fz)this.d(null, fn);
                    for (final fn$f fn$f : fn.b()) {
                        fz2.a(fn$f.b(), this.b(fn$f.c(), fz.a(fn$f.b())));
                    }
                    return fz2;
                }
                case 7: {
                    if (o instanceof String) {
                        break;
                    }
                    if (o instanceof gy) {
                        return new gy((gy)o);
                    }
                    return new gy(o.toString());
                }
                case 5: {
                    return this.b(fn.k().get(this.a(fn, o)), o);
                }
            }
        }
        return o;
    }
    
    protected Object b(final Object o, final String s, final int n, final Object o2) {
        return this.a(o, s, n);
    }
    
    protected String b(final Object o) {
        if (o == null) {
            return fn$v.n.a();
        }
        if (this.d(o)) {
            return this.e(o).g();
        }
        if (this.f(o)) {
            return this.g(o).g();
        }
        if (this.c(o)) {
            return fn$v.c.a();
        }
        if (this.h(o)) {
            return fn$v.d.a();
        }
        if (this.i(o)) {
            return this.j(o).g();
        }
        if (this.k(o)) {
            return fn$v.g.a();
        }
        if (this.l(o)) {
            return fn$v.h.a();
        }
        if (o instanceof Integer) {
            return fn$v.i.a();
        }
        if (o instanceof Long) {
            return fn$v.j.a();
        }
        if (o instanceof Float) {
            return fn$v.k.a();
        }
        if (o instanceof Double) {
            return fn$v.l.a();
        }
        if (o instanceof Boolean) {
            return fn$v.m.a();
        }
        throw new fk("Unknown datum type: " + o);
    }
    
    public Object c(final Object o, final fn fn) {
        if (o instanceof fx && ((fx)o).b().length == fn.l()) {
            return o;
        }
        return new ft$c(fn);
    }
    
    protected boolean c(final Object o) {
        return o instanceof Collection;
    }
    
    public Object d(final Object o, final fn fn) {
        if (o instanceof fz) {
            final fz fz = (fz)o;
            if (fz.a() == fn) {
                return fz;
            }
        }
        return new ft$d(fn);
    }
    
    protected boolean d(final Object o) {
        return o instanceof fz;
    }
    
    protected fn e(final Object o) {
        return ((fs)o).a();
    }
    
    protected boolean f(final Object o) {
        return o instanceof fw;
    }
    
    protected fn g(final Object o) {
        return ((fs)o).a();
    }
    
    protected boolean h(final Object o) {
        return o instanceof Map;
    }
    
    protected boolean i(final Object o) {
        return o instanceof fx;
    }
    
    protected fn j(final Object o) {
        return ((fs)o).a();
    }
    
    protected boolean k(final Object o) {
        return o instanceof CharSequence;
    }
    
    protected boolean l(final Object o) {
        return o instanceof ByteBuffer;
    }
}
