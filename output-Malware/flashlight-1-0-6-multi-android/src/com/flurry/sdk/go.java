// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.HashMap;
import java.util.Map;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.io.Serializable;
import java.util.List;

public class go extends gr
{
    private static gj a;
    
    static {
        go.a = new gj().a(32);
    }
    
    private static gq a(final List list, final List list2) {
        final Object[] array = new Object[list.size()];
        for (int i = 0; i < array.length; ++i) {
            final int index = list2.indexOf(list.get(i));
            Serializable string;
            if (index == -1) {
                string = "No match for " + list.get(i);
            }
            else {
                string = new Integer(index);
            }
            array[i] = string;
        }
        return new gq$c(list2.size(), array);
    }
    
    public static void a(final gi gi, fn fn, final hh hh) {
        Label_0751: {
            Label_0711: {
                Label_0671: {
                    Label_0630: {
                        Label_0590: {
                            Label_0550: {
                                Label_0505: {
                                    Label_0465: {
                                        Label_0364: {
                                            Label_0265: {
                                                Label_0198: {
                                                    Label_0185: {
                                                        Label_0081: {
                                                        Label_0080:
                                                            while (true) {
                                                                switch (go$1.a[fn.a().ordinal()]) {
                                                                    default: {
                                                                        break Label_0080;
                                                                    }
                                                                    case 13: {
                                                                        break Label_0081;
                                                                    }
                                                                    case 10: {
                                                                        break Label_0185;
                                                                    }
                                                                    case 11: {
                                                                        break Label_0198;
                                                                    }
                                                                    case 12: {
                                                                        break Label_0265;
                                                                    }
                                                                    case 14: {
                                                                        gi.b(0);
                                                                        fn = fn.k().get(0);
                                                                        continue;
                                                                    }
                                                                    case 9: {
                                                                        break Label_0364;
                                                                    }
                                                                    case 7: {
                                                                        break Label_0465;
                                                                    }
                                                                    case 8: {
                                                                        break Label_0505;
                                                                    }
                                                                    case 3: {
                                                                        break Label_0550;
                                                                    }
                                                                    case 4: {
                                                                        break Label_0590;
                                                                    }
                                                                    case 5: {
                                                                        break Label_0630;
                                                                    }
                                                                    case 6: {
                                                                        break Label_0671;
                                                                    }
                                                                    case 2: {
                                                                        break Label_0711;
                                                                    }
                                                                    case 1: {
                                                                        break Label_0751;
                                                                    }
                                                                }
                                                            }
                                                            return;
                                                        }
                                                        for (final fn$f fn$f : fn.b()) {
                                                            final String a = fn$f.a();
                                                            hh hh2 = hh.a(a);
                                                            if (hh2 == null) {
                                                                hh2 = fn$f.e();
                                                            }
                                                            if (hh2 == null) {
                                                                throw new fl("No default value for: " + a);
                                                            }
                                                            a(gi, fn$f.c(), hh2);
                                                        }
                                                        return;
                                                    }
                                                    gi.a(fn.c(hh.i()));
                                                    return;
                                                }
                                                gi.b();
                                                gi.a((long)hh.p());
                                                final fn i = fn.i();
                                                for (final hh hh3 : hh) {
                                                    gi.c();
                                                    a(gi, i, hh3);
                                                }
                                                gi.d();
                                                return;
                                            }
                                            gi.e();
                                            gi.a((long)hh.p());
                                            final fn j = fn.j();
                                            final Iterator r = hh.r();
                                            while (r.hasNext()) {
                                                gi.c();
                                                final String s = r.next();
                                                gi.a(s);
                                                a(gi, j, hh.a(s));
                                            }
                                            gi.f();
                                            return;
                                        }
                                        if (!hh.f()) {
                                            throw new fl("Non-string default value for fixed: " + hh);
                                        }
                                        final byte[] bytes = hh.i().getBytes("ISO-8859-1");
                                        byte[] array2;
                                        if (bytes.length != fn.l()) {
                                            final byte[] array = new byte[fn.l()];
                                            int n;
                                            if (fn.l() > bytes.length) {
                                                n = bytes.length;
                                            }
                                            else {
                                                n = fn.l();
                                            }
                                            System.arraycopy(bytes, 0, array, 0, n);
                                            array2 = array;
                                        }
                                        else {
                                            array2 = bytes;
                                        }
                                        gi.b(array2);
                                        return;
                                    }
                                    if (!hh.f()) {
                                        throw new fl("Non-string default value for string: " + hh);
                                    }
                                    gi.a(hh.i());
                                    return;
                                }
                                if (!hh.f()) {
                                    throw new fl("Non-string default value for bytes: " + hh);
                                }
                                gi.a(hh.i().getBytes("ISO-8859-1"));
                                return;
                            }
                            if (!hh.d()) {
                                throw new fl("Non-numeric default value for int: " + hh);
                            }
                            gi.c(hh.k());
                            return;
                        }
                        if (!hh.d()) {
                            throw new fl("Non-numeric default value for long: " + hh);
                        }
                        gi.b(hh.l());
                        return;
                    }
                    if (!hh.d()) {
                        throw new fl("Non-numeric default value for float: " + hh);
                    }
                    gi.a((float)hh.m());
                    return;
                }
                if (!hh.d()) {
                    throw new fl("Non-numeric default value for double: " + hh);
                }
                gi.a(hh.m());
                return;
            }
            if (!hh.g()) {
                throw new fl("Non-boolean default for boolean: " + hh);
            }
            gi.a(hh.j());
            return;
        }
        if (!hh.h()) {
            throw new fl("Non-null default value for null type: " + hh);
        }
        gi.a();
    }
    
    private static byte[] a(final fn fn, final hh hh) {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final gc a = go.a.a(byteArrayOutputStream, null);
        a(a, fn, hh);
        a.flush();
        return byteArrayOutputStream.toByteArray();
    }
    
    private static int b(final fn fn, final fn fn2) {
        int n = 0;
        final fn$v a = fn2.a();
        final Iterator<fn> iterator = (Iterator<fn>)fn.k().iterator();
        int n2 = 0;
        while (iterator.hasNext()) {
            final fn fn3 = iterator.next();
            Label_0118: {
                if (a == fn3.a()) {
                    if (a == fn$v.a || a == fn$v.b || a == fn$v.f) {
                        final String g = fn2.g();
                        final String g2 = fn3.g();
                        if ((g == null || !g.equals(g2)) && (g != g2 || a != fn$v.a)) {
                            break Label_0118;
                        }
                    }
                    return n2;
                }
            }
            ++n2;
        }
        for (final fn fn4 : fn.k()) {
            Label_0192: {
                switch (go$1.a[a.ordinal()]) {
                    case 3: {
                        switch (go$1.a[fn4.a().ordinal()]) {
                            default: {
                                break Label_0192;
                            }
                            case 4:
                            case 6: {
                                return n;
                            }
                        }
                        break;
                    }
                    case 4:
                    case 5: {
                        switch (go$1.a[fn4.a().ordinal()]) {
                            default: {
                                break Label_0192;
                            }
                            case 6: {
                                return n;
                            }
                        }
                        break;
                    }
                }
            }
            ++n;
        }
        return -1;
    }
    
    private gq b(final fn fn, final fn fn2, final Map map) {
        final List k = fn.k();
        final int size = k.size();
        final gq[] array = new gq[size];
        final String[] array2 = new String[size];
        final Iterator<fn> iterator = k.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            final fn fn3 = iterator.next();
            array[n] = this.a(fn3, fn2, map);
            array2[n] = fn3.g();
            ++n;
        }
        return gq.b(gq.a(array, array2), new gq$q());
    }
    
    private gq c(final fn fn, final fn fn2, final Map map) {
        final go$a go$a = new go$a(fn, fn2);
        gq a = map.get(go$a);
        if (a == null) {
            final List b = fn.b();
            final List b2 = fn2.b();
            final fn$f[] array = new fn$f[b2.size()];
            final int n = 1 + b.size();
            final Iterator<fn$f> iterator = b.iterator();
            int n2 = 0;
            while (iterator.hasNext()) {
                final fn$f b3 = fn2.b(iterator.next().a());
                int n3;
                if (b3 != null) {
                    n3 = n2 + 1;
                    array[n2] = b3;
                }
                else {
                    n3 = n2;
                }
                n2 = n3;
            }
            final Iterator<fn$f> iterator2 = b2.iterator();
            int n4 = n2;
            int n5 = n;
            while (iterator2.hasNext()) {
                final fn$f fn$f = iterator2.next();
                int n7;
                int n8;
                if (fn.b(fn$f.a()) == null) {
                    if (fn$f.e() == null) {
                        a = gq.a("Found " + fn.a(true) + ", expecting " + fn2.a(true));
                        map.put(go$a, a);
                        return a;
                    }
                    final int n6 = n4 + 1;
                    array[n4] = fn$f;
                    n7 = n5 + 3;
                    n8 = n6;
                }
                else {
                    n7 = n5;
                    n8 = n4;
                }
                n4 = n8;
                n5 = n7;
            }
            final gq[] array2 = new gq[n5];
            final int n9 = n5 - 1;
            array2[n9] = new gq$e(array);
            final gq b4 = gq.b(array2);
            map.put(go$a, b4);
            final Iterator<fn$f> iterator3 = b.iterator();
            int n10 = n9;
            while (iterator3.hasNext()) {
                final fn$f fn$f2 = iterator3.next();
                final fn$f b5 = fn2.b(fn$f2.a());
                if (b5 == null) {
                    --n10;
                    array2[n10] = new gq$n(this.a(fn$f2.c(), fn$f2.c(), map));
                }
                else {
                    --n10;
                    array2[n10] = this.a(fn$f2.c(), b5.c(), map);
                }
            }
            for (final fn$f fn$f3 : b2) {
                int n13;
                if (fn.b(fn$f3.a()) == null) {
                    final byte[] a2 = a(fn$f3.c(), fn$f3.e());
                    final int n11 = n10 - 1;
                    array2[n11] = new gq$b(a2);
                    final int n12 = n11 - 1;
                    array2[n12] = this.a(fn$f3.c(), fn$f3.c(), map);
                    n13 = n12 - 1;
                    array2[n13] = gq.x;
                }
                else {
                    n13 = n10;
                }
                n10 = n13;
            }
            return b4;
        }
        return a;
    }
    
    public final gq a(final fn fn, final fn fn2) {
        return gq.a(new gq[] { this.a(fn, fn2, new HashMap()) });
    }
    
    public gq a(final fn fn, final fn fn2, final Map map) {
        final fn$v a = fn.a();
        final fn$v a2 = fn2.a();
        Label_0560: {
            if (a == a2) {
                switch (go$1.a[a.ordinal()]) {
                    default: {
                        throw new fl("Unkown type for schema: " + a);
                    }
                    case 1: {
                        return gq.c;
                    }
                    case 2: {
                        return gq.d;
                    }
                    case 3: {
                        return gq.e;
                    }
                    case 4: {
                        return gq.f;
                    }
                    case 5: {
                        return gq.g;
                    }
                    case 6: {
                        return gq.h;
                    }
                    case 7: {
                        return gq.i;
                    }
                    case 8: {
                        return gq.j;
                    }
                    case 9: {
                        if (fn.g().equals(fn2.g()) && fn.l() == fn2.l()) {
                            return gq.b(new gq$h(fn.l()), gq.k);
                        }
                        break;
                    }
                    case 10: {
                        if (fn.g() == null || fn.g().equals(fn2.g())) {
                            return gq.b(a(fn.c(), fn2.c()), gq.l);
                        }
                        break;
                    }
                    case 11: {
                        return gq.b(gq.a(gq.o, new gq[] { this.a(fn.i(), fn2.i(), map) }), gq.n);
                    }
                    case 12: {
                        return gq.b(gq.a(gq.q, this.a(fn.j(), fn2.j(), map), gq.i), gq.p);
                    }
                    case 13: {
                        return this.c(fn, fn2, map);
                    }
                    case 14: {
                        return this.b(fn, fn2, map);
                    }
                }
            }
            else {
                if (a == fn$v.e) {
                    return this.b(fn, fn2, map);
                }
                switch (go$1.a[a2.ordinal()]) {
                    default: {
                        throw new RuntimeException("Unexpected schema type: " + a2);
                    }
                    case 4: {
                        switch (go$1.a[a.ordinal()]) {
                            default: {
                                break Label_0560;
                            }
                            case 3: {
                                return gq.a(super.a(fn, map), gq.f);
                            }
                        }
                        break;
                    }
                    case 1:
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 10:
                    case 11:
                    case 12:
                    case 13: {
                        break;
                    }
                    case 5: {
                        switch (go$1.a[a.ordinal()]) {
                            default: {
                                break Label_0560;
                            }
                            case 3:
                            case 4: {
                                return gq.a(super.a(fn, map), gq.g);
                            }
                        }
                        break;
                    }
                    case 6: {
                        switch (go$1.a[a.ordinal()]) {
                            default: {
                                break Label_0560;
                            }
                            case 3:
                            case 4:
                            case 5: {
                                return gq.a(super.a(fn, map), gq.h);
                            }
                        }
                        break;
                    }
                    case 14: {
                        final int b = b(fn2, fn);
                        if (b >= 0) {
                            return gq.b(new gq$p(b, this.a(fn, (fn)fn2.k().get(b), map)), gq.m);
                        }
                        break;
                    }
                }
            }
        }
        return gq.a("Found " + fn.a(true) + ", expecting " + fn2.a(true));
    }
}
