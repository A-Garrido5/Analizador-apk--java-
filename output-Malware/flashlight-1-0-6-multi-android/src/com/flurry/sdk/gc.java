// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.nio.ByteBuffer;

public abstract class gc extends gi
{
    @Override
    public void a() {
    }
    
    @Override
    public void a(final int n) {
        this.c(n);
    }
    
    @Override
    public void a(final long n) {
        if (n > 0L) {
            this.b(n);
        }
    }
    
    @Override
    public void a(final gy gy) {
        this.a(gy.a(), 0, gy.b());
    }
    
    @Override
    public void a(final String s) {
        if (s.length() == 0) {
            this.g();
            return;
        }
        final byte[] bytes = s.getBytes("UTF-8");
        this.c(bytes.length);
        this.b(bytes, 0, bytes.length);
    }
    
    @Override
    public void a(final ByteBuffer byteBuffer) {
        final int position = byteBuffer.position();
        this.a(byteBuffer.array(), position + byteBuffer.arrayOffset(), byteBuffer.limit() - position);
    }
    
    @Override
    public void a(final byte[] array, final int n, final int n2) {
        if (n2 == 0) {
            this.g();
            return;
        }
        this.c(n2);
        this.b(array, n, n2);
    }
    
    @Override
    public void b() {
    }
    
    @Override
    public void b(final int n) {
        this.c(n);
    }
    
    @Override
    public void c() {
    }
    
    @Override
    public void d() {
        this.g();
    }
    
    @Override
    public void e() {
    }
    
    @Override
    public void f() {
        this.g();
    }
    
    protected abstract void g();
}
