// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class dt
{
    private final List a;
    
    public dt() {
        this.a = new LinkedList();
    }
    
    public List a() {
        final ArrayList<Object> list = new ArrayList<Object>(this.a.size());
        final Iterator<WeakReference<Object>> iterator = (Iterator<WeakReference<Object>>)this.a.iterator();
        while (iterator.hasNext()) {
            final Object value = iterator.next().get();
            if (value == null) {
                iterator.remove();
            }
            else {
                list.add(value);
            }
        }
        return list;
    }
    
    public void a(final Object o) {
        if (o == null) {
            return;
        }
        this.a.add(new WeakReference<Object>(o));
    }
    
    public int b() {
        return this.a.size();
    }
    
    public boolean b(final Object o) {
        if (o == null) {
            return false;
        }
        final Iterator<WeakReference<Object>> iterator = (Iterator<WeakReference<Object>>)this.a.iterator();
        while (iterator.hasNext()) {
            final Object value = iterator.next().get();
            if (value == null) {
                iterator.remove();
            }
            else {
                if (o == value || o.equals(value)) {
                    iterator.remove();
                    return true;
                }
                continue;
            }
        }
        return false;
    }
}
