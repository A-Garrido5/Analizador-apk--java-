// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.Closeable;
import java.io.DataOutputStream;
import java.util.ArrayList;
import java.io.IOException;
import java.io.DataInputStream;
import java.util.List;

public class dk
{
    private static final String a;
    private boolean b;
    private List c;
    private long d;
    
    static {
        a = dk.class.getSimpleName();
    }
    
    public dk() {
        this.d = -1L;
    }
    
    private static String a(String string) {
        if (string != null && string.length() > 4) {
            final StringBuilder sb = new StringBuilder();
            for (int i = 0; i < -4 + string.length(); ++i) {
                sb.append('*');
            }
            sb.append(string.substring(-4 + string.length()));
            string = sb.toString();
        }
        return string;
    }
    
    private boolean a(final String s, final DataInputStream dataInputStream) {
        final int unsignedShort = dataInputStream.readUnsignedShort();
        eo.a(3, dk.a, "File version: " + unsignedShort);
        if (unsignedShort > 2) {
            eo.a(6, dk.a, "Unknown agent file version: " + unsignedShort);
            throw new IOException("Unknown agent file version: " + unsignedShort);
        }
        if (unsignedShort < 2) {
            eo.a(5, dk.a, "Deleting old file version: " + unsignedShort);
            return false;
        }
        final String utf = dataInputStream.readUTF();
        eo.a(3, dk.a, "Loading API key: " + a(s));
        if (utf.equals(s)) {
            final ArrayList<dh> list = new ArrayList<dh>();
            dataInputStream.readUTF();
            final boolean boolean1 = dataInputStream.readBoolean();
            final long long1 = dataInputStream.readLong();
            eo.a(3, dk.a, "Loading session reports");
            int n = 0;
            while (true) {
                final int unsignedShort2 = dataInputStream.readUnsignedShort();
                if (unsignedShort2 == 0) {
                    break;
                }
                final byte[] array = new byte[unsignedShort2];
                dataInputStream.readFully(array);
                list.add(0, new dh(array));
                final String a = dk.a;
                final StringBuilder sb = new StringBuilder("Session report added: ");
                ++n;
                eo.a(3, a, sb.append(n).toString());
            }
            eo.a(3, dk.a, "Persistent file loaded");
            this.a(boolean1);
            this.a(long1);
            this.a(list);
            return true;
        }
        eo.a(3, dk.a, "Api keys do not match, old: " + a(s) + ", new: " + a(utf));
        return false;
    }
    
    public void a(final long d) {
        this.d = d;
    }
    
    public void a(final DataOutputStream dataOutputStream, final String s, final String s2) {
        try {
            dataOutputStream.writeShort(46586);
            dataOutputStream.writeShort(2);
            dataOutputStream.writeUTF(s);
            dataOutputStream.writeUTF(s2);
            dataOutputStream.writeBoolean(this.b);
            dataOutputStream.writeLong(this.d);
            for (int i = -1 + this.c.size(); i >= 0; --i) {
                final byte[] a = this.c.get(i).a();
                final int length = a.length;
                if (length + 2 + dataOutputStream.size() > 50000) {
                    eo.a(6, dk.a, "discarded sessions: " + i);
                    break;
                }
                dataOutputStream.writeShort(length);
                dataOutputStream.write(a);
            }
            dataOutputStream.writeShort(0);
        }
        catch (Throwable t) {
            eo.a(6, dk.a, "", t);
            throw new IOException(t.getMessage());
        }
        finally {
            fe.a(dataOutputStream);
        }
    }
    
    public void a(final List c) {
        this.c = c;
    }
    
    public void a(final boolean b) {
        this.b = b;
    }
    
    public boolean a() {
        return this.b;
    }
    
    public boolean a(final DataInputStream dataInputStream, final String s) {
        try {
            final int unsignedShort = dataInputStream.readUnsignedShort();
            eo.a(4, dk.a, "Magic: " + unsignedShort);
            boolean a;
            if (unsignedShort == 46586) {
                a = this.a(s, dataInputStream);
            }
            else {
                eo.a(3, dk.a, "Unexpected file type");
                a = false;
            }
            return a;
        }
        catch (Throwable t) {
            eo.a(6, dk.a, "Error when loading persistent file", t);
            throw new IOException(t.getMessage());
        }
        finally {
            fe.a(dataInputStream);
        }
    }
    
    public List b() {
        return this.c;
    }
    
    public long c() {
        return this.d;
    }
}
