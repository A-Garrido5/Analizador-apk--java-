// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.lang.reflect.InvocationTargetException;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.lang.reflect.Method;

@kb
public class pn extends pw implements jt
{
    protected final Method a;
    protected jk b;
    protected final is c;
    protected boolean d;
    
    public pn(final Method a, final jk b, final is c) {
        super(Object.class);
        this.a = a;
        this.b = b;
        this.c = c;
    }
    
    @Override
    public void a(final jw jw) {
        if (this.b == null && (jw.a(ju$a.h) || Modifier.isFinal(this.a.getReturnType().getModifiers()))) {
            final sh a = jw.a(this.a.getGenericReturnType());
            this.b = jw.a(a, false, this.c);
            this.d = this.a(a, this.b);
        }
    }
    
    @Override
    public void a(final Object o, final hf hf, final jw jw) {
        try {
            final Object invoke = this.a.invoke(o, new Object[0]);
            if (invoke == null) {
                jw.a(hf);
                return;
            }
            jk jk = this.b;
            if (jk == null) {
                jk = jw.a(invoke.getClass(), true, this.c);
            }
            jk.a(invoke, hf, jw);
        }
        catch (IOException ex) {
            throw ex;
        }
        catch (Exception t) {
            goto Label_0067;
        }
    }
    
    @Override
    public void a(final Object o, final hf hf, final jw jw, final jz jz) {
        try {
            final Object invoke = this.a.invoke(o, new Object[0]);
            if (invoke == null) {
                jw.a(hf);
                return;
            }
            final jk b = this.b;
            if (b == null) {
                goto Label_0081;
            }
            if (this.d) {
                jz.a(o, hf);
            }
            b.a(invoke, hf, jw, jz);
            if (this.d) {
                jz.d(o, hf);
            }
        }
        catch (IOException ex) {
            throw ex;
        }
        catch (Exception cause) {
            while (cause instanceof InvocationTargetException && cause.getCause() != null) {
                cause = cause.getCause();
            }
            if (cause instanceof Error) {
                throw (Error)cause;
            }
            throw jh.a(cause, o, this.a.getName() + "()");
        }
    }
    
    protected boolean a(final sh sh, final jk jk) {
        final Class p2 = sh.p();
        Label_0059: {
            if (sh.t()) {
                if (p2 == Integer.TYPE || p2 == Boolean.TYPE || p2 == Double.TYPE) {
                    break Label_0059;
                }
            }
            else if (p2 == String.class || p2 == Integer.class || p2 == Boolean.class || p2 == Double.class) {
                break Label_0059;
            }
            return false;
        }
        if (jk.getClass().getAnnotation(kb.class) != null) {
            return true;
        }
        return false;
    }
    
    @Override
    public String toString() {
        return "(@JsonValue serializer for method " + this.a.getDeclaringClass() + "#" + this.a.getName() + ")";
    }
}
