// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.math.BigInteger;
import java.math.BigDecimal;

public abstract class hu extends hv
{
    static final BigDecimal u;
    static final BigDecimal v;
    static final BigDecimal w;
    static final BigDecimal x;
    protected long A;
    protected double B;
    protected BigInteger C;
    protected BigDecimal D;
    protected boolean E;
    protected int F;
    protected int G;
    protected int H;
    protected final ie d;
    protected boolean e;
    protected int f;
    protected int g;
    protected long h;
    protected int i;
    protected int j;
    protected long k;
    protected int l;
    protected int m;
    protected hw n;
    protected hm o;
    protected final sp p;
    protected char[] q;
    protected boolean r;
    protected sj s;
    protected byte[] t;
    protected int y;
    protected int z;
    
    static {
        u = new BigDecimal(Long.MIN_VALUE);
        v = new BigDecimal(Long.MAX_VALUE);
        w = new BigDecimal(Long.MIN_VALUE);
        x = new BigDecimal(Long.MAX_VALUE);
    }
    
    protected hu(final ie d, final int a) {
        this.f = 0;
        this.g = 0;
        this.h = 0L;
        this.i = 1;
        this.j = 0;
        this.k = 0L;
        this.l = 1;
        this.m = 0;
        this.q = null;
        this.r = false;
        this.s = null;
        this.y = 0;
        this.a = a;
        this.d = d;
        this.p = d.d();
        this.n = hw.g();
    }
    
    private final void a(final int n, final char[] array, final int n2, final int n3) {
        final String f = this.p.f();
        try {
            if (ii.a(array, n2, n3, this.E)) {
                this.A = Long.parseLong(f);
                this.y = 2;
                return;
            }
            this.C = new BigInteger(f);
            this.y = 4;
        }
        catch (NumberFormatException ex) {
            this.a("Malformed numeric value '" + f + "'", ex);
        }
    }
    
    private final void d(final int n) {
        Label_0024: {
            if (n != 16) {
                break Label_0024;
            }
            try {
                this.D = this.p.h();
                this.y = 16;
                return;
                this.B = this.p.i();
                this.y = 8;
            }
            catch (NumberFormatException ex) {
                this.a("Malformed numeric value '" + this.p.f() + "'", ex);
            }
        }
    }
    
    public final long A() {
        return this.k;
    }
    
    public final int B() {
        return this.l;
    }
    
    public final int C() {
        final int m = this.m;
        if (m < 0) {
            return m;
        }
        return m + 1;
    }
    
    protected final void D() {
        if (!this.E()) {
            this.S();
        }
    }
    
    protected abstract boolean E();
    
    protected abstract void F();
    
    protected void G() {
        this.p.a();
        final char[] q = this.q;
        if (q != null) {
            this.q = null;
            this.d.c(q);
        }
    }
    
    @Override
    protected void H() {
        if (!this.n.b()) {
            this.c(": expected close marker for " + this.n.d() + " (from " + this.n.a(this.d.a()) + ")");
        }
    }
    
    public sj I() {
        if (this.s == null) {
            this.s = new sj();
        }
        else {
            this.s.a();
        }
        return this.s;
    }
    
    protected void J() {
        if ((0x2 & this.y) != 0x0) {
            final int z = (int)this.A;
            if (z != this.A) {
                this.d("Numeric value (" + this.k() + ") out of range of int");
            }
            this.z = z;
        }
        else if ((0x4 & this.y) != 0x0) {
            this.z = this.C.intValue();
        }
        else if ((0x8 & this.y) != 0x0) {
            if (this.B < -2.147483648E9 || this.B > 2.147483647E9) {
                this.O();
            }
            this.z = (int)this.B;
        }
        else if ((0x10 & this.y) != 0x0) {
            if (hu.w.compareTo(this.D) > 0 || hu.x.compareTo(this.D) < 0) {
                this.O();
            }
            this.z = this.D.intValue();
        }
        else {
            this.U();
        }
        this.y |= 0x1;
    }
    
    protected void K() {
        if ((0x1 & this.y) != 0x0) {
            this.A = this.z;
        }
        else if ((0x4 & this.y) != 0x0) {
            this.A = this.C.longValue();
        }
        else if ((0x8 & this.y) != 0x0) {
            if (this.B < -9.223372036854776E18 || this.B > 9.223372036854776E18) {
                this.P();
            }
            this.A = (long)this.B;
        }
        else if ((0x10 & this.y) != 0x0) {
            if (hu.u.compareTo(this.D) > 0 || hu.v.compareTo(this.D) < 0) {
                this.P();
            }
            this.A = this.D.longValue();
        }
        else {
            this.U();
        }
        this.y |= 0x2;
    }
    
    protected void L() {
        if ((0x10 & this.y) != 0x0) {
            this.C = this.D.toBigInteger();
        }
        else if ((0x2 & this.y) != 0x0) {
            this.C = BigInteger.valueOf(this.A);
        }
        else if ((0x1 & this.y) != 0x0) {
            this.C = BigInteger.valueOf(this.z);
        }
        else if ((0x8 & this.y) != 0x0) {
            this.C = BigDecimal.valueOf(this.B).toBigInteger();
        }
        else {
            this.U();
        }
        this.y |= 0x4;
    }
    
    protected void M() {
        if ((0x10 & this.y) != 0x0) {
            this.B = this.D.doubleValue();
        }
        else if ((0x4 & this.y) != 0x0) {
            this.B = this.C.doubleValue();
        }
        else if ((0x2 & this.y) != 0x0) {
            this.B = this.A;
        }
        else if ((0x1 & this.y) != 0x0) {
            this.B = this.z;
        }
        else {
            this.U();
        }
        this.y |= 0x8;
    }
    
    protected void N() {
        if ((0x8 & this.y) != 0x0) {
            this.D = new BigDecimal(this.k());
        }
        else if ((0x4 & this.y) != 0x0) {
            this.D = new BigDecimal(this.C);
        }
        else if ((0x2 & this.y) != 0x0) {
            this.D = BigDecimal.valueOf(this.A);
        }
        else if ((0x1 & this.y) != 0x0) {
            this.D = BigDecimal.valueOf(this.z);
        }
        else {
            this.U();
        }
        this.y |= 0x10;
    }
    
    protected void O() {
        this.d("Numeric value (" + this.k() + ") out of range of int (-2147483648 - 2147483647)");
    }
    
    protected void P() {
        this.d("Numeric value (" + this.k() + ") out of range of long (-9223372036854775808 - 9223372036854775807)");
    }
    
    protected char Q() {
        throw new UnsupportedOperationException();
    }
    
    protected final int a(final ha ha, final char c, final int n) {
        if (c != '\\') {
            throw this.b(ha, c, n);
        }
        final char q = this.Q();
        int b;
        if (q <= ' ' && n == 0) {
            b = -1;
        }
        else {
            b = ha.b(q);
            if (b < 0) {
                throw this.b(ha, q, n);
            }
        }
        return b;
    }
    
    protected final int a(final ha ha, final int n, final int n2) {
        if (n != 92) {
            throw this.b(ha, n, n2);
        }
        final char q = this.Q();
        int b;
        if (q <= ' ' && n2 == 0) {
            b = -1;
        }
        else {
            b = ha.b((int)q);
            if (b < 0) {
                throw this.b(ha, q, n2);
            }
        }
        return b;
    }
    
    protected final hm a(final String s, final double b) {
        this.p.a(s);
        this.B = b;
        this.y = 8;
        return hm.j;
    }
    
    protected final hm a(final boolean e, final int f) {
        this.E = e;
        this.F = f;
        this.G = 0;
        this.H = 0;
        this.y = 0;
        return hm.i;
    }
    
    protected final hm a(final boolean b, final int n, final int n2, final int n3) {
        if (n2 <= 0 && n3 <= 0) {
            return this.a(b, n);
        }
        return this.b(b, n, n2, n3);
    }
    
    protected IllegalArgumentException a(final ha ha, final int n, final int n2, final String s) {
        String s2;
        if (n <= 32) {
            s2 = "Illegal white space character (code 0x" + Integer.toHexString(n) + ") as character #" + (n2 + 1) + " of 4-char base64 unit: can only used between units";
        }
        else if (ha.a(n)) {
            s2 = "Unexpected padding character ('" + ha.b() + "') as character #" + (n2 + 1) + " of 4-char base64 unit: padding only legal as 3rd or 4th character";
        }
        else if (!Character.isDefined(n) || Character.isISOControl(n)) {
            s2 = "Illegal character (code 0x" + Integer.toHexString(n) + ") in base64 content";
        }
        else {
            s2 = "Illegal character '" + (char)n + "' (code 0x" + Integer.toHexString(n) + ") in base64 content";
        }
        if (s != null) {
            s2 = s2 + ": " + s;
        }
        return new IllegalArgumentException(s2);
    }
    
    protected void a(final int n) {
        if (this.b == hm.i) {
            final char[] e = this.p.e();
            int d = this.p.d();
            final int f = this.F;
            if (this.E) {
                ++d;
            }
            if (f <= 9) {
                int a = ii.a(e, d, f);
                if (this.E) {
                    a = -a;
                }
                this.z = a;
                this.y = 1;
                return;
            }
            if (f <= 18) {
                long b = ii.b(e, d, f);
                if (this.E) {
                    b = -b;
                }
                if (f == 10) {
                    if (this.E) {
                        if (b >= -2147483648L) {
                            this.z = (int)b;
                            this.y = 1;
                            return;
                        }
                    }
                    else if (b <= 2147483647L) {
                        this.z = (int)b;
                        this.y = 1;
                        return;
                    }
                }
                this.A = b;
                this.y = 2;
                return;
            }
            this.a(n, e, d, f);
        }
        else {
            if (this.b == hm.j) {
                this.d(n);
                return;
            }
            this.d("Current token (" + this.b + ") not numeric, can not use numeric value accessors");
        }
    }
    
    protected void a(final int n, final char c) {
        this.d("Unexpected close marker '" + (char)n + "': expected '" + c + "' (for " + this.n.d() + " starting at " + new StringBuilder().append(this.n.a(this.d.a())).toString() + ")");
    }
    
    protected void a(final int n, final String s) {
        String s2 = "Unexpected character (" + hv.c(n) + ") in numeric value";
        if (s != null) {
            s2 = s2 + ": " + s;
        }
        this.d(s2);
    }
    
    protected final hm b(final boolean e, final int f, final int g, final int h) {
        this.E = e;
        this.F = f;
        this.G = g;
        this.H = h;
        this.y = 0;
        return hm.j;
    }
    
    protected IllegalArgumentException b(final ha ha, final int n, final int n2) {
        return this.a(ha, n, n2, null);
    }
    
    protected void b(final String s) {
        this.d("Invalid numeric value: " + s);
    }
    
    @Override
    public void close() {
        if (this.e) {
            return;
        }
        this.e = true;
        try {
            this.F();
        }
        finally {
            this.G();
        }
    }
    
    @Override
    public String g() {
        if (this.b == hm.b || this.b == hm.d) {
            return this.n.i().h();
        }
        return this.n.h();
    }
    
    @Override
    public hg h() {
        return new hg(this.d.a(), this.A(), this.B(), this.C());
    }
    
    @Override
    public hg i() {
        return new hg(this.d.a(), this.h + this.f - 1L, this.i, 1 + (this.f - this.j));
    }
    
    @Override
    public boolean o() {
        return this.b == hm.h || (this.b == hm.f && this.r);
    }
    
    @Override
    public Number p() {
        if (this.y == 0) {
            this.a(0);
        }
        if (this.b == hm.i) {
            if ((0x1 & this.y) != 0x0) {
                return this.z;
            }
            if ((0x2 & this.y) != 0x0) {
                return this.A;
            }
            if ((0x4 & this.y) != 0x0) {
                return this.C;
            }
            return this.D;
        }
        else {
            if ((0x10 & this.y) != 0x0) {
                return this.D;
            }
            if ((0x8 & this.y) == 0x0) {
                this.U();
            }
            return this.B;
        }
    }
    
    @Override
    public hj$b q() {
        if (this.y == 0) {
            this.a(0);
        }
        if (this.b == hm.i) {
            if ((0x1 & this.y) != 0x0) {
                return hj$b.a;
            }
            if ((0x2 & this.y) != 0x0) {
                return hj$b.b;
            }
            return hj$b.c;
        }
        else {
            if ((0x10 & this.y) != 0x0) {
                return hj$b.f;
            }
            return hj$b.e;
        }
    }
    
    @Override
    public int t() {
        if ((0x1 & this.y) == 0x0) {
            if (this.y == 0) {
                this.a(1);
            }
            if ((0x1 & this.y) == 0x0) {
                this.J();
            }
        }
        return this.z;
    }
    
    @Override
    public long u() {
        if ((0x2 & this.y) == 0x0) {
            if (this.y == 0) {
                this.a(2);
            }
            if ((0x2 & this.y) == 0x0) {
                this.K();
            }
        }
        return this.A;
    }
    
    @Override
    public BigInteger v() {
        if ((0x4 & this.y) == 0x0) {
            if (this.y == 0) {
                this.a(4);
            }
            if ((0x4 & this.y) == 0x0) {
                this.L();
            }
        }
        return this.C;
    }
    
    @Override
    public float w() {
        return (float)this.x();
    }
    
    @Override
    public double x() {
        if ((0x8 & this.y) == 0x0) {
            if (this.y == 0) {
                this.a(8);
            }
            if ((0x8 & this.y) == 0x0) {
                this.M();
            }
        }
        return this.B;
    }
    
    @Override
    public BigDecimal y() {
        if ((0x10 & this.y) == 0x0) {
            if (this.y == 0) {
                this.a(16);
            }
            if ((0x10 & this.y) == 0x0) {
                this.N();
            }
        }
        return this.D;
    }
}
