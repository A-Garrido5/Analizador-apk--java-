// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public final class ii
{
    static final String a;
    static final String b;
    
    static {
        a = String.valueOf(Long.MIN_VALUE).substring(1);
        b = String.valueOf(Long.MAX_VALUE);
    }
    
    public static double a(final String s, final double n) {
        if (s != null) {
            final String trim = s.trim();
            if (trim.length() != 0) {
                try {
                    return c(trim);
                }
                catch (NumberFormatException ex) {
                    return n;
                }
            }
        }
        return n;
    }
    
    public static final int a(final String s) {
        int n = 1;
        char c = s.charAt(0);
        final int length = s.length();
        int n2;
        if (c == '-') {
            n2 = n;
        }
        else {
            n2 = 0;
        }
        Label_0061: {
            final int int1;
            if (n2 != 0) {
                if (length != n && length <= 10) {
                    c = s.charAt(n);
                    n = 2;
                    break Label_0061;
                }
                int1 = Integer.parseInt(s);
            }
            else {
                if (length > 9) {
                    return Integer.parseInt(s);
                }
                break Label_0061;
            }
            return int1;
        }
        if (c > '9' || c < '0') {
            return Integer.parseInt(s);
        }
        int int1 = c - '0';
        if (n < length) {
            final int n3 = n + 1;
            final char char1 = s.charAt(n);
            if (char1 > '9' || char1 < '0') {
                return Integer.parseInt(s);
            }
            int1 = int1 * 10 + (char1 - '0');
            if (n3 < length) {
                int n4 = n3 + 1;
                final char char2 = s.charAt(n3);
                if (char2 > '9' || char2 < '0') {
                    return Integer.parseInt(s);
                }
                int1 = int1 * 10 + (char2 - '0');
                if (n4 < length) {
                    while (true) {
                        final int n5 = n4 + 1;
                        final char char3 = s.charAt(n4);
                        if (char3 > '9' || char3 < '0') {
                            return Integer.parseInt(s);
                        }
                        int1 = int1 * 10 + (char3 - '0');
                        if (n5 >= length) {
                            break;
                        }
                        n4 = n5;
                    }
                }
            }
        }
        if (n2 != 0) {
            return -int1;
        }
        return int1;
    }
    
    public static final int a(final char[] array, final int n, final int n2) {
        int n3 = -48 + array[n];
        final int n4 = n2 + n;
        final int n5 = n + 1;
        if (n5 < n4) {
            n3 = n3 * 10 + (-48 + array[n5]);
            final int n6 = n5 + 1;
            if (n6 < n4) {
                n3 = n3 * 10 + (-48 + array[n6]);
                final int n7 = n6 + 1;
                if (n7 < n4) {
                    n3 = n3 * 10 + (-48 + array[n7]);
                    final int n8 = n7 + 1;
                    if (n8 < n4) {
                        n3 = n3 * 10 + (-48 + array[n8]);
                        final int n9 = n8 + 1;
                        if (n9 < n4) {
                            n3 = n3 * 10 + (-48 + array[n9]);
                            final int n10 = n9 + 1;
                            if (n10 < n4) {
                                n3 = n3 * 10 + (-48 + array[n10]);
                                final int n11 = n10 + 1;
                                if (n11 < n4) {
                                    n3 = n3 * 10 + (-48 + array[n11]);
                                    final int n12 = n11 + 1;
                                    if (n12 < n4) {
                                        n3 = n3 * 10 + (-48 + array[n12]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return n3;
    }
    
    public static final boolean a(final String s, final boolean b) {
        String s2;
        if (b) {
            s2 = ii.a;
        }
        else {
            s2 = ii.b;
        }
        final int length = s2.length();
        final int length2 = s.length();
        if (length2 < length) {
            return true;
        }
        if (length2 > length) {
            return false;
        }
        for (int i = 0; i < length; ++i) {
            final char c = (char)(s.charAt(i) - s2.charAt(i));
            if (c != '\0') {
                return c < '\0';
            }
        }
        return true;
    }
    
    public static final boolean a(final char[] array, final int n, final int n2, final boolean b) {
        String s;
        if (b) {
            s = ii.a;
        }
        else {
            s = ii.b;
        }
        final int length = s.length();
        if (n2 < length) {
            return true;
        }
        if (n2 > length) {
            return false;
        }
        for (int i = 0; i < length; ++i) {
            final char c = (char)(array[n + i] - s.charAt(i));
            if (c != '\0') {
                return c < '\0';
            }
        }
        return true;
    }
    
    public static final long b(final String s) {
        if (s.length() <= 9) {
            return a(s);
        }
        return Long.parseLong(s);
    }
    
    public static final long b(final char[] array, final int n, final int n2) {
        final int n3 = n2 - 9;
        return 1000000000L * a(array, n, n3) + a(array, n3 + n, 9);
    }
    
    public static final double c(final String s) {
        if ("2.2250738585072012e-308".equals(s)) {
            return Double.MIN_NORMAL;
        }
        return Double.parseDouble(s);
    }
}
