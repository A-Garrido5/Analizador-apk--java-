// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public abstract class pc extends pw implements jt
{
    protected static final oi[] a;
    protected final oi[] b;
    protected final oi[] c;
    protected final of d;
    protected final Object e;
    
    static {
        a = new oi[0];
    }
    
    protected pc(final pc pc) {
        this(pc.k, pc.b, pc.c, pc.d, pc.e);
    }
    
    protected pc(final sh sh, final oi[] b, final oi[] c, final of d, final Object e) {
        super(sh);
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
    }
    
    public pc(final Class clazz, final oi[] b, final oi[] c, final of d, final Object e) {
        super(clazz);
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
    }
    
    @Override
    public void a(final jw jw) {
        int length;
        if (this.c == null) {
            length = 0;
        }
        else {
            length = this.c.length;
        }
        for (int length2 = this.b.length, i = 0; i < length2; ++i) {
            final oi oi = this.b[i];
            if (!oi.e()) {
                sh sh = oi.f();
                if (sh == null) {
                    sh = jw.a(oi.g());
                    if (!sh.u()) {
                        if (sh.f() || sh.h() > 0) {
                            oi.a(sh);
                        }
                        continue;
                    }
                }
                jk jk = jw.a(sh, oi);
                if (sh.f()) {
                    final jz jz = (jz)sh.g().o();
                    if (jz != null && jk instanceof pf) {
                        jk = ((pf)jk).b(jz);
                    }
                }
                this.b[i] = oi.a(jk);
                if (i < length) {
                    final oi oi2 = this.c[i];
                    if (oi2 != null) {
                        this.c[i] = oi2.a(jk);
                    }
                }
            }
        }
        if (this.d != null) {
            this.d.a(jw);
        }
    }
    
    @Override
    public void a(final Object o, final hf hf, final jw jw, final jz jz) {
        jz.b(o, hf);
        if (this.e != null) {
            this.c(o, hf, jw);
        }
        else {
            this.b(o, hf, jw);
        }
        jz.e(o, hf);
    }
    
    protected oh b(final jw jw) {
        final Object e = this.e;
        final on b = jw.b();
        if (b == null) {
            throw new jh("Can not resolve BeanPropertyFilter with id '" + e + "'; no FilterProvider configured");
        }
        return b.a(e);
    }
    
    protected void b(final Object o, final hf hf, final jw jw) {
        Label_0061: {
            if (this.c == null || jw.a() == null) {
                break Label_0061;
            }
            oi[] array = this.c;
            while (true) {
                int i = 0;
                try {
                    while (i < array.length) {
                        final oi oi = array[i];
                        if (oi != null) {
                            oi.a(o, hf, jw);
                        }
                        ++i;
                    }
                    if (this.d != null) {
                        this.d.a(o, hf, jw);
                    }
                    return;
                    array = this.b;
                }
                catch (Exception ex) {
                    String d;
                    if (i == array.length) {
                        d = "[anySetter]";
                    }
                    else {
                        d = array[i].d();
                    }
                    this.a(jw, ex, o, d);
                }
                catch (StackOverflowError stackOverflowError) {
                    final jh jh = new jh("Infinite recursion (StackOverflowError)");
                    String d2;
                    if (i == array.length) {
                        d2 = "[anySetter]";
                    }
                    else {
                        d2 = array[i].d();
                    }
                    jh.a(new jh$a(o, d2));
                    throw jh;
                }
            }
        }
    }
    
    protected void c(final Object o, final hf hf, final jw jw) {
        oi[] array;
        if (this.c != null && jw.a() != null) {
            array = this.c;
        }
        else {
            array = this.b;
        }
        final oh b = this.b(jw);
        if (b == null) {
            this.b(o, hf, jw);
        }
        else {
            while (true) {
                int n = 0;
                while (true) {
                    try {
                        final int length = array.length;
                        if (n < length) {
                            final oi oi = array[n];
                            if (oi != null) {
                                b.a(o, hf, jw, oi);
                            }
                        }
                        else {
                            if (this.d != null) {
                                this.d.a(o, hf, jw);
                                return;
                            }
                            break;
                        }
                    }
                    catch (Exception ex) {
                        String d;
                        if (n == array.length) {
                            d = "[anySetter]";
                        }
                        else {
                            d = array[n].d();
                        }
                        this.a(jw, ex, o, d);
                        return;
                    }
                    catch (StackOverflowError stackOverflowError) {
                        final jh jh = new jh("Infinite recursion (StackOverflowError)");
                        String d2;
                        if (n == array.length) {
                            d2 = "[anySetter]";
                        }
                        else {
                            d2 = array[n].d();
                        }
                        jh.a(new jh$a(o, d2));
                        throw jh;
                    }
                    ++n;
                    continue;
                }
            }
        }
    }
}
