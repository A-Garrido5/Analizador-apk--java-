// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Map;
import java.util.Iterator;
import java.util.Collection;

public class ml
{
    public static final ml a;
    
    static {
        a = new ml();
    }
    
    private Object a(final String s) {
        try {
            return Class.forName(s).newInstance();
        }
        catch (Exception ex) {}
        catch (LinkageError linkageError) {
            goto Label_0013;
        }
    }
    
    private boolean a(Class superclass, final String s) {
        while (superclass != null) {
            if (superclass.getName().equals(s) || this.b(superclass, s)) {
                return true;
            }
            superclass = superclass.getSuperclass();
        }
        return false;
    }
    
    private boolean b(final Class clazz, final String s) {
        final Class[] interfaces = clazz.getInterfaces();
        for (int length = interfaces.length, i = 0; i < length; ++i) {
            if (interfaces[i].getName().equals(s)) {
                return true;
            }
        }
        for (int length2 = interfaces.length, j = 0; j < length2; ++j) {
            if (this.b(interfaces[j], s)) {
                return true;
            }
        }
        return false;
    }
    
    private boolean c(Class superclass, final String s) {
        for (Class clazz = superclass.getSuperclass(); clazz != null; clazz = clazz.getSuperclass()) {
            if (clazz.getName().startsWith(s)) {
                return true;
            }
        }
        while (superclass != null) {
            if (this.d(superclass, s)) {
                return true;
            }
            superclass = superclass.getSuperclass();
        }
        return false;
    }
    
    private boolean d(final Class clazz, final String s) {
        final Class[] interfaces = clazz.getInterfaces();
        for (int length = interfaces.length, i = 0; i < length; ++i) {
            if (interfaces[i].getName().startsWith(s)) {
                return true;
            }
        }
        for (int length2 = interfaces.length, j = 0; j < length2; ++j) {
            if (this.d(interfaces[j], s)) {
                return true;
            }
        }
        return false;
    }
    
    public jg a(final sh sh, final iy iy, final jc jc) {
        final Class p3 = sh.p();
        final String name = p3.getName();
        String s;
        if (name.startsWith("org.joda.time.")) {
            s = "com.flurry.org.codehaus.jackson.map.ext.JodaDeserializers";
        }
        else if (name.startsWith("javax.xml.") || this.c(p3, "javax.xml.")) {
            s = "com.flurry.org.codehaus.jackson.map.ext.CoreXMLDeserializers";
        }
        else {
            if (this.a(p3, "org.w3c.dom.Node")) {
                return (jg)this.a("com.flurry.org.codehaus.jackson.map.ext.DOMDeserializer$DocumentDeserializer");
            }
            if (this.a(p3, "org.w3c.dom.Node")) {
                return (jg)this.a("com.flurry.org.codehaus.jackson.map.ext.DOMDeserializer$NodeDeserializer");
            }
            return null;
        }
        final Object a = this.a(s);
        if (a == null) {
            return null;
        }
        final Collection a2 = ((rg)a).a();
        for (final lz lz : a2) {
            if (p3 == lz.f()) {
                return lz;
            }
        }
        for (final lz lz2 : a2) {
            if (lz2.f().isAssignableFrom(p3)) {
                return lz2;
            }
        }
        return null;
    }
    
    public jk a(final ju ju, final sh sh) {
        final Class p2 = sh.p();
        final String name = p2.getName();
        String s;
        if (name.startsWith("org.joda.time.")) {
            s = "com.flurry.org.codehaus.jackson.map.ext.JodaSerializers";
        }
        else if (name.startsWith("javax.xml.") || this.c(p2, "javax.xml.")) {
            s = "com.flurry.org.codehaus.jackson.map.ext.CoreXMLSerializers";
        }
        else {
            if (this.a(p2, "org.w3c.dom.Node")) {
                return (jk)this.a("com.flurry.org.codehaus.jackson.map.ext.DOMSerializer");
            }
            return null;
        }
        final Object a = this.a(s);
        if (a == null) {
            return null;
        }
        final Collection a2 = ((rg)a).a();
        for (final Map.Entry<Class, V> entry : a2) {
            if (p2 == entry.getKey()) {
                return (jk)entry.getValue();
            }
        }
        for (final Map.Entry<Class, V> entry2 : a2) {
            if (entry2.getKey().isAssignableFrom(p2)) {
                return (jk)entry2.getValue();
            }
        }
        return null;
    }
}
