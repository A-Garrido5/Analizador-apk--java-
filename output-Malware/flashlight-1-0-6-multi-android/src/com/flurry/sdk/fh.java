// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Iterator;
import java.io.EOFException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;
import java.util.LinkedHashMap;
import java.io.Writer;
import java.io.File;
import java.util.concurrent.ThreadPoolExecutor;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.io.Closeable;

public final class fh implements Closeable
{
    static final Pattern a;
    private static final OutputStream p;
    final ThreadPoolExecutor b;
    private final File c;
    private final File d;
    private final File e;
    private final File f;
    private final int g;
    private long h;
    private final int i;
    private long j;
    private Writer k;
    private final LinkedHashMap l;
    private int m;
    private long n;
    private final Callable o;
    
    static {
        a = Pattern.compile("[a-z0-9_-]{1,64}");
        p = new OutputStream() {
            @Override
            public final void write(final int n) {
            }
        };
    }
    
    private fh(final File c, final int g, final int i, final long h) {
        this.j = 0L;
        this.l = new LinkedHashMap(0, 0.75f, true);
        this.n = 0L;
        this.b = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
        this.o = new Callable() {
            public Void a() {
                synchronized (fh.this) {
                    if (fh.this.k == null) {
                        return null;
                    }
                    fh.this.h();
                    if (fh.this.f()) {
                        fh.this.e();
                        fh.this.m = 0;
                    }
                    return null;
                }
            }
        };
        this.c = c;
        this.g = g;
        this.d = new File(c, "journal");
        this.e = new File(c, "journal.tmp");
        this.f = new File(c, "journal.bkp");
        this.i = i;
        this.h = h;
    }
    
    private fh$a a(final String s, final long n) {
        while (true) {
            while (true) {
                final fh$b fh$b;
                Label_0157: {
                    synchronized (this) {
                        this.g();
                        this.e(s);
                        fh$b = this.l.get(s);
                        fh$a fh$a;
                        if (n != -1L && (fh$b == null || fh$b.f != n)) {
                            fh$a = null;
                        }
                        else {
                            if (fh$b != null) {
                                break Label_0157;
                            }
                            final fh$b fh$b2 = new fh$b(this, s, null);
                            this.l.put(s, fh$b2);
                            final fh$b fh$b3 = fh$b2;
                            fh$a = new fh$a(this, fh$b3, null);
                            fh$b3.e = fh$a;
                            this.k.write("DIRTY " + s + '\n');
                            this.k.flush();
                        }
                        return fh$a;
                    }
                }
                if (fh$b.e != null) {
                    return null;
                }
                final fh$b fh$b3 = fh$b;
                continue;
            }
        }
    }
    
    public static fh a(final File file, final int n, final int n2, final long n3) {
        if (n3 <= 0L) {
            throw new IllegalArgumentException("maxSize <= 0");
        }
        if (n2 <= 0) {
            throw new IllegalArgumentException("valueCount <= 0");
        }
        final File file2 = new File(file, "journal.bkp");
        Label_0148: {
            if (file2.exists()) {
                final File file3 = new File(file, "journal");
                if (!file3.exists()) {
                    break Label_0148;
                }
                file2.delete();
            }
            while (true) {
                final fh fh = new fh(file, n, n2, n3);
                if (!fh.d.exists()) {
                    break Label_0148;
                }
                try {
                    fh.c();
                    fh.d();
                    fh.k = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fh.d, true), fj.a));
                    return fh;
                    final File file3;
                    a(file2, file3, false);
                    continue;
                }
                catch (IOException ex) {
                    System.out.println("DiskLruCache " + file + " is corrupt: " + ex.getMessage() + ", removing");
                    fh.a();
                }
                break;
            }
        }
        file.mkdirs();
        final fh fh2 = new fh(file, n, n2, n3);
        fh2.e();
        return fh2;
    }
    
    private void a(final fh$a fh$a, final boolean b) {
        final fh$b a;
        synchronized (this) {
            a = fh$a.b;
            if (a.e != fh$a) {
                throw new IllegalStateException();
            }
        }
        int i = 0;
        Label_0128: {
            if (b) {
                final boolean d = a.d;
                i = 0;
                if (!d) {
                    int n = 0;
                    while (true) {
                        final int j = this.i;
                        i = 0;
                        if (n >= j) {
                            break;
                        }
                        if (!fh$a.c[n]) {
                            fh$a.b();
                            throw new IllegalStateException("Newly created entry didn't create value for index " + n);
                        }
                        if (!a.b(n).exists()) {
                            fh$a.b();
                            break Label_0128;
                        }
                        ++n;
                    }
                }
            }
            while (i < this.i) {
                final File b2 = a.b(i);
                if (b) {
                    if (b2.exists()) {
                        final File a2 = a.a(i);
                        b2.renameTo(a2);
                        final long n2 = a.c[i];
                        final long length = a2.length();
                        a.c[i] = length;
                        this.j = length + (this.j - n2);
                    }
                }
                else {
                    a(b2);
                }
                ++i;
            }
            ++this.m;
            a.e = null;
            if (b | a.d) {
                a.d = true;
                this.k.write("CLEAN " + a.b + a.a() + '\n');
                if (b) {
                    final long n3 = this.n;
                    this.n = 1L + n3;
                    a.f = n3;
                }
            }
            else {
                this.l.remove(a.b);
                this.k.write("REMOVE " + a.b + '\n');
            }
            this.k.flush();
            if (this.j > this.h || this.f()) {
                this.b.submit((Callable<Object>)this.o);
            }
        }
    }
    // monitorexit(this)
    
    private static void a(final File file) {
        if (file.exists() && !file.delete()) {
            throw new IOException();
        }
    }
    
    private static void a(final File file, final File file2, final boolean b) {
        if (b) {
            a(file2);
        }
        if (!file.renameTo(file2)) {
            throw new IOException();
        }
    }
    
    private void c() {
        final fi fi = new fi(new FileInputStream(this.d), fj.a);
        try {
            final String a = fi.a();
            final String a2 = fi.a();
            final String a3 = fi.a();
            final String a4 = fi.a();
            final String a5 = fi.a();
            if (!"libcore.io.DiskLruCache".equals(a) || !"1".equals(a2) || !Integer.toString(this.g).equals(a3) || !Integer.toString(this.i).equals(a4) || !"".equals(a5)) {
                throw new IOException("unexpected journal header: [" + a + ", " + a2 + ", " + a4 + ", " + a5 + "]");
            }
        }
        finally {
            fj.a(fi);
        }
        int n = 0;
        try {
            while (true) {
                this.d(fi.a());
                ++n;
            }
        }
        catch (EOFException ex) {
            this.m = n - this.l.size();
            fj.a(fi);
        }
    }
    
    private void d() {
        a(this.e);
        final Iterator<fh$b> iterator = this.l.values().iterator();
        while (iterator.hasNext()) {
            final fh$b fh$b = iterator.next();
            if (fh$b.e == null) {
                for (int i = 0; i < this.i; ++i) {
                    this.j += fh$b.c[i];
                }
            }
            else {
                fh$b.e = null;
                for (int j = 0; j < this.i; ++j) {
                    a(fh$b.a(j));
                    a(fh$b.b(j));
                }
                iterator.remove();
            }
        }
    }
    
    private void d(final String s) {
        final int index = s.indexOf(32);
        if (index == -1) {
            throw new IOException("unexpected journal line: " + s);
        }
        final int n = index + 1;
        final int index2 = s.indexOf(32, n);
        String substring = null;
        Label_0099: {
            if (index2 != -1) {
                substring = s.substring(n, index2);
                break Label_0099;
            }
            final String substring2 = s.substring(n);
            if (index != 6 || !s.startsWith("REMOVE")) {
                substring = substring2;
                break Label_0099;
            }
            this.l.remove(substring2);
            return;
        }
        fh$b fh$b = this.l.get(substring);
        if (fh$b == null) {
            fh$b = new fh$b(this, substring, null);
            this.l.put(substring, fh$b);
        }
        if (index2 != -1 && index == 5 && s.startsWith("CLEAN")) {
            final String[] split = s.substring(index2 + 1).split(" ");
            fh$b.d = true;
            fh$b.e = null;
            fh$b.a(split);
            return;
        }
        if (index2 == -1 && index == 5 && s.startsWith("DIRTY")) {
            fh$b.e = new fh$a(this, fh$b, null);
            return;
        }
        if (index2 != -1 || index != 4 || !s.startsWith("READ")) {
            throw new IOException("unexpected journal line: " + s);
        }
    }
    
    private void e() {
        BufferedWriter bufferedWriter;
        while (true) {
            while (true) {
                fh$b fh$b = null;
                synchronized (this) {
                    if (this.k != null) {
                        this.k.close();
                    }
                    bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.e), fj.a));
                    try {
                        bufferedWriter.write("libcore.io.DiskLruCache");
                        bufferedWriter.write("\n");
                        bufferedWriter.write("1");
                        bufferedWriter.write("\n");
                        bufferedWriter.write(Integer.toString(this.g));
                        bufferedWriter.write("\n");
                        bufferedWriter.write(Integer.toString(this.i));
                        bufferedWriter.write("\n");
                        bufferedWriter.write("\n");
                        final Iterator<fh$b> iterator = this.l.values().iterator();
                        while (iterator.hasNext()) {
                            fh$b = iterator.next();
                            if (fh$b.e == null) {
                                break;
                            }
                            bufferedWriter.write("DIRTY " + fh$b.b + '\n');
                        }
                    }
                    finally {
                        bufferedWriter.close();
                    }
                }
                bufferedWriter.write("CLEAN " + fh$b.b + fh$b.a() + '\n');
                continue;
            }
        }
        bufferedWriter.close();
        if (this.d.exists()) {
            a(this.d, this.f, true);
        }
        a(this.e, this.d, false);
        this.f.delete();
        this.k = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.d, true), fj.a));
    }
    // monitorexit(this)
    
    private void e(final String s) {
        if (!fh.a.matcher(s).matches()) {
            throw new IllegalArgumentException("keys must match regex [a-z0-9_-]{1,64}: \"" + s + "\"");
        }
    }
    
    private boolean f() {
        return this.m >= 2000 && this.m >= this.l.size();
    }
    
    private void g() {
        if (this.k == null) {
            throw new IllegalStateException("cache is closed");
        }
    }
    
    private void h() {
        while (this.j > this.h) {
            this.c(this.l.entrySet().iterator().next().getKey());
        }
    }
    
    public final fh$c a(final String s) {
        while (true) {
            synchronized (this) {
                this.g();
                this.e(s);
                final fh$b fh$b = this.l.get(s);
                fh$c fh$c;
                if (fh$b == null) {
                    fh$c = null;
                }
                else if (!fh$b.d) {
                    fh$c = null;
                }
                else {
                    final InputStream[] array = new InputStream[this.i];
                    int i = 0;
                    try {
                        while (i < this.i) {
                            array[i] = new FileInputStream(fh$b.a(i));
                            ++i;
                        }
                    }
                    catch (FileNotFoundException ex) {
                        for (int n = 0; n < this.i && array[n] != null; ++n) {
                            fj.a(array[n]);
                        }
                        return null;
                    }
                    ++this.m;
                    this.k.append((CharSequence)("READ " + s + '\n'));
                    if (this.f()) {
                        this.b.submit((Callable<Object>)this.o);
                    }
                    fh$c = new fh$c(this, s, fh$b.f, array, fh$b.c, null);
                }
                return fh$c;
            }
            return null;
        }
    }
    
    public final void a() {
        this.close();
        fj.a(this.c);
    }
    
    public final fh$a b(final String s) {
        return this.a(s, -1L);
    }
    
    public final boolean c(final String s) {
        while (true) {
            Label_0140: {
                synchronized (this) {
                    this.g();
                    this.e(s);
                    final fh$b fh$b = this.l.get(s);
                    if (fh$b != null) {
                        final fh$a a = fh$b.e;
                        int i = 0;
                        if (a == null) {
                            while (i < this.i) {
                                final File a2 = fh$b.a(i);
                                if (a2.exists() && !a2.delete()) {
                                    throw new IOException("failed to delete " + a2);
                                }
                                this.j -= fh$b.c[i];
                                fh$b.c[i] = 0L;
                                ++i;
                            }
                            break Label_0140;
                        }
                    }
                    return false;
                }
            }
            ++this.m;
            this.k.append((CharSequence)("REMOVE " + s + '\n'));
            this.l.remove(s);
            if (this.f()) {
                this.b.submit((Callable<Object>)this.o);
            }
            return true;
        }
    }
    
    @Override
    public final void close() {
        while (true) {
            synchronized (this) {
                if (this.k == null) {
                    return;
                }
                for (final fh$b fh$b : new ArrayList<fh$b>(this.l.values())) {
                    if (fh$b.e != null) {
                        fh$b.e.b();
                    }
                }
            }
            this.h();
            this.k.close();
            this.k = null;
        }
    }
}
