// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.Map;
import java.util.LinkedHashMap;

public class rw extends ro
{
    protected LinkedHashMap c;
    
    public rw(final rs rs) {
        super(rs);
        this.c = null;
    }
    
    private final hh b(final String s, final hh hh) {
        if (this.c == null) {
            this.c = new LinkedHashMap();
        }
        return (hh)this.c.put(s, hh);
    }
    
    @Override
    public hh a(final String s) {
        if (this.c != null) {
            return this.c.get(s);
        }
        return null;
    }
    
    public hh a(final String s, hh s2) {
        if (s2 == null) {
            s2 = this.s();
        }
        return this.b(s, s2);
    }
    
    @Override
    public final void a(final hf hf, final jw jw) {
        hf.d();
        if (this.c != null) {
            for (final Map.Entry<String, V> entry : this.c.entrySet()) {
                hf.a(entry.getKey());
                ((rk)entry.getValue()).a(hf, jw);
            }
        }
        hf.e();
    }
    
    @Override
    public void a(final hf hf, final jw jw, final jz jz) {
        jz.b(this, hf);
        if (this.c != null) {
            for (final Map.Entry<String, V> entry : this.c.entrySet()) {
                hf.a(entry.getKey());
                ((rk)entry.getValue()).a(hf, jw);
            }
        }
        jz.e(this, hf);
    }
    
    @Override
    public boolean c() {
        return true;
    }
    
    @Override
    public boolean equals(final Object o) {
        if (o == this) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (o.getClass() != this.getClass()) {
            return false;
        }
        final rw rw = (rw)o;
        if (rw.p() != this.p()) {
            return false;
        }
        if (this.c != null) {
            for (final Map.Entry<String, V> entry : this.c.entrySet()) {
                final String s = entry.getKey();
                final hh hh = (hh)entry.getValue();
                final hh a = rw.a(s);
                if (a == null || !a.equals(hh)) {
                    return false;
                }
            }
        }
        return true;
    }
    
    @Override
    public int hashCode() {
        if (this.c == null) {
            return -1;
        }
        return this.c.hashCode();
    }
    
    @Override
    public int p() {
        if (this.c == null) {
            return 0;
        }
        return this.c.size();
    }
    
    @Override
    public Iterator q() {
        if (this.c == null) {
            return ro$a.a();
        }
        return this.c.values().iterator();
    }
    
    @Override
    public Iterator r() {
        if (this.c == null) {
            return ro$b.a();
        }
        return this.c.keySet().iterator();
    }
    
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder(32 + (this.p() << 4));
        sb.append("{");
        if (this.c != null) {
            final Iterator<Map.Entry<String, V>> iterator = this.c.entrySet().iterator();
            int n = 0;
            while (iterator.hasNext()) {
                final Map.Entry<String, V> entry = iterator.next();
                if (n > 0) {
                    sb.append(",");
                }
                final int n2 = n + 1;
                ry.a(sb, entry.getKey());
                sb.append(':');
                sb.append(((hh)entry.getValue()).toString());
                n = n2;
            }
        }
        sb.append("}");
        return sb.toString();
    }
}
