// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.List;
import java.util.Iterator;
import java.util.Map;

public class gr
{
    public gq a(final fn fn, final Map map) {
        gq c = null;
        switch (gr$1.a[fn.a().ordinal()]) {
            default: {
                throw new RuntimeException("Unexpected schema type");
            }
            case 1: {
                c = gq.c;
                break;
            }
            case 2: {
                return gq.d;
            }
            case 3: {
                return gq.e;
            }
            case 4: {
                return gq.f;
            }
            case 5: {
                return gq.g;
            }
            case 6: {
                return gq.h;
            }
            case 7: {
                return gq.i;
            }
            case 8: {
                return gq.j;
            }
            case 9: {
                return gq.b(new gq$h(fn.l()), gq.k);
            }
            case 10: {
                return gq.b(new gq$h(fn.c().size()), gq.l);
            }
            case 11: {
                return gq.b(gq.a(gq.o, new gq[] { this.a(fn.i(), map) }), gq.n);
            }
            case 12: {
                return gq.b(gq.a(gq.q, this.a(fn.j(), map), gq.i), gq.p);
            }
            case 13: {
                final gr$a gr$a = new gr$a(fn);
                c = map.get(gr$a);
                if (c == null) {
                    final gq[] array = new gq[fn.b().size()];
                    final gq b = gq.b(array);
                    map.put(gr$a, b);
                    final int length = array.length;
                    final Iterator<fn$f> iterator = (Iterator<fn$f>)fn.b().iterator();
                    int n = length;
                    while (iterator.hasNext()) {
                        final fn$f fn$f = iterator.next();
                        --n;
                        array[n] = this.a(fn$f.c(), map);
                    }
                    return b;
                }
                break;
            }
            case 14: {
                final List k = fn.k();
                final gq[] array2 = new gq[k.size()];
                final String[] array3 = new String[k.size()];
                final Iterator<fn> iterator2 = (Iterator<fn>)fn.k().iterator();
                int n2 = 0;
                while (iterator2.hasNext()) {
                    final fn fn2 = iterator2.next();
                    array2[n2] = this.a(fn2, map);
                    array3[n2] = fn2.g();
                    ++n2;
                }
                return gq.b(gq.a(array2, array3), gq.m);
            }
        }
        return c;
    }
}
