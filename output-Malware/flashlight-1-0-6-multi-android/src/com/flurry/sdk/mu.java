// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

public abstract class mu extends mq
{
    protected final mv[] d;
    
    protected mu(final mv mv, final mv[] d) {
        super(mv);
        this.d = d;
    }
    
    protected mt a(final int n, final mv mv) {
        this.d[n] = mv;
        return this.c(n);
    }
    
    protected sh a(qr a, final TypeVariable[] array) {
        if (array != null && array.length > 0) {
            a = a.a();
            for (final TypeVariable typeVariable : array) {
                a.b(typeVariable.getName());
                final Type type = typeVariable.getBounds()[0];
                sh sh;
                if (type == null) {
                    sh = qs.b();
                }
                else {
                    sh = a.a(type);
                }
                a.a(typeVariable.getName(), sh);
            }
        }
        return a.a(this.c());
    }
    
    public abstract Object a(final Object p0);
    
    public abstract Object a(final Object[] p0);
    
    @Override
    public final Annotation a(final Class clazz) {
        return this.b.a(clazz);
    }
    
    public final void a(final int n, final Annotation annotation) {
        mv mv = this.d[n];
        if (mv == null) {
            mv = new mv();
            this.d[n] = mv;
        }
        mv.b(annotation);
    }
    
    public final void a(final Annotation annotation) {
        this.b.b(annotation);
    }
    
    public abstract Type b(final int p0);
    
    public final void b(final Annotation annotation) {
        this.b.a(annotation);
    }
    
    public final mt c(final int n) {
        return new mt(this, this.b(n), this.d[n], n);
    }
    
    public abstract Object g();
}
