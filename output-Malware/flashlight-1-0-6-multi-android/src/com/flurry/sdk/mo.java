// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.lang.reflect.Member;
import java.lang.reflect.Type;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.Constructor;

public final class mo extends mu
{
    protected final Constructor a;
    
    public mo(final Constructor a, final mv mv, final mv[] array) {
        super(mv, array);
        if (a == null) {
            throw new IllegalArgumentException("Null constructor not allowed");
        }
        this.a = a;
    }
    
    @Override
    public final sh a(final qr qr) {
        return this.a(qr, this.a.getTypeParameters());
    }
    
    public final Class a(final int n) {
        final Class[] parameterTypes = this.a.getParameterTypes();
        if (n >= parameterTypes.length) {
            return null;
        }
        return parameterTypes[n];
    }
    
    @Override
    public final Object a(final Object o) {
        return this.a.newInstance(o);
    }
    
    @Override
    public final Object a(final Object[] array) {
        return this.a.newInstance(array);
    }
    
    @Override
    public final void a(final Object o, final Object o2) {
        throw new UnsupportedOperationException("Cannot call setValue() on constructor of " + this.h().getName());
    }
    
    @Override
    public final String b() {
        return this.a.getName();
    }
    
    @Override
    public final Type b(final int n) {
        final Type[] genericParameterTypes = this.a.getGenericParameterTypes();
        if (n >= genericParameterTypes.length) {
            return null;
        }
        return genericParameterTypes[n];
    }
    
    @Override
    public final Type c() {
        return this.d();
    }
    
    @Override
    public final Class d() {
        return this.a.getDeclaringClass();
    }
    
    public final Constructor e() {
        return this.a;
    }
    
    public final int f() {
        return this.a.getParameterTypes().length;
    }
    
    @Override
    public final Object g() {
        return this.a.newInstance(new Object[0]);
    }
    
    @Override
    public final Class h() {
        return this.a.getDeclaringClass();
    }
    
    @Override
    public final Member i() {
        return this.a;
    }
    
    @Override
    public final String toString() {
        return "[constructor for " + this.b() + ", annotations: " + this.b + "]";
    }
}
