// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.IOException;
import java.io.Writer;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.Map;

public abstract class fn
{
    static final hd a;
    static final jq b;
    static final Map e;
    private static final Set g;
    private static final Set h;
    private static final ThreadLocal i;
    private static final ThreadLocal j;
    private static ThreadLocal k;
    fn$r c;
    int d;
    private final fn$v f;
    
    static {
        a = new hd();
        b = new jq(fn.a);
        fn.a.a(hj$a.b);
        fn.a.a(fn.b);
        Collections.addAll(g = new HashSet(), "doc", "fields", "items", "name", "namespace", "size", "symbols", "values", "type");
        Collections.addAll(h = new HashSet(), "default", "doc", "name", "order", "type");
        i = new ThreadLocal() {
            protected final Set a() {
                return new HashSet();
            }
        };
        j = new ThreadLocal() {
            protected final Map a() {
                return new IdentityHashMap();
            }
        };
        (e = new HashMap()).put("string", fn$v.g);
        fn.e.put("bytes", fn$v.h);
        fn.e.put("int", fn$v.i);
        fn.e.put("long", fn$v.j);
        fn.e.put("float", fn$v.k);
        fn.e.put("double", fn$v.l);
        fn.e.put("boolean", fn$v.m);
        fn.e.put("null", fn$v.n);
        fn.k = new ThreadLocal() {
            protected final Boolean a() {
                return true;
            }
        };
    }
    
    fn(final fn$v f) {
        this.c = new fn$r(fn.g);
        this.d = Integer.MIN_VALUE;
        this.f = f;
    }
    
    public static fn a(final fn$v fn$v) {
        switch (fn$4.a[fn$v.ordinal()]) {
            default: {
                throw new fk("Can't create a: " + fn$v);
            }
            case 1: {
                return new fn$u();
            }
            case 2: {
                return new fn$c();
            }
            case 3: {
                return new fn$i();
            }
            case 4: {
                return new fn$k();
            }
            case 5: {
                return new fn$h();
            }
            case 6: {
                return new fn$d();
            }
            case 7: {
                return new fn$b();
            }
            case 8: {
                return new fn$p();
            }
        }
    }
    
    public static fn a(final fn fn) {
        return new fn$a(fn);
    }
    
    public static fn a(final fn fn, final fn fn2) {
        if (fn != fn2) {
            final IdentityHashMap identityHashMap = new IdentityHashMap(1);
            final HashMap hashMap = new HashMap(1);
            final HashMap hashMap2 = new HashMap(1);
            b(fn2, identityHashMap, hashMap, hashMap2);
            if (hashMap.size() != 0 || hashMap2.size() != 0) {
                identityHashMap.clear();
                return a(fn, identityHashMap, hashMap, hashMap2);
            }
        }
        return fn;
    }
    
    private static fn a(final fn fn, final Map map, final Map map2, final Map map3) {
        fn$m f;
        if (fn instanceof fn$n) {
            f = ((fn$n)fn).f;
        }
        else {
            f = null;
        }
        fn fn2 = null;
        Label_0067: {
            switch (fn$4.a[fn.a().ordinal()]) {
                case 9: {
                    if (map.containsKey(fn)) {
                        return map.get(fn);
                    }
                    fn$m fn$m;
                    if (map2.containsKey(f)) {
                        fn$m = map2.get(f);
                    }
                    else {
                        fn$m = f;
                    }
                    final fn a = a(fn$m.c, fn.e(), null, fn.h());
                    map.put(fn, a);
                    final ArrayList<fn$f> list = new ArrayList<fn$f>();
                    for (final fn$f fn$f : fn.b()) {
                        final fn$f fn$f2 = new fn$f(a(fn$m, fn$f.a, map3), a(fn$f.c, map, map2, map3), fn$f.d, fn$f.e, fn$f.f);
                        fn$f2.h.putAll(fn$f.h);
                        list.add(fn$f2);
                    }
                    a.c(list);
                    fn2 = a;
                    break Label_0067;
                }
                case 10: {
                    if (map2.containsKey(f)) {
                        fn2 = a(map2.get(f).c, fn.e(), null, fn.c());
                        break Label_0067;
                    }
                    break;
                }
                case 11: {
                    final fn a2 = a(fn.i(), map, map2, map3);
                    if (a2 != fn.i()) {
                        fn2 = a(a2);
                        break Label_0067;
                    }
                    break;
                }
                case 12: {
                    final fn a3 = a(fn.j(), map, map2, map3);
                    if (a3 != fn.j()) {
                        fn2 = b(a3);
                        break Label_0067;
                    }
                    break;
                }
                case 13: {
                    final ArrayList<fn> list2 = new ArrayList<fn>();
                    final Iterator<fn> iterator2 = fn.k().iterator();
                    while (iterator2.hasNext()) {
                        list2.add(a(iterator2.next(), map, map2, map3));
                    }
                    fn2 = b(list2);
                    break Label_0067;
                }
                case 14: {
                    if (map2.containsKey(f)) {
                        fn2 = a(map2.get(f).c, fn.e(), null, fn.l());
                        break Label_0067;
                    }
                    break;
                }
            }
            fn2 = fn;
        }
        if (fn2 != fn) {
            fn2.c.putAll(fn.c);
        }
        return fn2;
    }
    
    static fn a(final hh hh, final fn$o fn$o) {
        fn fn;
        if (hh.f()) {
            fn = fn$o.a((Object)hh.i());
            if (fn == null) {
                throw new fo("Undefined name: " + hh);
            }
        }
        else if (hh.c()) {
            final String a = a(hh, "type", "No type");
            String s2;
            fn$m fn$m2;
            String s3;
            if (a.equals("record") || a.equals("error") || a.equals("enum") || a.equals("fixed")) {
                String s = a(hh, "namespace");
                final String a2 = a(hh, "doc");
                if (s == null) {
                    s = fn$o.a();
                }
                final fn$m fn$m = new fn$m(a(hh, "name", "No name in schema"), s);
                if (fn$m.b != null) {
                    final String a3 = fn$o.a();
                    fn$o.a(fn$m.b);
                    s2 = a3;
                    fn$m2 = fn$m;
                    s3 = a2;
                }
                else {
                    fn$m2 = fn$m;
                    s3 = a2;
                    s2 = null;
                }
            }
            else {
                fn$m2 = null;
                s3 = null;
                s2 = null;
            }
            if (com.flurry.sdk.fn.e.containsKey(a)) {
                fn = a((fn$v)com.flurry.sdk.fn.e.get(a));
            }
            else if (a.equals("record") || a.equals("error")) {
                final ArrayList<fn$f> list = new ArrayList<fn$f>();
                final fn$s fn$s = new fn$s(fn$m2, s3, a.equals("error"));
                if (fn$m2 != null) {
                    fn$o.b(fn$s);
                }
                final hh a4 = hh.a("fields");
                if (a4 == null || !a4.b()) {
                    throw new fo("Record has no fields: " + hh);
                }
                for (final hh hh2 : a4) {
                    final String a5 = a(hh2, "name", "No field name");
                    final String a6 = a(hh2, "doc");
                    final hh a7 = hh2.a("type");
                    if (a7 == null) {
                        throw new fo("No field type: " + hh2);
                    }
                    if (a7.f() && fn$o.a((Object)a7.i()) == null) {
                        throw new fo(a7 + " is not a defined name. The type of the \"" + a5 + "\" field must be a defined name or a {\"type\": ...} expression.");
                    }
                    final fn a8 = a(a7, fn$o);
                    fn$f$a fn$f$a = com.flurry.sdk.fn$f$a.a;
                    final hh a9 = hh2.a("order");
                    if (a9 != null) {
                        fn$f$a = com.flurry.sdk.fn$f$a.valueOf(a9.i().toUpperCase());
                    }
                    hh a10 = hh2.a("default");
                    if (a10 != null && (fn$v.k.equals(a8.a()) || fn$v.l.equals(a8.a())) && a10.f()) {
                        a10 = new rq(Double.valueOf(a10.i()));
                    }
                    final fn$f fn$f = new fn$f(a5, a8, a6, a10, fn$f$a);
                    final Iterator r = hh2.r();
                    while (r.hasNext()) {
                        final String s4 = r.next();
                        final String i = hh2.a(s4).i();
                        if (!com.flurry.sdk.fn.h.contains(s4) && i != null) {
                            fn$f.a(s4, i);
                        }
                    }
                    fn$f.g = a(hh2);
                    list.add(fn$f);
                }
                fn$s.c(list);
                fn = fn$s;
            }
            else if (a.equals("enum")) {
                final hh a11 = hh.a("symbols");
                if (a11 == null || !a11.b()) {
                    throw new fo("Enum has no symbols: " + hh);
                }
                final fn$j fn$j = new fn$j();
                final Iterator iterator2 = a11.iterator();
                while (iterator2.hasNext()) {
                    fn$j.add(iterator2.next().i());
                }
                final fn$e fn$e = new fn$e(fn$m2, s3, fn$j);
                if (fn$m2 != null) {
                    fn$o.b(fn$e);
                }
                fn = fn$e;
            }
            else if (a.equals("array")) {
                final hh a12 = hh.a("items");
                if (a12 == null) {
                    throw new fo("Array has no items type: " + hh);
                }
                fn = new fn$a(a(a12, fn$o));
            }
            else if (a.equals("map")) {
                final hh a13 = hh.a("values");
                if (a13 == null) {
                    throw new fo("Map has no values type: " + hh);
                }
                fn = new fn$l(a(a13, fn$o));
            }
            else {
                if (!a.equals("fixed")) {
                    throw new fo("Type not supported: " + a);
                }
                final hh a14 = hh.a("size");
                if (a14 == null || !a14.e()) {
                    throw new fo("Invalid or no size: " + hh);
                }
                final fn$g fn$g = new fn$g(fn$m2, s3, a14.k());
                if (fn$m2 != null) {
                    fn$o.b(fn$g);
                }
                fn = fn$g;
            }
            final Iterator r2 = hh.r();
            while (r2.hasNext()) {
                final String s5 = r2.next();
                final String j = hh.a(s5).i();
                if (!com.flurry.sdk.fn.g.contains(s5) && j != null) {
                    fn.a(s5, j);
                }
            }
            if (s2 != null) {
                fn$o.a(s2);
            }
            if (fn instanceof fn$n) {
                final Set a15 = a(hh);
                if (a15 != null) {
                    final Iterator<String> iterator3 = a15.iterator();
                    while (iterator3.hasNext()) {
                        fn.d(iterator3.next());
                    }
                }
            }
        }
        else {
            if (!hh.b()) {
                throw new fo("Schema not yet supported: " + hh);
            }
            final fn$j fn$j2 = new fn$j(hh.p());
            final Iterator iterator4 = hh.iterator();
            while (iterator4.hasNext()) {
                fn$j2.add(a(iterator4.next(), fn$o));
            }
            fn = new fn$w(fn$j2);
        }
        return fn;
    }
    
    public static fn a(final String s, final String s2, final String s3, final int n) {
        return new fn$g(new fn$m(s, s3), s2, n);
    }
    
    public static fn a(final String s, final String s2, final String s3, final List list) {
        return new fn$e(new fn$m(s, s3), s2, new fn$j(list));
    }
    
    public static fn a(final String s, final String s2, final String s3, final boolean b) {
        return new fn$s(new fn$m(s, s3), s2, b);
    }
    
    public static fn a(final List list) {
        final fn a = a(null, null, null, false);
        a.c(list);
        return a;
    }
    
    private static String a(final fn$m fn$m, final String s, final Map map) {
        final Map<K, String> map2 = map.get(fn$m);
        if (map2 != null) {
            final String s2 = map2.get(s);
            if (s2 != null) {
                return s2;
            }
        }
        return s;
    }
    
    private static String a(final hh hh, final String s) {
        final hh a = hh.a(s);
        if (a != null) {
            return a.i();
        }
        return null;
    }
    
    private static String a(final hh hh, final String s, final String s2) {
        final String a = a(hh, s);
        if (a == null) {
            throw new fo(s2 + ": " + hh);
        }
        return a;
    }
    
    private static Set a(final hh hh) {
        final hh a = hh.a("aliases");
        if (a == null) {
            return null;
        }
        if (!a.b()) {
            throw new fo("aliases not an array: " + hh);
        }
        final LinkedHashSet<String> set = new LinkedHashSet<String>();
        for (final hh hh2 : a) {
            if (!hh2.f()) {
                throw new fo("alias not a string: " + hh2);
            }
            set.add(hh2.i());
        }
        return set;
    }
    
    public static fn b(final fn fn) {
        return new fn$l(fn);
    }
    
    public static fn b(final List list) {
        return new fn$w(new fn$j(list));
    }
    
    private static void b(final fn fn, final Map map, final Map map2, final Map map3) {
        fn fn2 = fn;
        Label_0401: {
            Label_0121: {
            Label_0120:
                while (true) {
                    if (fn2 instanceof fn$n) {
                        final fn$s fn$s = (fn$s)fn2;
                        if (fn$s.h != null) {
                            final Iterator iterator = fn$s.h.iterator();
                            while (iterator.hasNext()) {
                                map2.put(iterator.next(), fn$s.f);
                            }
                        }
                    }
                    switch (fn$4.a[fn2.a().ordinal()]) {
                        default: {
                            break Label_0120;
                        }
                        case 9: {
                            break Label_0121;
                        }
                        case 11: {
                            fn2 = fn2.i();
                            continue;
                        }
                        case 12: {
                            fn2 = fn2.j();
                            continue;
                        }
                        case 13: {
                            break Label_0401;
                        }
                    }
                }
                return;
            }
            if (map.containsKey(fn2)) {
                return;
            }
            map.put(fn2, fn2);
            final fn$s fn$s2 = (fn$s)fn2;
            for (final fn$f fn$f : fn2.b()) {
                if (fn$f.g != null) {
                    for (final String s : fn$f.g) {
                        Map<?, ?> map4 = map3.get(fn$s2.f);
                        if (map4 == null) {
                            final fn$m f = fn$s2.f;
                            map4 = new HashMap<Object, Object>();
                            map3.put(f, map4);
                        }
                        map4.put(s, fn$f.a);
                    }
                }
                b(fn$f.c, map, map2, map3);
            }
            if (fn$s2.h != null && map3.containsKey(fn$s2.f)) {
                final Iterator iterator4 = fn$s2.h.iterator();
                while (iterator4.hasNext()) {
                    map3.put(iterator4.next(), map3.get(fn$s2.f));
                }
                return;
            }
            return;
        }
        final Iterator iterator5 = fn2.k().iterator();
        while (iterator5.hasNext()) {
            b(iterator5.next(), map, map2, map3);
        }
    }
    
    public static fn f(final String s) {
        return new fn$q().a(s);
    }
    
    private static String h(final String s) {
        if (fn.k.get()) {
            final int length = s.length();
            if (length == 0) {
                throw new fo("Empty name");
            }
            final char char1 = s.charAt(0);
            if (!Character.isLetter(char1) && char1 != '_') {
                throw new fo("Illegal initial character: " + s);
            }
            for (int i = 1; i < length; ++i) {
                final char char2 = s.charAt(i);
                if (!Character.isLetterOrDigit(char2) && char2 != '_') {
                    throw new fo("Illegal character in: " + s);
                }
            }
        }
        return s;
    }
    
    public fn$v a() {
        return this.f;
    }
    
    public String a(final String s) {
        synchronized (this) {
            return this.c.get(s);
        }
    }
    
    public String a(final boolean b) {
        try {
            final StringWriter stringWriter = new StringWriter();
            final hf a = fn.a.a(stringWriter);
            if (b) {
                a.a();
            }
            this.a(new fn$o(), a);
            a.g();
            return stringWriter.toString();
        }
        catch (IOException ex) {
            throw new fk(ex);
        }
    }
    
    void a(final fn$o fn$o, final hf hf) {
        if (this.c.size() == 0) {
            hf.b(this.d());
            return;
        }
        hf.d();
        hf.a("type", this.d());
        this.c.a(hf);
        hf.e();
    }
    
    public void a(final String s, final String s2) {
        synchronized (this) {
            this.c.a(s, s2);
            this.d = Integer.MIN_VALUE;
        }
    }
    
    public fn$f b(final String s) {
        throw new fk("Not a record: " + this);
    }
    
    public List b() {
        throw new fk("Not a record: " + this);
    }
    
    void b(final fn$o fn$o, final hf hf) {
        throw new fk("Not a record: " + this);
    }
    
    public int c(final String s) {
        throw new fk("Not an enum: " + this);
    }
    
    public List c() {
        throw new fk("Not an enum: " + this);
    }
    
    public void c(final List list) {
        throw new fk("Not a record: " + this);
    }
    
    final boolean c(final fn fn) {
        return this.d == fn.d || this.d == Integer.MIN_VALUE || fn.d == Integer.MIN_VALUE;
    }
    
    public String d() {
        return this.f.o;
    }
    
    public void d(final String s) {
        throw new fk("Not a named type: " + this);
    }
    
    public Integer e(final String s) {
        throw new fk("Not a union: " + this);
    }
    
    public String e() {
        return null;
    }
    
    @Override
    public boolean equals(final Object o) {
        if (o != this) {
            if (!(o instanceof fn)) {
                return false;
            }
            final fn fn = (fn)o;
            if (this.f != fn.f) {
                return false;
            }
            if (!this.c(fn) || !this.c.equals(fn.c)) {
                return false;
            }
        }
        return true;
    }
    
    public String f() {
        throw new fk("Not a named type: " + this);
    }
    
    public String g() {
        return this.d();
    }
    
    public boolean h() {
        throw new fk("Not a record: " + this);
    }
    
    @Override
    public final int hashCode() {
        if (this.d == Integer.MIN_VALUE) {
            this.d = this.m();
        }
        return this.d;
    }
    
    public fn i() {
        throw new fk("Not an array: " + this);
    }
    
    public fn j() {
        throw new fk("Not a map: " + this);
    }
    
    public List k() {
        throw new fk("Not a union: " + this);
    }
    
    public int l() {
        throw new fk("Not fixed: " + this);
    }
    
    int m() {
        return this.a().hashCode() + this.c.hashCode();
    }
    
    @Override
    public String toString() {
        return this.a(false);
    }
}
