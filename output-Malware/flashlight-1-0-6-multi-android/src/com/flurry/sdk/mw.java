// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.HashMap;
import java.util.ArrayList;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.lang.reflect.Constructor;
import java.lang.reflect.Type;
import java.util.Collections;
import java.util.Set;
import java.util.Map;
import java.util.List;

public class mw extends ir
{
    protected final jn b;
    protected final iq c;
    protected final mn d;
    protected qr e;
    protected final List f;
    protected mr g;
    protected Map h;
    protected Set i;
    protected Set j;
    protected mr k;
    protected mr l;
    
    protected mw(final jn b, final sh sh, final mn d, final List f) {
        super(sh);
        this.b = b;
        iq a;
        if (b == null) {
            a = null;
        }
        else {
            a = b.a();
        }
        this.c = a;
        this.d = d;
        this.f = f;
    }
    
    public static mw a(final jn jn, final sh sh, final mn mn) {
        return new mw(jn, sh, mn, Collections.emptyList());
    }
    
    public static mw a(final nc nc) {
        final mw mw = new mw(nc.a(), nc.b(), nc.c(), nc.d());
        mw.g = nc.h();
        mw.i = nc.i();
        mw.j = nc.j();
        mw.h = nc.e();
        return mw;
    }
    
    public static mw b(final nc nc) {
        final mw mw = new mw(nc.a(), nc.b(), nc.c(), nc.d());
        mw.k = nc.f();
        mw.l = nc.g();
        return mw;
    }
    
    public kg$a a(final kg$a kg$a) {
        if (this.c == null) {
            return kg$a;
        }
        return this.c.a(this.d, kg$a);
    }
    
    public mr a(final String s, final Class[] array) {
        return this.d.a(s, array);
    }
    
    public sh a(final Type type) {
        if (type == null) {
            return null;
        }
        return this.j().a(type);
    }
    
    public Object a(final boolean b) {
        final mo h = this.d.h();
        if (h == null) {
            return null;
        }
        if (b) {
            h.k();
        }
    Label_0038:
        while (true) {
            try {
                return h.e().newInstance(new Object[0]);
                Throwable cause = null;
                Label_0077: {
                    throw new IllegalArgumentException("Failed to instantiate bean of type " + this.d.e().getName() + ": (" + ((Exception)cause).getClass().getName() + ") " + cause.getMessage(), cause);
                }
                // iftrue(Label_0077:, !cause instanceof RuntimeException)
                // iftrue(Label_0053:, cause.getCause() == null)
                while (true) {
                    cause = cause.getCause();
                    break Label_0038;
                    Label_0065:
                    throw (RuntimeException)cause;
                    continue;
                }
                Label_0053:
                // iftrue(Label_0065:, !cause instanceof Error)
                throw (Error)cause;
            }
            catch (Exception cause) {
                continue Label_0038;
            }
            break;
        }
    }
    
    public Constructor a(final Class... array) {
        for (final mo mo : this.d.i()) {
            if (mo.f() == 1) {
                final Class a = mo.a(0);
                for (int length = array.length, i = 0; i < length; ++i) {
                    if (array[i] == a) {
                        return mo.e();
                    }
                }
            }
        }
        return null;
    }
    
    protected boolean a(final mr mr) {
        if (this.b().isAssignableFrom(mr.d())) {
            if (this.c.k(mr)) {
                return true;
            }
            if ("valueOf".equals(mr.b())) {
                return true;
            }
        }
        return false;
    }
    
    public Method b(final Class... array) {
        for (final mr mr : this.d.j()) {
            if (this.a(mr)) {
                final Class a = mr.a(0);
                for (int length = array.length, i = 0; i < length; ++i) {
                    if (a.isAssignableFrom(array[i])) {
                        return mr.e();
                    }
                }
            }
        }
        return null;
    }
    
    @Override
    public mn c() {
        return this.d;
    }
    
    public List d() {
        return this.f;
    }
    
    public mr e() {
        return this.k;
    }
    
    public Set f() {
        if (this.i == null) {
            return Collections.emptySet();
        }
        return this.i;
    }
    
    public Set g() {
        return this.j;
    }
    
    public boolean h() {
        return this.d.g();
    }
    
    public qv i() {
        return this.d.f();
    }
    
    public qr j() {
        if (this.e == null) {
            this.e = new qr(this.b.m(), this.a);
        }
        return this.e;
    }
    
    public mo k() {
        return this.d.h();
    }
    
    public mr l() {
        if (this.g != null) {
            final Class a = this.g.a(0);
            if (a != String.class && a != Object.class) {
                throw new IllegalArgumentException("Invalid 'any-setter' annotation on method " + this.g.b() + "(): first argument not of type String or Object, but " + a.getName());
            }
        }
        return this.g;
    }
    
    public Map m() {
        return this.h;
    }
    
    public List n() {
        return this.d.i();
    }
    
    public List o() {
        final List j = this.d.j();
        if (j.isEmpty()) {
            return j;
        }
        final ArrayList<mr> list = new ArrayList<mr>();
        for (final mr mr : j) {
            if (this.a(mr)) {
                list.add(mr);
            }
        }
        return list;
    }
    
    public mr p() {
        if (this.l != null && !Map.class.isAssignableFrom(this.l.d())) {
            throw new IllegalArgumentException("Invalid 'any-getter' annotation on method " + this.l.b() + "(): return type is not instance of java.util.Map");
        }
        return this.l;
    }
    
    public Map q() {
        HashMap<String, mq> hashMap = null;
        final Iterator<it> iterator = this.f.iterator();
        while (iterator.hasNext()) {
            final mq k = iterator.next().k();
            if (k != null) {
                final iq$a a = this.c.a(k);
                if (a == null || !a.c()) {
                    continue;
                }
                HashMap<String, mq> hashMap2;
                if (hashMap == null) {
                    hashMap2 = new HashMap<String, mq>();
                }
                else {
                    hashMap2 = hashMap;
                }
                final String a2 = a.a();
                if (hashMap2.put(a2, k) != null) {
                    throw new IllegalArgumentException("Multiple back-reference properties with name '" + a2 + "'");
                }
                hashMap = hashMap2;
            }
        }
        return hashMap;
    }
}
