// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.ArrayList;

public abstract class lt extends mc
{
    protected lt(final Class clazz) {
        super(clazz);
    }
    
    public static Iterable d() {
        final ArrayList<lt$i> list = new ArrayList<lt$i>();
        list.add(new lt$i());
        list.add((lt$i)new lt$h());
        list.add((lt$i)new lt$g());
        list.add((lt$i)new lt$b());
        list.add((lt$i)new lt$e());
        list.add((lt$i)new lt$d());
        list.add((lt$i)new lt$c());
        list.add((lt$i)new lt$f());
        list.add((lt$i)new lt$a());
        return list;
    }
    
    @Override
    public final Object a(final hj hj, final iz iz) {
        Label_0066: {
            if (hj.e() != hm.h) {
                break Label_0066;
            }
            final String trim = hj.k().trim();
            final int length = trim.length();
            Object a = null;
            Label_0037: {
                if (length != 0) {
                    break Label_0037;
                }
                Label_0034: {
                    return a;
                }
                try {
                    a = this.a(trim, iz);
                    if (a == null) {
                        throw iz.b(this.q, "not a valid textual representation");
                    }
                    return a;
                    // iftrue(Label_0104:, !this.q.isAssignableFrom((Class)z.getClass()))
                    // iftrue(Label_0034:, z == null)
                    while (true) {
                        while (true) {
                            return;
                            Label_0111:
                            throw iz.b(this.q);
                            Label_0104:
                            return this.a(z, iz);
                            z = hj.z();
                            a = null;
                            continue;
                        }
                        continue;
                    }
                }
                // iftrue(Label_0111:, hj.e() != hm.g)
                catch (IllegalArgumentException ex) {
                    throw iz.b(this.q, "not a valid textual representation");
                }
            }
        }
    }
    
    protected Object a(final Object o, final iz iz) {
        throw iz.b("Don't know how to convert embedded Object of type " + o.getClass().getName() + " into " + this.q.getName());
    }
    
    protected abstract Object a(final String p0, final iz p1);
}
