// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.List;
import java.util.Iterator;
import java.io.IOException;
import java.io.Closeable;
import java.util.Map;
import java.io.OutputStream;
import java.io.DataOutputStream;
import java.io.ByteArrayOutputStream;

public class dh
{
    private static final String b;
    byte[] a;
    
    static {
        b = dh.class.getSimpleName();
    }
    
    public dh(final di di) {
    Label_0216_Outer:
        while (true) {
            while (true) {
                int n2 = 0;
                int n4 = 0;
                try {
                    final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                    DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);
                Label_0156_Outer:
                    while (true) {
                        Label_0481: {
                            while (true) {
                                Label_0679: {
                                    while (true) {
                                        Label_0631: {
                                            try {
                                                dataOutputStream.writeShort(3);
                                                dataOutputStream.writeUTF(di.a());
                                                dataOutputStream.writeLong(di.b());
                                                dataOutputStream.writeLong(di.c());
                                                dataOutputStream.writeLong(di.d());
                                                final Map e = di.e();
                                                if (e == null) {
                                                    dataOutputStream.writeShort(0);
                                                }
                                                else {
                                                    dataOutputStream.writeShort(e.size());
                                                    for (final Map.Entry<String, V> entry : e.entrySet()) {
                                                        dataOutputStream.writeUTF(entry.getKey());
                                                        dataOutputStream.writeUTF((String)entry.getValue());
                                                        dataOutputStream.writeByte(0);
                                                    }
                                                }
                                                dataOutputStream.writeUTF(di.f());
                                                dataOutputStream.writeUTF(di.g());
                                                dataOutputStream.writeByte(di.h());
                                                dataOutputStream.writeUTF(di.i());
                                                if (di.j() != null) {
                                                    break Label_0156_Outer;
                                                }
                                                dataOutputStream.writeBoolean(false);
                                                dataOutputStream.writeInt(di.k());
                                                dataOutputStream.writeByte(-1);
                                                dataOutputStream.writeByte(-1);
                                                dataOutputStream.writeByte(di.l());
                                                if (di.m() != null) {
                                                    break Label_0481;
                                                }
                                                dataOutputStream.writeBoolean(false);
                                                final Map n = di.n();
                                                if (n != null) {
                                                    break Label_0679;
                                                }
                                                dataOutputStream.writeShort(0);
                                                final List o;
                                                Label_0172: {
                                                    o = di.o();
                                                }
                                                if (o != null) {
                                                    break Label_0679;
                                                }
                                                dataOutputStream.writeShort(0);
                                                Label_0188:
                                                dataOutputStream.writeBoolean(di.p());
                                                final List r = di.r();
                                                if (r == null) {
                                                    break Label_0679;
                                                }
                                                n2 = 0;
                                                int n3 = 0;
                                                n4 = 0;
                                                if (n2 >= r.size()) {
                                                    break Label_0679;
                                                }
                                                n3 += r.get(n2).a();
                                                if (n3 > 160000) {
                                                    eo.a(5, dh.b, "Error Log size exceeded. No more event details logged.");
                                                    final int n5 = n4;
                                                    dataOutputStream.writeInt(di.q());
                                                    dataOutputStream.writeShort(n5);
                                                    for (int i = 0; i < n5; ++i) {
                                                        dataOutputStream.write(r.get(i).b());
                                                    }
                                                    break Label_0631;
                                                }
                                            }
                                            catch (IOException ex) {
                                                final DataOutputStream dataOutputStream2 = dataOutputStream;
                                                try {
                                                    eo.a(6, dh.b, "", ex);
                                                    throw ex;
                                                }
                                                finally {
                                                    dataOutputStream = dataOutputStream2;
                                                }
                                                fe.a(dataOutputStream);
                                                throw;
                                                dataOutputStream.writeInt(-1);
                                                dataOutputStream.writeShort(0);
                                                dataOutputStream.writeShort(0);
                                                dataOutputStream.writeShort(0);
                                                this.a = byteArrayOutputStream.toByteArray();
                                                fe.a(dataOutputStream);
                                                return;
                                                int n5 = n4;
                                                continue;
                                                n5 = 0;
                                                continue;
                                                final Map n;
                                                dataOutputStream.writeShort(n.size());
                                                final Iterator<Map.Entry<String, V>> iterator2 = n.entrySet().iterator();
                                                // iftrue(Label_0188:, !iterator3.hasNext())
                                                Label_0525: {
                                                    break Label_0525;
                                                    dataOutputStream.writeBoolean(true);
                                                    dataOutputStream.writeLong(di.m());
                                                    continue Label_0216_Outer;
                                                    final List o;
                                                    dataOutputStream.writeShort(o.size());
                                                    final Iterator<db> iterator3 = o.iterator();
                                                    while (true) {
                                                        Block_18: {
                                                            break Block_18;
                                                            final Map.Entry<String, V> entry2 = iterator2.next();
                                                            dataOutputStream.writeUTF(entry2.getKey());
                                                            dataOutputStream.writeInt(((cx$a)entry2.getValue()).a);
                                                            break Label_0525;
                                                        }
                                                        dataOutputStream.write(iterator3.next().e());
                                                        continue;
                                                    }
                                                    dataOutputStream.writeBoolean(true);
                                                    dataOutputStream.writeDouble(this.a(di.j().getLatitude()));
                                                    dataOutputStream.writeDouble(this.a(di.j().getLongitude()));
                                                    dataOutputStream.writeFloat(di.j().getAccuracy());
                                                    continue Label_0156_Outer;
                                                }
                                            }
                                            // iftrue(Label_0172:, !iterator2.hasNext())
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                catch (IOException ex2) {}
                ++n4;
                ++n2;
                continue;
            }
        }
    }
    
    public dh(final byte[] a) {
        this.a = a;
    }
    
    double a(final double n) {
        return Math.round(n * 1000.0) / 1000.0;
    }
    
    public byte[] a() {
        return this.a;
    }
}
