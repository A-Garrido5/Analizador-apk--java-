// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Collection;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$As;
import com.flurry.org.codehaus.jackson.annotate.JsonTypeInfo$Id;

public class nu implements ni
{
    protected JsonTypeInfo$Id a;
    protected JsonTypeInfo$As b;
    protected String c;
    protected Class d;
    protected nh e;
    
    public static nu b() {
        return new nu().b(JsonTypeInfo$Id.NONE, null);
    }
    
    @Override
    public jy a(final iy iy, final sh sh, final Collection collection, final is is) {
        if (this.a == JsonTypeInfo$Id.NONE) {
            return null;
        }
        final nh a = this.a(iy, sh, collection, false, true);
        switch (nu$1.a[this.b.ordinal()]) {
            default: {
                throw new IllegalStateException("Do not know how to construct standard type serializer for inclusion type: " + this.b);
            }
            case 1: {
                return new nj(sh, a, is, this.d);
            }
            case 2: {
                return new nn(sh, a, is, this.d, this.c);
            }
            case 3: {
                return new np(sh, a, is, this.d);
            }
            case 4: {
                return new nl(sh, a, is, this.d, this.c);
            }
        }
    }
    
    @Override
    public jz a(final ju ju, final sh sh, final Collection collection, final is is) {
        if (this.a == JsonTypeInfo$Id.NONE) {
            return null;
        }
        final nh a = this.a(ju, sh, collection, true, false);
        switch (nu$1.a[this.b.ordinal()]) {
            default: {
                throw new IllegalStateException("Do not know how to construct standard type serializer for inclusion type: " + this.b);
            }
            case 1: {
                return new nk(a, is);
            }
            case 2: {
                return new no(a, is, this.c);
            }
            case 3: {
                return new nq(a, is);
            }
            case 4: {
                return new nm(a, is, this.c);
            }
        }
    }
    
    protected nh a(final jn jn, final sh sh, final Collection collection, final boolean b, final boolean b2) {
        if (this.e != null) {
            return this.e;
        }
        if (this.a == null) {
            throw new IllegalStateException("Can not build, 'init()' not yet called");
        }
        switch (nu$1.b[this.a.ordinal()]) {
            default: {
                throw new IllegalStateException("Do not know how to construct standard type id resolver for idType: " + this.a);
            }
            case 1: {
                return new nr(sh, jn.m());
            }
            case 2: {
                return new ns(sh, jn.m());
            }
            case 3: {
                return nx.a(jn, sh, collection, b, b2);
            }
            case 4: {
                return null;
            }
        }
    }
    
    @Override
    public Class a() {
        return this.d;
    }
    
    public nu b(final JsonTypeInfo$As b) {
        if (b == null) {
            throw new IllegalArgumentException("includeAs can not be null");
        }
        this.b = b;
        return this;
    }
    
    public nu b(final JsonTypeInfo$Id a, final nh e) {
        if (a == null) {
            throw new IllegalArgumentException("idType can not be null");
        }
        this.a = a;
        this.e = e;
        this.c = a.getDefaultPropertyName();
        return this;
    }
    
    public nu b(final Class d) {
        this.d = d;
        return this;
    }
    
    public nu b(String defaultPropertyName) {
        if (defaultPropertyName == null || defaultPropertyName.length() == 0) {
            defaultPropertyName = this.a.getDefaultPropertyName();
        }
        this.c = defaultPropertyName;
        return this;
    }
}
