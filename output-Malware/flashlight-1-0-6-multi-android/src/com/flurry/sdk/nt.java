// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collection;
import java.util.LinkedHashSet;

public class nt extends ng
{
    protected LinkedHashSet a;
    
    @Override
    public Collection a(final mn mn, final jn jn, final iq iq) {
        final HashMap<Object, Object> hashMap = new HashMap<Object, Object>();
        if (this.a != null) {
            final Class d = mn.d();
            for (final nf nf : this.a) {
                if (d.isAssignableFrom(nf.a())) {
                    this.a(mn.b(nf.a(), iq, jn), nf, jn, iq, hashMap);
                }
            }
        }
        this.a(mn, new nf(mn.d(), null), jn, iq, hashMap);
        return new ArrayList(hashMap.values());
    }
    
    @Override
    public Collection a(final mq mq, final jn jn, final iq iq) {
        final HashMap<Object, Object> hashMap = new HashMap<Object, Object>();
        if (this.a != null) {
            final Class d = mq.d();
            for (final nf nf : this.a) {
                if (d.isAssignableFrom(nf.a())) {
                    this.a(mn.b(nf.a(), iq, jn), nf, jn, iq, hashMap);
                }
            }
        }
        final List a = iq.a((mm)mq);
        if (a != null) {
            for (final nf nf2 : a) {
                this.a(mn.b(nf2.a(), iq, jn), nf2, jn, iq, hashMap);
            }
        }
        this.a(mn.b(mq.d(), iq, jn), new nf(mq.d(), null), jn, iq, hashMap);
        return new ArrayList(hashMap.values());
    }
    
    protected void a(final mn mn, nf nf, final jn jn, final iq iq, final HashMap hashMap) {
        if (!nf.c()) {
            final String g = iq.g(mn);
            if (g != null) {
                nf = new nf(nf.a(), g);
            }
        }
        if (hashMap.containsKey(nf)) {
            if (nf.c() && !hashMap.get(nf).c()) {
                hashMap.put(nf, nf);
            }
        }
        else {
            hashMap.put(nf, nf);
            final List a = iq.a((mm)mn);
            if (a != null && !a.isEmpty()) {
                for (final nf nf2 : a) {
                    final mn b = mn.b(nf2.a(), iq, jn);
                    nf nf3;
                    if (!nf2.c()) {
                        nf3 = new nf(nf2.a(), iq.g(b));
                    }
                    else {
                        nf3 = nf2;
                    }
                    this.a(b, nf3, jn, iq, hashMap);
                }
            }
        }
    }
}
