// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.lang.ref.SoftReference;

public final class ig
{
    protected static final ThreadLocal a;
    private static final char[] e;
    private static final byte[] f;
    protected sp b;
    protected sj c;
    protected final char[] d;
    
    static {
        e = sk.g();
        f = sk.h();
        a = new ThreadLocal();
    }
    
    public ig() {
        (this.d = new char[6])[0] = '\\';
        this.d[2] = '0';
        this.d[3] = '0';
    }
    
    private int a(final int n, final int n2) {
        if (n2 < 56320 || n2 > 57343) {
            throw new IllegalArgumentException("Broken surrogate pair: first char 0x" + Integer.toHexString(n) + ", second 0x" + Integer.toHexString(n2) + "; illegal combination");
        }
        return 65536 + (n - 55296 << 10) + (n2 - 56320);
    }
    
    private int a(int n, final int n2, final sj sj, final int n3) {
        sj.e(n3);
        sj.a(92);
        if (n2 < 0) {
            sj.a(117);
            if (n > 255) {
                final int n4 = n >> 8;
                sj.a(ig.f[n4 >> 4]);
                sj.a(ig.f[n4 & 0xF]);
                n &= 0xFF;
            }
            else {
                sj.a(48);
                sj.a(48);
            }
            sj.a(ig.f[n >> 4]);
            sj.a(ig.f[n & 0xF]);
        }
        else {
            sj.a((byte)n2);
        }
        return sj.f();
    }
    
    private int a(final int n, final char[] array) {
        if (n < 0) {
            final int n2 = -(n + 1);
            array[1] = 'u';
            array[4] = ig.e[n2 >> 4];
            array[5] = ig.e[n2 & 0xF];
            return 6;
        }
        array[1] = (char)n;
        return 2;
    }
    
    public static ig a() {
        final SoftReference<ig> softReference = ig.a.get();
        ig ig;
        if (softReference == null) {
            ig = null;
        }
        else {
            ig = softReference.get();
        }
        if (ig == null) {
            ig = new ig();
            com.flurry.sdk.ig.a.set(new SoftReference<ig>(ig));
        }
        return ig;
    }
    
    private void a(final int n) {
        if (n > 1114111) {
            throw new IllegalArgumentException("Illegal character point (0x" + Integer.toHexString(n) + ") to output; max is 0x10FFFF as per RFC 4627");
        }
        if (n < 55296) {
            throw new IllegalArgumentException("Illegal character point (0x" + Integer.toHexString(n) + ") to output");
        }
        if (n <= 56319) {
            throw new IllegalArgumentException("Unmatched first part of surrogate pair (0x" + Integer.toHexString(n) + ")");
        }
        throw new IllegalArgumentException("Unmatched second part of surrogate pair (0x" + Integer.toHexString(n) + ")");
    }
    
    public final char[] a(final String s) {
        sp b = this.b;
        if (b == null) {
            b = new sp(null);
            this.b = b;
        }
        char[] array = b.k();
        final int[] f = sk.f();
        final int length = f.length;
        final int length2 = s.length();
        int n = 0;
        int n3;
    Label_0117:
        for (int i = 0; i < length2; i = n3) {
            while (true) {
                final char char1 = s.charAt(i);
                if (char1 < length && f[char1] != 0) {
                    break;
                }
                int n2;
                if (n >= array.length) {
                    array = b.m();
                    n2 = 0;
                }
                else {
                    n2 = n;
                }
                n = n2 + 1;
                array[n2] = char1;
                if (++i >= length2) {
                    break Label_0117;
                }
            }
            n3 = i + 1;
            final int a = this.a(f[s.charAt(i)], this.d);
            if (n + a > array.length) {
                final int n4 = array.length - n;
                if (n4 > 0) {
                    System.arraycopy(this.d, 0, array, n, n4);
                }
                array = b.m();
                final int n5 = a - n4;
                System.arraycopy(this.d, n4, array, n, n5);
                n += n5;
            }
            else {
                System.arraycopy(this.d, 0, array, n, a);
                n += a;
            }
        }
        b.a(n);
        return b.g();
    }
    
    public final byte[] b(final String s) {
        sj c = this.c;
        if (c == null) {
            c = new sj(null);
            this.c = c;
        }
        final int length = s.length();
        byte[] array = c.c();
        int a = 0;
        int i = 0;
    Label_0114:
        while (i < length) {
            final int[] f = sk.f();
            while (true) {
                final char char1 = s.charAt(i);
                if (char1 > '\u007f' || f[char1] != 0) {
                    break;
                }
                int n;
                if (a >= array.length) {
                    array = c.d();
                    n = 0;
                }
                else {
                    n = a;
                }
                a = n + 1;
                array[n] = (byte)char1;
                if (++i >= length) {
                    break Label_0114;
                }
            }
            if (a >= array.length) {
                array = c.d();
                a = 0;
            }
            int n2 = i + 1;
            final char char2 = s.charAt(i);
            if (char2 <= '\u007f') {
                a = this.a(char2, f[char2], c, a);
                array = c.e();
                i = n2;
            }
            else {
                int n3;
                byte[] d;
                int n4;
                if (char2 <= '\u07ff') {
                    n3 = a + 1;
                    array[a] = (byte)('\u00c0' | char2 >> 6);
                    final char c2 = (char)('\u0080' | (char2 & '?'));
                    d = array;
                    n4 = c2;
                }
                else if (char2 < '\ud800' || char2 > '\udfff') {
                    final int n5 = a + 1;
                    array[a] = (byte)('\u00e0' | char2 >> 12);
                    int n6;
                    if (n5 >= array.length) {
                        array = c.d();
                        n6 = 0;
                    }
                    else {
                        n6 = n5;
                    }
                    n3 = n6 + 1;
                    array[n6] = (byte)('\u0080' | ('?' & char2 >> 6));
                    final char c3 = (char)('\u0080' | (char2 & '?'));
                    d = array;
                    n4 = c3;
                }
                else {
                    if (char2 > '\udbff') {
                        this.a(char2);
                    }
                    if (n2 >= length) {
                        this.a(char2);
                    }
                    final int n7 = n2 + 1;
                    final int a2 = this.a(char2, s.charAt(n2));
                    if (a2 > 1114111) {
                        this.a(a2);
                    }
                    final int n8 = a + 1;
                    array[a] = (byte)(0xF0 | a2 >> 18);
                    int n9;
                    if (n8 >= array.length) {
                        array = c.d();
                        n9 = 0;
                    }
                    else {
                        n9 = n8;
                    }
                    final int n10 = n9 + 1;
                    array[n9] = (byte)(0x80 | (0x3F & a2 >> 12));
                    int n11;
                    if (n10 >= array.length) {
                        array = c.d();
                        n11 = 0;
                    }
                    else {
                        n11 = n10;
                    }
                    n3 = n11 + 1;
                    array[n11] = (byte)(0x80 | (0x3F & a2 >> 6));
                    final int n12 = 0x80 | (a2 & 0x3F);
                    n2 = n7;
                    final byte[] array2 = array;
                    n4 = n12;
                    d = array2;
                }
                if (n3 >= d.length) {
                    d = c.d();
                    n3 = 0;
                }
                final int n13 = n3 + 1;
                d[n3] = (byte)n4;
                array = d;
                i = n2;
                a = n13;
            }
        }
        return this.c.d(a);
    }
    
    public final byte[] c(final String s) {
        sj c = this.c;
        if (c == null) {
            c = new sj(null);
            this.c = c;
        }
        final int length = s.length();
        byte[] c2 = c.c();
        int length2 = c2.length;
        int n = 0;
        int i = 0;
        while (i < length) {
            int n2 = i + 1;
            char c3 = s.charAt(i);
            final int n3 = length2;
            byte[] array = c2;
            int n4 = n;
            int n5 = n3;
            while (c3 <= '\u007f') {
                if (n4 >= n5) {
                    array = c.d();
                    n5 = array.length;
                    n4 = 0;
                }
                final int n6 = n4 + 1;
                array[n4] = (byte)c3;
                if (n2 >= length) {
                    final int n7 = n6;
                    return this.c.d(n7);
                }
                final int n8 = n2 + 1;
                c3 = s.charAt(n2);
                n2 = n8;
                n4 = n6;
            }
            int n9;
            if (n4 >= n5) {
                array = c.d();
                n5 = array.length;
                n9 = 0;
            }
            else {
                n9 = n4;
            }
            int n10;
            int n11;
            if (c3 < '\u0800') {
                n10 = n9 + 1;
                array[n9] = (byte)('\u00c0' | c3 >> 6);
                n11 = c3;
                i = n2;
            }
            else if (c3 < '\ud800' || c3 > '\udfff') {
                int n12 = n9 + 1;
                array[n9] = (byte)('\u00e0' | c3 >> 12);
                if (n12 >= n5) {
                    array = c.d();
                    n5 = array.length;
                    n12 = 0;
                }
                final int n13 = n12 + 1;
                array[n12] = (byte)('\u0080' | ('?' & c3 >> 6));
                n10 = n13;
                n11 = c3;
                i = n2;
            }
            else {
                if (c3 > '\udbff') {
                    this.a(c3);
                }
                if (n2 >= length) {
                    this.a(c3);
                }
                final int n14 = n2 + 1;
                final int a = this.a(c3, s.charAt(n2));
                if (a > 1114111) {
                    this.a(a);
                }
                int n15 = n9 + 1;
                array[n9] = (byte)(0xF0 | a >> 18);
                if (n15 >= n5) {
                    array = c.d();
                    n5 = array.length;
                    n15 = 0;
                }
                final int n16 = n15 + 1;
                array[n15] = (byte)(0x80 | (0x3F & a >> 12));
                int n17;
                if (n16 >= n5) {
                    array = c.d();
                    n5 = array.length;
                    n17 = 0;
                }
                else {
                    n17 = n16;
                }
                final int n18 = n17 + 1;
                array[n17] = (byte)(0x80 | (0x3F & a >> 6));
                n10 = n18;
                n11 = a;
                i = n14;
            }
            if (n10 >= n5) {
                array = c.d();
                n5 = array.length;
                n10 = 0;
            }
            final int n19 = n10 + 1;
            array[n10] = (byte)(0x80 | (n11 & 0x3F));
            c2 = array;
            length2 = n5;
            n = n19;
        }
        final int n7 = n;
        return this.c.d(n7);
    }
}
