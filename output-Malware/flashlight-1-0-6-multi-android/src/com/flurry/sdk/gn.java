// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public class gn
{
    protected final gn$a a;
    protected gq[] b;
    protected int c;
    
    public gn(final gq gq, final gn$a a) {
        this.a = a;
        (this.b = new gq[5])[0] = gq;
        this.c = 1;
    }
    
    private void f() {
        final gq[] b = new gq[this.b.length + Math.max(this.b.length, 1024)];
        System.arraycopy(this.b, 0, b, 0, this.b.length);
        this.b = b;
    }
    
    public final gq a(final gq gq) {
        while (true) {
            final gq[] b = this.b;
            final int c = -1 + this.c;
            this.c = c;
            final gq gq2 = b[c];
            if (gq2 == gq) {
                return gq2;
            }
            final gq$i a = gq2.a;
            if (a == gq$i.f) {
                final gq a2 = this.a.a(gq, gq2);
                if (a2 != null) {
                    return a2;
                }
                continue;
            }
            else {
                if (a == gq$i.a) {
                    throw new fl("Attempt to process a " + gq + " when a " + gq2 + " was expected.");
                }
                if (a == gq$i.d && gq == ((gq$j)gq2).z) {
                    return gq;
                }
                this.b(gq2);
            }
        }
    }
    
    public final void a() {
        while (this.c > 1) {
            final gq gq = this.b[-1 + this.c];
            if (gq.a == gq$i.f) {
                --this.c;
                this.a.a(null, gq);
            }
            else {
                if (gq.a == gq$i.a) {
                    break;
                }
                --this.c;
                this.b(gq);
            }
        }
    }
    
    public final void b() {
        while (this.c > 0) {
            final gq gq = this.b[-1 + this.c];
            if (gq.a != gq$i.f || !((gq$g)gq).A) {
                break;
            }
            --this.c;
            this.a.a(null, gq);
        }
    }
    
    public final void b(final gq gq) {
        final gq[] b = gq.b;
        while (this.c + b.length > this.b.length) {
            this.f();
        }
        System.arraycopy(b, 0, this.b, this.c, b.length);
        this.c += b.length;
    }
    
    public gq c() {
        final gq[] b = this.b;
        final int c = -1 + this.c;
        this.c = c;
        return b[c];
    }
    
    public void c(final gq gq) {
        if (this.c == this.b.length) {
            this.f();
        }
        this.b[this.c++] = gq;
    }
    
    public gq d() {
        return this.b[-1 + this.c];
    }
    
    public void e() {
        this.c = 1;
    }
}
