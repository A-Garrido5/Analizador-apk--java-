// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.List;
import java.util.Collection;
import java.lang.reflect.ParameterizedType;
import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.lang.reflect.Type;
import java.lang.reflect.Constructor;
import java.util.concurrent.ConcurrentHashMap;
import java.util.WeakHashMap;
import java.util.Map;

public class gs extends ft
{
    private static final gs a;
    private static final Class[] c;
    private static final Class[] d;
    private static final Map e;
    private static final Class g;
    private static final fn h;
    private final ClassLoader b;
    private Map f;
    private final WeakHashMap i;
    
    static {
        a = new gs();
        c = new Class[0];
        d = new Class[] { fn.class };
        e = new ConcurrentHashMap();
        g = new Object() {}.getClass();
        h = fn.a(fn$v.n);
    }
    
    protected gs() {
        this(gs.class.getClassLoader());
    }
    
    public gs(final ClassLoader b) {
        this.f = new ConcurrentHashMap();
        this.i = new WeakHashMap();
        this.b = b;
    }
    
    public static Object a(final Class clazz, final fn fn) {
        final boolean assignable = gs$a.class.isAssignableFrom(clazz);
        try {
            Constructor<?> declaredConstructor = gs.e.get(clazz);
            if (declaredConstructor == null) {
                Class[] array;
                if (assignable) {
                    array = gs.d;
                }
                else {
                    array = gs.c;
                }
                declaredConstructor = clazz.getDeclaredConstructor((Class<?>[])array);
                declaredConstructor.setAccessible(true);
                gs.e.put(clazz, declaredConstructor);
            }
            final Constructor<Object> constructor = (Constructor<Object>)declaredConstructor;
            Object[] array2;
            if (assignable) {
                array2 = new Object[] { fn };
            }
            else {
                array2 = null;
            }
            return constructor.newInstance(array2);
        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
    
    public static gs b() {
        return gs.a;
    }
    
    public static String c(final fn fn) {
        final String f = fn.f();
        final String d = fn.d();
        if (f == null || "".equals(f)) {
            return d;
        }
        String s;
        if (f.endsWith("$")) {
            s = "";
        }
        else {
            s = ".";
        }
        return f + s + d;
    }
    
    @Override
    protected int a(final Object o, final Object o2, final fn fn, final boolean b) {
        switch (gs$2.a[fn.a().ordinal()]) {
            case 3: {
                if (o instanceof Enum) {
                    return ((Enum)o).ordinal() - ((Enum)o2).ordinal();
                }
                break;
            }
        }
        return super.a(o, o2, fn, b);
    }
    
    public fn a(final Type type) {
        fn a = this.i.get(type);
        if (a == null) {
            a = this.a(type, new LinkedHashMap());
            this.i.put(type, a);
        }
        return a;
    }
    
    protected fn a(final Type type, final Map map) {
        if (type instanceof Class && CharSequence.class.isAssignableFrom((Class<?>)type)) {
            return fn.a(fn$v.g);
        }
        if (type == ByteBuffer.class) {
            return fn.a(fn$v.h);
        }
        if (type == Integer.class || type == Integer.TYPE) {
            return fn.a(fn$v.i);
        }
        if (type == Long.class || type == Long.TYPE) {
            return fn.a(fn$v.j);
        }
        if (type == Float.class || type == Float.TYPE) {
            return fn.a(fn$v.k);
        }
        if (type == Double.class || type == Double.TYPE) {
            return fn.a(fn$v.l);
        }
        if (type == Boolean.class || type == Boolean.TYPE) {
            return fn.a(fn$v.m);
        }
        if (type == Void.class || type == Void.TYPE) {
            return fn.a(fn$v.n);
        }
        if (!(type instanceof ParameterizedType)) {
            if (type instanceof Class) {
                final Class clazz = (Class)type;
                final String name = clazz.getName();
                fn f = map.get(name);
                Label_0412: {
                    if (f != null) {
                        break Label_0412;
                    }
                    try {
                        f = (fn)clazz.getDeclaredField("SCHEMA$").get(null);
                        if (!name.equals(c(f))) {
                            f = fn.f(f.toString().replace(f.f(), clazz.getPackage().getName()));
                        }
                        map.put(name, f);
                        return f;
                    }
                    catch (NoSuchFieldException ex2) {
                        throw new fk("Not a Specific class: " + clazz);
                    }
                    catch (IllegalAccessException ex) {
                        throw new fk(ex);
                    }
                }
            }
            throw new fl("Unknown type: " + type);
        }
        final ParameterizedType parameterizedType = (ParameterizedType)type;
        final Class clazz2 = (Class)parameterizedType.getRawType();
        final Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
        if (Collection.class.isAssignableFrom(clazz2)) {
            if (actualTypeArguments.length != 1) {
                throw new fl("No array type specified.");
            }
            return fn.a(this.a(actualTypeArguments[0], map));
        }
        else {
            if (!Map.class.isAssignableFrom(clazz2)) {
                return this.a(clazz2, map);
            }
            final Type type2 = actualTypeArguments[0];
            final Type type3 = actualTypeArguments[1];
            if (!(type instanceof Class) || !CharSequence.class.isAssignableFrom((Class<?>)type)) {
                throw new fl("Map key class not CharSequence: " + type2);
            }
            return fn.b(this.a(type3, map));
        }
    }
    
    @Override
    public ge a(final fn fn) {
        return new gt(fn, fn, this);
    }
    
    public Class b(final fn fn) {
        switch (gs$2.a[fn.a().ordinal()]) {
            default: {
                throw new fk("Unknown type: " + fn);
            }
            case 1:
            case 2:
            case 3: {
                final String g = fn.g();
                Class<?> clazz;
                if (g == null) {
                    clazz = null;
                }
                else {
                    clazz = this.f.get(g);
                    while (true) {
                        if (clazz == null) {
                            while (true) {
                                try {
                                    clazz = this.b.loadClass(c(fn));
                                    this.f.put(g, clazz);
                                    if (clazz == gs.g) {
                                        return null;
                                    }
                                    return clazz;
                                }
                                catch (ClassNotFoundException ex) {
                                    clazz = (Class<?>)gs.g;
                                    continue;
                                }
                                break;
                            }
                            return List.class;
                        }
                        continue;
                    }
                }
                return clazz;
            }
            case 4: {
                return List.class;
            }
            case 5: {
                return Map.class;
            }
            case 6: {
                final List k = fn.k();
                if (k.size() == 2 && k.contains(gs.h)) {
                    int n;
                    if (k.get(0).equals(gs.h)) {
                        n = 1;
                    }
                    else {
                        n = 0;
                    }
                    return this.b(k.get(n));
                }
                return Object.class;
            }
            case 7: {
                if ("String".equals(fn.a("avro.java.string"))) {
                    return String.class;
                }
                return CharSequence.class;
            }
            case 8: {
                return ByteBuffer.class;
            }
            case 9: {
                return Integer.TYPE;
            }
            case 10: {
                return Long.TYPE;
            }
            case 11: {
                return Float.TYPE;
            }
            case 12: {
                return Double.TYPE;
            }
            case 13: {
                return Boolean.TYPE;
            }
            case 14: {
                return Void.TYPE;
            }
        }
    }
    
    @Override
    public Object c(Object c, final fn fn) {
        final Class b = b().b(fn);
        if (b == null) {
            c = super.c(c, fn);
        }
        else if (!b.isInstance(c)) {
            return a(b, fn);
        }
        return c;
    }
    
    @Override
    public Object d(Object d, final fn fn) {
        final Class b = b().b(fn);
        if (b == null) {
            d = super.d(d, fn);
        }
        else if (!b.isInstance(d)) {
            return a(b, fn);
        }
        return d;
    }
    
    @Override
    protected boolean f(final Object o) {
        return o instanceof Enum || super.f(o);
    }
    
    @Override
    protected fn g(final Object o) {
        if (o instanceof Enum) {
            return this.a(o.getClass());
        }
        return super.g(o);
    }
}
