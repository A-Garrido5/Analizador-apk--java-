// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import android.widget.Toast;
import com.flurry.android.impl.ads.avro.protocol.v10.SdkLogResponse;
import com.flurry.android.impl.ads.avro.protocol.v10.SdkLogRequest;
import java.nio.ByteBuffer;
import android.util.Pair;

public class s extends de
{
    private final w a;
    
    public s() {
        this(null);
    }
    
    public s(final de$a de$a) {
        super("Ads", s.class.getSimpleName());
        this.a = new w();
        this.g = "AnalyticsData_";
        this.a(de$a);
    }
    
    protected Pair a(final byte[] array) {
        int i = 0;
        final byte[] array2 = new byte[4];
        final byte[] array3 = new byte[-4 + array.length];
        for (int j = 0; j < array.length; ++j) {
            if (j < 4) {
                array2[j] = array[j];
            }
            else {
                array3[j - 4] = array[j];
            }
        }
        final int int1 = ByteBuffer.wrap(array2).getInt();
        final byte[] array4 = new byte[int1];
        final byte[] array5 = new byte[array3.length - int1];
        while (i < array3.length) {
            if (i < int1) {
                array4[i] = array3[i];
            }
            else {
                array5[i - int1] = array3[i];
            }
            ++i;
        }
        return new Pair((Object)new String(array4), (Object)array5);
    }
    
    public SdkLogResponse a(final SdkLogRequest sdkLogRequest, final String s, final String s2, final String s3) {
        final byte[] a = v.a(sdkLogRequest, SdkLogRequest.class);
        if (a != null) {
            this.b(this.a(a, s), s2, s3);
        }
        final SdkLogResponse sdkLogResponse = new SdkLogResponse();
        sdkLogResponse.a("success");
        return sdkLogResponse;
    }
    
    @Override
    protected void a(final byte[] array, final String s, final String s2) {
        try {
            final Pair a = this.a(array);
            final String s3 = (String)a.first;
            final byte[] array2 = (byte[])a.second;
            eo.a(4, this.d, "FlurryAdLogsManager: start upload data " + array2 + " with id = " + s + " to " + s3);
            this.a.a(this, s3, array2, SdkLogResponse.class, new w$a() {
                public void a(final int n, final SdkLogResponse sdkLogResponse) {
                    if (sdkLogResponse != null && sdkLogResponse.b().toString().equals("success")) {
                        eo.a(5, s.this.d, "FlurryAdLogsManager: ad report " + s + " sent. HTTP response: " + n);
                        if (eo.c() <= 3 && eo.d()) {
                            do.a().a(new Runnable() {
                                @Override
                                public void run() {
                                    Toast.makeText(do.a().b(), (CharSequence)"Ad log report sent", 0).show();
                                }
                            });
                        }
                        s.this.a(s, s2, n);
                        s.this.d();
                        return;
                    }
                    if (sdkLogResponse != null) {
                        final Iterator<CharSequence> iterator = sdkLogResponse.c().iterator();
                        while (iterator.hasNext()) {
                            eo.a(6, s.this.d, iterator.next().toString());
                        }
                    }
                    s.this.b(s, s2);
                }
            });
        }
        catch (Exception ex) {
            eo.a(6, this.d, "Internal ERROR! Report is corrupt!");
            this.c(s, s2);
        }
    }
    
    protected byte[] a(final byte[] array, final String s) {
        final byte[] bytes = s.getBytes();
        final byte[] array2 = ByteBuffer.allocate(4).putInt(bytes.length).array();
        final byte[] array3 = new byte[array2.length + bytes.length + array.length];
        for (int i = 0; i < array3.length; ++i) {
            if (i < array2.length) {
                array3[i] = array2[i];
            }
            else if (i >= array2.length && i < bytes.length + array2.length) {
                array3[i] = bytes[i - 4];
            }
            else {
                array3[i] = array[i - 4 - bytes.length];
            }
        }
        return array3;
    }
}
