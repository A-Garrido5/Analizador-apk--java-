// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.Writer;
import java.io.StringWriter;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class fm
{
    public static final fn a;
    public static final fn b;
    private static final Set d;
    private static final Set j;
    fn$r c;
    private String e;
    private String f;
    private String g;
    private fn$o h;
    private Map i;
    
    static {
        Collections.addAll(d = new HashSet(), "doc", "response", "request", "errors", "one-way");
        a = fn.a(fn$v.g);
        final ArrayList<fn> list = new ArrayList<fn>();
        list.add(fm.a);
        b = fn.b(list);
        Collections.addAll(j = new HashSet(), "namespace", "protocol", "doc", "messages", "types", "errors");
    }
    
    private fm() {
        this.h = new fn$o();
        this.i = new LinkedHashMap();
        this.c = new fn$r(fm.j);
    }
    
    private fm$a a(final String s, final hh hh) {
        final String d = this.d(hh);
        final LinkedHashMap<String, String> linkedHashMap = new LinkedHashMap<String, String>();
        final Iterator r = hh.r();
        while (r.hasNext()) {
            final String s2 = r.next();
            if (!fm.d.contains(s2)) {
                final hh a = hh.a(s2);
                if (!a.a() || !a.f()) {
                    continue;
                }
                linkedHashMap.put(s2, a.i());
            }
        }
        final hh a2 = hh.a("request");
        if (a2 == null || !a2.b()) {
            throw new fo("No request specified: " + hh);
        }
        final ArrayList<fn$f> list = new ArrayList<fn$f>();
        for (final hh hh2 : a2) {
            final hh a3 = hh2.a("name");
            if (a3 == null) {
                throw new fo("No param name: " + hh2);
            }
            final hh a4 = hh2.a("type");
            if (a4 == null) {
                throw new fo("No param type: " + hh2);
            }
            list.add(new fn$f(a3.i(), fn.a(a4, this.h), null, hh2.a("default")));
        }
        final fn a5 = fn.a(list);
        final hh a6 = hh.a("one-way");
        boolean j = false;
        if (a6 != null) {
            if (!a6.g()) {
                throw new fo("one-way must be boolean: " + hh);
            }
            j = a6.j();
        }
        final hh a7 = hh.a("response");
        if (!j && a7 == null) {
            throw new fo("No response specified: " + hh);
        }
        final hh a8 = hh.a("errors");
        if (!j) {
            final fn a9 = fn.a(a7, this.h);
            final ArrayList<fn> list2 = new ArrayList<fn>();
            list2.add(fm.a);
            if (a8 != null) {
                if (!a8.b()) {
                    throw new fo("Errors not an array: " + hh);
                }
                final Iterator iterator2 = a8.iterator();
                while (iterator2.hasNext()) {
                    final String i = iterator2.next().i();
                    final fn a10 = this.h.a((Object)i);
                    if (a10 == null) {
                        throw new fo("Undefined error: " + i);
                    }
                    if (!a10.h()) {
                        throw new fo("Not an error: " + i);
                    }
                    list2.add(a10);
                }
            }
            return new fm$b(this, s, d, linkedHashMap, a5, a9, fn.b(list2), null);
        }
        if (a8 != null) {
            throw new fo("one-way can't have errors: " + hh);
        }
        if (a7 != null && fn.a(a7, this.h).a() != fn$v.n) {
            throw new fo("One way response must be null: " + hh);
        }
        return new fm$a(this, s, d, linkedHashMap, a5, null);
    }
    
    private static fm a(final hj hj) {
        try {
            final fm fm = new fm();
            fm.a(fn.b.a(hj));
            return fm;
        }
        catch (IOException ex) {
            throw new fo(ex);
        }
    }
    
    public static fm a(final String s) {
        try {
            return a(fn.a.a(new ByteArrayInputStream(s.getBytes("UTF-8"))));
        }
        catch (IOException ex) {
            throw new fk(ex);
        }
    }
    
    private void a(final hh hh) {
        this.b(hh);
        this.e(hh);
        this.f(hh);
        this.h(hh);
        this.c(hh);
        this.g(hh);
    }
    
    private void b(final hh hh) {
        final hh a = hh.a("namespace");
        if (a == null) {
            return;
        }
        this.f = a.i();
        this.h.a(this.f);
    }
    
    private void c(final hh hh) {
        this.g = this.d(hh);
    }
    
    private String d(final hh hh) {
        final hh a = hh.a("doc");
        if (a == null) {
            return null;
        }
        return a.i();
    }
    
    private void e(final hh hh) {
        final hh a = hh.a("protocol");
        if (a == null) {
            throw new fo("No protocol name specified: " + hh);
        }
        this.e = a.i();
    }
    
    private void f(final hh hh) {
        final hh a = hh.a("types");
        if (a != null) {
            if (!a.b()) {
                throw new fo("Types not an array: " + a);
            }
            for (final hh hh2 : a) {
                if (!hh2.c()) {
                    throw new fo("Type not an object: " + hh2);
                }
                fn.a(hh2, this.h);
            }
        }
    }
    
    private void g(final hh hh) {
        final Iterator r = hh.r();
        while (r.hasNext()) {
            final String s = r.next();
            if (!fm.j.contains(s)) {
                final hh a = hh.a(s);
                if (!a.a() || !a.f()) {
                    continue;
                }
                this.a(s, a.i());
            }
        }
    }
    
    private void h(final hh hh) {
        final hh a = hh.a("messages");
        if (a != null) {
            final Iterator r = a.r();
            while (r.hasNext()) {
                final String s = r.next();
                this.i.put(s, this.a(s, a.a(s)));
            }
        }
    }
    
    public String a(final boolean b) {
        try {
            final StringWriter stringWriter = new StringWriter();
            final hf a = fn.a.a(stringWriter);
            if (b) {
                a.a();
            }
            this.a(a);
            a.g();
            return stringWriter.toString();
        }
        catch (IOException ex) {
            throw new fk(ex);
        }
    }
    
    void a(final hf hf) {
        this.h.a(this.f);
        hf.d();
        hf.a("protocol", this.e);
        hf.a("namespace", this.f);
        if (this.g != null) {
            hf.a("doc", this.g);
        }
        this.c.a(hf);
        hf.f("types");
        final fn$o fn$o = new fn$o(this.f);
        for (final fn fn : this.h.values()) {
            if (!fn$o.a(fn)) {
                fn.a(fn$o, hf);
            }
        }
        hf.c();
        hf.g("messages");
        for (final Map.Entry<String, V> entry : this.i.entrySet()) {
            hf.a(entry.getKey());
            ((fm$a)entry.getValue()).a(hf);
        }
        hf.e();
        hf.e();
    }
    
    public void a(final String s, final String s2) {
        synchronized (this) {
            this.c.a(s, s2);
        }
    }
    
    @Override
    public boolean equals(final Object o) {
        if (o != this) {
            if (!(o instanceof fm)) {
                return false;
            }
            final fm fm = (fm)o;
            if (!this.e.equals(fm.e) || !this.f.equals(fm.f) || !this.h.equals(fm.h) || !this.i.equals(fm.i) || !this.c.equals(this.c)) {
                return false;
            }
        }
        return true;
    }
    
    @Override
    public int hashCode() {
        return this.e.hashCode() + this.f.hashCode() + this.h.hashCode() + this.i.hashCode() + this.c.hashCode();
    }
    
    @Override
    public String toString() {
        return this.a(false);
    }
}
