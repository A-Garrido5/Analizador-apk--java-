// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public class ga
{
    private static final ThreadLocal a;
    private static final ThreadLocal b;
    
    static {
        a = new ThreadLocal() {
            protected final ga$a a() {
                return new ga$a();
            }
        };
        b = new ThreadLocal() {
            protected final ga$b a() {
                return new ga$b();
            }
        };
    }
    
    public static int a(final double n, final byte[] array, final int n2) {
        final long doubleToRawLongBits = Double.doubleToRawLongBits(n);
        final int n3 = (int)(doubleToRawLongBits & -1L);
        final int n4 = (int)(-1L & doubleToRawLongBits >>> 32);
        array[n2] = (byte)(n3 & 0xFF);
        array[n2 + 4] = (byte)(n4 & 0xFF);
        array[n2 + 5] = (byte)(0xFF & n4 >>> 8);
        array[n2 + 1] = (byte)(0xFF & n3 >>> 8);
        array[n2 + 2] = (byte)(0xFF & n3 >>> 16);
        array[n2 + 6] = (byte)(0xFF & n4 >>> 16);
        array[n2 + 7] = (byte)(0xFF & n4 >>> 24);
        array[n2 + 3] = (byte)(0xFF & n3 >>> 24);
        return 8;
    }
    
    public static int a(final float n, final byte[] array, final int n2) {
        final int floatToRawIntBits = Float.floatToRawIntBits(n);
        array[n2] = (byte)(floatToRawIntBits & 0xFF);
        array[n2 + 1] = (byte)(0xFF & floatToRawIntBits >>> 8);
        array[n2 + 2] = (byte)(0xFF & floatToRawIntBits >>> 16);
        array[n2 + 3] = (byte)(0xFF & floatToRawIntBits >>> 24);
        return 4;
    }
    
    public static int a(final int n, final byte[] array, final int n2) {
        final int n3 = n << 1 ^ n >> 31;
        int n6 = 0;
        int n8 = 0;
        Label_0145: {
            if ((n3 & 0xFFFFFF80) != 0x0) {
                int n4 = n2 + 1;
                array[n2] = (byte)(0xFF & (n3 | 0x80));
                int n5 = n3 >>> 7;
                if (n5 > 127) {
                    n6 = n4 + 1;
                    array[n4] = (byte)(0xFF & (n5 | 0x80));
                    final int n7 = n5 >>> 7;
                    if (n7 <= 127) {
                        n8 = n7;
                        break Label_0145;
                    }
                    n4 = n6 + 1;
                    array[n6] = (byte)(0xFF & (n7 | 0x80));
                    n5 = n7 >>> 7;
                    if (n5 > 127) {
                        n6 = n4 + 1;
                        array[n4] = (byte)(0xFF & (n5 | 0x80));
                        n8 = n5 >>> 7;
                        break Label_0145;
                    }
                }
                n6 = n4;
                n8 = n5;
            }
            else {
                n8 = n3;
                n6 = n2;
            }
        }
        final int n9 = n6 + 1;
        array[n6] = (byte)n8;
        return n9 - n2;
    }
    
    public static int a(final long n, final byte[] array, final int n2) {
        long n3 = n << 1 ^ n >> 63;
        int n4 = 0;
        Label_0352: {
            if ((0xFFFFFFFFFFFFFF80L & n3) != 0x0L) {
                n4 = n2 + 1;
                array[n2] = (byte)(0xFFL & (0x80L | n3));
                long n5 = n3 >>> 7;
                Label_0382: {
                    if (n5 > 127L) {
                        int n6 = n4 + 1;
                        array[n4] = (byte)(0xFFL & (0x80L | n5));
                        long n7 = n5 >>> 7;
                        if (n7 > 127L) {
                            n4 = n6 + 1;
                            array[n6] = (byte)(0xFFL & (0x80L | n7));
                            n5 = n7 >>> 7;
                            if (n5 <= 127L) {
                                break Label_0382;
                            }
                            n6 = n4 + 1;
                            array[n4] = (byte)(0xFFL & (0x80L | n5));
                            n7 = n5 >>> 7;
                            if (n7 > 127L) {
                                n4 = n6 + 1;
                                array[n6] = (byte)(0xFFL & (0x80L | n7));
                                n5 = n7 >>> 7;
                                if (n5 <= 127L) {
                                    break Label_0382;
                                }
                                n6 = n4 + 1;
                                array[n4] = (byte)(0xFFL & (0x80L | n5));
                                n7 = n5 >>> 7;
                                if (n7 > 127L) {
                                    n4 = n6 + 1;
                                    array[n6] = (byte)(0xFFL & (0x80L | n7));
                                    n5 = n7 >>> 7;
                                    if (n5 <= 127L) {
                                        break Label_0382;
                                    }
                                    n6 = n4 + 1;
                                    array[n4] = (byte)(0xFFL & (0x80L | n5));
                                    n7 = n5 >>> 7;
                                    if (n7 > 127L) {
                                        n4 = n6 + 1;
                                        array[n6] = (byte)(0xFFL & (0x80L | n7));
                                        n3 = n7 >>> 7;
                                        break Label_0352;
                                    }
                                }
                            }
                        }
                        n4 = n6;
                        n3 = n7;
                        break Label_0352;
                    }
                }
                n3 = n5;
            }
            else {
                n4 = n2;
            }
        }
        final int n8 = n4 + 1;
        array[n4] = (byte)n3;
        return n8 - n2;
    }
    
    public static int a(final boolean b, final byte[] array, final int n) {
        byte b2;
        if (b) {
            b2 = 1;
        }
        else {
            b2 = 0;
        }
        array[n] = b2;
        return 1;
    }
    
    public static int a(final byte[] array, int n, final int n2, final byte[] array2, int n3, final int n4) {
        for (int n5 = n + n2, n6 = n3 + n4; n < n5 && n3 < n6; ++n, ++n3) {
            final int n7 = 0xFF & array[n];
            final int n8 = 0xFF & array2[n3];
            if (n7 != n8) {
                return n7 - n8;
            }
        }
        return n2 - n4;
    }
}
