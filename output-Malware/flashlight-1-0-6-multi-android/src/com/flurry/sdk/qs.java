// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.ArrayList;
import java.util.HashMap;
import java.lang.reflect.WildcardType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.TypeVariable;
import java.util.List;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Map;

public final class qs
{
    @Deprecated
    public static final qs a;
    private static final sh[] f;
    protected final qt[] b;
    protected final qu c;
    protected qm d;
    protected qm e;
    
    static {
        a = new qs();
        f = new sh[0];
    }
    
    private qs() {
        this.c = new qu(this);
        this.b = null;
    }
    
    public static qs a() {
        return qs.a;
    }
    
    public static sh a(final String s) {
        return qs.a.b(s);
    }
    
    public static sh b() {
        return a().c();
    }
    
    private sh b(final Class clazz) {
        final sh[] a = this.a(clazz, Map.class);
        if (a == null) {
            return qo.a(clazz, this.c(), this.c());
        }
        if (a.length != 2) {
            throw new IllegalArgumentException("Strange Map type " + clazz.getName() + ": can not determine type parameters");
        }
        return qo.a(clazz, a[0], a[1]);
    }
    
    private sh c(final Class clazz) {
        final sh[] a = this.a(clazz, Collection.class);
        if (a == null) {
            return ql.a(clazz, this.c());
        }
        if (a.length != 1) {
            throw new IllegalArgumentException("Strange Collection type " + clazz.getName() + ": can not determine type parameters");
        }
        return ql.a(clazz, a[0]);
    }
    
    protected final qm a(final qm qm) {
        synchronized (this) {
            if (this.d == null) {
                final qm a = qm.a();
                this.a(a, Map.class);
                this.d = a.b();
            }
            final qm a2 = this.d.a();
            qm.a(a2);
            a2.b(qm);
            return qm;
        }
    }
    
    protected final qm a(final qm qm, final Class clazz) {
        final Class e = qm.e();
        final Type[] genericInterfaces = e.getGenericInterfaces();
        if (genericInterfaces != null) {
            for (int length = genericInterfaces.length, i = 0; i < length; ++i) {
                final qm b = this.b(genericInterfaces[i], clazz);
                if (b != null) {
                    b.b(qm);
                    qm.a(b);
                    return qm;
                }
            }
        }
        final Type genericSuperclass = e.getGenericSuperclass();
        if (genericSuperclass != null) {
            final qm b2 = this.b(genericSuperclass, clazz);
            if (b2 != null) {
                b2.b(qm);
                qm.a(b2);
                return qm;
            }
        }
        return null;
    }
    
    protected final qm a(final Type type, final Class clazz) {
        final qm qm = new qm(type);
        final Class e = qm.e();
        if (e == clazz) {
            return qm;
        }
        final Type genericSuperclass = e.getGenericSuperclass();
        if (genericSuperclass != null) {
            final qm a = this.a(genericSuperclass, clazz);
            if (a != null) {
                a.b(qm);
                qm.a(a);
                return qm;
            }
        }
        return null;
    }
    
    public final qo a(final Class clazz, final Class clazz2, final Class clazz3) {
        return qo.a(clazz, this.a((Type)clazz2), this.a((Type)clazz3));
    }
    
    public final sh a(final sh sh, final Class clazz) {
        if (!(sh instanceof qp) || (!clazz.isArray() && !Map.class.isAssignableFrom(clazz) && !Collection.class.isAssignableFrom(clazz))) {
            return sh.f(clazz);
        }
        if (!sh.p().isAssignableFrom(clazz)) {
            throw new IllegalArgumentException("Class " + clazz.getClass().getName() + " not subtype of " + sh);
        }
        sh sh2 = this.a(clazz, new qr(this, sh.p()));
        final Object n = sh.n();
        if (n != null) {
            sh2 = sh2.d(n);
        }
        final Object o = sh.o();
        if (o != null) {
            sh2 = sh2.f(o);
        }
        return sh2;
    }
    
    public final sh a(final Class clazz) {
        return new qp(clazz);
    }
    
    protected final sh a(final Class clazz, final qr qr) {
        if (clazz.isArray()) {
            return qi.a(this.b(clazz.getComponentType(), (qr)null), null, null);
        }
        if (clazz.isEnum()) {
            return new qp(clazz);
        }
        if (Map.class.isAssignableFrom(clazz)) {
            return this.b(clazz);
        }
        if (Collection.class.isAssignableFrom(clazz)) {
            return this.c(clazz);
        }
        return new qp(clazz);
    }
    
    protected final sh a(final Class clazz, final List list) {
        if (clazz.isArray()) {
            return qi.a(this.b(clazz.getComponentType(), (qr)null), null, null);
        }
        if (clazz.isEnum()) {
            return new qp(clazz);
        }
        if (Map.class.isAssignableFrom(clazz)) {
            if (list.size() > 0) {
                final sh sh = list.get(0);
                sh c;
                if (list.size() >= 2) {
                    c = list.get(1);
                }
                else {
                    c = this.c();
                }
                return qo.a(clazz, sh, c);
            }
            return this.b(clazz);
        }
        else if (Collection.class.isAssignableFrom(clazz)) {
            if (list.size() > 0) {
                return ql.a(clazz, list.get(0));
            }
            return this.c(clazz);
        }
        else {
            if (list.size() == 0) {
                return new qp(clazz);
            }
            return this.a(clazz, list.toArray(new sh[list.size()]));
        }
    }
    
    public final sh a(final Class clazz, final sh[] array) {
        final TypeVariable[] typeParameters = clazz.getTypeParameters();
        if (typeParameters.length != array.length) {
            throw new IllegalArgumentException("Parameter type mismatch for " + clazz.getName() + ": expected " + typeParameters.length + " parameters, was given " + array.length);
        }
        final String[] array2 = new String[typeParameters.length];
        for (int i = 0; i < typeParameters.length; ++i) {
            array2[i] = typeParameters[i].getName();
        }
        return new qp(clazz, array2, array, null, null);
    }
    
    protected final sh a(final GenericArrayType genericArrayType, final qr qr) {
        return qi.a(this.b(genericArrayType.getGenericComponentType(), qr), null, null);
    }
    
    protected final sh a(final ParameterizedType parameterizedType, final qr qr) {
        final Class clazz = (Class)parameterizedType.getRawType();
        final Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
        int length;
        if (actualTypeArguments == null) {
            length = 0;
        }
        else {
            length = actualTypeArguments.length;
        }
        sh[] f;
        if (length == 0) {
            f = qs.f;
        }
        else {
            f = new sh[length];
            for (int i = 0; i < length; ++i) {
                f[i] = this.b(actualTypeArguments[i], qr);
            }
        }
        if (Map.class.isAssignableFrom(clazz)) {
            final sh[] b = this.b(this.a(clazz, f), Map.class);
            if (b.length != 2) {
                throw new IllegalArgumentException("Could not find 2 type parameters for Map class " + clazz.getName() + " (found " + b.length + ")");
            }
            return qo.a(clazz, b[0], b[1]);
        }
        else if (Collection.class.isAssignableFrom(clazz)) {
            final sh[] b2 = this.b(this.a(clazz, f), Collection.class);
            if (b2.length != 1) {
                throw new IllegalArgumentException("Could not find 1 type parameter for Collection class " + clazz.getName() + " (found " + b2.length + ")");
            }
            return ql.a(clazz, b2[0]);
        }
        else {
            if (length == 0) {
                return new qp(clazz);
            }
            return this.a(clazz, f);
        }
    }
    
    public final sh a(final Type type) {
        return this.b(type, (qr)null);
    }
    
    public final sh a(final Type type, final qr qr) {
        return this.b(type, qr);
    }
    
    protected final sh a(final TypeVariable typeVariable, final qr qr) {
        sh sh;
        if (qr == null) {
            sh = this.c();
        }
        else {
            final String name = typeVariable.getName();
            sh = qr.a(name);
            if (sh == null) {
                final Type[] bounds = typeVariable.getBounds();
                qr.b(name);
                return this.b(bounds[0], qr);
            }
        }
        return sh;
    }
    
    protected final sh a(final WildcardType wildcardType, final qr qr) {
        return this.b(wildcardType.getUpperBounds()[0], qr);
    }
    
    public final sh[] a(final Class clazz, final Class clazz2) {
        return this.a(clazz, clazz2, new qr(this, clazz));
    }
    
    public final sh[] a(final Class clazz, final Class clazz2, qr qr) {
        qm c = this.c(clazz, clazz2);
        if (c == null) {
            throw new IllegalArgumentException("Class " + clazz.getName() + " is not a subtype of " + clazz2.getName());
        }
        while (c.b() != null) {
            final qm b = c.b();
            final Class e = b.e();
            final qr qr2 = new qr(this, e);
            if (b.c()) {
                final Type[] actualTypeArguments = b.d().getActualTypeArguments();
                final TypeVariable[] typeParameters = e.getTypeParameters();
                for (int length = actualTypeArguments.length, i = 0; i < length; ++i) {
                    qr2.a(typeParameters[i].getName(), qs.a.b(actualTypeArguments[i], qr));
                }
            }
            qr = qr2;
            c = b;
        }
        if (!c.c()) {
            return null;
        }
        return qr.b();
    }
    
    public final ql b(final Class clazz, final Class clazz2) {
        return ql.a(clazz, this.a((Type)clazz2));
    }
    
    protected final qm b(final qm qm) {
        synchronized (this) {
            if (this.e == null) {
                final qm a = qm.a();
                this.a(a, List.class);
                this.e = a.b();
            }
            final qm a2 = this.e.a();
            qm.a(a2);
            a2.b(qm);
            return qm;
        }
    }
    
    protected final qm b(final Type type, final Class clazz) {
        final qm qm = new qm(type);
        final Class e = qm.e();
        if (e == clazz) {
            return new qm(type);
        }
        if (e == HashMap.class && clazz == Map.class) {
            return this.a(qm);
        }
        if (e == ArrayList.class && clazz == List.class) {
            return this.b(qm);
        }
        return this.a(qm, clazz);
    }
    
    public final sh b(final String s) {
        return this.c.a(s);
    }
    
    public final sh b(final Type type, qr qr) {
        sh sh;
        if (type instanceof Class) {
            final Class clazz = (Class)type;
            if (qr == null) {
                qr = new qr(this, clazz);
            }
            sh = this.a(clazz, qr);
        }
        else if (type instanceof ParameterizedType) {
            sh = this.a((ParameterizedType)type, qr);
        }
        else if (type instanceof GenericArrayType) {
            sh = this.a((GenericArrayType)type, qr);
        }
        else if (type instanceof TypeVariable) {
            sh = this.a((TypeVariable)type, qr);
        }
        else {
            if (!(type instanceof WildcardType)) {
                throw new IllegalArgumentException("Unrecognized Type: " + type.toString());
            }
            sh = this.a((WildcardType)type, qr);
        }
        if (this.b != null && !sh.f()) {
            final qt[] b = this.b;
            sh a;
            for (int length = b.length, i = 0; i < length; ++i, sh = a) {
                a = b[i].a(sh, type, qr, this);
            }
        }
        return sh;
    }
    
    public final sh[] b(final sh sh, final Class clazz) {
        final Class p2 = sh.p();
        if (p2 == clazz) {
            final int h = sh.h();
            sh[] array;
            if (h == 0) {
                array = null;
            }
            else {
                array = new sh[h];
                for (int i = 0; i < h; ++i) {
                    array[i] = sh.b(i);
                }
            }
            return array;
        }
        return this.a(p2, clazz, new qr(this, sh));
    }
    
    protected final qm c(final Class clazz, final Class clazz2) {
        if (clazz2.isInterface()) {
            return this.b((Type)clazz, clazz2);
        }
        return this.a((Type)clazz, clazz2);
    }
    
    protected final sh c() {
        return new qp(Object.class);
    }
}
