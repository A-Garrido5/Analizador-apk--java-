// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.lang.reflect.Modifier;

public abstract class sh
{
    protected final Class d;
    protected final int e;
    protected Object f;
    protected Object g;
    
    protected sh(final Class d, final int n) {
        this.d = d;
        this.e = n + d.getName().hashCode();
        this.f = null;
        this.g = null;
    }
    
    protected abstract sh a(final Class p0);
    
    public String a(final int n) {
        return null;
    }
    
    protected void a(final Class clazz, final Class clazz2) {
        if (!this.d.isAssignableFrom(clazz)) {
            throw new IllegalArgumentException("Class " + clazz.getName() + " is not assignable to " + this.d.getName());
        }
    }
    
    public sh b(final int n) {
        return null;
    }
    
    public abstract sh b(final Class p0);
    
    public boolean b() {
        return false;
    }
    
    public abstract sh c(final Class p0);
    
    public boolean c() {
        return Modifier.isAbstract(this.d.getModifiers());
    }
    
    public sh d(final Object o) {
        this.j(o);
        return this;
    }
    
    public boolean d() {
        return (0x600 & this.d.getModifiers()) == 0x0 || this.d.isPrimitive();
    }
    
    public abstract sh e(final Object p0);
    
    public boolean e() {
        return this.h() > 0;
    }
    
    @Override
    public abstract boolean equals(final Object p0);
    
    public sh f(final Class clazz) {
        if (clazz == this.d) {
            return this;
        }
        this.a(clazz, this.d);
        sh sh = this.a(clazz);
        if (this.f != sh.n()) {
            sh = sh.d(this.f);
        }
        if (this.g != sh.o()) {
            sh = sh.f(this.g);
        }
        return sh;
    }
    
    public abstract sh f(final Object p0);
    
    public abstract boolean f();
    
    public sh g() {
        return null;
    }
    
    public sh g(final Class clazz) {
        if (clazz == this.d) {
            return this;
        }
        sh sh = this.a(clazz);
        if (this.f != sh.n()) {
            sh = sh.d(this.f);
        }
        if (this.g != sh.o()) {
            sh = sh.f(this.g);
        }
        return sh;
    }
    
    public int h() {
        return 0;
    }
    
    public sh h(final Class clazz) {
        if (clazz == this.d) {
            return this;
        }
        this.a(this.d, clazz);
        return this.i(clazz);
    }
    
    @Override
    public final int hashCode() {
        return this.e;
    }
    
    protected sh i(final Class clazz) {
        return this.a(clazz);
    }
    
    public boolean i() {
        return false;
    }
    
    @Deprecated
    public void j(final Object f) {
        if (f != null && this.f != null) {
            throw new IllegalStateException("Trying to reset value handler for type [" + this.toString() + "]; old handler of type " + this.f.getClass().getName() + ", new handler of type " + f.getClass().getName());
        }
        this.f = f;
    }
    
    public boolean j() {
        return false;
    }
    
    public sh k() {
        return null;
    }
    
    public abstract String m();
    
    public Object n() {
        return this.f;
    }
    
    public Object o() {
        return this.g;
    }
    
    public final Class p() {
        return this.d;
    }
    
    public boolean q() {
        return Throwable.class.isAssignableFrom(this.d);
    }
    
    public final boolean r() {
        return this.d.isEnum();
    }
    
    public final boolean s() {
        return this.d.isInterface();
    }
    
    public final boolean t() {
        return this.d.isPrimitive();
    }
    
    @Override
    public abstract String toString();
    
    public final boolean u() {
        return Modifier.isFinal(this.d.getModifiers());
    }
}
