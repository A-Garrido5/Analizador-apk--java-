// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import com.flurry.android.impl.ads.avro.protocol.v10.AdUnit;
import com.flurry.android.FlurryAdSize;
import android.app.Activity;
import java.util.Iterator;
import java.util.Collections;
import android.text.TextUtils;
import android.view.ViewGroup;
import android.content.Context;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import com.flurry.android.impl.ads.FlurryAdModule;

public class u
{
    private static final String a;
    private final FlurryAdModule b;
    private an c;
    private final m d;
    private final Map e;
    
    static {
        a = u.class.getSimpleName();
    }
    
    public u(final FlurryAdModule b) {
        this.b = b;
        this.d = new m();
        this.c = new an();
        this.e = new HashMap();
    }
    
    private void a(final List list) {
        if (list == null || list.isEmpty()) {
            return;
        }
        this.c.a(list);
    }
    
    private u$a g(final String s) {
        synchronized (this) {
            u$a u$a = this.e.get(s);
            if (u$a == null) {
                u$a = new u$a(this, s);
                this.e.put(s, u$a);
            }
            return u$a;
        }
    }
    
    public l a(final FlurryAdModule flurryAdModule, final Context context, final ViewGroup viewGroup, final String s) {
        return this.d.a(flurryAdModule, context, viewGroup, s);
    }
    
    public List a(final String s, final int n, final int n2) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return Collections.emptyList();
        }
        final List a = this.c.a(s, n, n2);
        this.c.a(s, a);
        return a;
    }
    
    public void a() {
        synchronized (this) {
            final Iterator<u$a> iterator = this.e.values().iterator();
            while (iterator.hasNext()) {
                iterator.next().a();
            }
        }
        this.e.clear();
    }
    // monitorexit(this)
    
    public void a(final Activity activity, final du$a du$a) {
        if (du$a.c.equals(du$a)) {
            final Iterator<l> iterator = this.d.a((Context)activity).iterator();
            while (iterator.hasNext()) {
                iterator.next().c();
            }
        }
        else if (du$a.d.equals(du$a)) {
            final Iterator<l> iterator2 = this.d.a((Context)activity).iterator();
            while (iterator2.hasNext()) {
                iterator2.next().b();
            }
        }
        else if (du$a.b.equals(du$a)) {
            this.b.a(new ff() {
                @Override
                public void a() {
                    u.this.a((Context)activity);
                }
            });
        }
    }
    
    public void a(final Context context, final String s) {
        eo.a(3, u.a, "removeAd: context = " + context + ", adSpaceName = " + s);
        this.g(s).c();
    }
    
    public void a(final Context context, final String s, final ViewGroup viewGroup, final FlurryAdSize flurryAdSize, final boolean b) {
        eo.a(3, u.a, "fetchAd: context = " + context + ", adSpaceName = " + s + ", viewGroup = " + viewGroup + ", size = " + flurryAdSize + ", autoDisplay = " + b);
        this.g(s).a(context, viewGroup, flurryAdSize, b);
    }
    
    void a(final String s, final int n) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return;
        }
        this.c.a(s, n);
    }
    
    public void a(final String s, final AdUnit adUnit) {
        if (TextUtils.isEmpty((CharSequence)s) || adUnit == null) {
            return;
        }
        this.c.a(s, adUnit);
    }
    
    void a(final String s, final String s2) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return;
        }
        this.c.a(s, s2);
    }
    
    public void a(final String s, final List list) {
        if (list != null) {
            eo.a(3, u.a, "Handling ad response");
            if (TextUtils.isEmpty((CharSequence)s)) {
                this.a(list);
                this.f(s);
                eo.a(3, u.a, "handleAdResponse: setting cache request limit count");
                return;
            }
            final u$a g = this.g(s);
            if (!g.a(list)) {
                this.a(list);
                this.f(s);
                eo.a(3, u.a, "handleAdResponse: setting cache request limit count");
                g.f();
            }
        }
    }
    
    public boolean a(final Context context) {
        final Iterator<l> iterator = (Iterator<l>)this.d.a(context).iterator();
        int n = 0;
        while (iterator.hasNext()) {
            this.a(context, iterator.next().getAdSpace());
            ++n;
        }
        eo.a(3, u.a, "removeAllAds: removed " + n + " banners");
        boolean b = false;
        if (n > 0) {
            b = true;
        }
        return b;
    }
    
    public boolean a(final Context context, final String s, final ViewGroup viewGroup) {
        eo.a(3, u.a, "displayAd: context = " + context + ", adSpaceName = " + s + ", viewGroup = " + viewGroup);
        return this.g(s).a(context, viewGroup);
    }
    
    public boolean a(final Context context, final String s, final ViewGroup viewGroup, final FlurryAdSize flurryAdSize) {
        eo.a(3, u.a, "getAd: context = " + context + ", adSpaceName = " + s + ", viewGroup = " + viewGroup + ", size = " + flurryAdSize);
        if (this.a(s)) {
            return this.a(context, s, viewGroup);
        }
        this.a(context, s, viewGroup, flurryAdSize, true);
        return false;
    }
    
    public boolean a(final Context context, final String s, final FlurryAdSize flurryAdSize) {
        eo.a(3, u.a, "isAdAvailable: adSpaceName = " + s);
        return this.a(s);
    }
    
    public boolean a(final String s) {
        eo.a(3, u.a, "isAdReady: adSpaceName = " + s);
        return this.g(s).d();
    }
    
    public String b(final String s) {
        return this.g(s).e();
    }
    
    public void b() {
        this.c.a();
    }
    
    public an c() {
        return this.c;
    }
    
    public l c(final String s) {
        return this.d.a(s);
    }
    
    public void d(final String s) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return;
        }
        this.c.a(s);
    }
    
    public List e(final String s) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return Collections.emptyList();
        }
        return this.c.d(s);
    }
    
    public void f(final String s) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return;
        }
        this.c.b(s);
        eo.a(3, u.a, "fetchAdTaskExecute: setting cache request limit count");
    }
}
