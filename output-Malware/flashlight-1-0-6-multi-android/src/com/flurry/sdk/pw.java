// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

public abstract class pw extends jk
{
    protected final Class k;
    
    protected pw(final sh sh) {
        this.k = sh.p();
    }
    
    protected pw(final Class k) {
        this.k = k;
    }
    
    protected pw(final Class k, final boolean b) {
        this.k = k;
    }
    
    public void a(final jw jw, final Throwable t, final Object o, final int n) {
        Throwable cause;
        for (cause = t; cause instanceof InvocationTargetException && cause.getCause() != null; cause = cause.getCause()) {}
        if (cause instanceof Error) {
            throw (Error)cause;
        }
        boolean b;
        if (jw == null || jw.a(ju$a.n)) {
            b = true;
        }
        else {
            b = false;
        }
        if (cause instanceof IOException) {
            if (!b || !(cause instanceof jh)) {
                throw (IOException)cause;
            }
        }
        else if (!b && cause instanceof RuntimeException) {
            throw (RuntimeException)cause;
        }
        throw jh.a(cause, o, n);
    }
    
    public void a(final jw jw, final Throwable t, final Object o, final String s) {
        Throwable cause;
        for (cause = t; cause instanceof InvocationTargetException && cause.getCause() != null; cause = cause.getCause()) {}
        if (cause instanceof Error) {
            throw (Error)cause;
        }
        boolean b;
        if (jw == null || jw.a(ju$a.n)) {
            b = true;
        }
        else {
            b = false;
        }
        if (cause instanceof IOException) {
            if (!b || !(cause instanceof jh)) {
                throw (IOException)cause;
            }
        }
        else if (!b && cause instanceof RuntimeException) {
            throw (RuntimeException)cause;
        }
        throw jh.a(cause, o, s);
    }
    
    @Override
    public abstract void a(final Object p0, final hf p1, final jw p2);
    
    protected boolean a(final jk jk) {
        return jk != null && jk.getClass().getAnnotation(kb.class) != null;
    }
    
    @Override
    public final Class c() {
        return this.k;
    }
}
