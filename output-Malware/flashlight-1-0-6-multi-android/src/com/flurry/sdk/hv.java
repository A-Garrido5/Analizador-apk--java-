// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

public abstract class hv extends hj
{
    protected hv() {
    }
    
    protected hv(final int n) {
        super(n);
    }
    
    protected static final String c(final int n) {
        final char c = (char)n;
        if (Character.isISOControl(c)) {
            return "(CTRL-CHAR, code " + n + ")";
        }
        if (n > 255) {
            return "'" + c + "' (code " + n + " / 0x" + Integer.toHexString(n) + ")";
        }
        return "'" + c + "' (code " + n + ")";
    }
    
    protected abstract void H();
    
    protected void R() {
        throw this.a("Unexpected end-of-String in base64 content");
    }
    
    protected void S() {
        this.c(" in " + this.b);
    }
    
    protected void T() {
        this.c(" in a value");
    }
    
    protected final void U() {
        throw new RuntimeException("Internal error: this code path should never get executed");
    }
    
    protected char a(final char c) {
        if (!this.a(hj$a.f) && (c != '\'' || !this.a(hj$a.d))) {
            this.d("Unrecognized character escape " + c(c));
            return c;
        }
        return c;
    }
    
    protected void a(final ha ha, final char c, final int n, final String s) {
        String s2;
        if (c <= ' ') {
            s2 = "Illegal white space character (code 0x" + Integer.toHexString(c) + ") as character #" + (n + 1) + " of 4-char base64 unit: can only used between units";
        }
        else if (ha.a(c)) {
            s2 = "Unexpected padding character ('" + ha.b() + "') as character #" + (n + 1) + " of 4-char base64 unit: padding only legal as 3rd or 4th character";
        }
        else if (!Character.isDefined(c) || Character.isISOControl(c)) {
            s2 = "Illegal character (code 0x" + Integer.toHexString(c) + ") in base64 content";
        }
        else {
            s2 = "Illegal character '" + c + "' (code 0x" + Integer.toHexString(c) + ") in base64 content";
        }
        if (s != null) {
            s2 = s2 + ": " + s;
        }
        throw this.a(s2);
    }
    
    protected void a(final String s, final sj sj, final ha ha) {
        final int length = s.length();
        int i = 0;
    Label_0145:
        while (i < length) {
            int n2 = 0;
            int n3 = 0;
            Label_0150: {
                while (true) {
                    final int n = i + 1;
                    final char char1 = s.charAt(i);
                    if (n >= length) {
                        break Label_0145;
                    }
                    if (char1 > ' ') {
                        final int b = ha.b(char1);
                        if (b < 0) {
                            this.a(ha, char1, 0, null);
                        }
                        if (n >= length) {
                            this.R();
                        }
                        n2 = n + 1;
                        final char char2 = s.charAt(n);
                        final int b2 = ha.b(char2);
                        if (b2 < 0) {
                            this.a(ha, char2, 1, null);
                        }
                        n3 = (b2 | b << 6);
                        if (n2 < length) {
                            break Label_0150;
                        }
                        if (!ha.a()) {
                            sj.a(n3 >> 4);
                            break Label_0145;
                        }
                        break;
                    }
                    else {
                        i = n;
                    }
                }
                this.R();
            }
            final int n4 = n2 + 1;
            final char char3 = s.charAt(n2);
            final int b3 = ha.b(char3);
            if (b3 < 0) {
                if (b3 != -2) {
                    this.a(ha, char3, 2, null);
                }
                if (n4 >= length) {
                    this.R();
                }
                i = n4 + 1;
                final char char4 = s.charAt(n4);
                if (!ha.a(char4)) {
                    this.a(ha, char4, 3, "expected padding character '" + ha.b() + "'");
                }
                sj.a(n3 >> 4);
            }
            else {
                final int n5 = b3 | n3 << 6;
                if (n4 >= length) {
                    if (!ha.a()) {
                        sj.b(n5 >> 2);
                        return;
                    }
                    this.R();
                }
                i = n4 + 1;
                final char char5 = s.charAt(n4);
                final int b4 = ha.b(char5);
                if (b4 < 0) {
                    if (b4 != -2) {
                        this.a(ha, char5, 3, null);
                    }
                    sj.b(n5 >> 2);
                }
                else {
                    sj.c(b4 | n5 << 6);
                }
            }
        }
    }
    
    protected final void a(final String s, final Throwable t) {
        throw this.b(s, t);
    }
    
    protected final hi b(final String s, final Throwable t) {
        return new hi(s, this.i(), t);
    }
    
    @Override
    public abstract hm b();
    
    protected void b(final int n) {
        this.d("Illegal character (" + c((char)n) + "): only regular white space (\\r, \\n, \\t) is allowed between tokens");
    }
    
    protected void b(final int n, final String s) {
        String s2 = "Unexpected character (" + c(n) + ")";
        if (s != null) {
            s2 = s2 + ": " + s;
        }
        this.d(s2);
    }
    
    protected void c(final int n, final String s) {
        if (!this.a(hj$a.e) || n >= 32) {
            this.d("Illegal unquoted character (" + c((char)n) + "): has to be escaped using backslash to be included in " + s);
        }
    }
    
    protected void c(final String s) {
        this.d("Unexpected end-of-input" + s);
    }
    
    @Override
    public hj d() {
        if (this.b != hm.b && this.b != hm.d) {
            return this;
        }
        int n = 1;
        while (true) {
            final hm b = this.b();
            if (b == null) {
                this.H();
                return this;
            }
            switch (hv$1.a[b.ordinal()]) {
                default: {
                    continue;
                }
                case 1:
                case 2: {
                    ++n;
                    continue;
                }
                case 3:
                case 4: {
                    if (--n == 0) {
                        return this;
                    }
                    continue;
                }
            }
        }
    }
    
    protected final void d(final String s) {
        throw this.a(s);
    }
    
    @Override
    public abstract String k();
}
