// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Iterator;
import java.io.EOFException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;
import java.util.LinkedHashMap;
import java.io.Writer;
import java.util.concurrent.ThreadPoolExecutor;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.io.Closeable;
import java.io.File;
import java.util.Arrays;
import java.io.IOException;

final class fh$b
{
    final /* synthetic */ fh a;
    private final String b;
    private final long[] c;
    private boolean d;
    private fh$a e;
    private long f;
    
    private fh$b(final fh a, final String b) {
        this.a = a;
        this.b = b;
        this.c = new long[a.i];
    }
    
    private void a(final String[] array) {
        if (array.length != this.a.i) {
            throw this.b(array);
        }
        int i = 0;
        try {
            while (i < array.length) {
                this.c[i] = Long.parseLong(array[i]);
                ++i;
            }
        }
        catch (NumberFormatException ex) {
            throw this.b(array);
        }
    }
    
    private IOException b(final String[] array) {
        throw new IOException("unexpected journal line: " + Arrays.toString(array));
    }
    
    public final File a(final int n) {
        return new File(this.a.c, this.b + "." + n);
    }
    
    public final String a() {
        final StringBuilder sb = new StringBuilder();
        final long[] c = this.c;
        for (int length = c.length, i = 0; i < length; ++i) {
            sb.append(' ').append(c[i]);
        }
        return sb.toString();
    }
    
    public final File b(final int n) {
        return new File(this.a.c, this.b + "." + n + ".tmp");
    }
}
