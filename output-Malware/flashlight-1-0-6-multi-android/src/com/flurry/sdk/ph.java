// 
// Decompiled by Procyon v0.5.30
// 

package com.flurry.sdk;

import java.util.Iterator;
import java.util.Map;
import java.util.EnumMap;

@kb
public class ph extends pf implements jt
{
    protected final boolean a;
    protected final rb b;
    protected final sh c;
    protected final is d;
    protected jk e;
    protected final jz f;
    
    public ph(final sh c, final boolean b, final rb b2, final jz f, final is d, final jk e) {
        super(EnumMap.class, false);
        boolean a = false;
        Label_0035: {
            if (!b) {
                a = false;
                if (c == null) {
                    break Label_0035;
                }
                final boolean u = c.u();
                a = false;
                if (!u) {
                    break Label_0035;
                }
            }
            a = true;
        }
        this.a = a;
        this.c = c;
        this.b = b2;
        this.f = f;
        this.d = d;
        this.e = e;
    }
    
    @Override
    public pf a(final jz jz) {
        return new ph(this.c, this.a, this.b, jz, this.d, this.e);
    }
    
    @Override
    public void a(final jw jw) {
        if (this.a && this.e == null) {
            this.e = jw.a(this.c, this.d);
        }
    }
    
    public void a(final EnumMap enumMap, final hf hf, final jw jw) {
        hf.d();
        if (!enumMap.isEmpty()) {
            this.b(enumMap, hf, jw);
        }
        hf.e();
    }
    
    protected void a(final EnumMap enumMap, final hf hf, final jw jw, final jk jk) {
        final rb b = this.b;
        final Iterator<Map.Entry<Enum, V>> iterator = enumMap.entrySet().iterator();
        rb d = b;
        while (iterator.hasNext()) {
            final Map.Entry<Enum, V> entry = iterator.next();
            final Enum enum1 = entry.getKey();
            if (d == null) {
                d = ((pi)jw.a(enum1.getDeclaringClass(), this.d)).d();
            }
            hf.a(d.a(enum1));
            final V value = entry.getValue();
            if (value == null) {
                jw.a(hf);
            }
            else {
                try {
                    jk.a(value, hf, jw);
                }
                catch (Exception ex) {
                    this.a(jw, ex, enumMap, entry.getKey().name());
                }
            }
        }
    }
    
    public void a(final EnumMap enumMap, final hf hf, final jw jw, final jz jz) {
        jz.b(enumMap, hf);
        if (!enumMap.isEmpty()) {
            this.b(enumMap, hf, jw);
        }
        jz.e(enumMap, hf);
    }
    
    protected void b(final EnumMap enumMap, final hf hf, final jw jw) {
        if (this.e != null) {
            this.a(enumMap, hf, jw, this.e);
        }
        else {
            final rb b = this.b;
            final Iterator<Map.Entry<Enum, V>> iterator = enumMap.entrySet().iterator();
            rb d = b;
            Class<?> clazz = null;
            jk jk = null;
        Label_0164_Outer:
            while (iterator.hasNext()) {
                final Map.Entry<Enum, V> entry = iterator.next();
                final Enum enum1 = entry.getKey();
                if (d == null) {
                    d = ((pi)jw.a(enum1.getDeclaringClass(), this.d)).d();
                }
                hf.a(d.a(enum1));
                final V value = entry.getValue();
                if (value == null) {
                    jw.a(hf);
                }
                else {
                    Class<?> class1 = value.getClass();
                    Label_0184: {
                        if (class1 != clazz) {
                            break Label_0184;
                        }
                        class1 = clazz;
                        jk a = jk;
                        try {
                            while (true) {
                                jk.a(value, hf, jw);
                                jk = a;
                                clazz = class1;
                                continue Label_0164_Outer;
                                jk = (a = jw.a(class1, this.d));
                                continue;
                            }
                        }
                        catch (Exception ex) {
                            this.a(jw, ex, enumMap, entry.getKey().name());
                            jk = a;
                            clazz = class1;
                        }
                    }
                }
            }
        }
    }
}
