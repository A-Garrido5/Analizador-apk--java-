// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.d.a;

import android.os.IBinder;
import android.view.SurfaceView;
import java.lang.reflect.Method;

public final class h extends c
{
    private Object c;
    private Method d;
    
    public h() {
        this.c = null;
        this.d = null;
    }
    
    @Override
    public final void a(final SurfaceView surfaceView) {
    }
    
    @Override
    public final boolean a() {
        try {
            this.a = com.ihs.d.a.b.b;
            final Class<?> forName = Class.forName("android.os.ServiceManager");
            if (forName == null) {
                return false;
            }
            final Object invoke = forName.getMethod("getService", String.class).invoke(null, "hardware");
            if (invoke == null) {
                return false;
            }
            final Class<?> forName2 = Class.forName("android.os.IHardwareService$Stub");
            if (forName2 == null) {
                return false;
            }
            final Method method = forName2.getMethod("asInterface", IBinder.class);
            if (method == null) {
                return false;
            }
            this.c = method.invoke(null, (IBinder)invoke);
            if (this.c == null) {
                return false;
            }
            final Class<?> class1 = this.c.getClass();
            if (class1 == null) {
                return false;
            }
            this.d = class1.getMethod("setFlashlightEnabled", Boolean.TYPE);
            if (this.d == null) {
                return false;
            }
        }
        catch (Exception ex) {
            this.a = com.ihs.d.a.b.b;
            return false;
        }
        this.a = com.ihs.d.a.b.a;
        return true;
    }
    
    @Override
    public final void b() {
        this.c = null;
        this.d = null;
    }
    
    @Override
    public final boolean c() {
        if (this.d == null) {
            return true;
        }
        try {
            this.d.invoke(this.c, true);
            return true;
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    @Override
    public final boolean d() {
        if (this.d == null) {
            return true;
        }
        try {
            this.d.invoke(this.c, false);
            return true;
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    @Override
    public final b e() {
        return this.a;
    }
}
