// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.d.a;

import android.hardware.Camera$AutoFocusCallback;
import android.view.SurfaceView;
import java.util.List;
import android.hardware.Camera$Parameters;
import android.os.Build$VERSION;
import android.hardware.Camera;

public final class f extends c
{
    private Camera c;
    private boolean d;
    private boolean e;
    
    public f() {
        this.c = null;
        this.d = false;
        this.e = true;
    }
    
    static /* synthetic */ void c(final f f) {
        f.e = false;
    }
    
    private boolean f() {
        if (this.c == null) {
            this.a = com.ihs.d.a.b.b;
            try {
                this.c = Camera.open();
                if (this.c == null && Build$VERSION.SDK_INT >= 9) {
                    for (int numberOfCameras = Camera.getNumberOfCameras(), i = 0; i < numberOfCameras; ++i) {
                        this.c = Camera.open(i);
                        if (this.c != null) {
                            break;
                        }
                    }
                }
                if (this.c == null) {
                    this.a = com.ihs.d.a.b.b;
                    return false;
                }
            }
            catch (RuntimeException ex) {
                this.a = com.ihs.d.a.b.c;
                ex.printStackTrace();
                return false;
            }
            final Camera$Parameters parameters = this.c.getParameters();
            if (parameters != null) {
                final List supportedFlashModes = parameters.getSupportedFlashModes();
                if (supportedFlashModes != null && supportedFlashModes.contains("on")) {
                    this.d = true;
                    this.a = com.ihs.d.a.b.a;
                    return true;
                }
                return false;
            }
        }
        return true;
    }
    
    @Override
    public final void a(final SurfaceView surfaceView) {
    }
    
    @Override
    public final boolean a() {
        this.d = false;
        return this.f();
    }
    
    @Override
    public final void b() {
        if (this.c == null) {
            return;
        }
        while (true) {
            try {
                this.c.release();
                this.c = null;
            }
            catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    @Override
    public final boolean c() {
        this.e = true;
        while (true) {
            if (this.c == null) {
                break Label_0058;
            }
            try {
                final Camera$Parameters parameters = this.c.getParameters();
                if (parameters != null) {
                    final List supportedFlashModes = parameters.getSupportedFlashModes();
                    if (supportedFlashModes != null && supportedFlashModes.contains("on")) {
                        parameters.setFlashMode("on");
                        this.c.setParameters(parameters);
                    }
                }
                new Thread() {
                    @Override
                    public final void run() {
                        while (f.this.e) {
                            try {
                                f.this.c.startPreview();
                                f.this.c.autoFocus((Camera$AutoFocusCallback)null);
                                Thread.sleep(50L);
                            }
                            catch (Exception ex) {
                                f.c(f.this);
                                ex.printStackTrace();
                            }
                        }
                    }
                }.start();
                return true;
            }
            catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    @Override
    public final boolean d() {
        this.e = false;
        if (this.c == null) {
            return true;
        }
        try {
            final Camera$Parameters parameters = this.c.getParameters();
            if (parameters != null) {
                final List supportedFlashModes = parameters.getSupportedFlashModes();
                if (supportedFlashModes != null && supportedFlashModes.contains("off")) {
                    parameters.setFlashMode("off");
                    this.c.setParameters(parameters);
                }
            }
            return true;
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return true;
        }
    }
    
    @Override
    public final b e() {
        return this.a;
    }
}
