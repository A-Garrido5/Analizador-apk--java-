// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.d.a;

import java.util.List;
import android.hardware.Camera$Parameters;
import android.util.Log;
import java.io.IOException;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.hardware.Camera;
import android.view.SurfaceHolder$Callback;

public final class g extends c implements SurfaceHolder$Callback
{
    private Camera c;
    private boolean d;
    private SurfaceView e;
    private boolean f;
    
    public g() {
        this.c = null;
        this.d = false;
    }
    
    private boolean f() {
        if (this.c == null) {
            this.a = com.ihs.d.a.b.b;
            try {
                this.c = Camera.open();
                try {
                    final Camera$Parameters parameters = this.c.getParameters();
                    if (parameters != null) {
                        final List supportedFlashModes = parameters.getSupportedFlashModes();
                        if (supportedFlashModes == null || !supportedFlashModes.contains("torch")) {
                            return false;
                        }
                        this.d = true;
                        this.a = com.ihs.d.a.b.a;
                    }
                    if (this.e != null) {
                        final SurfaceHolder holder = this.e.getHolder();
                        holder.addCallback((SurfaceHolder$Callback)new SurfaceHolder$Callback() {
                            public final void surfaceChanged(final SurfaceHolder surfaceHolder, final int n, final int n2, final int n3) {
                                if (g.this.b == com.ihs.d.a.a.b || g.this.c == null) {
                                    return;
                                }
                                try {
                                    g.this.c.startPreview();
                                }
                                catch (RuntimeException ex) {
                                    ex.printStackTrace();
                                }
                            }
                            
                            public final void surfaceCreated(final SurfaceHolder previewDisplay) {
                                try {
                                    if (g.this.b != com.ihs.d.a.a.b && g.this.c != null) {
                                        g.this.c.setPreviewDisplay(previewDisplay);
                                    }
                                }
                                catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                                catch (RuntimeException ex2) {
                                    ex2.printStackTrace();
                                }
                            }
                            
                            public final void surfaceDestroyed(final SurfaceHolder surfaceHolder) {
                                Log.d("Flahslightmanager", "surfaceDestroyed");
                            }
                        });
                        holder.setType(3);
                        Log.d("Flahslightmanager", "initsurfaceview end");
                        return true;
                    }
                    return true;
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    return false;
                }
            }
            catch (RuntimeException ex2) {
                this.a = com.ihs.d.a.b.c;
                ex2.printStackTrace();
                return false;
            }
            return false;
        }
        return true;
    }
    
    @Override
    public final void a(final SurfaceView e) {
        this.e = e;
    }
    
    @Override
    public final boolean a() {
        return this.f();
    }
    
    @Override
    public final void b() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/ihs/d/a/g.c:Landroid/hardware/Camera;
        //     4: ifnull          39
        //     7: aload_0        
        //     8: getfield        com/ihs/d/a/g.e:Landroid/view/SurfaceView;
        //    11: ifnull          27
        //    14: aload_0        
        //    15: getfield        com/ihs/d/a/g.e:Landroid/view/SurfaceView;
        //    18: invokevirtual   android/view/SurfaceView.getHolder:()Landroid/view/SurfaceHolder;
        //    21: aload_0        
        //    22: invokeinterface android/view/SurfaceHolder.removeCallback:(Landroid/view/SurfaceHolder$Callback;)V
        //    27: aload_0        
        //    28: getfield        com/ihs/d/a/g.c:Landroid/hardware/Camera;
        //    31: invokevirtual   android/hardware/Camera.release:()V
        //    34: aload_0        
        //    35: aconst_null    
        //    36: putfield        com/ihs/d/a/g.c:Landroid/hardware/Camera;
        //    39: return         
        //    40: astore_2       
        //    41: aload_2        
        //    42: invokevirtual   java/lang/Exception.printStackTrace:()V
        //    45: goto            27
        //    48: astore_1       
        //    49: aload_1        
        //    50: invokevirtual   java/lang/Exception.printStackTrace:()V
        //    53: goto            34
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  14     27     40     48     Ljava/lang/Exception;
        //  27     34     48     56     Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0027:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public final boolean c() {
        if (this.c == null) {
            return true;
        }
        try {
            final Camera$Parameters parameters = this.c.getParameters();
            if (parameters != null) {
                final List supportedFlashModes = parameters.getSupportedFlashModes();
                if (supportedFlashModes != null && supportedFlashModes.contains("torch")) {
                    parameters.setFlashMode("torch");
                    this.c.setParameters(parameters);
                }
            }
            return true;
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return true;
        }
    }
    
    @Override
    public final boolean d() {
        if (this.c == null) {
            return true;
        }
        try {
            final Camera$Parameters parameters = this.c.getParameters();
            if (parameters != null) {
                final List supportedFlashModes = parameters.getSupportedFlashModes();
                if (supportedFlashModes != null && supportedFlashModes.contains("off")) {
                    parameters.setFlashMode("off");
                    this.c.setParameters(parameters);
                }
            }
            return true;
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return true;
        }
    }
    
    @Override
    public final b e() {
        return this.a;
    }
    
    public final void surfaceChanged(final SurfaceHolder surfaceHolder, final int n, final int n2, final int n3) {
        if (this.b != com.ihs.d.a.a.a || !this.f || this.c == null) {
            return;
        }
        try {
            this.c.startPreview();
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public final void surfaceCreated(final SurfaceHolder previewDisplay) {
        if (this.b != com.ihs.d.a.a.a || !this.f || this.c == null) {
            return;
        }
        try {
            this.c.setPreviewDisplay(previewDisplay);
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public final void surfaceDestroyed(final SurfaceHolder surfaceHolder) {
    }
}
