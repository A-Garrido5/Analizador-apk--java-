// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.i;

import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.io.OutputStream;

public final class g extends OutputStream
{
    private final int a;
    private final int b;
    private ByteBuffer c;
    
    public g() {
        this(131072, 65536);
    }
    
    public g(final int a, final int b) {
        this.a = a;
        this.b = b;
        (this.c = ByteBuffer.allocateDirect(this.a)).clear();
    }
    
    private void a(final int n) {
        synchronized (this) {
            if (n > this.c.capacity()) {
                final ByteBuffer c = this.c;
                final int position = this.c.position();
                this.c = ByteBuffer.allocateDirect((1 + n / this.b) * this.b);
                c.clear();
                this.c.clear();
                this.c.put(c);
                this.c.position(position);
            }
        }
    }
    
    public final ByteBuffer a() {
        return this.c;
    }
    
    public final void a(final String s) {
        synchronized (this) {
            this.write(s.getBytes("UTF-8"));
        }
    }
    
    public final Buffer b() {
        return this.c.flip();
    }
    
    public final Buffer c() {
        return this.c.clear();
    }
    
    public final int d() {
        return this.c.remaining();
    }
    
    public final void e() {
        synchronized (this) {
            this.write(13);
            this.write(10);
        }
    }
    
    @Override
    public final void write(final int n) {
        synchronized (this) {
            if (1 + this.c.position() > this.c.capacity()) {
                this.a(1 + this.c.capacity());
            }
            this.c.put((byte)n);
        }
    }
    
    @Override
    public final void write(final byte[] array) {
        synchronized (this) {
            this.write(array, 0, array.length);
        }
    }
    
    @Override
    public final void write(final byte[] array, final int n, final int n2) {
        synchronized (this) {
            if (n2 + this.c.position() > this.c.capacity()) {
                this.a(n2 + this.c.capacity());
            }
            this.c.put(array, n, n2);
        }
    }
}
