// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.g;

import java.io.UnsupportedEncodingException;
import java.util.zip.InflaterInputStream;
import java.util.zip.Inflater;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Deflater;
import android.text.TextUtils;
import java.io.ByteArrayOutputStream;
import java.security.NoSuchProviderException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import java.security.InvalidKeyException;
import javax.crypto.NoSuchPaddingException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public final class h
{
    public static InputStream a(final InputStream inputStream) {
        final byte[] b = b(inputStream);
        if (b != null) {
            final byte[] b2 = b(b);
            if (b2 != null) {
                return new ByteArrayInputStream(b2);
            }
        }
        return null;
    }
    
    private static String a() {
        final StringBuffer sb = new StringBuffer();
        sb.append("Iu[Ki}96TZp]pri/".subSequence(4, 8));
        sb.append("Iu[Ki}96TZp]pri/".subSequence(0, 4));
        sb.append("Iu[Ki}96TZp]pri/".subSequence(12, 16));
        sb.append("Iu[Ki}96TZp]pri/".subSequence(8, 12));
        return sb.toString();
    }
    
    private static Key a(final byte[] array) {
        return new SecretKeySpec(array, "AES");
    }
    
    public static byte[] a(final String s) {
        return b(a(), b(s));
    }
    
    private static byte[] a(final String s, final byte[] array) {
        try {
            final Cipher instance = Cipher.getInstance("AES/ECB/PKCS7Padding");
            instance.init(2, a(s.getBytes("UTF-8")));
            return instance.doFinal(array);
        }
        catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        catch (NoSuchPaddingException ex2) {
            ex2.printStackTrace();
            goto Label_0040;
        }
        catch (InvalidKeyException ex3) {
            ex3.printStackTrace();
            goto Label_0040;
        }
        catch (IllegalBlockSizeException ex4) {
            ex4.printStackTrace();
            goto Label_0040;
        }
        catch (BadPaddingException ex5) {
            ex5.printStackTrace();
            goto Label_0040;
        }
        catch (NoSuchProviderException ex6) {
            ex6.printStackTrace();
            goto Label_0040;
        }
        catch (Exception ex7) {
            ex7.printStackTrace();
            goto Label_0040;
        }
    }
    
    private static byte[] b(final InputStream inputStream) {
        if (inputStream == null) {
            return null;
        }
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final byte[] array = new byte[1024];
        int i = -1;
        while (true) {
            try {
                do {
                    i = inputStream.read(array);
                    if (i > 0) {
                        byteArrayOutputStream.write(array, 0, i);
                    }
                } while (i >= 1024);
                return a(a(), byteArrayOutputStream.toByteArray());
            }
            catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    private static byte[] b(final String s) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            return null;
        }
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream, new Deflater());
        try {
            deflaterOutputStream.write(s.getBytes());
            deflaterOutputStream.flush();
            deflaterOutputStream.close();
            return byteArrayOutputStream.toByteArray();
        }
        catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }
    
    private static byte[] b(final String s, final byte[] array) {
        try {
            final Cipher instance = Cipher.getInstance("AES/ECB/PKCS7Padding");
            instance.init(1, a(s.getBytes("UTF-8")));
            return instance.doFinal(array);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
    
    private static byte[] b(final byte[] array) {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            final InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(array), new Inflater());
            final byte[] array2 = new byte[2048];
            int i;
            do {
                i = inflaterInputStream.read(array2, 0, 2048);
                if (i > 0) {
                    byteArrayOutputStream.write(array2, 0, i);
                }
            } while (i > 0);
            return byteArrayOutputStream.toByteArray();
        }
        catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        catch (IOException ex2) {
            ex2.printStackTrace();
            goto Label_0085;
        }
    }
}
