// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.g;

import android.content.res.AssetManager;
import java.io.IOException;
import java.io.FileOutputStream;
import android.content.Context;
import java.io.FileNotFoundException;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.File;
import java.io.InputStream;

public final class b
{
    public static InputStream a(final String s) {
        if (s != null) {
            c.a("ihsfilemanager", "read file path is:" + s);
            final File file = new File(s);
            if (file.exists()) {
                try {
                    return new BufferedInputStream(new FileInputStream(file));
                }
                catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                    return null;
                }
            }
        }
        return null;
    }
    
    public static boolean a(final Context context, final String s) {
        if (context != null && s != null) {
            final StringBuffer sb = new StringBuffer();
            sb.append(context.getFilesDir());
            sb.append("/");
            sb.append(s);
            if (new File(sb.toString()).exists()) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean a(final Context context, final String s, final InputStream inputStream, final boolean b) {
        if (context == null || s == null || inputStream == null) {
            return false;
        }
        final StringBuffer sb = new StringBuffer();
        sb.append(context.getFilesDir());
        if (b) {
            sb.append("/pa/");
        }
        final File file = new File(sb.toString());
        if (!file.exists()) {
            file.mkdir();
        }
        final File file2 = new File(sb.toString(), s);
        c.a("ihsfilemanager", "create file path is:" + file2.getPath());
        try {
            final FileOutputStream fileOutputStream = new FileOutputStream(file2);
            final byte[] array = new byte[1024];
            int i = -1;
            try {
                do {
                    i = inputStream.read(array);
                    if (i > 0) {
                        fileOutputStream.write(array, 0, i);
                    }
                } while (i != -1);
                fileOutputStream.flush();
                fileOutputStream.close();
                c.a("ihsfilemanager", "saved file size is:" + file2.length());
                return true;
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        catch (Exception ex2) {
            ex2.printStackTrace();
            return false;
        }
    }
    
    public static boolean b(final Context context, final String s) {
        if (context != null && s != null) {
            final StringBuffer sb = new StringBuffer();
            sb.append(context.getFilesDir());
            sb.append("/pa/");
            sb.append(s);
            if (new File(sb.toString()).exists()) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean b(final String s) {
        return s == null || !s.endsWith(".plist");
    }
    
    public static String c(final Context context, final String s) {
        if (context == null || s == null) {
            return null;
        }
        final StringBuffer sb = new StringBuffer();
        sb.append(context.getFilesDir());
        sb.append("/pa/");
        sb.append(s);
        return sb.toString();
    }
    
    public static String d(final Context context, final String s) {
        if (context == null || s == null) {
            return null;
        }
        final StringBuffer sb = new StringBuffer();
        sb.append(context.getFilesDir());
        sb.append("/");
        sb.append(s);
        return sb.toString();
    }
    
    public static InputStream e(final Context context, final String s) {
        if (context == null || s == null) {
            return null;
        }
        final AssetManager assets = context.getAssets();
        try {
            return assets.open(s);
        }
        catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }
}
