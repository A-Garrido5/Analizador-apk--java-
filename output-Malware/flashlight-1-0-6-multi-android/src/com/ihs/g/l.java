// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.g;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.xml.sax.Attributes;
import java.text.ParseException;
import android.util.Base64;
import javax.xml.parsers.SAXParser;
import org.xml.sax.InputSource;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.xml.parsers.SAXParserFactory;
import java.util.HashMap;
import java.io.InputStream;
import java.util.Locale;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import org.xml.sax.helpers.DefaultHandler;

public final class l extends DefaultHandler
{
    private static final SimpleDateFormat a;
    private Object b;
    private String c;
    private int d;
    private int e;
    private Object f;
    private ArrayList g;
    private StringBuilder h;
    
    static {
        a = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss'Z'", Locale.getDefault());
    }
    
    private l() {
        this.d = 0;
        this.e = 0;
        this.g = new ArrayList();
        this.h = new StringBuilder();
    }
    
    public static HashMap a(final InputStream inputStream) {
        return (HashMap)b(inputStream);
    }
    
    private void a(final Object f) {
        this.f = f;
        if (f == null) {
            this.e = 0;
            return;
        }
        if (f instanceof HashMap) {
            this.e = 1;
            return;
        }
        this.e = 2;
    }
    
    private static Object b(final InputStream inputStream) {
        try {
            final SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            final l dh = new l();
            saxParser.parse(new InputSource(new BufferedReader(new InputStreamReader(inputStream), 8192)), dh);
            return dh.b;
        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
    
    private void b(final Object o) {
        this.c(o);
        this.g.add(o);
        this.a(o);
    }
    
    private void c(final Object b) {
        switch (this.e) {
            default: {}
            case 1: {
                ((HashMap)this.f).put(this.c, b);
            }
            case 2: {
                ((ArrayList)this.f).add(b);
            }
            case 0: {
                this.b = b;
            }
        }
    }
    
    @Override
    public final void characters(final char[] array, final int n, final int n2) {
        this.h.append(array, n, n2);
    }
    
    @Override
    public final void endElement(final String s, final String s2, final String s3) {
        switch (this.d) {
            case 1: {
                this.c = this.h.toString().trim();
                break;
            }
            case 2: {
                this.c(this.h.toString());
                break;
            }
            case 4: {
                this.c(Base64.decode(this.h.toString().trim(), 0));
                break;
            }
            case 5: {
                try {
                    this.c(l.a.parse(this.h.toString().trim()));
                }
                catch (ParseException ex) {
                    com.ihs.g.c.b("Error parsing Date. key=" + this.c);
                }
                break;
            }
            case 3: {
                this.c(Integer.valueOf(this.h.toString().trim()));
                break;
            }
            case 6: {
                this.c(Double.valueOf(this.h.toString().trim()));
                break;
            }
        }
        this.d = 0;
        this.h.setLength(0);
        if (s2.equals("dict") || s2.equals("array")) {
            final int size = this.g.size();
            if (size > 0) {
                this.g.remove(size - 1);
                Object value = null;
                if (size > 1) {
                    value = this.g.get(size - 2);
                }
                this.a(value);
            }
        }
    }
    
    @Override
    public final void startElement(final String s, final String s2, final String s3, final Attributes attributes) {
        if (s2.equals("key")) {
            this.d = 1;
        }
        else if (s2.equals("string")) {
            this.d = 2;
        }
        else if (s2.equals("integer")) {
            this.d = 3;
        }
        else if (s2.equals("real")) {
            this.d = 6;
        }
        else if (s2.equals("data")) {
            this.d = 4;
        }
        else if (s2.equals("date")) {
            this.d = 5;
        }
        else if (s2.equals("true")) {
            this.c(true);
        }
        else if (s2.equals("false")) {
            this.c(false);
        }
        else if (s2.equals("dict")) {
            this.b(new HashMap());
        }
        else if (s2.equals("array")) {
            this.b(new ArrayList());
        }
        this.h.setLength(0);
    }
}
