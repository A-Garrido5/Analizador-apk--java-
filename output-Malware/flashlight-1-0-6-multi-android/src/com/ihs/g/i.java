// 
// Decompiled by Procyon v0.5.30
// 

package com.ihs.g;

import android.content.Context;
import java.io.FileOutputStream;
import java.io.File;
import android.text.TextUtils;
import java.util.Iterator;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.ArrayList;
import java.io.UnsupportedEncodingException;
import java.io.InputStream;
import org.xmlpull.v1.XmlSerializer;
import java.io.IOException;
import java.io.Writer;
import java.io.StringWriter;
import android.util.Xml;
import java.util.Map;

public final class i
{
    private static String a(final Map map) {
        final XmlSerializer serializer = Xml.newSerializer();
        final StringWriter output = new StringWriter();
        try {
            serializer.setOutput((Writer)output);
            serializer.startDocument("UTF-8", true);
            serializer.docdecl(" plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"");
            serializer.startTag("", "plist");
            serializer.attribute("", "version", "1.0");
            serializer.startTag("", "dict");
            a(serializer, map);
            serializer.endTag("", "dict");
            serializer.endTag("", "plist");
            serializer.endDocument();
            serializer.flush();
            return output.toString();
        }
        catch (IllegalArgumentException ex) {
            ex.printStackTrace();
            return null;
        }
        catch (IllegalStateException ex2) {
            ex2.printStackTrace();
            return null;
        }
        catch (IOException ex3) {
            ex3.printStackTrace();
            return null;
        }
        catch (RuntimeException ex4) {
            ex4.printStackTrace();
            return null;
        }
    }
    
    public static Map a(final InputStream inputStream) {
        if (inputStream == null) {
            return null;
        }
        return l.a(inputStream);
    }
    
    public static Map a(final String s) {
        final boolean b = com.ihs.g.b.b(s);
        InputStream inputStream = com.ihs.g.b.e(a.a, s);
        Label_0026: {
            if (!b) {
                break Label_0026;
            }
            try {
                inputStream = h.a(inputStream);
                return a(inputStream);
            }
            catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
                return null;
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final Boolean b) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            try {
                xmlSerializer.startTag("", "key");
                xmlSerializer.text(s);
                xmlSerializer.endTag("", "key");
                xmlSerializer.startTag("", String.valueOf(b));
                xmlSerializer.endTag("", String.valueOf(b));
            }
            catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
            catch (IllegalStateException ex2) {
                ex2.printStackTrace();
            }
            catch (IOException ex3) {
                ex3.printStackTrace();
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final Float n) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            try {
                xmlSerializer.startTag("", "key");
                xmlSerializer.text(s);
                xmlSerializer.endTag("", "key");
                xmlSerializer.startTag("", "real");
                xmlSerializer.text(String.valueOf(n));
                xmlSerializer.endTag("", "real");
            }
            catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
            catch (IllegalStateException ex2) {
                ex2.printStackTrace();
            }
            catch (IOException ex3) {
                ex3.printStackTrace();
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final Integer n) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            try {
                xmlSerializer.startTag("", "key");
                xmlSerializer.text(s);
                xmlSerializer.endTag("", "key");
                xmlSerializer.startTag("", "integer");
                xmlSerializer.text(String.valueOf(n));
                xmlSerializer.endTag("", "integer");
            }
            catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
            catch (IllegalStateException ex2) {
                ex2.printStackTrace();
            }
            catch (IOException ex3) {
                ex3.printStackTrace();
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final String s2) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            try {
                xmlSerializer.startTag("", "key");
                xmlSerializer.text(s);
                xmlSerializer.endTag("", "key");
                xmlSerializer.startTag("", "string");
                if (s2 != null) {
                    xmlSerializer.text(s2);
                }
                xmlSerializer.endTag("", "string");
            }
            catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
            catch (IllegalStateException ex2) {
                ex2.printStackTrace();
            }
            catch (IOException ex3) {
                ex3.printStackTrace();
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final ArrayList list) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            while (true) {
                while (true) {
                    int n = 0;
                    Label_0242: {
                        Boolean value;
                        try {
                            xmlSerializer.startTag("", "key");
                            xmlSerializer.text(s);
                            xmlSerializer.endTag("", "key");
                            xmlSerializer.startTag("", "array");
                            final int size = list.size();
                            n = 0;
                            if (n >= size) {
                                xmlSerializer.endTag("", "array");
                                return;
                            }
                            value = list.get(n);
                            if (value instanceof Boolean) {
                                a(xmlSerializer, null, value);
                                break Label_0242;
                            }
                            if (value instanceof Float) {
                                a(xmlSerializer, null, (Float)(Object)value);
                                break Label_0242;
                            }
                            goto Label_0131;
                        }
                        catch (IllegalArgumentException ex) {
                            ex.printStackTrace();
                            return;
                        }
                        catch (IllegalStateException ex2) {
                            ex2.printStackTrace();
                            return;
                        }
                        catch (IOException ex3) {
                            ex3.printStackTrace();
                            return;
                        }
                        if (value instanceof HashMap) {
                            a(xmlSerializer, null, (HashMap)value);
                        }
                        else if (value instanceof ArrayList) {
                            a(xmlSerializer, null, (ArrayList)value);
                        }
                        else {
                            a(xmlSerializer, null, (String)value);
                        }
                    }
                    ++n;
                    continue;
                }
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final Date date) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            try {
                xmlSerializer.startTag("", "key");
                xmlSerializer.text(s);
                xmlSerializer.endTag("", "key");
                xmlSerializer.startTag("", "date");
                final SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
                simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                xmlSerializer.text(simpleDateFormat.format(date));
                xmlSerializer.endTag("", "date");
            }
            catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
            catch (IllegalStateException ex2) {
                ex2.printStackTrace();
            }
            catch (IOException ex3) {
                ex3.printStackTrace();
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final String s, final HashMap hashMap) {
        Label_0034: {
            if (s == null) {
                break Label_0034;
            }
            while (true) {
                while (true) {
                    String key;
                    V value;
                    try {
                        xmlSerializer.startTag("", "key");
                        xmlSerializer.text(s);
                        xmlSerializer.endTag("", "key");
                        xmlSerializer.startTag("", "dict");
                        for (final Map.Entry<Object, V> entry : hashMap.entrySet()) {
                            key = entry.getKey();
                            value = entry.getValue();
                            if (!(value instanceof Boolean)) {
                                goto Label_0141;
                            }
                            a(xmlSerializer, key, (Boolean)value);
                        }
                        xmlSerializer.endTag("", "dict");
                        return;
                    }
                    catch (IllegalArgumentException ex) {
                        ex.printStackTrace();
                        return;
                    }
                    catch (IllegalStateException ex2) {
                        ex2.printStackTrace();
                        return;
                    }
                    catch (IOException ex3) {
                        ex3.printStackTrace();
                        return;
                    }
                    if (value instanceof Date) {
                        a(xmlSerializer, key, (Date)value);
                        continue;
                    }
                    if (value instanceof HashMap) {
                        a(xmlSerializer, key, (HashMap)value);
                        continue;
                    }
                    if (value instanceof ArrayList) {
                        a(xmlSerializer, key, (ArrayList)value);
                        continue;
                    }
                    a(xmlSerializer, key, (String)value);
                    continue;
                }
            }
        }
    }
    
    private static void a(final XmlSerializer xmlSerializer, final Map map) {
        for (final Map.Entry<Object, V> entry : map.entrySet()) {
            final String key = entry.getKey();
            final V value = entry.getValue();
            if (value instanceof Boolean) {
                a(xmlSerializer, key, (Boolean)value);
            }
            else if (value instanceof Float) {
                a(xmlSerializer, key, (Float)value);
            }
            else if (value instanceof Integer) {
                a(xmlSerializer, key, (Integer)value);
            }
            else if (value instanceof Date) {
                a(xmlSerializer, key, (Date)value);
            }
            else if (value instanceof HashMap) {
                a(xmlSerializer, key, (HashMap)value);
            }
            else if (value instanceof ArrayList) {
                a(xmlSerializer, key, (ArrayList)value);
            }
            else {
                a(xmlSerializer, key, (String)value);
            }
        }
    }
    
    public static boolean a(final Map map, final String s) {
        if (map == null || TextUtils.isEmpty((CharSequence)s)) {
            return false;
        }
        final boolean b = com.ihs.g.b.b(s);
        Label_0140: {
            if (!b) {
                break Label_0140;
            }
            final Context a = com.ihs.g.a.a;
            final StringBuffer sb = new StringBuffer();
            sb.append(a.getFilesDir());
            sb.append("/pa/");
            final File file = new File(sb.toString());
            if (!file.exists()) {
                file.mkdir();
            }
            String s2 = sb.toString();
            try {
                while (true) {
                    final FileOutputStream fileOutputStream = new FileOutputStream(new File(s2, s));
                    final String a2 = a(map);
                    if (b) {
                        fileOutputStream.write(h.a(a2));
                    }
                    else if (!TextUtils.isEmpty((CharSequence)a2)) {
                        fileOutputStream.write(a2.getBytes("UTF-8"));
                    }
                    fileOutputStream.flush();
                    fileOutputStream.close();
                    return true;
                    s2 = com.ihs.g.a.a.getFilesDir() + "/";
                    continue;
                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
                return false;
            }
        }
    }
    
    public static Map b(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokestatic    android/text/TextUtils.isEmpty:(Ljava/lang/CharSequence;)Z
        //     4: ifeq            9
        //     7: aconst_null    
        //     8: areturn        
        //     9: getstatic       com/ihs/g/a.a:Landroid/content/Context;
        //    12: aload_0        
        //    13: invokestatic    com/ihs/g/b.b:(Landroid/content/Context;Ljava/lang/String;)Z
        //    16: ifeq            138
        //    19: getstatic       com/ihs/g/a.a:Landroid/content/Context;
        //    22: aload_0        
        //    23: invokestatic    com/ihs/g/b.c:(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
        //    26: invokestatic    com/ihs/g/b.a:(Ljava/lang/String;)Ljava/io/InputStream;
        //    29: astore          5
        //    31: aload           5
        //    33: invokestatic    com/ihs/g/h.a:(Ljava/io/InputStream;)Ljava/io/InputStream;
        //    36: astore          7
        //    38: aload           7
        //    40: astore_1       
        //    41: aload_1        
        //    42: ifnonnull       66
        //    45: getstatic       com/ihs/g/a.a:Landroid/content/Context;
        //    48: aload_0        
        //    49: invokestatic    com/ihs/g/b.a:(Landroid/content/Context;Ljava/lang/String;)Z
        //    52: ifeq            66
        //    55: getstatic       com/ihs/g/a.a:Landroid/content/Context;
        //    58: aload_0        
        //    59: invokestatic    com/ihs/g/b.d:(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
        //    62: invokestatic    com/ihs/g/b.a:(Ljava/lang/String;)Ljava/io/InputStream;
        //    65: astore_1       
        //    66: aload_1        
        //    67: ifnonnull       133
        //    70: ldc_w           "No saved config, get it from asset."
        //    73: invokestatic    com/ihs/g/c.c:(Ljava/lang/String;)V
        //    76: getstatic       com/ihs/g/a.a:Landroid/content/Context;
        //    79: aload_0        
        //    80: invokestatic    com/ihs/g/b.e:(Landroid/content/Context;Ljava/lang/String;)Ljava/io/InputStream;
        //    83: astore_1       
        //    84: aload_0        
        //    85: invokestatic    com/ihs/g/b.b:(Ljava/lang/String;)Z
        //    88: ifeq            133
        //    91: aload_1        
        //    92: invokestatic    com/ihs/g/h.a:(Ljava/io/InputStream;)Ljava/io/InputStream;
        //    95: astore          4
        //    97: aload           4
        //    99: astore_2       
        //   100: aload_2        
        //   101: invokestatic    com/ihs/g/i.a:(Ljava/io/InputStream;)Ljava/util/Map;
        //   104: areturn        
        //   105: astore          6
        //   107: aload           6
        //   109: invokevirtual   java/io/UnsupportedEncodingException.getMessage:()Ljava/lang/String;
        //   112: invokestatic    com/ihs/g/c.b:(Ljava/lang/String;)V
        //   115: aconst_null    
        //   116: astore_1       
        //   117: goto            41
        //   120: astore_3       
        //   121: aload_3        
        //   122: invokevirtual   java/io/UnsupportedEncodingException.getMessage:()Ljava/lang/String;
        //   125: invokestatic    com/ihs/g/c.b:(Ljava/lang/String;)V
        //   128: aconst_null    
        //   129: astore_2       
        //   130: goto            100
        //   133: aload_1        
        //   134: astore_2       
        //   135: goto            100
        //   138: aconst_null    
        //   139: astore_1       
        //   140: goto            41
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                  
        //  -----  -----  -----  -----  --------------------------------------
        //  31     38     105    120    Ljava/io/UnsupportedEncodingException;
        //  91     97     120    133    Ljava/io/UnsupportedEncodingException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0100:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
}
