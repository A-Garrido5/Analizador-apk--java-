// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmsp.client.sdk.oem;

import android.os.Message;
import android.os.Looper;
import android.os.Handler;
import android.media.AudioTrack$OnPlaybackPositionUpdateListener;
import android.media.AudioRecord$OnRecordPositionUpdateListener;
import android.media.AudioRecord;
import android.media.AudioTrack;
import java.util.Vector;
import android.content.Context;

public class AudioSystemOEM implements an, bh
{
    private static Object C;
    private static Object D;
    private static Object E;
    private static final Integer P;
    private static final Integer Q;
    private static final Integer R;
    public static boolean a;
    public static Object b;
    public static Object c;
    public static int d;
    public static int e;
    private c A;
    private d B;
    private EndPointerOEM F;
    private short[] G;
    private byte[] H;
    private int I;
    private int J;
    private int K;
    private b L;
    private boolean M;
    private bf N;
    private boolean O;
    private Context S;
    private ez T;
    private am U;
    private be f;
    private int g;
    private int h;
    private int i;
    private int j;
    private int k;
    private int l;
    private int m;
    private int n;
    private int o;
    private int p;
    private int q;
    private int r;
    private int s;
    private int t;
    private int u;
    private int v;
    private int w;
    private int x;
    private int y;
    private int z;
    
    static {
        AudioSystemOEM.C = new Object();
        AudioSystemOEM.D = new Object();
        AudioSystemOEM.E = new Object();
        System.loadLibrary("nmsp_speex");
        AudioSystemOEM.a = false;
        AudioSystemOEM.b = new Object();
        AudioSystemOEM.c = new Object();
        AudioSystemOEM.d = 0;
        AudioSystemOEM.e = 0;
        P = new Integer(1);
        Q = new Integer(2);
        R = new Integer(3);
    }
    
    public AudioSystemOEM(final bf n, final am u, final Vector vector) {
        this.f = dh.a(this.getClass());
        this.F = null;
        this.M = false;
        this.O = false;
        this.S = null;
        this.T = null;
        this.a(this.U = u);
        this.N = n;
        (this.F = new EndPointerOEM()).a(vector);
        if (vector != null) {
            for (int i = 0; i < vector.size(); ++i) {
                final df df = vector.get(i);
                final String a = df.a();
                if (df.d() == dg.a) {
                    if (a.equals("USE_ENERGY_LEVEL")) {
                        if (new String(df.b()).equalsIgnoreCase("TRUE")) {
                            if (this.f.b()) {
                                this.f.b("Use energy level is activated.");
                            }
                            this.M = true;
                        }
                    }
                    else if (a.equals("NMSP_DEFINES_RECORDER_CONTINUES_ON_ENDPOINTER_AND_TIMER_STOPPING")) {
                        if (new String(df.b()).equalsIgnoreCase("TRUE")) {
                            if (this.f.b()) {
                                this.f.b("_continuesOnEndPointerAndTimerStopping is activated.");
                            }
                            this.O = true;
                        }
                    }
                    else if (a.equals("NMSP_DEFINES_CAPTURING_CONTINUES_ON_ENDPOINTER")) {
                        if (new String(df.b()).equalsIgnoreCase("TRUE") && this.f.b()) {
                            this.f.b("_capturingContinuesOnEndPointer is activated.");
                        }
                    }
                    else if (a.equals("Android_Context")) {
                        this.S = (Context)df.c();
                        if (this.f.b()) {
                            this.f.b("NMSP_DEFINES_ANDROID_CONTEXT is passed in as" + this.S);
                        }
                    }
                }
            }
        }
    }
    
    private void a(final am am) {
        while (true) {
            Label_0499: {
                if (am == am.d) {
                    break Label_0499;
                }
                if (am == am.e) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.b;
                    this.K = 11000;
                    this.I = -1;
                    this.J = -1;
                }
                else if (am == am.f) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.b;
                    this.K = 16000;
                    this.I = -1;
                    this.J = -1;
                }
                else if (am == am.g) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.b;
                    this.K = 32000;
                    this.I = -1;
                    this.J = -1;
                }
                else if (am == am.a) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.a;
                    this.K = 8000;
                    this.J = 6;
                    this.I = 0;
                }
                else if (am == am.b) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.a;
                    this.K = 16000;
                    this.J = 8;
                    this.I = 1;
                }
                else if (am == am.c) {
                    this.L = com.nuance.nmsp.client.sdk.oem.b.a;
                    this.K = 16000;
                    this.J = 8;
                    this.I = 1;
                }
                else {
                    if (this.f.e()) {
                        this.f.e("Codec " + am + " is not handled, using PCM_16_8K by default.");
                    }
                    break Label_0499;
                }
                this.h = 1;
                this.i = this.K;
                this.q = 750;
                this.r = this.q * this.i / 1000;
                this.s = this.r << 1;
                this.j = 300;
                this.k = this.i * this.j / 1000;
                this.l = this.k << 1;
                final int n = 5 * this.l;
                final int minBufferSize = AudioTrack.getMinBufferSize(this.i, 2, 2);
                if (minBufferSize != -2 && minBufferSize != -1 && minBufferSize > n) {
                    this.n = minBufferSize;
                }
                else {
                    this.n = n;
                }
                this.m = this.n / 2;
                this.o = 500;
                this.p = this.i * this.o / 1000;
                this.u = this.K;
                this.v = 100;
                this.w = this.u * this.v / 1000;
                this.x = this.w << 1;
                final int y = 3 * this.x;
                final int minBufferSize2 = AudioRecord.getMinBufferSize(this.u, 2, 2);
                if (minBufferSize2 != -2 && minBufferSize2 != -1 && minBufferSize2 > y) {
                    this.y = minBufferSize2;
                }
                else {
                    this.y = y;
                }
                this.z = this.x;
                return;
            }
            this.L = com.nuance.nmsp.client.sdk.oem.b.b;
            this.K = 8000;
            this.I = -1;
            this.J = -1;
            continue;
        }
    }
    
    public static native void decodeCleanupSpeex();
    
    public static native int decodeInitSpeex(final int p0, final int p1, final int p2);
    
    public static native int decodeSpeex(final byte[] p0, final int p1, final short[] p2, final int p3);
    
    public static native void encodeCleanupSpeex();
    
    public static native int encodeInitSpeex(final int p0, final int p1, final int p2, final int p3, final int p4);
    
    public static native int encodeSpeex(final short[] p0, final byte[] p1, final int p2);
    
    private void j() {
        if (this.T != null) {
            this.T.c();
            this.T = null;
        }
    }
    
    private void k() {
        if (this.U == am.b || this.U == am.c) {
            this.a(this.U = am.a);
        }
        else if (this.U == am.e || this.U == am.f || this.U == am.h || this.U == am.g) {
            this.a(this.U = am.d);
        }
    }
    
    public static native String speexCodeToString(final int p0);
    
    @Override
    public final void a(final as as) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== turnOnEndPointer()");
        }
        if (as != null && this.B != null) {
            this.B.a(as);
        }
    }
    
    @Override
    public final void a(final at at) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== turnOnEndPointer()");
        }
        if (at != null && this.B != null) {
            this.B.a(at);
        }
    }
    
    @Override
    public final void a(final ba ba) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== stopRecording()");
        }
        if (ba == null) {
            return;
        }
        if (this.B == null) {
            ba.a(ap.a);
            return;
        }
        this.B.a(ba, null);
    }
    
    @Override
    public final void a(final Object o, final Object o2) {
        if (this.f.b()) {
            this.f.b("---------------------- AudioSystemAndroid +++++ handleMessage() Thread:" + Thread.currentThread());
        }
    }
    
    @Override
    public final boolean a() {
        this.f.c("++++++++++++========== pausePlayback() is not implemented");
        return false;
    }
    
    @Override
    public final boolean a(final av av, final boolean b, final ao ao, final ba ba, final au au, final az az, final ar ar, final as as, final at at) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== startRecording()");
        }
        if (this.B != null) {
            if (this.f.b()) {
                this.f.b("previous recording still running!");
            }
            return false;
        }
        if (ao == null) {
            if (this.f.e()) {
                this.f.e("audioCallback cannot be null.");
            }
            return false;
        }
        if (this.S == null) {
            if (this.f.e()) {
                this.f.e("inputDevice is BLUETOOTH_HEADSET, but ANDROID_CONTEXT parameter is not passed in!!!");
            }
            return false;
        }
        this.T = ez.a(this.S);
        if (this.T.b()) {
            this.k();
        }
        Label_0182: {
            if (av != av.a) {
                break Label_0182;
            }
            this.t = 6;
            this.j();
        Block_13_Outer:
            while (true) {
                this.B = new d(this, (byte)0);
                try {
                    this.B.a(b, ao, ba, au, az, ar, as, at);
                    return true;
                    Label_0237_Outer:Block_14_Outer:
                    while (true) {
                        this.j();
                        continue Block_13_Outer;
                        while (true) {
                            while (true) {
                                this.j();
                                return false;
                                this.f.e("Unexpected inputDevice.");
                                continue Block_14_Outer;
                            }
                            Label_0217: {
                                continue;
                            }
                        }
                        this.t = this.T.g();
                        continue Label_0237_Outer;
                    }
                }
                // iftrue(Label_0237:, !this.f.e())
                // iftrue(Label_0217:, av != av.c)
                // iftrue(Label_0146:, this.T.b())
                catch (a a) {
                    this.B.a(a);
                    this.B = null;
                    return false;
                }
            }
        }
    }
    
    @Override
    public final boolean a(final ay ay, final ao ao, final aq aq) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== startPlayback()");
        }
        if (ao == null) {
            if (this.f.e()) {
                this.f.e("audioCallback cannot be null.");
            }
        }
        else if (this.S == null) {
            if (this.f.e()) {
                this.f.e("inputDevice is BLUETOOTH_HEADSET, but ANDROID_CONTEXT parameter is not passed in!!!");
                return false;
            }
        }
        else {
            this.T = ez.a(this.S);
            if (this.T.b()) {
                this.k();
            }
            Label_0140: {
                if (ay != ay.a) {
                    break Label_0140;
                }
                this.g = 3;
                this.j();
                Block_11_Outer:Block_10_Outer:Label_0195_Outer:
                while (true) {
                    this.A = new c(this, (byte)0);
                    try {
                        this.A.a(ao, aq);
                        return true;
                        // iftrue(Label_0116:, this.T.b())
                        // iftrue(Label_0195:, !this.f.e())
                        // iftrue(Label_0175:, ay != ay.c)
                        while (true) {
                        Block_12:
                            while (true) {
                                while (true) {
                                    this.j();
                                    continue Block_11_Outer;
                                    this.g = this.T.f();
                                    continue Block_10_Outer;
                                }
                                Label_0175: {
                                    break Block_12;
                                }
                                this.j();
                                return false;
                                continue Label_0195_Outer;
                            }
                            this.f.e("Unexpected outputDevice.");
                            continue;
                        }
                    }
                    catch (a a) {
                        this.A.a(a);
                        this.A = null;
                        return false;
                    }
                }
            }
        }
        return false;
    }
    
    @Override
    public final void b(final ba ba) {
        if (this.f.b()) {
            this.f.b("++++++++++++========== stopPlayback()");
        }
        if (this.A != null) {
            this.A.a(ba);
        }
        this.A = null;
    }
    
    @Override
    public final boolean b() {
        this.f.c("++++++++++++========== previousPlayback() is not implemented");
        return false;
    }
    
    @Override
    public final boolean c() {
        this.f.c("++++++++++++========== nextPlayback() is not implemented");
        return false;
    }
}
