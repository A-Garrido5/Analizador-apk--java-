// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmsp.client.sdk.oem;

import android.media.AudioTrack;
import java.util.Vector;
import android.content.Context;
import android.media.AudioRecord;
import android.media.AudioRecord$OnRecordPositionUpdateListener;

final class d implements AudioRecord$OnRecordPositionUpdateListener, bh
{
    private be a;
    private AudioRecord b;
    private boolean c;
    private ao d;
    private ar e;
    private az f;
    private as g;
    private at h;
    private ba i;
    private au j;
    private boolean k;
    private boolean l;
    private int m;
    private /* synthetic */ AudioSystemOEM n;
    
    private d(final AudioSystemOEM n) {
        this.n = n;
        this.a = dh.a(this.getClass());
        this.d = null;
        this.e = null;
        this.f = null;
        this.g = null;
        this.h = null;
        this.i = null;
        this.j = null;
        this.k = false;
        this.l = false;
        this.m = 0;
    }
    
    private static float a(final short[] array) {
        long n = 0L;
        for (int i = 0; i < array.length; ++i) {
            final long n2 = array[i];
            n += n2 * n2 >> 9;
        }
        final double n3 = n / 1.073741824E9;
        double n4;
        if (n3 < 1.0E-9) {
            n4 = -90.0;
        }
        else {
            n4 = 10.0 * Math.log10(n3);
            if (n4 > 0.0) {
                n4 = 0.0;
            }
        }
        return (float)n4;
    }
    
    private void a(final a p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/nuance/nmsp/client/sdk/oem/d.a:Lbe;
        //     4: invokevirtual   be.e:()Z
        //     7: ifeq            21
        //    10: aload_0        
        //    11: getfield        com/nuance/nmsp/client/sdk/oem/d.a:Lbe;
        //    14: aload_1        
        //    15: invokevirtual   com/nuance/nmsp/client/sdk/oem/a.getMessage:()Ljava/lang/String;
        //    18: invokevirtual   be.e:(Ljava/lang/Object;)V
        //    21: aload_0        
        //    22: getfield        com/nuance/nmsp/client/sdk/oem/d.c:Z
        //    25: ifne            29
        //    28: return         
        //    29: aload_0        
        //    30: getfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //    33: invokevirtual   android/media/AudioRecord.stop:()V
        //    36: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.f:()Ljava/lang/Object;
        //    39: astore_2       
        //    40: aload_2        
        //    41: monitorenter   
        //    42: aload_0        
        //    43: iconst_0       
        //    44: putfield        com/nuance/nmsp/client/sdk/oem/d.c:Z
        //    47: aload_0        
        //    48: getfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //    51: invokevirtual   android/media/AudioRecord.release:()V
        //    54: aload_0        
        //    55: aconst_null    
        //    56: putfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //    59: aload_2        
        //    60: monitorexit    
        //    61: aload_0        
        //    62: getfield        com/nuance/nmsp/client/sdk/oem/d.j:Lau;
        //    65: invokeinterface au.d:()V
        //    70: aload_0        
        //    71: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //    74: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.i:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lcom/nuance/nmsp/client/sdk/oem/b;
        //    77: getstatic       com/nuance/nmsp/client/sdk/oem/b.a:Lcom/nuance/nmsp/client/sdk/oem/b;
        //    80: if_acmpne       97
        //    83: getstatic       com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.b:Ljava/lang/Object;
        //    86: astore          4
        //    88: aload           4
        //    90: monitorenter   
        //    91: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.encodeCleanupSpeex:()V
        //    94: aload           4
        //    96: monitorexit    
        //    97: aload_0        
        //    98: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   101: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.a:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lez;
        //   104: ifnull          124
        //   107: aload_0        
        //   108: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   111: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.a:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lez;
        //   114: invokevirtual   ez.e:()V
        //   117: aload_0        
        //   118: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   121: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.b:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)V
        //   124: aload_0        
        //   125: getfield        com/nuance/nmsp/client/sdk/oem/d.i:Lba;
        //   128: ifnull          28
        //   131: aload_0        
        //   132: getfield        com/nuance/nmsp/client/sdk/oem/d.i:Lba;
        //   135: getstatic       ap.b:Lap;
        //   138: invokeinterface ba.a:(Lap;)V
        //   143: return         
        //   144: astore_3       
        //   145: aload_2        
        //   146: monitorexit    
        //   147: aload_3        
        //   148: athrow         
        //   149: astore          5
        //   151: aload           4
        //   153: monitorexit    
        //   154: aload           5
        //   156: athrow         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  42     61     144    149    Any
        //  91     97     149    157    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0097:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final void a(final as g) {
        this.g = g;
        final bf p = this.n.N;
        final Object[] array = { AudioSystemOEM.P };
        final Object b = this.n.N.b();
        this.n.N.a();
        p.a(array, this, b);
    }
    
    public final void a(final at h) {
        this.h = h;
        final bf p = this.n.N;
        final Object[] array = { AudioSystemOEM.Q };
        final Object b = this.n.N.b();
        this.n.N.a();
        p.a(array, this, b);
    }
    
    public final void a(final ba p0, final ar p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/nuance/nmsp/client/sdk/oem/d.c:Z
        //     4: iconst_1       
        //     5: if_icmpne       99
        //     8: aload_0        
        //     9: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //    12: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.C:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)I
        //    15: i2l            
        //    16: invokestatic    java/lang/Thread.sleep:(J)V
        //    19: aload_0        
        //    20: getfield        com/nuance/nmsp/client/sdk/oem/d.c:Z
        //    23: istore          5
        //    25: iconst_0       
        //    26: istore          6
        //    28: iload           5
        //    30: iconst_1       
        //    31: if_icmpeq       150
        //    34: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.f:()Ljava/lang/Object;
        //    37: astore          7
        //    39: aload           7
        //    41: monitorenter   
        //    42: aload_0        
        //    43: iconst_0       
        //    44: putfield        com/nuance/nmsp/client/sdk/oem/d.c:Z
        //    47: iload           6
        //    49: ifeq            64
        //    52: aload_0        
        //    53: getfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //    56: invokevirtual   android/media/AudioRecord.release:()V
        //    59: aload_0        
        //    60: aconst_null    
        //    61: putfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //    64: aload           7
        //    66: monitorexit    
        //    67: iload           6
        //    69: ifeq            99
        //    72: aload_0        
        //    73: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //    76: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.i:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lcom/nuance/nmsp/client/sdk/oem/b;
        //    79: getstatic       com/nuance/nmsp/client/sdk/oem/b.a:Lcom/nuance/nmsp/client/sdk/oem/b;
        //    82: if_acmpne       99
        //    85: getstatic       com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.b:Ljava/lang/Object;
        //    88: astore          9
        //    90: aload           9
        //    92: monitorenter   
        //    93: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.encodeCleanupSpeex:()V
        //    96: aload           9
        //    98: monitorexit    
        //    99: aload_0        
        //   100: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   103: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.a:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lez;
        //   106: ifnull          126
        //   109: aload_0        
        //   110: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   113: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.a:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)Lez;
        //   116: invokevirtual   ez.e:()V
        //   119: aload_0        
        //   120: getfield        com/nuance/nmsp/client/sdk/oem/d.n:Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;
        //   123: invokestatic    com/nuance/nmsp/client/sdk/oem/AudioSystemOEM.b:(Lcom/nuance/nmsp/client/sdk/oem/AudioSystemOEM;)V
        //   126: aload_2        
        //   127: ifnull          136
        //   130: aload_2        
        //   131: invokeinterface ar.a:()V
        //   136: aload_1        
        //   137: ifnull          149
        //   140: aload_1        
        //   141: getstatic       ap.a:Lap;
        //   144: invokeinterface ba.a:(Lap;)V
        //   149: return         
        //   150: aload_0        
        //   151: getfield        com/nuance/nmsp/client/sdk/oem/d.b:Landroid/media/AudioRecord;
        //   154: invokevirtual   android/media/AudioRecord.stop:()V
        //   157: iconst_1       
        //   158: istore          6
        //   160: goto            34
        //   163: astore          8
        //   165: aload           7
        //   167: monitorexit    
        //   168: aload           8
        //   170: athrow         
        //   171: astore          4
        //   173: aload_0        
        //   174: getfield        com/nuance/nmsp/client/sdk/oem/d.a:Lbe;
        //   177: invokevirtual   be.b:()Z
        //   180: ifeq            99
        //   183: aload_0        
        //   184: getfield        com/nuance/nmsp/client/sdk/oem/d.a:Lbe;
        //   187: ldc             "Could not stop audioRecord."
        //   189: invokevirtual   be.b:(Ljava/lang/Object;)V
        //   192: goto            99
        //   195: astore          10
        //   197: aload           9
        //   199: monitorexit    
        //   200: aload           10
        //   202: athrow         
        //   203: astore_3       
        //   204: goto            99
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                             
        //  -----  -----  -----  -----  ---------------------------------
        //  8      25     171    195    Ljava/lang/IllegalStateException;
        //  8      25     203    207    Ljava/lang/Exception;
        //  34     42     171    195    Ljava/lang/IllegalStateException;
        //  34     42     203    207    Ljava/lang/Exception;
        //  42     47     163    171    Any
        //  52     64     163    171    Any
        //  64     67     163    171    Any
        //  72     93     171    195    Ljava/lang/IllegalStateException;
        //  72     93     203    207    Ljava/lang/Exception;
        //  93     99     195    203    Any
        //  150    157    171    195    Ljava/lang/IllegalStateException;
        //  150    157    203    207    Ljava/lang/Exception;
        //  165    171    171    195    Ljava/lang/IllegalStateException;
        //  165    171    203    207    Ljava/lang/Exception;
        //  197    203    171    195    Ljava/lang/IllegalStateException;
        //  197    203    203    207    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0099:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final void a(final Object o, final Object o2) {
        final Object[] array = (Object[])o;
        if ((int)array[0] == AudioSystemOEM.P) {
            if (!this.k) {
                this.k = true;
                this.n.F.b();
                this.l = false;
                if (this.g != null) {
                    this.g.b();
                }
            }
        }
        else if ((int)array[0] == AudioSystemOEM.Q) {
            if (this.k) {
                this.k = false;
                if (this.h != null) {
                    this.h.c();
                }
            }
        }
        else if ((int)array[0] == AudioSystemOEM.R) {
            final int intValue = (int)array[1];
            final Object o3 = array[2];
            if (this.c) {
                if (this.n.L == com.nuance.nmsp.client.sdk.oem.b.a) {
                    final byte[] array2 = new byte[this.n.z];
                    if (this.c) {
                        final short[] array3 = (short[])o3;
                        if (intValue < 0) {
                            this.a(new a("Call to AudioRecord.read() failed with code: " + intValue));
                            return;
                        }
                        if (intValue == 0) {
                            if (this.a.b()) {
                                this.a.b("AudioRecorder has no audio.");
                            }
                        }
                        else {
                            final e a = com.nuance.nmsp.client.sdk.oem.e.a;
                            synchronized (AudioSystemOEM.b) {
                                if (!this.c) {
                                    return;
                                }
                            }
                            final int encodeSpeex = AudioSystemOEM.encodeSpeex(array3, array2, this.n.z);
                            e a2;
                            if (this.k && !this.l) {
                                a2 = this.n.F.a();
                            }
                            else {
                                a2 = a;
                            }
                            // monitorexit(o4)
                            if (encodeSpeex < 0) {
                                this.a(new a("Call to encodeSpeex() failed with code: " + AudioSystemOEM.speexCodeToString(encodeSpeex)));
                                return;
                            }
                            if (this.a.b()) {
                                this.a.b("RECORDING: Sample #" + this.m++ + ". Got " + intValue + " shorts from recorder, sending " + encodeSpeex + " SPEEX vocoded bytes. ");
                            }
                            if (this.a.b()) {
                                if (a2 == com.nuance.nmsp.client.sdk.oem.e.b) {
                                    this.a.b("ENDPOINTING SPEECH_END");
                                }
                                else if (a2 == com.nuance.nmsp.client.sdk.oem.e.c) {
                                    this.a.b("ENDPOINTING SPEECH_START");
                                }
                            }
                            float n;
                            if (this.n.M) {
                                n = (long)(90.0f + a(array3));
                            }
                            else {
                                n = -1.0f;
                            }
                            final ao d = this.d;
                            final aw aw = new aw(0);
                            final aw aw2 = new aw(encodeSpeex);
                            Float value;
                            if (n < 0.0f) {
                                value = null;
                            }
                            else {
                                value = n;
                            }
                            d.a(null, array2, aw, aw2, value);
                            if (a2 == com.nuance.nmsp.client.sdk.oem.e.b) {
                                this.l = true;
                                if (!this.n.O) {
                                    this.a(this.i, this.e);
                                }
                                else if (this.e != null) {
                                    this.e.a();
                                }
                            }
                            if (a2 == com.nuance.nmsp.client.sdk.oem.e.c) {
                                this.f.e();
                            }
                        }
                    }
                }
                else if (this.c) {
                    final byte[] array4 = (byte[])o3;
                    if (intValue < 0) {
                        this.a(new a("Call to AudioRecord.read() failed with code: " + intValue));
                        return;
                    }
                    if (intValue != 0) {
                        if (this.a.b()) {
                            this.a.b("RECORDING: Sample #" + this.m++ + ". Sending " + intValue + " bytes from recorder.");
                        }
                        this.d.a(array4, null, new aw(intValue), new aw(0), null);
                        return;
                    }
                    if (this.a.b()) {
                        this.a.b("AudioRecorder has no audio.");
                    }
                }
            }
        }
    }
    
    public final void a(final boolean b, final ao d, final ba i, final au j, final az f, final ar e, final as g, final at h) {
        if (this.n.T != null) {
            this.n.T.a();
        }
        final Object f2 = AudioSystemOEM.C;
        Label_0187: {
            final Object b2;
            synchronized (f2) {
                this.m = 0;
                this.d = d;
                this.e = e;
                this.f = f;
                this.g = g;
                this.h = h;
                this.i = i;
                this.j = j;
                if (b) {
                    this.a(this.g);
                }
                if (this.n.L != b.a) {
                    break Label_0187;
                }
                b2 = AudioSystemOEM.b;
                // monitorenter(b2)
                final d d2 = this;
                final AudioSystemOEM audioSystemOEM = d2.n;
                final int n = audioSystemOEM.I;
                final d d3 = this;
                final AudioSystemOEM audioSystemOEM2 = d3.n;
                final int n2 = audioSystemOEM2.K;
                final int n3 = 3;
                final d d4 = this;
                final AudioSystemOEM audioSystemOEM3 = d4.n;
                final int n4 = audioSystemOEM3.J;
                final int n5 = 1;
                final int n6 = AudioSystemOEM.encodeInitSpeex(n, n2, n3, n4, n5);
                final Object o = b2;
                // monitorexit(o)
                final int n7 = n6;
                if (n7 < 0) {
                    final String s = "encodeInitSpeex failed with code:";
                    final StringBuilder sb = new StringBuilder(s);
                    final int n8 = n6;
                    final String s2 = AudioSystemOEM.speexCodeToString(n8);
                    final StringBuilder sb2 = sb.append(s2);
                    final String s3 = sb2.toString();
                    throw new a(s3);
                }
                break Label_0187;
            }
            try {
                final d d2 = this;
                final AudioSystemOEM audioSystemOEM = d2.n;
                final int n = audioSystemOEM.I;
                final d d3 = this;
                final AudioSystemOEM audioSystemOEM2 = d3.n;
                final int n2 = audioSystemOEM2.K;
                final int n3 = 3;
                final d d4 = this;
                final AudioSystemOEM audioSystemOEM3 = d4.n;
                final int n4 = audioSystemOEM3.J;
                final int n5 = 1;
                final int n6 = AudioSystemOEM.encodeInitSpeex(n, n2, n3, n4, n5);
                final Object o = b2;
                // monitorexit(o)
                final int n7 = n6;
                if (n7 < 0) {
                    final String s = "encodeInitSpeex failed with code:";
                    final StringBuilder sb = new StringBuilder(s);
                    final int n8 = n6;
                    final String s2 = AudioSystemOEM.speexCodeToString(n8);
                    final StringBuilder sb2 = sb.append(s2);
                    final String s3 = sb2.toString();
                    throw new a(s3);
                }
            }
            finally {
            }
            // monitorexit(b2)
            try {
                this.b = new AudioRecord(this.n.t, this.n.u, 2, 2, this.n.y);
                if (this.b == null || this.b.getState() != 1) {
                    throw new a("AudioRecord object has not been initialized correctly. One or several parameters used to create it must be wrong.");
                }
            }
            catch (IllegalArgumentException ex) {
                throw new a("Could not instanciate AudioRecord object.");
            }
        }
        this.c = true;
        this.b.setRecordPositionUpdateListener((AudioRecord$OnRecordPositionUpdateListener)this);
        final int setPositionNotificationPeriod = this.b.setPositionNotificationPeriod(this.n.w);
        if (setPositionNotificationPeriod != 0) {
            throw new a("Call to AudioRecord.setPositionNotificationPeriod() failed with code:" + setPositionNotificationPeriod);
        }
        while (true) {
            while (true) {
                int n9;
                int read;
                try {
                    this.b.startRecording();
                    n9 = 0;
                    final short[] array = new short[this.n.w];
                    read = this.b.read(array, n9, this.n.w - n9);
                    if (read == -3 || read == -2) {
                        throw new a("Call to AudioRecord.read() failed with code:" + read);
                    }
                }
                catch (IllegalStateException ex2) {
                    throw new a("Call to AudioRecord.startRecording() failed.");
                }
                if (read <= 0) {
                    break;
                }
                n9 += read;
                if (n9 >= this.n.w) {
                    break;
                }
                continue;
            }
        }
    }
    // monitorexit(f2)
    
    public final void onMarkerReached(final AudioRecord audioRecord) {
    }
    
    public final void onPeriodicNotification(final AudioRecord audioRecord) {
        int i = 0;
        if (this.n.L == com.nuance.nmsp.client.sdk.oem.b.a) {
            synchronized (AudioSystemOEM.C) {
                if (this.c) {
                    final short[] array = new short[this.n.w];
                    do {
                        final int read = audioRecord.read(array, i, this.n.w - i);
                        if (read == -3 || read == -2 || read <= 0) {
                            break;
                        }
                        i += read;
                    } while (i < this.n.w);
                    final bf p = this.n.N;
                    final Object[] array2 = { AudioSystemOEM.R, new Integer(i), array };
                    final Object b = this.n.N.b();
                    this.n.N.a();
                    p.a(array2, this, b);
                }
                return;
            }
        }
        synchronized (AudioSystemOEM.C) {
            if (this.c) {
                final byte[] array3 = new byte[this.n.x];
                do {
                    final int read2 = audioRecord.read(array3, i, this.n.x - i);
                    if (read2 == -3 || read2 == -2 || read2 <= 0) {
                        break;
                    }
                    i += read2;
                } while (i < this.n.x);
                final bf p2 = this.n.N;
                final Object[] array4 = { AudioSystemOEM.R, new Integer(i), array3 };
                final Object b2 = this.n.N.b();
                this.n.N.a();
                p2.a(array4, this, b2);
            }
        }
    }
}
