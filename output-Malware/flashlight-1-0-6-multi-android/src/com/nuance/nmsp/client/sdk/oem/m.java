// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmsp.client.sdk.oem;

import android.os.Looper;
import java.util.Hashtable;

public class m implements bf
{
    private static final be a;
    private final g b;
    private final Thread c;
    private final Hashtable d;
    
    static {
        a = dh.a(m.class);
    }
    
    public m() {
        this.d = new Hashtable();
        this.b = new g();
        (this.c = new Thread(new Runnable() {
            @Override
            public final void run() {
                Looper.prepare();
                m.this.b.a();
                Looper.loop();
            }
        })).start();
    }
    
    @Override
    public final void a(final bq bq, final long n) {
        final o o = new o(this, bq);
        if (m.a.b()) {
            m.a.b("TIMER _handler.postDelayed(" + o + ")");
        }
        this.b.postDelayed((Runnable)o, n);
    }
    
    @Override
    public final void a(final Object o, final bh bh, final Object o2) {
        final n n = new n(o, bh);
        n.a = (Thread)o2;
        this.b.post((Runnable)new Runnable() {
            @Override
            public final void run() {
                if (m.a.a()) {
                    m.a.a("Executing Message");
                }
                n.b.a(n.c, n.a);
                if (m.a.a()) {
                    m.a.a("Done Executing Message");
                }
            }
        });
    }
    
    @Override
    public final boolean a(final bq bq) {
        final o o = this.d.remove(bq);
        if (m.a.b()) {
            m.a.b("TIMER cancelTask() _pendingTimerTasks.size():" + this.d.size());
        }
        if (o != null) {
            if (m.a.b()) {
                m.a.b("TIMER _handler.removeCallbacks(" + o + ")");
            }
            this.b.removeCallbacks((Runnable)o);
        }
        return o != null;
    }
    
    @Override
    public final Object[] a() {
        return new Object[] { Thread.currentThread() };
    }
    
    @Override
    public final Object b() {
        return Thread.currentThread();
    }
    
    @Override
    public final void c() {
        this.b.post((Runnable)new Runnable() {
            @Override
            public final void run() {
                Looper.myLooper().quit();
            }
        });
    }
}
