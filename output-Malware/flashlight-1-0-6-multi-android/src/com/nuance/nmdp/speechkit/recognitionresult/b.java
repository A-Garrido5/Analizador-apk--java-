// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit.recognitionresult;

import android.content.pm.ApplicationInfo;
import java.io.UnsupportedEncodingException;
import android.media.AudioManager;
import android.net.NetworkInfo;
import android.net.ConnectivityManager;
import android.telephony.TelephonyManager;
import com.nuance.nmsp.client.sdk.oem.j;
import android.util.Log;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Sequence;
import java.util.Enumeration;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue;
import java.util.Map;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import android.os.Build;
import android.content.Context;

public final class b
{
    private boolean a;
    private final Context b;
    
    public b(final Object o) {
        this.b = (Context)o;
        this.a = Build.PRODUCT.equals("sdk");
    }
    
    public static PdxValue$Dictionary a(final db db) {
        final PdxValue$Dictionary pdxValue$Dictionary = new PdxValue$Dictionary(null);
        final Enumeration a = db.a();
        while (a.hasMoreElements()) {
            final String s = a.nextElement();
            switch (db.c(s)) {
                default: {
                    b("PdxValue", "Unsupported PDX type found in dictionary, skipping");
                    continue;
                }
                case 224: {
                    pdxValue$Dictionary.put(s, a(db.h(s)));
                    continue;
                }
                case 16: {
                    pdxValue$Dictionary.put(s, a(db.i(s)));
                    continue;
                }
                case 192: {
                    pdxValue$Dictionary.put(s, db.d(s));
                    continue;
                }
                case 193: {
                    pdxValue$Dictionary.put(s, db.f(s));
                    continue;
                }
                case 22: {
                    pdxValue$Dictionary.put(s, db.g(s));
                    continue;
                }
                case 4: {
                    pdxValue$Dictionary.put(s, db.e(s));
                    continue;
                }
            }
        }
        return pdxValue$Dictionary;
    }
    
    private static PdxValue$Sequence a(final dc dc) {
        final PdxValue$Sequence pdxValue$Sequence = new PdxValue$Sequence(null);
        for (int i = 0; i < dc.a(); ++i) {
            switch (dc.b(i)) {
                default: {
                    b("PdxValue", "Unsupported PDX type found in sequence, skipping");
                    break;
                }
                case 224: {
                    pdxValue$Sequence.add(a(dc.g(i)));
                    break;
                }
                case 16: {
                    pdxValue$Sequence.add(a(dc.h(i)));
                    break;
                }
                case 192: {
                    pdxValue$Sequence.add(dc.c(i));
                    break;
                }
                case 193: {
                    pdxValue$Sequence.add(dc.e(i));
                    break;
                }
                case 22: {
                    pdxValue$Sequence.add(dc.f(i));
                    break;
                }
                case 4: {
                    pdxValue$Sequence.add(dc.d(i));
                    break;
                }
            }
        }
        return pdxValue$Sequence;
    }
    
    public static db a(final gl gl, final Map map) {
        final db u = gl.u();
        for (final Map.Entry<String, V> entry : map.entrySet()) {
            final String s = entry.getKey();
            final gt gt = (gt)entry.getValue();
            switch (gt.f()) {
                default: {
                    continue;
                }
                case 0: {
                    u.b(s, gt.c());
                    continue;
                }
                case 1: {
                    u.b(s, gt.d());
                    continue;
                }
                case 4: {
                    u.a(s, gt.e());
                    continue;
                }
                case 2: {
                    u.a(s, a(gl, gt.a()));
                    continue;
                }
                case 3: {
                    u.a(s, a(gl, gt.b()));
                    continue;
                }
            }
        }
        return u;
    }
    
    public static dc a(final gl gl, final List list) {
        final dc v = gl.v();
        for (final gt gt : list) {
            switch (gt.f()) {
                default: {
                    continue;
                }
                case 0: {
                    v.a(gt.c());
                    continue;
                }
                case 1: {
                    v.i(gt.d());
                    continue;
                }
                case 4: {
                    v.b(gt.e());
                    continue;
                }
                case 2: {
                    v.a(a(gl, gt.a()));
                    continue;
                }
                case 3: {
                    v.a(a(gl, gt.b()));
                    continue;
                }
            }
        }
        return v;
    }
    
    public static List a(final byte[] array) {
        if (array == null || array.length < 4) {
            throw new IllegalArgumentException("Cannot parse results: The buffer length is too small to be containing any results.");
        }
        final fn a = fo.a(array);
        final ArrayList<c> list = new ArrayList<c>();
        for (int i = 0; i < a.a(); ++i) {
            list.add(new c(a.a(i)));
        }
        return list;
    }
    
    public static void a(final Object o, final String s) {
        Log.i("SpeechKit", d(o, s));
    }
    
    public static void a(final Object o, final String s, final Throwable t) {
        Log.e("SpeechKit", d(o, s), t);
    }
    
    public static void b(final Object o, final String s) {
        Log.w("SpeechKit", d(o, s));
    }
    
    public static void c(final Object o, final String s) {
        Log.e("SpeechKit", d(o, s));
    }
    
    private static String d(final Object o, final String s) {
        if (!x.a && o != null) {
            String s2 = o.getClass().getName();
            if (s2 != null && s2.length() != 0) {
                final int lastIndex = s2.lastIndexOf(46);
                if (lastIndex >= 0) {
                    final int n = lastIndex + 1;
                    if (n < s2.length()) {
                        s2 = s2.substring(n);
                    }
                }
                return s2 + ": " + s;
            }
        }
        return s;
    }
    
    public static String h() {
        return j.e().a();
    }
    
    public static String i() {
        return j.e().b();
    }
    
    public static String j() {
        return j.e().c();
    }
    
    public static String k() {
        return j.e().d();
    }
    
    public final String a() {
        String networkOperatorName = ((TelephonyManager)this.b.getSystemService("phone")).getNetworkOperatorName();
        if (networkOperatorName == null || networkOperatorName.length() == 0) {
            networkOperatorName = "carrier";
        }
        return networkOperatorName;
    }
    
    public final String b() {
        final NetworkInfo activeNetworkInfo = ((ConnectivityManager)this.b.getSystemService("connectivity")).getActiveNetworkInfo();
        if (activeNetworkInfo != null) {
            final String typeName = activeNetworkInfo.getTypeName();
            if (typeName != null && typeName.length() > 0) {
                return activeNetworkInfo.getTypeName();
            }
        }
        return null;
    }
    
    public final String c() {
        String f = new j(this.b).f();
        if (f != null && f.length() == 0) {
            f = null;
        }
        return f;
    }
    
    public final am d() {
        if (((AudioManager)this.b.getSystemService("audio")).isBluetoothScoOn() || this.a) {
            return am.a;
        }
        return am.b;
    }
    
    public final am e() {
        if (((AudioManager)this.b.getSystemService("audio")).isBluetoothScoOn()) {
            return am.a;
        }
        return am.b;
    }
    
    public final byte[] f() {
        try {
            final ApplicationInfo applicationInfo = this.b.getApplicationInfo();
            if (applicationInfo.name != null) {
                return applicationInfo.name.getBytes("UTF-8");
            }
            if (applicationInfo.packageName != null) {
                final String[] split = applicationInfo.packageName.split(".");
                if (split.length > 1) {
                    return split[-1 + split.length].getBytes("UTF-8");
                }
            }
        }
        catch (UnsupportedEncodingException ex) {}
        return new byte[0];
    }
    
    public final byte[] g() {
        try {
            final ApplicationInfo applicationInfo = this.b.getApplicationInfo();
            if (applicationInfo.packageName != null) {
                return applicationInfo.packageName.getBytes("UTF-8");
            }
        }
        catch (UnsupportedEncodingException ex) {}
        return new byte[0];
    }
}
