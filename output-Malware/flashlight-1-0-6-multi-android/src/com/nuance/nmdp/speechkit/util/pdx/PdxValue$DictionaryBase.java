// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit.util.pdx;

import java.util.Iterator;
import java.util.Set;
import com.nuance.nmdp.speechkit.recognitionresult.b;
import java.util.HashMap;
import java.util.Map;

public abstract class PdxValue$DictionaryBase extends PdxValue
{
    private final Map a;
    
    PdxValue$DictionaryBase(final Map map, final int n) {
        super(n);
        this.a = new HashMap();
        if (map != null) {
            this.a.putAll(map);
        }
    }
    
    private boolean a(final String s, final Object o) {
        if (s == null || o == null) {
            b.b(this, "ignore this put action since either the key or the value is null: key[" + s + "] value[" + o + "]");
            return false;
        }
        return true;
    }
    
    public PdxValue get(final String s) {
        return this.a.get(s);
    }
    
    public Set getEntries() {
        return this.a.entrySet();
    }
    
    public void put(final String s, final int n) {
        if (this.a(s, new PdxValue$Integer(n))) {
            this.a.put(s, new PdxValue$Integer(n));
        }
    }
    
    public void put(final String s, final PdxValue pdxValue) {
        if (this.a(s, pdxValue)) {
            this.a.put(s, pdxValue);
        }
    }
    
    public void put(final String s, final String s2) {
        if (this.a(s, s2)) {
            this.a.put(s, new PdxValue$String(s2));
        }
    }
    
    public void put(final String s, final byte[] array) {
        if (this.a(s, array)) {
            this.a.put(s, new PdxValue$Bytes(array));
        }
    }
    
    @Override
    public String toString(final String s) {
        final StringBuilder sb = new StringBuilder();
        sb.append("{\n");
        final String string = s + "  ";
        for (final Map.Entry<String, V> entry : this.a.entrySet()) {
            sb.append(string);
            sb.append(entry.getKey());
            sb.append(" : ");
            sb.append(((PdxValue)entry.getValue()).toString(string + "  "));
            sb.append(",\n");
        }
        sb.append(s);
        sb.append("}");
        return sb.toString();
    }
}
