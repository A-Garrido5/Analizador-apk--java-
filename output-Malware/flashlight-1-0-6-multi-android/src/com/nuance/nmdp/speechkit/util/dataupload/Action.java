// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit.util.dataupload;

import com.nuance.nmdp.speechkit.util.pdx.PdxValue;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Sequence;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import java.util.Vector;

public class Action
{
    private Action$ActionType a;
    private Vector b;
    private Vector c;
    
    public Action(final Action$ActionType a) {
        if (a == Action$ActionType.ADD || a == Action$ActionType.REMOVE || a == Action$ActionType.CLEARALL) {
            this.a = a;
        }
        else {
            this.a = Action$ActionType.ADD;
        }
        this.b = new Vector();
        this.c = new Vector();
    }
    
    final PdxValue$Dictionary a() {
        final PdxValue$Dictionary pdxValue$Dictionary = new PdxValue$Dictionary();
        final PdxValue$Dictionary pdxValue$Dictionary2 = new PdxValue$Dictionary();
        Label_0068: {
            if (this.a != null) {
                switch (Action$1.a[this.a.ordinal()]) {
                    case 1: {
                        pdxValue$Dictionary.put("action", "add");
                        break Label_0068;
                    }
                    case 2: {
                        pdxValue$Dictionary.put("action", "remove");
                        break Label_0068;
                    }
                    case 3: {
                        pdxValue$Dictionary.put("action", "clear_all");
                        break Label_0068;
                    }
                }
            }
            pdxValue$Dictionary.put("action", "add");
        }
        if (!this.b.isEmpty()) {
            final PdxValue$Sequence pdxValue$Sequence = new PdxValue$Sequence();
            for (int i = 0; i < this.b.size(); ++i) {
                final Contact contact = this.b.elementAt(i);
                if (contact != null) {
                    final PdxValue$Dictionary a = contact.a();
                    if (a != null) {
                        pdxValue$Sequence.add(a);
                    }
                }
            }
            pdxValue$Dictionary2.put("list", pdxValue$Sequence);
        }
        else if (!this.c.isEmpty()) {
            final PdxValue$Sequence pdxValue$Sequence2 = new PdxValue$Sequence();
            for (int j = 0; j < this.c.size(); ++j) {
                final String s = this.c.elementAt(j);
                if (s != null) {
                    pdxValue$Sequence2.add(s);
                }
            }
            pdxValue$Dictionary2.put("list", pdxValue$Sequence2);
        }
        pdxValue$Dictionary.put("content", pdxValue$Dictionary2);
        return pdxValue$Dictionary;
    }
    
    public void addContact(final Contact contact) {
        this.b.add(contact);
    }
    
    public void addWord(final String s) {
        this.c.add(s);
    }
    
    public void cleanData() {
        this.a = null;
        this.b.removeAllElements();
        this.c.removeAllElements();
    }
    
    public void clearContacts() {
        this.b.removeAllElements();
    }
    
    public void clearWords() {
        this.c.removeAllElements();
    }
    
    public int getChecksum() {
        int n = 0;
        int n2 = 0;
        int i;
        while (true) {
            final int size = this.b.size();
            i = 0;
            if (n >= size) {
                break;
            }
            final Contact contact = this.b.elementAt(n);
            int n3;
            if (contact != null) {
                n3 = n2 + contact.getCheckSum();
            }
            else {
                n3 = n2;
            }
            ++n;
            n2 = n3;
        }
        while (i < this.c.size()) {
            final String s = this.c.elementAt(i);
            int n4;
            if (s != null) {
                n4 = n2 + s.hashCode();
            }
            else {
                n4 = n2;
            }
            ++i;
            n2 = n4;
        }
        return n2;
    }
    
    public void removeContact(final Contact contact) {
        this.b.remove(contact);
    }
    
    public void removeWord(final String s) {
        this.c.remove(s);
    }
    
    public void setType(final Action$ActionType a) {
        if (a == Action$ActionType.ADD || a == Action$ActionType.REMOVE || a == Action$ActionType.CLEARALL) {
            this.a = a;
            return;
        }
        this.a = Action$ActionType.ADD;
    }
    
    @Override
    public String toString() {
        int i = 0;
        final StringBuffer sb = new StringBuffer();
        sb.append("action:" + this.a + "\n");
        if (!this.b.isEmpty()) {
            final int size = this.b.size();
            sb.append("contact list: " + size + "\n");
            for (int j = 0; j < size; ++j) {
                final Contact contact = this.b.elementAt(j);
                if (contact != null) {
                    sb.append("contact: " + j + "\n");
                    sb.append(contact.toString());
                }
            }
        }
        if (!this.c.isEmpty()) {
            final int size2 = this.c.size();
            sb.append("word list: " + size2 + "\n");
            while (i < size2) {
                final String s = this.c.elementAt(i);
                if (s != null) {
                    sb.append("word: " + i + " " + s + "\n");
                }
                ++i;
            }
        }
        return sb.toString();
    }
}
