// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit.util.dataupload;

import com.nuance.nmdp.speechkit.util.pdx.PdxValue;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Sequence;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import java.util.Vector;

public class Data
{
    private String a;
    private int b;
    private Data$DataType c;
    private Vector d;
    
    public Data(final String a, final Data$DataType c) {
        this.a = a;
        this.b = 0;
        if (c == Data$DataType.CONTACTS || c == Data$DataType.CUSTOMWORDS || c == Data$DataType.HISTORY) {
            this.c = c;
        }
        else {
            this.c = Data$DataType.CONTACTS;
        }
        this.d = new Vector();
    }
    
    final PdxValue$Dictionary a() {
        final PdxValue$Dictionary pdxValue$Dictionary = new PdxValue$Dictionary();
        pdxValue$Dictionary.put("id", this.a);
        Label_0072: {
            if (this.c != null) {
                switch (Data$1.a[this.c.ordinal()]) {
                    case 1: {
                        pdxValue$Dictionary.put("type", "contacts");
                        break Label_0072;
                    }
                    case 2: {
                        pdxValue$Dictionary.put("type", "custom_words");
                        break Label_0072;
                    }
                    case 3: {
                        pdxValue$Dictionary.put("type", "history");
                        break Label_0072;
                    }
                }
            }
            pdxValue$Dictionary.put("type", "contacts");
        }
        if (!this.d.isEmpty()) {
            final PdxValue$Sequence pdxValue$Sequence = new PdxValue$Sequence();
            for (int i = 0; i < this.d.size(); ++i) {
                final Action action = this.d.elementAt(i);
                if (action != null) {
                    final PdxValue$Dictionary a = action.a();
                    if (a != null) {
                        pdxValue$Sequence.add(a);
                    }
                }
            }
            pdxValue$Dictionary.put("actions", pdxValue$Sequence);
        }
        return pdxValue$Dictionary;
    }
    
    public void addAction(final Action action) {
        if (action != null) {
            this.d.add(action);
        }
    }
    
    public void clearActions() {
        this.d.removeAllElements();
    }
    
    public void clearData() {
        this.a = null;
        this.b = 0;
        this.c = null;
        this.d.removeAllElements();
    }
    
    public int getChecksum() {
        int i = 0;
        int b = 0;
        while (i < this.d.size()) {
            final Action action = this.d.elementAt(i);
            int n;
            if (action != null) {
                n = b + action.getChecksum();
            }
            else {
                n = b;
            }
            ++i;
            b = n;
        }
        return this.b = b;
    }
    
    public String getId() {
        return this.a;
    }
    
    public String getTypeStr() {
        if (this.c == null) {
            return "contacts";
        }
        switch (Data$1.a[this.c.ordinal()]) {
            default: {
                return "contacts";
            }
            case 1: {
                return "contacts";
            }
            case 2: {
                return "custom_words";
            }
            case 3: {
                return "history";
            }
        }
    }
    
    public void removeAction(final Action action) {
        if (action != null) {
            this.d.remove(action);
        }
    }
    
    public void setType(final Data$DataType c) {
        if (c == Data$DataType.CONTACTS || c == Data$DataType.CUSTOMWORDS || c == Data$DataType.HISTORY) {
            this.c = c;
            return;
        }
        this.c = Data$DataType.CONTACTS;
    }
    
    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer();
        sb.append("id:" + this.a + "\n");
        sb.append("checksum:" + this.b + "\n");
        sb.append("type:" + this.c + "\n");
        if (!this.d.isEmpty()) {
            final int size = this.d.size();
            sb.append("action list: " + size + "\n");
            for (int i = 0; i < size; ++i) {
                final Action action = this.d.elementAt(i);
                if (action != null) {
                    sb.append("action: " + i + "\n");
                    sb.append(action.toString());
                }
            }
        }
        return sb.toString();
    }
}
