// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit;

import java.util.Iterator;
import com.nuance.nmdp.speechkit.util.grammar.Grammar;
import java.util.Vector;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue;
import com.nuance.nmdp.speechkit.util.dataupload.Data;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Sequence;
import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import com.nuance.nmdp.speechkit.util.dataupload.DataBlock;

final class x
{
    private static x a;
    private static Object b;
    private static Object o;
    private go c;
    private final String d;
    private final String e;
    private final int f;
    private boolean g;
    private Object h;
    private final z i;
    private Prompt j;
    private Prompt k;
    private Prompt l;
    private Prompt m;
    private final gm n;
    private b p;
    private DataBlock q;
    private boolean r;
    private int s;
    private int t;
    
    static {
        x.a = null;
        x.b = new Object();
        x.o = new Object();
    }
    
    private x(final Object o, final String s, final String d, final String e, final int f, final String s2, final boolean b, final byte[] array, final SpeechKit$CmdSetType speechKit$CmdSetType) {
        this.p = null;
        this.r = false;
        this.s = 0;
        this.t = 0;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = true;
        this.c = null;
        this.i = new z();
        this.h = null;
        this.j = null;
        this.k = null;
        this.l = null;
        this.m = null;
        this.n = new gm(o, s, this.e, this.f, s2, b, this.d, array, speechKit$CmdSetType);
        y.a(new Runnable() {
            @Override
            public final void run() {
                x.this.c = new go(x.this.n);
            }
        });
    }
    
    public static x a(final Object o, final String s, final String s2, final String s3, final int n, final String s4, final boolean b, final byte[] array, final SpeechKit$CmdSetType speechKit$CmdSetType) {
        a(o, "appContext");
        a((Object)s2, "id");
        a(s3, "host");
        a((Object)s, "appVersion");
        a(array, "applicationKey");
        if (n < 0 || n > 65535) {
            a(new IllegalArgumentException("port must be between 0 and 65535"));
        }
        a(o, "type");
        synchronized (x.b) {
            com.nuance.nmdp.speechkit.recognitionresult.b.a(null, "Initializing SpeechKit");
            if (x.a == null) {
                y.a();
            }
            if (x.a != null) {
                final x a = x.a;
                int n2;
                if (a.d.equals(s2) && a.e.equals(s3) && a.f == n) {
                    n2 = 1;
                }
                else {
                    n2 = 0;
                }
                if (n2 == 0) {
                    com.nuance.nmdp.speechkit.recognitionresult.b.a(null, "Releasing old SpeechKit before creating new instance");
                    x.a.p();
                    x.a = null;
                }
            }
            if (x.a == null) {
                com.nuance.nmdp.speechkit.recognitionresult.b.a(null, "Creating fresh SpeechKit instance");
                x.a = new x(o, s, s2, s3, n, s4, b, array, speechKit$CmdSetType);
            }
            return x.a;
        }
    }
    
    private void a(final j j) {
        if (this.j != null) {
            j.setPrompt(0, this.j);
        }
        if (this.k != null) {
            j.setPrompt(1, this.k);
        }
        if (this.l != null) {
            j.setPrompt(2, this.l);
        }
        if (this.m != null) {
            j.setPrompt(3, this.m);
        }
    }
    
    static final void a(final Object o, final String s) {
        if (o == null) {
            a(new IllegalArgumentException(s + " must not be null"));
        }
    }
    
    private static void a(final RuntimeException ex) {
        com.nuance.nmdp.speechkit.recognitionresult.b.c(null, ex.getMessage());
        throw ex;
    }
    
    static final void a(final String s, final String s2) {
        if (s == null || s.length() == 0) {
            a(new IllegalArgumentException(s2 + " must not be null or empty"));
        }
    }
    
    static Object b() {
        return x.b;
    }
    
    static final void f() {
        a(new IllegalStateException("SpeechKit instance is released"));
    }
    
    private void p() {
        this.g = false;
        y.a(new Runnable() {
            @Override
            public final void run() {
                x.this.c.a();
                for (int f = x.this.i.f(), i = 0; i < f; ++i) {
                    ((Prompt)x.this.i.d()).a().b();
                }
            }
        });
    }
    
    public final DataUploadCommand a(final DataBlock q, final int s, final int t, final DataUploadCommand$Listener dataUploadCommand$Listener, final Object o) {
        a(q, "datablock");
        a(dataUploadCommand$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            final f p5 = new f(this, dataUploadCommand$Listener, o);
            this.p = p5;
            this.q = q;
            this.s = s;
            this.t = t;
            y.a(new Runnable() {
                @Override
                public final void run() {
                    synchronized (x.o) {
                        x.this.p.addParam("DATA_BLOCK", x.this.q.getDataBlockDictionary());
                        final PdxValue$Dictionary pdxValue$Dictionary = new PdxValue$Dictionary();
                        final PdxValue$Sequence pdxValue$Sequence = new PdxValue$Sequence();
                        pdxValue$Dictionary.put("num_data_blocks", 1);
                        final Vector dataList = x.this.q.getDataList();
                        for (int i = 0; i < dataList.size(); ++i) {
                            final PdxValue$Dictionary pdxValue$Dictionary2 = new PdxValue$Dictionary();
                            pdxValue$Dictionary2.put("id", dataList.elementAt(i).getId());
                            pdxValue$Dictionary2.put("type", dataList.elementAt(i).getTypeStr());
                            pdxValue$Dictionary2.put("current_checksum", Integer.toString(x.this.s));
                            pdxValue$Dictionary2.put("new_checksum", Integer.toString(x.this.t));
                            pdxValue$Dictionary2.put("algorithm_id", "MD5");
                            pdxValue$Sequence.add(pdxValue$Dictionary2);
                        }
                        pdxValue$Dictionary.put("checksums", pdxValue$Sequence);
                        x.this.p.addParam("UPLOAD_DONE", pdxValue$Dictionary);
                        x.this.r = true;
                        x.o.notify();
                    }
                }
            });
            synchronized (x.o) {
                while (!this.r) {
                    try {
                        x.o.wait();
                    }
                    catch (InterruptedException ex) {}
                }
                p5.b();
                return p5;
            }
        }
    }
    
    public final GenericCommand a(final GenericCommand$Listener genericCommand$Listener, final Object o) {
        a((Object)genericCommand$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            return new u(this, genericCommand$Listener, o);
        }
    }
    
    public final GenericCommand a(final String s, final PdxValue$Dictionary pdxValue$Dictionary, final String s2, final GenericCommand$Listener genericCommand$Listener, final Object o) {
        a((Object)s, "event");
        a(pdxValue$Dictionary, "content");
        a((Object)genericCommand$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            final l l = new l(this, s2, genericCommand$Listener, o);
            final PdxValue$Dictionary pdxValue$Dictionary2 = new PdxValue$Dictionary();
            pdxValue$Dictionary2.put("event", s);
            pdxValue$Dictionary2.put("content", pdxValue$Dictionary);
            l.addParam("LOG_CONTENT", pdxValue$Dictionary2);
            return l;
        }
    }
    
    public final NluRecognizer a(final String s, final int n, final String s2, final String s3, final PdxValue$Dictionary pdxValue$Dictionary, final NluRecognizer$Listener nluRecognizer$Listener, final Object o) {
        a((Object)s, "type");
        a((Object)s2, "language");
        a(nluRecognizer$Listener, "listener");
        a(pdxValue$Dictionary, "requestParams");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            final n n2 = new n(this, s, n, s2, s3, pdxValue$Dictionary, nluRecognizer$Listener, o);
            this.a(n2);
            return n2;
        }
    }
    
    public final Recognizer a(final String s, final int n, final String s2, final Recognizer$Listener recognizer$Listener, final Object o) {
        a((Object)s, "type");
        a((Object)s2, "language");
        a(recognizer$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            final r r = new r(this, s, n, s2, recognizer$Listener, o);
            this.a(r);
            return r;
        }
    }
    
    public final Recognizer a(final String s, final int n, final String s2, final Vector vector, final Recognizer$Listener recognizer$Listener, final Object o) {
        a((Object)s, "type");
        a((Object)s2, "language");
        a(recognizer$Listener, "listener");
        a(vector, "grammarList");
        PdxValue$Sequence pdxValue$Sequence;
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            pdxValue$Sequence = null;
            if (vector != null) {
                pdxValue$Sequence = new PdxValue$Sequence();
                final Iterator<Grammar> iterator = vector.iterator();
                while (iterator.hasNext()) {
                    pdxValue$Sequence.add(iterator.next().getGrammarDictionary());
                }
            }
        }
        final d d = new d(this, s, n, s2, pdxValue$Sequence, recognizer$Listener, o);
        this.a(d);
        // monitorexit(o2)
        return d;
    }
    
    public final TextRecognizer a(final String s, final String s2, final PdxValue$Dictionary pdxValue$Dictionary, final TextRecognizer$Listener textRecognizer$Listener, final Object o) {
        a((Object)s, "language");
        a(textRecognizer$Listener, "listener");
        a(pdxValue$Dictionary, "requestParams");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            return new com.nuance.nmdp.speechkit.z(this, s, s2, pdxValue$Dictionary, textRecognizer$Listener, o);
        }
    }
    
    public final Vocalizer a(final String s, final Vocalizer$Listener vocalizer$Listener, final Object o) {
        a((Object)s, "language");
        a(vocalizer$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            return new ab(this, null, s, vocalizer$Listener, o);
        }
    }
    
    final void a(final Prompt prompt) {
        if (this.i.c(prompt)) {
            this.i.b(prompt);
        }
        prompt.a().b();
        if (prompt == this.j) {
            this.j = null;
        }
        if (prompt == this.k) {
            this.k = null;
        }
        if (prompt == this.l) {
            this.l = null;
        }
        if (prompt == this.m) {
            this.m = null;
        }
    }
    
    public final void a(final Prompt prompt, final Prompt prompt2, final Prompt prompt3, final Prompt prompt4) {
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            // monitorexit(x.b)
            y.a(new Runnable() {
                @Override
                public final void run() {
                    x.this.j = null;
                    x.this.k = null;
                    x.this.l = null;
                    x.this.m = null;
                    if (prompt != null) {
                        if (!prompt.a().c()) {
                            x.this.j = prompt;
                        }
                        else {
                            com.nuance.nmdp.speechkit.recognitionresult.b.b(this, "Recording start prompt is invalid");
                        }
                    }
                    if (prompt2 != null) {
                        if (!prompt2.a().c()) {
                            x.this.k = prompt2;
                        }
                        else {
                            com.nuance.nmdp.speechkit.recognitionresult.b.b(this, "Recording stop prompt is invalid");
                        }
                    }
                    if (prompt3 != null) {
                        if (!prompt3.a().c()) {
                            x.this.l = prompt3;
                        }
                        else {
                            com.nuance.nmdp.speechkit.recognitionresult.b.b(this, "Result prompt is invalid");
                        }
                    }
                    if (prompt4 != null) {
                        if (prompt4.a().c()) {
                            com.nuance.nmdp.speechkit.recognitionresult.b.b(this, "Error prompt is invalid");
                            return;
                        }
                        x.this.m = prompt4;
                    }
                }
            });
        }
    }
    
    public final void a(final SpeechKit$CmdSetType speechKit$CmdSetType) {
        this.n.a(speechKit$CmdSetType);
    }
    
    final void a(final Object h) {
        this.h = h;
    }
    
    final boolean a() {
        return this.g;
    }
    
    public final Vocalizer b(final String s, final Vocalizer$Listener vocalizer$Listener, final Object o) {
        a((Object)s, "voice");
        a(vocalizer$Listener, "listener");
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            return new ab(this, s, null, vocalizer$Listener, o);
        }
    }
    
    public final void b(final Prompt prompt) {
        synchronized (x.b) {
            this.i.a(prompt);
        }
    }
    
    public final void b(final String s, final String s2) {
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            y.a(new Runnable() {
                @Override
                public final void run() {
                    x.this.c.a(s, s2);
                }
            });
        }
    }
    
    final go c() {
        return this.c;
    }
    
    final Object d() {
        return this.h;
    }
    
    final void e() {
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
        }
    }
    
    public final void g() {
        synchronized (x.b) {
            if (this == x.a) {
                com.nuance.nmdp.speechkit.recognitionresult.b.a(this, "Releasing SpeechKit instance");
                this.p();
                x.a = null;
                y.a(new Runnable() {
                    @Override
                    public final void run() {
                        y.b();
                    }
                });
            }
            else {
                com.nuance.nmdp.speechkit.recognitionresult.b.b(this, "SpeechKit instance already released");
            }
        }
    }
    
    public final void h() {
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            y.a(new Runnable() {
                @Override
                public final void run() {
                    final gi a = x.this.c.a(new gj() {
                        @Override
                        public final void a(final gi gi) {
                        }
                        
                        @Override
                        public final void a(final gi gi, final int n, final String s, final String s2) {
                        }
                    });
                    if (a != null) {
                        a.a();
                    }
                }
            });
        }
    }
    
    public final String i() {
        synchronized (x.b) {
            if (this.c != null) {
                return this.c.c();
            }
            return null;
        }
    }
    
    public final void j() {
        synchronized (x.b) {
            if (!this.g) {
                f();
            }
            y.a(new Runnable() {
                @Override
                public final void run() {
                    x.this.c.d();
                }
            });
        }
    }
    
    public final String k() {
        return this.n.v();
    }
    
    public final String l() {
        return this.n.w();
    }
    
    public final String m() {
        return this.n.x();
    }
    
    public final SpeechKit$CmdSetType n() {
        return this.n.A();
    }
}
