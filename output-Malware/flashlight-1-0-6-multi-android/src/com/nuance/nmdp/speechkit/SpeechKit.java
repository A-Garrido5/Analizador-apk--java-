// 
// Decompiled by Procyon v0.5.30
// 

package com.nuance.nmdp.speechkit;

import com.nuance.nmdp.speechkit.util.pdx.PdxValue$Dictionary;
import android.os.Handler;
import com.nuance.nmdp.speechkit.util.dataupload.DataBlock;
import java.util.Vector;
import android.content.res.AssetFileDescriptor;
import android.content.Context;

public final class SpeechKit extends w
{
    private final x a;
    private final Context b;
    
    private SpeechKit(final x a, final Context b) {
        this.a = a;
        this.b = b;
    }
    
    private Prompt a(final AssetFileDescriptor p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_1        
        //     1: ifnonnull       6
        //     4: aconst_null    
        //     5: areturn        
        //     6: new             Ldh;
        //     9: dup            
        //    10: invokespecial   dh.<init>:()V
        //    13: astore_2       
        //    14: new             Lcom/nuance/nmdp/speechkit/Prompt;
        //    17: dup            
        //    18: aload_2        
        //    19: aload_0        
        //    20: getfield        com/nuance/nmdp/speechkit/SpeechKit.a:Lcom/nuance/nmdp/speechkit/x;
        //    23: invokespecial   com/nuance/nmdp/speechkit/Prompt.<init>:(Lae;Lcom/nuance/nmdp/speechkit/x;)V
        //    26: astore_3       
        //    27: invokestatic    com/nuance/nmdp/speechkit/x.b:()Ljava/lang/Object;
        //    30: astore          4
        //    32: aload           4
        //    34: monitorenter   
        //    35: aload_0        
        //    36: getfield        com/nuance/nmdp/speechkit/SpeechKit.a:Lcom/nuance/nmdp/speechkit/x;
        //    39: invokevirtual   com/nuance/nmdp/speechkit/x.a:()Z
        //    42: istore          6
        //    44: iload           6
        //    46: ifne            56
        //    49: aload_1        
        //    50: invokevirtual   android/content/res/AssetFileDescriptor.close:()V
        //    53: invokestatic    com/nuance/nmdp/speechkit/x.f:()V
        //    56: aload_0        
        //    57: getfield        com/nuance/nmdp/speechkit/SpeechKit.a:Lcom/nuance/nmdp/speechkit/x;
        //    60: aload_3        
        //    61: invokevirtual   com/nuance/nmdp/speechkit/x.b:(Lcom/nuance/nmdp/speechkit/Prompt;)V
        //    64: aload           4
        //    66: monitorexit    
        //    67: new             Lcom/nuance/nmdp/speechkit/SpeechKit$1;
        //    70: dup            
        //    71: aload_2        
        //    72: aload_1        
        //    73: invokespecial   com/nuance/nmdp/speechkit/SpeechKit$1.<init>:(Ldh;Landroid/content/res/AssetFileDescriptor;)V
        //    76: invokestatic    y.a:(Ljava/lang/Runnable;)V
        //    79: aload_3        
        //    80: areturn        
        //    81: astore          5
        //    83: aload           4
        //    85: monitorexit    
        //    86: aload           5
        //    88: athrow         
        //    89: astore          7
        //    91: goto            53
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  35     44     81     89     Any
        //  49     53     89     94     Ljava/io/IOException;
        //  49     53     81     89     Any
        //  53     56     81     89     Any
        //  56     67     81     89     Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0053:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static SpeechKit initialize(final Context context, final String s, final String s2, final int n, final boolean b, final byte[] array) {
        return initialize(context, "", s, s2, n, null, b, array, SpeechKit$CmdSetType.NVC);
    }
    
    public static SpeechKit initialize(final Context context, final String s, final String s2, final String s3, final int n, final String s4, final boolean b, final byte[] array, final SpeechKit$CmdSetType speechKit$CmdSetType) {
        final x a = x.a(context, s, s2, s3, n, s4, b, array, speechKit$CmdSetType);
        if (a != null) {
            synchronized (x.b()) {
                SpeechKit speechKit = (SpeechKit)a.d();
                if (speechKit == null) {
                    speechKit = new SpeechKit(a, context);
                    a.a(speechKit);
                }
                return speechKit;
            }
        }
        return null;
    }
    
    public static SpeechKit initialize(final Context context, final String s, final String s2, final String s3, final int n, final boolean b, final byte[] array, final SpeechKit$CmdSetType speechKit$CmdSetType) {
        return initialize(context, s, s2, s3, n, null, b, array, speechKit$CmdSetType);
    }
    
    public final void cancelCurrent() {
        this.a.j();
    }
    
    public final void connect() {
        this.a.h();
    }
    
    public final Recognizer createConstraintRecognizer(final String s, final int n, final String s2, final Vector vector, final Recognizer$Listener recognizer$Listener, final Object o) {
        return this.a.a(s, n, s2, vector, recognizer$Listener, o);
    }
    
    public final DataUploadCommand createDataUploadCmd(final DataBlock dataBlock, final int n, final int n2, final DataUploadCommand$Listener dataUploadCommand$Listener, final Handler handler) {
        return this.a.a(dataBlock, n, n2, dataUploadCommand$Listener, handler);
    }
    
    public final GenericCommand createLogRevisionCmd(final String s, final PdxValue$Dictionary pdxValue$Dictionary, final String s2, final GenericCommand$Listener genericCommand$Listener, final Handler handler) {
        return this.a.a(s, pdxValue$Dictionary, s2, genericCommand$Listener, handler);
    }
    
    public final NluRecognizer createNluRecognizer(final String s, final int n, final String s2, final String s3, final PdxValue$Dictionary pdxValue$Dictionary, final NluRecognizer$Listener nluRecognizer$Listener, final Handler handler) {
        return this.a.a(s, n, s2, s3, pdxValue$Dictionary, nluRecognizer$Listener, handler);
    }
    
    public final Recognizer createRecognizer(final String s, final int n, final String s2, final Recognizer$Listener recognizer$Listener, final Handler handler) {
        return this.a.a(s, n, s2, recognizer$Listener, handler);
    }
    
    public final GenericCommand createResetUserProfileCmd(final GenericCommand$Listener genericCommand$Listener, final Handler handler) {
        return this.a.a(genericCommand$Listener, handler);
    }
    
    public final TextRecognizer createTextRecognizer(final String s, final String s2, final PdxValue$Dictionary pdxValue$Dictionary, final TextRecognizer$Listener textRecognizer$Listener, final Handler handler) {
        return this.a.a(s, s2, pdxValue$Dictionary, textRecognizer$Listener, handler);
    }
    
    public final Vocalizer createVocalizerWithLanguage(final String s, final Vocalizer$Listener vocalizer$Listener, final Handler handler) {
        return this.a.a(s, vocalizer$Listener, handler);
    }
    
    public final Vocalizer createVocalizerWithVoice(final String s, final Vocalizer$Listener vocalizer$Listener, final Handler handler) {
        return this.a.b(s, vocalizer$Listener, handler);
    }
    
    public final Prompt defineAudioPrompt(final int n) {
        final AssetFileDescriptor openRawResourceFd = this.b.getResources().openRawResourceFd(n);
        if (openRawResourceFd == null) {
            throw new IllegalArgumentException("resourceId must refer to an uncompressed resource");
        }
        return this.a(openRawResourceFd);
    }
    
    public final SpeechKit$CmdSetType getCmdSetType() {
        return this.a.n();
    }
    
    public final String getSessionId() {
        return this.a.i();
    }
    
    public final void logToServer(final String s, final String s2) {
        this.a.b(s, s2);
    }
    
    public final void release() {
        this.a.g();
    }
    
    public final void setCmdSetType(final SpeechKit$CmdSetType speechKit$CmdSetType) {
        this.a.a(speechKit$CmdSetType);
    }
    
    public final void setDefaultRecognizerPrompts(final Prompt prompt, final Prompt prompt2, final Prompt prompt3, final Prompt prompt4) {
        this.a.a(prompt, prompt2, prompt3, prompt4);
    }
}
