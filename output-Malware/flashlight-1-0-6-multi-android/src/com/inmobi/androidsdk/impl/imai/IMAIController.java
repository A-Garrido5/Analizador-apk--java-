// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.androidsdk.impl.imai;

import org.json.JSONObject;
import com.inmobi.commons.metric.EventType;
import com.inmobi.commons.metric.EventLog;
import com.inmobi.commons.internal.ApiStatCollector$ApiEventType;
import com.inmobi.commons.internal.ApiStatCollector;
import com.inmobi.commons.InMobi;
import android.os.Build$VERSION;
import com.inmobi.commons.internal.Log;
import com.inmobi.re.container.IMWebView;
import java.lang.ref.WeakReference;

public class IMAIController
{
    public static final String IMAI_BRIDGE = "imaiController";
    private transient WeakReference a;
    
    public IMAIController(final IMWebView imWebView) {
        IMAICore.initialize();
        this.a = new WeakReference((T)imWebView);
    }
    
    public String getPlatformVersion() {
        Log.debug("[InMobi]-[Network]-4.4.3", "get platform version");
        return Integer.toString(Build$VERSION.SDK_INT);
    }
    
    public String getSdkVersion() {
        Log.debug("[InMobi]-[Network]-4.4.3", "get sdk version");
        return InMobi.getVersion();
    }
    
    public void log(final String s) {
        Log.debug("[InMobi]-[Network]-4.4.3", s);
    }
    
    public void openEmbedded(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(1001), null));
        try {
            Log.debug("[InMobi]-[Network]-4.4.3", "IMAI open Embedded");
            if (!IMAICore.validateURL(s)) {
                IMAICore.fireErrorEvent(this.a, "Null url passed", "openEmbedded", s);
                return;
            }
            if (s.startsWith("http") || s.startsWith("https")) {
                IMAICore.launchEmbeddedBrowser(this.a, s);
                IMAICore.fireOpenEmbeddedSuccessful(this.a, s);
                return;
            }
        }
        catch (Exception ex) {
            IMAICore.fireErrorEvent(this.a, ex.getMessage(), "openEmbedded", s);
            Log.internal("[InMobi]-[Network]-4.4.3", "IMAI openEmbedded failed", ex);
            return;
        }
        this.openExternal(s);
    }
    
    public void openExternal(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(1002), null));
        try {
            Log.debug("[InMobi]-[Network]-4.4.3", "IMAI open external");
            if (!IMAICore.validateURL(s)) {
                IMAICore.fireErrorEvent(this.a, "Null url passed", "openExternal", s);
                return;
            }
            IMAICore.launchExternalApp(s);
            IMAICore.fireOpenExternalSuccessful(this.a, s);
        }
        catch (Exception ex) {
            IMAICore.fireErrorEvent(this.a, ex.getMessage(), "openExternal", s);
            Log.internal("[InMobi]-[Network]-4.4.3", "IMAI openExternal failed", ex);
        }
    }
    
    public void ping(final String s, final boolean b) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(1003), null));
        try {
            Log.debug("[InMobi]-[Network]-4.4.3", "IMAI ping");
            if (!IMAICore.validateURL(s)) {
                IMAICore.fireErrorEvent(this.a, "Null url passed", "ping", s);
                return;
            }
            if (s.contains("http") || s.contains("https")) {
                IMAICore.ping(this.a, s, b);
                return;
            }
        }
        catch (Exception ex) {
            IMAICore.fireErrorEvent(this.a, ex.getMessage(), "ping", s);
            Log.internal("[InMobi]-[Network]-4.4.3", "IMAI ping failed", ex);
            return;
        }
        IMAICore.fireErrorEvent(this.a, "Invalid url passed", "ping", s);
    }
    
    public void pingInWebView(final String s, final boolean b) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(1004), null));
        try {
            Log.debug("[InMobi]-[Network]-4.4.3", "IMAI ping in webview");
            if (!IMAICore.validateURL(s)) {
                IMAICore.fireErrorEvent(this.a, "Null url passed", "pingInWebView", s);
                return;
            }
            if (s.contains("http") || s.contains("https")) {
                IMAICore.pingInWebview(this.a, s, b);
                return;
            }
        }
        catch (Exception ex) {
            IMAICore.fireErrorEvent(this.a, ex.getMessage(), "pingInWebView", s);
            Log.internal("[InMobi]-[Network]-4.4.3", "IMAI pingInWebView failed", ex);
            return;
        }
        IMAICore.fireErrorEvent(this.a, "Invalid url passed", "pingInWebView", s);
    }
}
