// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.androidsdk.impl.imai;

import com.inmobi.androidsdk.impl.net.RequestResponseManager;
import com.inmobi.commons.internal.Log;
import java.util.Iterator;
import com.inmobi.androidsdk.impl.imai.db.ClickData;
import com.inmobi.androidsdk.bootstrapper.Initializer;
import com.inmobi.androidsdk.impl.imai.db.ClickDatabaseManager;
import java.util.ArrayList;

public class IMAIClickEventList extends ArrayList
{
    private static final long serialVersionUID = -211778664111073467L;
    
    public static IMAIClickEventList getLoggedClickEvents() {
        IMAIClickEventList list = null;
        Label_0119: {
            final IMAIClickEventList clickEvents;
            final ArrayList<Long> list2;
            synchronized (IMAIClickEventList.class) {
                final int noOfEvents = ClickDatabaseManager.getInstance().getNoOfEvents();
                list = null;
                if (noOfEvents == 0) {
                    break Label_0119;
                }
                final int getmDefaultEventsBatch = Initializer.getConfigParams().getImai().getmDefaultEventsBatch();
                ClickDatabaseManager.getInstance().setDBLimit(Initializer.getConfigParams().getImai().getmMaxDb());
                clickEvents = ClickDatabaseManager.getInstance().getClickEvents(getmDefaultEventsBatch);
                list2 = new ArrayList<Long>();
                final Iterator<ClickData> iterator = clickEvents.iterator();
                while (iterator.hasNext()) {
                    list2.add(iterator.next().getClickId());
                }
            }
            ClickDatabaseManager.getInstance().deleteClickEvents(list2);
            list = clickEvents;
        }
        if (list == null) {
            list = new IMAIClickEventList();
        }
        // monitorexit(IMAIClickEventList.class)
        return list;
    }
    
    public ClickData getClickEvent(final long n) {
        try {
            for (final ClickData clickData : this) {
                if (clickData.getClickId() == n) {
                    return clickData;
                }
            }
            return null;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Cant get click event", ex);
            return null;
        }
        return null;
    }
    
    public void reduceRetryCount(final int n) {
        synchronized (this) {
            try {
                RequestResponseManager.isSynced.set(false);
                final ClickData clickEvent = this.getClickEvent(n);
                final int retryCount = clickEvent.getRetryCount();
                this.removeClickEvent(n);
                if (retryCount > 1) {
                    clickEvent.setRetryCount(-1 + clickEvent.getRetryCount());
                    this.add(clickEvent);
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Network]-4.4.3", "Cant reduce retry count", ex);
            }
        }
    }
    
    public boolean removeClickEvent(final long n) {
        synchronized (this) {
            try {
                RequestResponseManager.isSynced.set(false);
                this.remove(this.getClickEvent(n));
                return true;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Network]-4.4.3", "Cant remove click event", ex);
                return false;
            }
        }
    }
    
    public void saveClickEvents() {
        Log.internal("[InMobi]-[Network]-4.4.3", "Save ping events");
        if (RequestResponseManager.mDBWriterQueue != null && !RequestResponseManager.mDBWriterQueue.isEmpty()) {
            final Iterator<ClickData> iterator = RequestResponseManager.mDBWriterQueue.iterator();
            while (iterator.hasNext()) {
                ClickDatabaseManager.getInstance().insertClick(iterator.next());
            }
        }
    }
}
