// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.androidsdk.impl.imai.db;

import android.content.ContentValues;
import android.database.Cursor;
import com.inmobi.androidsdk.impl.imai.IMAIClickEventList;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.db.ColumnData$ColumnType;
import com.inmobi.commons.db.ColumnData;
import java.util.LinkedHashMap;
import com.inmobi.commons.db.TableData;
import java.util.ArrayList;
import android.content.Context;
import com.inmobi.commons.db.DatabaseHandler;

public class ClickDatabaseManager extends DatabaseHandler
{
    public static final String COLUMN_CLICK_ID = "clickid";
    public static final String COLUMN_CLICK_URL = "clickurl";
    public static final String COLUMN_FOLLOW_REDIRECT = "followredirect";
    public static final String COLUMN_PINGWV = "pingwv";
    public static final String COLUMN_RETRY_COUNT = "retrycount";
    public static final String COLUMN_TIMESTAMP = "timestamp";
    public static final String TABLE_CLICK = "clickevent";
    private static ClickDatabaseManager a;
    private int b;
    
    protected ClickDatabaseManager(final Context context, final ArrayList list) {
        super(context, list);
        this.b = 1000;
    }
    
    private static TableData a() {
        final TableData tableData = new TableData();
        final LinkedHashMap<String, ColumnData> linkedHashMap = new LinkedHashMap<String, ColumnData>();
        final ColumnData columnData = new ColumnData();
        columnData.setPrimaryKey(true);
        columnData.setDataType(ColumnData$ColumnType.INTEGER);
        columnData.setMandatory(true);
        linkedHashMap.put("clickid", columnData);
        final ColumnData columnData2 = new ColumnData();
        columnData2.setDataType(ColumnData$ColumnType.VARCHAR);
        columnData2.setMandatory(true);
        linkedHashMap.put("clickurl", columnData2);
        final ColumnData columnData3 = new ColumnData();
        columnData3.setDataType(ColumnData$ColumnType.INTEGER);
        columnData3.setMandatory(true);
        linkedHashMap.put("pingwv", columnData3);
        final ColumnData columnData4 = new ColumnData();
        columnData4.setDataType(ColumnData$ColumnType.INTEGER);
        columnData4.setMandatory(true);
        linkedHashMap.put("followredirect", columnData4);
        final ColumnData columnData5 = new ColumnData();
        columnData5.setDataType(ColumnData$ColumnType.INTEGER);
        columnData5.setMandatory(true);
        linkedHashMap.put("retrycount", columnData5);
        final ColumnData columnData6 = new ColumnData();
        columnData6.setDataType(ColumnData$ColumnType.INTEGER);
        columnData6.setMandatory(true);
        linkedHashMap.put("timestamp", columnData6);
        tableData.setmColumns(linkedHashMap);
        tableData.setmTableName("clickevent");
        return tableData;
    }
    
    public static ClickDatabaseManager getInstance() {
        synchronized (ClickDatabaseManager.class) {
            try {
                if (ClickDatabaseManager.a == null) {
                    final ArrayList<TableData> list = new ArrayList<TableData>();
                    list.add(a());
                    ClickDatabaseManager.a = new ClickDatabaseManager(InternalSDKUtil.getContext(), list);
                }
                return ClickDatabaseManager.a;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Network]-4.4.3", "Exception getting DB Manager Instance", ex);
                return null;
            }
        }
    }
    
    public boolean deleteClickEvents(final ArrayList list) {
        // monitorenter(this)
        Label_0102: {
            if (list == null) {
                break Label_0102;
            }
            Label_0093: {
                try {
                    if (!list.isEmpty()) {
                        this.open();
                        final Iterator<Long> iterator = list.iterator();
                        while (iterator.hasNext()) {
                            this.delete("clickevent", "clickid = " + (long)iterator.next(), null);
                        }
                        break Label_0093;
                    }
                    return false;
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Network]-4.4.3", "Exception deleting click events", ex);
                    return false;
                    b = false;
                    return b;
                    this.close();
                    b = true;
                    return b;
                }
                finally {
                }
                // monitorexit(this)
            }
        }
    }
    
    public IMAIClickEventList getClickEvents(final int n) {
        while (true) {
            while (true) {
                ClickData clickData = null;
                Label_0190: {
                    synchronized (this) {
                        final IMAIClickEventList list = new IMAIClickEventList();
                        try {
                            this.open();
                            final Cursor nRows = this.getNRows("clickevent", "timestamp", n);
                            nRows.moveToFirst();
                            do {
                                clickData = new ClickData();
                                clickData.setClickId(nRows.getLong(0));
                                clickData.setClickUrl(nRows.getString(1));
                                if (1 == nRows.getInt(2)) {
                                    clickData.setPingWv(true);
                                }
                                else {
                                    clickData.setPingWv(false);
                                }
                                if (1 != nRows.getInt(3)) {
                                    break Label_0190;
                                }
                                clickData.setFollowRedirect(true);
                                clickData.setRetryCount(nRows.getInt(4));
                                clickData.setTimestamp(nRows.getLong(5));
                                list.add(clickData);
                            } while (nRows.moveToNext());
                            nRows.close();
                            this.close();
                            return list;
                        }
                        catch (Exception ex) {
                            Log.internal("[InMobi]-4.4.3", "Failed to get clicks from db", ex);
                        }
                    }
                }
                clickData.setFollowRedirect(false);
                continue;
            }
        }
    }
    
    public int getNoOfEvents() {
        try {
            this.open();
            final int noOfRows = getInstance().getNoOfRows("clickevent", null, null);
            this.close();
            return noOfRows;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception getting no of click events", ex);
            return 0;
        }
    }
    
    public void insertClick(final ClickData clickData) {
        synchronized (this) {
            try {
                this.open();
                final ContentValues contentValues = new ContentValues();
                contentValues.put("timestamp", clickData.getTimestamp());
                contentValues.put("clickurl", clickData.getClickUrl());
                contentValues.put("pingwv", clickData.isPingWv());
                contentValues.put("retrycount", clickData.getRetryCount());
                contentValues.put("followredirect", clickData.isFollowRedirects());
                if (this.getTableSize("clickevent") >= this.b) {
                    final Cursor executeQuery = this.executeQuery("SELECT clickid FROM clickevent WHERE timestamp= (SELECT MIN(timestamp) FROM clickevent Limit 1);", null);
                    executeQuery.moveToFirst();
                    final long long1 = executeQuery.getLong(0);
                    executeQuery.close();
                    this.delete("clickevent", "clickid = " + long1, null);
                }
                this.insert("clickevent", contentValues);
                this.close();
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to insert click event to db", ex);
            }
        }
    }
    
    public void setDBLimit(final int b) {
        if (b > 0) {
            this.b = b;
        }
    }
    
    public boolean updateRetryCount(final ArrayList list) {
        // monitorenter(this)
        Label_0205: {
            if (list == null) {
                break Label_0205;
            }
            Label_0196: {
                try {
                    if (!list.isEmpty()) {
                        this.open();
                        for (final ClickData clickData : list) {
                            final ContentValues contentValues = new ContentValues();
                            contentValues.put("clickid", clickData.getClickId());
                            contentValues.put("clickurl", clickData.getClickUrl());
                            contentValues.put("followredirect", clickData.isFollowRedirects());
                            contentValues.put("pingwv", clickData.isPingWv());
                            contentValues.put("retrycount", 1 + clickData.getRetryCount());
                            contentValues.put("timestamp", clickData.getTimestamp());
                            this.update("clickevent", contentValues, "clickid= ?", new String[] { String.valueOf(clickData.getClickId()) });
                        }
                        break Label_0196;
                    }
                    return false;
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Network]-4.4.3", "Exception updating retry count", ex);
                    return false;
                    b = false;
                    return b;
                    this.close();
                    b = true;
                    return b;
                }
                finally {
                }
                // monitorexit(this)
            }
        }
    }
}
