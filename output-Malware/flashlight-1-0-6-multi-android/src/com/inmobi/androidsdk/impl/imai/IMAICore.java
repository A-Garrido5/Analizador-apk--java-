// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.androidsdk.impl.imai;

import com.inmobi.androidsdk.impl.net.HttpRequestCallback;
import com.inmobi.androidsdk.impl.imai.db.ClickData;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.net.Uri;
import com.inmobi.androidsdk.impl.SDKUtil;
import com.inmobi.re.container.IMWebView$ViewState;
import android.content.Context;
import android.content.Intent;
import com.inmobi.androidsdk.bootstrapper.Initializer;
import com.inmobi.androidsdk.impl.imai.db.ClickDatabaseManager;
import com.inmobi.androidsdk.impl.net.RequestResponseManager;
import com.inmobi.androidsdk.IMBrowserActivity;
import com.inmobi.re.container.IMWebView;
import com.inmobi.commons.internal.Log;
import java.lang.ref.WeakReference;
import java.util.Random;

public class IMAICore
{
    static Random a;
    
    static {
        IMAICore.a = new Random();
    }
    
    public static void fireErrorEvent(final WeakReference weakReference, final String s, final String s2, final String s3) {
        if (weakReference == null) {
            return;
        }
        try {
            if (weakReference.get() != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "Fire error event IMAI for action: " + s2 + " " + s);
                injectJavaScript(weakReference.get(), "window._im_imai.broadcastEvent('error','" + s + "','" + s2 + "','" + s3 + "')");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
        }
    }
    
    public static void fireOpenEmbeddedSuccessful(final WeakReference weakReference, final String s) {
        if (weakReference == null) {
            return;
        }
        try {
            if (weakReference.get() != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "fireOpenEmbeddedSuccessful");
                if (!weakReference.get().mWebViewIsBrowserActivity && !weakReference.get().mIsInterstitialAd) {
                    IMBrowserActivity.requestOnAdDismiss(weakReference.get().getWebviewHandler().obtainMessage(weakReference.get().getDismissMessage()));
                    weakReference.get().fireOnShowAdScreen();
                }
                injectJavaScript(weakReference.get(), "window._im_imai.broadcastEvent('openEmbeddedSuccessful','" + s + "')");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
        }
    }
    
    public static void fireOpenExternalSuccessful(final WeakReference weakReference, final String s) {
        if (weakReference == null) {
            return;
        }
        try {
            if (weakReference.get() != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "fireOpenExternalSuccessful");
                weakReference.get().fireOnLeaveApplication();
                injectJavaScript(weakReference.get(), "window._im_imai.broadcastEvent('openExternalSuccessful','" + s + "')");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
        }
    }
    
    public static void firePingInWebViewSuccessful(final WeakReference weakReference, final String s) {
        if (weakReference == null) {
            return;
        }
        try {
            if (weakReference.get() != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "firePingInWebViewSuccessful");
                injectJavaScript(weakReference.get(), "window._im_imai.broadcastEvent('pingInWebViewSuccessful','" + s + "')");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
        }
    }
    
    public static void firePingSuccessful(final WeakReference weakReference, final String s) {
        if (weakReference == null) {
            return;
        }
        try {
            if (weakReference.get() != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "firePingSuccessful");
                injectJavaScript(weakReference.get(), "window._im_imai.broadcastEvent('pingSuccessful','" + s + "')");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
        }
    }
    
    public static int getRandomNumber() {
        return IMAICore.a.nextInt();
    }
    
    public static void initialize() {
        new RequestResponseManager().init();
        ClickDatabaseManager.getInstance().setDBLimit(Initializer.getConfigParams().getImai().getmMaxDb());
    }
    
    public static void injectJavaScript(final IMWebView imWebView, final String s) {
        try {
            imWebView.getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public final void run() {
                    imWebView.injectJavaScript(s);
                }
            });
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Error injecting javascript ", ex);
        }
    }
    
    public static void launchEmbeddedBrowser(final WeakReference weakReference, final String s) {
        final Intent intent = new Intent((Context)weakReference.get().getActivity(), (Class)IMBrowserActivity.class);
        intent.putExtra("extra_url", s);
        intent.putExtra("extra_browser_type", 100);
        intent.setFlags(268435456);
        IMBrowserActivity.setWebViewListener(weakReference.get().mListener);
        if (!weakReference.get().mWebViewIsBrowserActivity && !weakReference.get().mIsInterstitialAd && weakReference.get().getStateVariable() == IMWebView$ViewState.DEFAULT) {
            intent.putExtra("FIRST_INSTANCE", true);
            intent.putExtra("QAMODE", SDKUtil.getQAMode());
        }
        weakReference.get().getActivity().getApplicationContext().startActivity(intent);
    }
    
    public static void launchExternalApp(final String s) {
        final Intent intent = new Intent("android.intent.action.VIEW");
        intent.setData(Uri.parse(s));
        intent.setFlags(268435456);
        InternalSDKUtil.getContext().startActivity(intent);
    }
    
    public static void ping(final WeakReference weakReference, final String s, final boolean b) {
        try {
            weakReference.get().getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public final void run() {
                    try {
                        final ClickData clickData = new ClickData(s, b, false, Initializer.getConfigParams().getImai().getMaxRetry());
                        final RequestResponseManager requestResponseManager = new RequestResponseManager();
                        requestResponseManager.init();
                        RequestResponseManager.mNetworkQueue.add(0, clickData);
                        requestResponseManager.processClick(InternalSDKUtil.getContext(), new HttpRequestCallback() {
                            @Override
                            public void notifyResult(final int n, final Object o) {
                                try {
                                    Log.internal("[InMobi]-[Network]-4.4.3", "Got PING callback. Status: " + n);
                                    if (n == 0) {
                                        IMAICore.firePingSuccessful(weakReference, s);
                                        return;
                                    }
                                    IMAICore.fireErrorEvent(weakReference, "IMAI Ping in http client failed", "ping", s);
                                }
                                catch (Exception ex) {
                                    Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
                                }
                            }
                        });
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[Network]-4.4.3", "Exception ping in background", ex);
                    }
                }
            });
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Failed to ping", ex);
        }
    }
    
    public static void pingInWebview(final WeakReference weakReference, final String s, final boolean b) {
        try {
            weakReference.get().getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public final void run() {
                    try {
                        final ClickData clickData = new ClickData(s, b, true, Initializer.getConfigParams().getImai().getMaxRetry());
                        final RequestResponseManager requestResponseManager = new RequestResponseManager();
                        requestResponseManager.init();
                        RequestResponseManager.mNetworkQueue.add(0, clickData);
                        requestResponseManager.processClick(InternalSDKUtil.getContext(), new HttpRequestCallback() {
                            @Override
                            public void notifyResult(final int n, final Object o) {
                                try {
                                    Log.internal("[InMobi]-[Network]-4.4.3", "Got PING IN WEBVIEW callback. Status: " + n);
                                    if (n == 0) {
                                        IMAICore.firePingInWebViewSuccessful(weakReference, s);
                                        return;
                                    }
                                    IMAICore.fireErrorEvent(weakReference, "IMAI Ping in webview failed", "pingInWebview", s);
                                }
                                catch (Exception ex) {
                                    Log.internal("[InMobi]-[Network]-4.4.3", "Exception", ex);
                                }
                            }
                        });
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[Network]-4.4.3", "Exception ping in background", ex);
                    }
                }
            });
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Failed to ping in webview", ex);
        }
    }
    
    public static boolean validateURL(final String s) {
        if (s == null || "".equals(s.trim())) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Null url passed");
            return false;
        }
        return true;
    }
}
