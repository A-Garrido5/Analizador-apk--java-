// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.androidsdk;

import java.util.Locale;
import com.inmobi.androidsdk.impl.net.RequestResponseManager$ActionType;
import com.inmobi.androidsdk.carb.CARB;
import android.widget.FrameLayout;
import com.inmobi.re.container.IMWebView$ViewState;
import android.view.Display;
import com.inmobi.commons.internal.WrapperFunctions;
import android.view.WindowManager;
import android.util.DisplayMetrics;
import com.inmobi.androidsdk.bootstrapper.Initializer;
import android.os.Build$VERSION;
import com.inmobi.androidsdk.impl.ConfigException;
import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import android.view.ViewGroup$LayoutParams;
import android.view.View;
import android.widget.RelativeLayout$LayoutParams;
import com.inmobi.androidsdk.impl.imai.IMAIController;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.androidsdk.impl.SDKUtil;
import com.inmobi.commons.internal.Log;
import android.util.AttributeSet;
import android.content.Context;
import com.inmobi.androidsdk.impl.net.RequestResponseManager;
import com.inmobi.commons.AnimationType;
import android.view.animation.Animation;
import java.util.concurrent.atomic.AtomicBoolean;
import com.inmobi.androidsdk.impl.UserInfo;
import android.app.Activity;
import com.inmobi.re.container.IMWebView;
import com.inmobi.re.container.IMWebView$IMWebViewListener;
import com.inmobi.androidsdk.impl.net.HttpRequestCallback;
import android.view.animation.Animation$AnimationListener;
import com.inmobi.androidsdk.impl.ConnBroadcastReciever;
import android.widget.RelativeLayout;

public final class BannerView extends RelativeLayout
{
    public static final int INMOBI_AD_UNIT_120X600 = 13;
    public static final int INMOBI_AD_UNIT_300X250 = 10;
    public static final int INMOBI_AD_UNIT_320X48 = 9;
    public static final int INMOBI_AD_UNIT_320X50 = 15;
    public static final int INMOBI_AD_UNIT_468X60 = 12;
    public static final int INMOBI_AD_UNIT_728X90 = 11;
    public static final String INMOBI_INTERNAL_TAG = "ref-__in__rt";
    public static final String INMOBI_REF_TAG = "ref-tag";
    private static ConnBroadcastReciever a;
    private boolean A;
    private BannerView$d B;
    private Animation$AnimationListener C;
    private HttpRequestCallback D;
    private IMWebView$IMWebViewListener E;
    private boolean F;
    private IMWebView b;
    private IMWebView c;
    private IMWebView d;
    private Activity e;
    private boolean f;
    private UserInfo g;
    private AtomicBoolean h;
    private AtomicBoolean i;
    private Animation j;
    private Animation k;
    private String l;
    private String m;
    private BannerViewListener n;
    private AdRequest o;
    private String p;
    private int q;
    private long r;
    private long s;
    private long t;
    private boolean u;
    private AnimationType v;
    private boolean w;
    private g x;
    private String y;
    private RequestResponseManager z;
    
    static {
        BannerView.a = null;
    }
    
    public BannerView(final Activity activity, final int n, final String s) {
        this((Context)activity);
        this.a(activity, n, s);
    }
    
    public BannerView(final Activity activity, final int n, final String s, final long r) {
        this((Context)activity);
        this.r = r;
        this.a(activity, n, s);
    }
    
    private BannerView(final Context context) {
        super(context);
        this.f = true;
        this.h = new AtomicBoolean();
        this.i = new AtomicBoolean();
        this.l = null;
        this.m = null;
        this.o = new AdRequest();
        this.r = -1L;
        this.s = 0L;
        this.t = 0L;
        this.u = true;
        this.v = AnimationType.ROTATE_HORIZONTAL_AXIS;
        this.w = true;
        this.y = "http://i.w.inmobi.com/showad.asm";
        this.B = new BannerView$d(this);
        this.C = (Animation$AnimationListener)new d(this);
        this.D = new c(this);
        this.E = new b(this);
        this.F = true;
    }
    
    public BannerView(final Context context, final AttributeSet set) {
        super(context, set);
        this.f = true;
        this.h = new AtomicBoolean();
        this.i = new AtomicBoolean();
        this.l = null;
        this.m = null;
        this.o = new AdRequest();
        this.r = -1L;
        this.s = 0L;
        this.t = 0L;
        this.u = true;
        this.v = AnimationType.ROTATE_HORIZONTAL_AXIS;
        this.w = true;
        this.y = "http://i.w.inmobi.com/showad.asm";
        this.B = new BannerView$d(this);
        this.C = (Animation$AnimationListener)new d(this);
        this.D = new c(this);
        this.E = new b(this);
        this.F = true;
        if (set == null) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Missing attributes in xml layout of IMAdview ");
            return;
        }
        final String attributeValue = set.getAttributeValue((String)null, "appId");
        final int attributeIntValue = set.getAttributeIntValue((String)null, "adSize", -1);
        final String attributeValue2 = set.getAttributeValue((String)null, "slotId");
        if (attributeValue2 != null) {
            this.r = Long.parseLong(attributeValue2);
        }
        this.a((Activity)context, attributeIntValue, attributeValue);
    }
    
    private void a(final int n) {
        if (n < 0) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Invalid Ad Size. Please provide a valid Ad Size. If Ad Size is declared in the layout XML, please provide a valid 'adSize' attribute in the 'com.inmobi.androidsdk.IMAdView' tag of layout XML. For example, adSize=\"yourAdSize\"");
        }
    }
    
    private void a(final int n, final AdRequest$ErrorCode adRequest$ErrorCode) {
        if (!this.F) {
            this.e.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    BannerView.this.disableHardwareAcceleration();
                }
            });
        }
        if (!this.w) {
            Log.debug("[InMobi]-[Network]-4.4.3", "IMAdView not sending callback because the view is not added to any window.");
        }
        else if (this.n != null) {
            this.e.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    Label_0269: {
                        Label_0252: {
                            Label_0235: {
                                Label_0218: {
                                    Label_0201: {
                                        try {
                                            switch (n) {
                                                default: {
                                                    Log.debug("[InMobi]-[Network]-4.4.3", adRequest$ErrorCode.toString());
                                                    return;
                                                }
                                                case 100: {
                                                    BannerView.this.n.onAdRequestCompleted(BannerView.this);
                                                    return;
                                                }
                                                case 101: {
                                                    break;
                                                }
                                                case 103: {
                                                    break Label_0201;
                                                }
                                                case 102: {
                                                    break Label_0218;
                                                }
                                                case 104: {
                                                    break Label_0235;
                                                }
                                                case 105: {
                                                    break Label_0252;
                                                }
                                                case 106: {
                                                    break Label_0269;
                                                }
                                            }
                                        }
                                        catch (Exception ex) {
                                            Log.debug("[InMobi]-[Network]-4.4.3", "Exception giving callback to the publisher ", ex);
                                            return;
                                        }
                                        switch (BannerView$c.a[adRequest$ErrorCode.ordinal()]) {
                                            default: {
                                                Log.debug("[InMobi]-[Network]-4.4.3", adRequest$ErrorCode.toString());
                                                break;
                                            }
                                            case 1: {
                                                Log.debug("[InMobi]-[Network]-4.4.3", "Ad click in progress. Your request cannot be processed at this time. Try again later.");
                                                break;
                                            }
                                            case 2: {
                                                Log.debug("[InMobi]-[Network]-4.4.3", "Ad download in progress. Your request cannot be processed at this time. Try again later.");
                                                break;
                                            }
                                            case 3: {
                                                Log.debug("[InMobi]-[Network]-4.4.3", "Ad request successful, but no ad was returned due to lack of ad inventory.");
                                                break;
                                            }
                                            case 4: {
                                                Log.debug("[InMobi]-[Network]-4.4.3", "Your App Id may be invalid or inactive. Please verify the app ID");
                                                break;
                                            }
                                        }
                                        BannerView.this.n.onAdRequestFailed(BannerView.this, adRequest$ErrorCode);
                                        return;
                                    }
                                    BannerView.this.n.onDismissAdScreen(BannerView.this);
                                    return;
                                }
                                BannerView.this.n.onShowAdScreen(BannerView.this);
                                return;
                            }
                            BannerView.this.n.onLeaveApplication(BannerView.this);
                            return;
                        }
                        BannerView.this.n.onShowAdScreen(BannerView.this);
                        return;
                    }
                    BannerView.this.n.onDismissAdScreen(BannerView.this);
                }
            });
        }
    }
    
    private void a(final Activity activity, final int q, final String p3) {
        while (true) {
            try {
                SDKUtil.validateAdConfiguration((Context)activity);
                InternalSDKUtil.getUserAgent(activity.getApplicationContext());
                this.a(q);
                this.p = p3;
                this.q = q;
                this.e = SDKUtil.getRootActivity(activity);
                IMWebView.setIMAIController(IMAIController.class);
                InternalSDKUtil.printPublisherTestId();
                if (this.b == null) {
                    this.b = new IMWebView((Context)this.e, this.E, false, false);
                    if (!this.F) {
                        this.b.disableHardwareAcceleration();
                    }
                    this.b.addJavascriptInterface((Object)new IMAIController(this.b), "imaiController");
                }
                if (this.c == null) {
                    this.c = new IMWebView((Context)this.e, this.E, false, false);
                    if (!this.F) {
                        this.c.disableHardwareAcceleration();
                    }
                    final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-1, -1);
                    this.d = this.c;
                    this.addView((View)this.c, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
                    this.c.addJavascriptInterface((Object)new IMAIController(this.c), "imaiController");
                }
                this.d();
                this.x = new g(this, this.C);
                if (BannerView.a == null) {
                    BannerView.a = new ConnBroadcastReciever();
                }
                this.e.getApplicationContext().registerReceiver((BroadcastReceiver)BannerView.a, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
            }
            catch (ConfigException ex) {
                Log.internal("[InMobi]-[Network]-4.4.3", "IMConfigException occured while initializing interstitial while validating adView", ex);
                continue;
            }
            break;
        }
    }
    
    private void a(final String s) {
        if (s != null) {
            if (Build$VERSION.SDK_INT <= 8) {
                s.replaceAll("%", "%25");
            }
            IMWebView imWebView;
            if (this.i()) {
                if (this.b == null) {
                    this.b = new IMWebView((Context)this.e, this.E, false, false);
                    if (!this.F) {
                        this.b.disableHardwareAcceleration();
                    }
                }
                imWebView = this.b;
            }
            else {
                if (this.c == null) {
                    this.c = new IMWebView((Context)this.e, this.E, false, false);
                    if (!this.F) {
                        this.c.disableHardwareAcceleration();
                    }
                }
                imWebView = this.c;
            }
            imWebView.addJavascriptInterface((Object)new IMAIController(imWebView), "imaiController");
            imWebView.requestOnPageFinishedCallback(this.B.obtainMessage(101));
            this.s = System.currentTimeMillis();
            this.B.sendEmptyMessageDelayed(108, (long)Initializer.getConfigParams().getRenderTimeOut());
            imWebView.resetMraid();
            imWebView.loadDataWithBaseURL("", s, "text/html", null, null);
            return;
        }
        this.a(false);
        Log.debug("[InMobi]-[Network]-4.4.3", "Cannot load Ad. Invalid Ad Response");
        this.a(101, AdRequest$ErrorCode.INTERNAL_ERROR);
    }
    
    private void a(final boolean b) {
        this.h.set(b);
    }
    
    private void b(final boolean b) {
        this.i.set(b);
    }
    
    private void c() {
        while (true) {
            int n = 320;
            final float density = this.e.getResources().getDisplayMetrics().density;
            while (true) {
                Label_0185: {
                    try {
                        int n2 = 0;
                        switch (this.q) {
                            case 9: {
                                n2 = 48;
                                break;
                            }
                            case 10: {
                                n = 300;
                                n2 = 250;
                                break;
                            }
                            case 11: {
                                n = 729;
                                n2 = 90;
                                break;
                            }
                            case 12: {
                                n = 468;
                                n2 = 60;
                                break;
                            }
                            case 13: {
                                n = 120;
                                n2 = 600;
                                break;
                            }
                            case 15: {
                                n2 = 50;
                                break;
                            }
                            default: {
                                break Label_0185;
                            }
                        }
                        if (n != 0 && n2 != 0) {
                            final int width = (int)(density * n);
                            this.getLayoutParams().height = (int)(density * n2);
                            this.getLayoutParams().width = width;
                            this.setLayoutParams(this.getLayoutParams());
                        }
                        return;
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[Network]-4.4.3", "Cannot set default size for adview", ex);
                        return;
                    }
                }
                int n2 = 0;
                n = 0;
                continue;
            }
        }
    }
    
    private void c(final boolean f) {
        this.f = f;
        if (f) {
            this.b.deinit();
            this.b = null;
            return;
        }
        this.c.deinit();
        this.c = null;
    }
    
    private void d() {
        while (true) {
            if (this.g != null) {
                break Label_0174;
            }
            this.g = new UserInfo(this.e);
            final DisplayMetrics displayMetrics = new DisplayMetrics();
            this.e.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            final float density = displayMetrics.density;
            final Display defaultDisplay = ((WindowManager)this.e.getSystemService("window")).getDefaultDisplay();
            final int n = (int)(WrapperFunctions.getDisplayWidth(defaultDisplay) / density);
            final int n2 = (int)(WrapperFunctions.getDisplayHeight(defaultDisplay) / density);
            this.g.setScreenDensity(String.valueOf(density));
            this.g.setScreenSize(n + "X" + n2);
            try {
                if (this.b != null && this.g.getPhoneDefaultUserAgent().equals("")) {
                    this.g.setPhoneDefaultUserAgent(InternalSDKUtil.getUserAgent(this.e.getApplicationContext()));
                }
                this.g.setAdUnitSlot(String.valueOf(this.q));
                if (this.r != -1L) {
                    this.g.setSlotId(Long.toString(this.r));
                }
                this.g.updateInfo(this.p, this.o);
            }
            catch (Exception ex) {
                Log.debug("[InMobi]-[Network]-4.4.3", "Exception occured while setting user agent" + ex);
                continue;
            }
            break;
        }
    }
    
    private void e() {
        try {
            this.removeAllViews();
            if (this.i()) {
                final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-1, -1);
                this.d = this.b;
                this.addView((View)this.b, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
            }
            else {
                final RelativeLayout$LayoutParams relativeLayout$LayoutParams2 = new RelativeLayout$LayoutParams(-1, -1);
                this.d = this.c;
                this.addView((View)this.c, (ViewGroup$LayoutParams)relativeLayout$LayoutParams2);
            }
            final boolean i = this.i();
            boolean b = false;
            if (!i) {
                b = true;
            }
            this.c(b);
            this.a(false);
            this.j();
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Error swapping banner ads", ex);
        }
        finally {
            this.a(100, null);
        }
    }
    
    private boolean f() {
        if (this.q < 0) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Invalid Ad Size. Please provide a valid adSize.");
            return false;
        }
        return true;
    }
    
    private boolean g() {
        return this.h.get();
    }
    
    private boolean h() {
        if (this.i.get()) {
            return true;
        }
        IMWebView imWebView;
        if (this.i()) {
            imWebView = this.c;
        }
        else {
            imWebView = this.b;
        }
        final String state = imWebView.getState();
        Log.debug("[InMobi]-[Network]-4.4.3", "Current Ad State: " + state);
        if (IMWebView$ViewState.EXPANDED.toString().equalsIgnoreCase(state) || IMWebView$ViewState.RESIZED.toString().equalsIgnoreCase(state) || IMWebView$ViewState.RESIZING.toString().equalsIgnoreCase(state) || IMWebView$ViewState.EXPANDING.toString().equalsIgnoreCase(state)) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Current Ad State is neither default nor loading. New ad will not be shown.");
            return true;
        }
        if (imWebView.isBusy()) {
            Log.debug("[InMobi]-[Network]-4.4.3", "New ad will not be shown because the present ad is busy. Eg. Video/audio is playing, etc.");
            return true;
        }
        return false;
    }
    
    private boolean i() {
        return this.f;
    }
    
    private void j() {
        try {
            if (this.c != null) {
                this.c.setBackgroundColor(0);
            }
            if (this.b != null) {
                this.b.setBackgroundColor(0);
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Error setNormalBGColor", ex);
        }
    }
    
    final Animation a() {
        return this.j;
    }
    
    final void a(final Animation j) {
        this.j = j;
    }
    
    final Animation b() {
        return this.k;
    }
    
    final void b(final Animation k) {
        this.k = k;
    }
    
    public final void destroy() {
        while (true) {
            try {
                if (this.d != null) {
                    this.d.destroy();
                }
                this.d = null;
            }
            catch (Exception ex) {
                Log.debug("[InMobi]-[Network]-4.4.3", "Unable to destroy webview, or it has been destroyed already.");
                continue;
            }
            break;
        }
    }
    
    public final void disableHardwareAcceleration() {
        this.F = false;
        if (this.d != null) {
            this.d.disableHardwareAcceleration();
        }
    }
    
    public final int getAdSize() {
        return this.q;
    }
    
    public final RelativeLayout$LayoutParams getAdViewPosition() {
        final int[] array = new int[2];
        RelativeLayout$LayoutParams relativeLayout$LayoutParams2;
        if (this.d == null || this.d.getLayoutParams() == null || this.d.getParent() == this) {
            final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(this.getLayoutParams());
            relativeLayout$LayoutParams.width = this.getWidth();
            relativeLayout$LayoutParams.height = this.getHeight();
            this.getLocationOnScreen(array);
            relativeLayout$LayoutParams.leftMargin = array[0];
            relativeLayout$LayoutParams.topMargin = array[1];
            relativeLayout$LayoutParams2 = relativeLayout$LayoutParams;
        }
        else {
            final RelativeLayout$LayoutParams relativeLayout$LayoutParams3 = new RelativeLayout$LayoutParams(this.d.getLayoutParams());
            relativeLayout$LayoutParams3.width = this.d.getWidth();
            relativeLayout$LayoutParams3.height = this.d.getHeight();
            this.d.getLocationOnScreen(array);
            relativeLayout$LayoutParams3.leftMargin = array[0];
            relativeLayout$LayoutParams3.topMargin = array[1];
            relativeLayout$LayoutParams2 = relativeLayout$LayoutParams3;
        }
        ((FrameLayout)this.getRootView().findViewById(16908290)).getLocationOnScreen(array);
        relativeLayout$LayoutParams2.leftMargin -= array[0];
        relativeLayout$LayoutParams2.topMargin -= array[1];
        relativeLayout$LayoutParams2.rightMargin = 0;
        relativeLayout$LayoutParams2.bottomMargin = 0;
        return relativeLayout$LayoutParams2;
    }
    
    public final String getAppId() {
        return this.p;
    }
    
    public final BannerViewListener getIMAdListener() {
        return this.n;
    }
    
    public final AdRequest getIMAdRequest() {
        return this.o;
    }
    
    public final long getSlotId() {
        return this.r;
    }
    
    public final boolean isModal() {
        return this.d != null && this.d.isModal();
    }
    
    public final void loadNewAd() {
        while (true) {
            Label_0096: {
                synchronized (this) {
                    this.z = new RequestResponseManager();
                    this.A = Initializer.getLogger().startNewSample();
                    InternalSDKUtil.printPublisherTestId();
                    Log.debug("[InMobi]-[Network]-4.4.3", " >>>> Start loading new Ad <<<<");
                    try {
                        if (!InternalSDKUtil.checkNetworkAvailibility(this.e.getApplicationContext())) {
                            this.a(101, AdRequest$ErrorCode.NETWORK_ERROR);
                        }
                        else {
                            if (!this.g()) {
                                break Label_0096;
                            }
                            this.a(101, AdRequest$ErrorCode.AD_DOWNLOAD_IN_PROGRESS);
                        }
                    }
                    catch (Exception ex) {
                        Log.debug("[InMobi]-[Network]-4.4.3", "Error in loading ad ", ex);
                    }
                    return;
                }
            }
            if (this.h()) {
                this.a(101, AdRequest$ErrorCode.AD_CLICK_IN_PROGRESS);
                return;
            }
            if (!this.f()) {
                this.a(101, AdRequest$ErrorCode.INVALID_REQUEST);
                return;
            }
            CARB.getInstance().startCarb();
            this.a(true);
            this.d();
            this.t = System.currentTimeMillis();
            this.B.sendEmptyMessageDelayed(107, (long)Initializer.getConfigParams().getFetchTimeOut());
            this.z.asyncRequestSecuredAd(this.g, RequestResponseManager$ActionType.AdRequest, this.y, this.D);
        }
    }
    
    public final void loadNewAd(final AdRequest o) {
        if (o != null) {
            this.o = o;
        }
        this.loadNewAd();
    }
    
    protected final void onAttachedToWindow() {
        Log.debug("[InMobi]-[Network]-4.4.3", "onAttachedToWindow");
        this.w = true;
        this.c();
    }
    
    protected final void onDetachedFromWindow() {
        Log.debug("[InMobi]-[Network]-4.4.3", "onDetatchedFromWindow");
        this.w = false;
        IMWebView imWebView;
        if (this.i()) {
            imWebView = this.c;
        }
        else {
            imWebView = this.b;
        }
        if (imWebView != null) {
            imWebView.deinit();
        }
    }
    
    protected final void onWindowVisibilityChanged(final int n) {
        super.onWindowVisibilityChanged(n);
        if (n != 0) {
            return;
        }
        try {
            final RequestResponseManager requestResponseManager = new RequestResponseManager();
            requestResponseManager.init();
            requestResponseManager.processClick(this.e.getApplicationContext(), null);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Exception ping in background", ex);
        }
    }
    
    @Deprecated
    public final void setAdBackgroundColor(final String s) {
    }
    
    @Deprecated
    public final void setAdBackgroundGradientColor(final String s, final String s2) {
    }
    
    public final void setAdServerUrl(final String y) {
        this.y = y;
    }
    
    public final void setAdSize(final int q) {
        this.a(q);
        this.q = q;
    }
    
    @Deprecated
    public final void setAdTextColor(final String s) {
    }
    
    public final void setAnimationType(final AnimationType v) {
        this.v = v;
    }
    
    public final void setAppId(final String p) {
        this.p = p;
    }
    
    public final void setIMAdListener(final BannerViewListener n) {
        this.n = n;
    }
    
    public final void setIMAdRequest(final AdRequest o) {
        this.o = o;
    }
    
    public final void setRefTagParam(final String s, final String s2) {
        if (s == null || s2 == null) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Key or Value cannot be null");
        }
        else {
            if (s.trim().equals("") || s2.trim().equals("")) {
                Log.debug("[InMobi]-[Network]-4.4.3", "Key or Value cannot be empty");
                return;
            }
            if (this.g != null) {
                this.g.setRefTagKey(s.toLowerCase(Locale.ENGLISH));
                this.g.setRefTagValue(s2.toLowerCase(Locale.ENGLISH));
            }
        }
    }
    
    public final void setSlotId(final long r) {
        this.r = r;
    }
    
    public final void stopLoading() {
        if (this.B.hasMessages(107)) {
            this.B.removeMessages(107);
            this.B.sendEmptyMessage(107);
        }
        else if (this.B.hasMessages(108)) {
            this.B.removeMessages(108);
            this.B.sendEmptyMessage(108);
        }
    }
}
