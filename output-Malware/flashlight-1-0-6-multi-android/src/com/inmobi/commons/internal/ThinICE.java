// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import com.inmobi.commons.thinICE.icedatacollector.ThinICEConfigSettings;
import com.inmobi.commons.analytics.bootstrapper.ThinICEConfig;
import com.inmobi.commons.cache.RetryMechanism$RetryRunnable;
import com.inmobi.commons.cache.RetryMechanism;
import java.io.OutputStreamWriter;
import java.net.URL;
import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import java.net.HttpURLConnection;
import java.util.List;
import android.annotation.SuppressLint;
import com.inmobi.commons.thinICE.icedatacollector.IceDataCollector;
import android.os.Build$VERSION;
import android.content.Context;
import java.util.Timer;
import com.inmobi.commons.thinICE.icedatacollector.ThinICEListener;

public final class ThinICE
{
    private static boolean a;
    private static ThinICEListener b;
    private static Timer c;
    
    static {
        ThinICE.a = false;
        ThinICE.b = new c();
        ThinICE.c = new Timer();
    }
    
    @SuppressLint({ "NewApi" })
    private static void a(final Context context) {
        if (!ThinICE.a && context == null) {
            throw new CommonsException(1);
        }
        if (!ThinICE.a) {
            if (Build$VERSION.SDK_INT >= 14) {
                ApplicationFocusManager.init(context);
                ApplicationFocusManager.addFocusChangedListener(new ApplicationFocusManager$FocusChangedListener() {
                    @Override
                    public final void onFocusChanged(final boolean b) {
                        if (b) {
                            IceDataCollector.start(InternalSDKUtil.getContext());
                            return;
                        }
                        b();
                    }
                });
                IceDataCollector.start(context.getApplicationContext());
            }
            else {
                IceDataCollector.setListener(ThinICE.b);
            }
            ThinICE.a = true;
        }
        InternalSDKUtil.initialize(context.getApplicationContext());
    }
    
    private static void b() {
        final List data = IceDataCollector.getData();
        IceDataCollector.stop();
        b(data);
        ActivityRecognitionSampler.stop();
    }
    
    private static void b(final String s) {
        final HttpURLConnection httpURLConnection = (HttpURLConnection)new URL(AnalyticsInitializer.getConfigParams().getThinIceConfig().getEndpointUrl()).openConnection();
        InternalSDKUtil.addCommonPropertiesToConnection(httpURLConnection);
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setDoInput(false);
        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(httpURLConnection.getOutputStream());
        outputStreamWriter.write(s);
        outputStreamWriter.flush();
        outputStreamWriter.close();
        httpURLConnection.getResponseCode();
    }
    
    private static void b(final List list) {
        if (list.size() == 0 && ActivityRecognitionSampler.getCollectedList().size() == 0) {
            Log.internal("[InMobi]-4.4.3", "No ThinICE data is collected. NoOp.");
            return;
        }
        if (!AnalyticsInitializer.getConfigParams().getThinIceConfig().isEnabled()) {
            Log.internal("[InMobi]-4.4.3", "ThisICE disabled. Not sending data. NoOp.");
            return;
        }
        final RetryMechanism retryMechanism = new RetryMechanism((int)AnalyticsInitializer.getConfigParams().getThinIceConfig().getMaxRetry(), 1000 * (int)AnalyticsInitializer.getConfigParams().getThinIceConfig().getRetryInterval(), ThinICE.c);
        final String payloadString = new JSONPayloadCreator().toPayloadString(list, ActivityRecognitionSampler.getCollectedList(), InternalSDKUtil.getContext());
        Log.internal("[InMobi]-4.4.3", "Sending " + list.size() + " ThinICE params to server " + payloadString);
        retryMechanism.rescheduleTimer(new RetryMechanism$RetryRunnable() {
            @Override
            public final void completed() {
            }
            
            @Override
            public final void run() {
                Log.internal("[InMobi]-4.4.3", "Sending ThinICE data to server " + AnalyticsInitializer.getConfigParams().getThinIceConfig().getEndpointUrl());
                if (InternalSDKUtil.checkNetworkAvailibility(InternalSDKUtil.getContext())) {
                    b(payloadString);
                    return;
                }
                throw new Exception("Device not connected.");
            }
        });
    }
    
    public static void setConfig(final ThinICEConfig thinICEConfig) {
        if (thinICEConfig != null) {
            final ThinICEConfigSettings config = new ThinICEConfigSettings();
            config.setEnabled(thinICEConfig.isEnabled());
            config.setSampleCellEnabled(thinICEConfig.isCellEnabled());
            config.setSampleCellOperatorEnabled(thinICEConfig.isOperatorEnabled());
            config.setSampleConnectedWifiEnabled(thinICEConfig.isConnectedWifiEnabled());
            config.setSampleHistorySize(thinICEConfig.getSampleHistorySize());
            config.setSampleInterval(1000L * thinICEConfig.getSampleInterval());
            config.setSampleLocationEnabled(true);
            config.setSampleVisibleWifiEnabled(thinICEConfig.isVisibleWifiEnabled());
            config.setStopRequestTimeout(1000L * thinICEConfig.getStopRequestTimeout());
            config.setWifiFlags(thinICEConfig.getWifiFlags());
            config.setCellOpFlags(thinICEConfig.getCellOpsFlag());
            IceDataCollector.setConfig(config);
        }
    }
    
    public static void start(final Context context) {
        if (!InternalSDKUtil.isInitializedSuccessfully(false)) {
            return;
        }
        a(context);
        if (Build$VERSION.SDK_INT < 14) {
            IceDataCollector.start(context);
        }
        ActivityRecognitionSampler.start();
    }
    
    public static void stop(final Context context) {
        a(context);
        if (Build$VERSION.SDK_INT < 14) {
            b();
        }
    }
}
