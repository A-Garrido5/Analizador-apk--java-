// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import java.util.Map;
import com.inmobi.commons.thinICE.cellular.CellOperatorInfo;
import com.inmobi.commons.uid.UID;
import com.inmobi.commons.uid.UIDUtil;
import java.util.Calendar;
import com.inmobi.commons.thinICE.icedatacollector.ThinICEConfigSettings;
import com.inmobi.commons.thinICE.cellular.CellUtil;
import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import android.content.Context;
import java.util.List;
import com.inmobi.commons.data.LocationInfo;
import java.util.Iterator;
import org.json.JSONException;
import com.inmobi.commons.thinICE.wifi.WifiInfo;
import org.json.JSONArray;
import com.inmobi.commons.analytics.bootstrapper.ThinICEConfig;
import com.inmobi.commons.thinICE.icedatacollector.Sample;
import com.inmobi.commons.thinICE.cellular.CellTowerInfo;
import org.json.JSONObject;

public class JSONPayloadCreator implements PayloadCreator
{
    private JSONObject a(final ActivityRecognitionSampler$ActivitySample activityRecognitionSampler$ActivitySample) {
        try {
            final JSONObject jsonObject = new JSONObject();
            jsonObject.put("t", 3);
            jsonObject.put("ts", activityRecognitionSampler$ActivitySample.getTimestamp());
            jsonObject.put("a", activityRecognitionSampler$ActivitySample.getActivity());
            return jsonObject;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    private JSONObject a(final CellTowerInfo cellTowerInfo) {
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("id", (Object)cellTowerInfo.id);
            if (cellTowerInfo.signalStrength != 0) {
                jsonObject.put("ss", cellTowerInfo.signalStrength);
            }
            return jsonObject;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    private JSONObject a(final Sample sample, final ThinICEConfig thinICEConfig) {
        try {
            final JSONObject jsonObject = new JSONObject();
            jsonObject.put("t", 1);
            if (thinICEConfig.isConnectedWifiEnabled()) {
                jsonObject.put("c-ap", (Object)this.a(sample.connectedWifiAp));
            }
            if (thinICEConfig.isCellEnabled()) {
                jsonObject.put("c-sc", (Object)this.a(sample.connectedCellTowerInfo));
            }
            if (thinICEConfig.isVisibleWifiEnabled()) {
                final JSONArray jsonArray = new JSONArray();
                if (sample.visibleWifiAp != null) {
                    final Iterator<WifiInfo> iterator = sample.visibleWifiAp.iterator();
                    while (iterator.hasNext()) {
                        final JSONObject a = this.a(iterator.next());
                        if (a != null) {
                            jsonArray.put((Object)a);
                        }
                    }
                }
                if (jsonArray.length() > 0) {
                    jsonObject.put("v-ap", (Object)jsonArray);
                }
            }
            if (jsonObject.length() > 1) {
                jsonObject.put("ts", sample.utc);
                return jsonObject;
            }
            return null;
        }
        catch (JSONException ex) {
            return null;
        }
    }
    
    private JSONObject a(final WifiInfo wifiInfo) {
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("bssid", wifiInfo.bssid);
            jsonObject.put("essid", (Object)wifiInfo.ssid);
            return jsonObject;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    public static String currentLocationStr() {
        final StringBuilder sb = new StringBuilder();
        if (LocationInfo.isValidGeoInfo()) {
            sb.append(LocationInfo.getLat());
            sb.append(",");
            sb.append(LocationInfo.getLon());
            sb.append(",");
            sb.append((int)LocationInfo.getLocAccuracy());
            return sb.toString();
        }
        return "";
    }
    
    @Override
    public String toPayloadString(final List list, final List list2, final Context context) {
        final JSONObject jsonObject = new JSONObject();
        final JSONArray jsonArray = new JSONArray();
        final ThinICEConfig thinIceConfig = AnalyticsInitializer.getConfigParams().getThinIceConfig();
        for (final Sample sample : list) {
            if (sample != null) {
                final JSONObject a = this.a(sample, thinIceConfig);
                if (a == null) {
                    continue;
                }
                jsonArray.put((Object)a);
            }
        }
        for (final ActivityRecognitionSampler$ActivitySample activityRecognitionSampler$ActivitySample : list2) {
            if (activityRecognitionSampler$ActivitySample != null) {
                final JSONObject a2 = this.a(activityRecognitionSampler$ActivitySample);
                if (a2 == null) {
                    continue;
                }
                jsonArray.put((Object)a2);
            }
        }
        try {
            if (jsonArray.length() > 0) {
                jsonObject.put("payload", (Object)jsonArray);
            }
            final CellOperatorInfo cellNetworkInfo = CellUtil.getCellNetworkInfo(context);
            if (thinIceConfig.isOperatorEnabled()) {
                if (!ThinICEConfigSettings.bitTest(thinIceConfig.getCellOpsFlag(), 1) && (cellNetworkInfo.simMcc != -1 || cellNetworkInfo.simMnc != -1)) {
                    jsonObject.put("s-ho", (Object)(cellNetworkInfo.simMcc + "_" + cellNetworkInfo.simMnc));
                }
                if (!ThinICEConfigSettings.bitTest(thinIceConfig.getCellOpsFlag(), 2) && (cellNetworkInfo.currentMcc != -1 || cellNetworkInfo.currentMnc != -1)) {
                    jsonObject.put("s-co", (Object)(cellNetworkInfo.currentMcc + "_" + cellNetworkInfo.currentMnc));
                }
            }
            final Calendar instance = Calendar.getInstance();
            System.currentTimeMillis();
            jsonObject.put("tz", instance.get(15) + instance.get(16));
            jsonObject.put("ts", instance.getTimeInMillis());
            jsonObject.put("mk-version", (Object)("pr-SAND-" + InternalSDKUtil.getInMobiInternalVersion("4.4.3") + "-20140730"));
            final String currentLocationStr = currentLocationStr();
            if (currentLocationStr != null && !"".equals(currentLocationStr)) {
                jsonObject.put("u-latlong-accu", (Object)currentLocationStr);
            }
            final Map map = UIDUtil.getMap(context, null);
            map.remove("ua");
            map.remove("s-ver");
            UIDUtil.bindToEncodedJSON(map, jsonObject);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            Log.internal("[InMobi]-4.4.3", "Unable to create payload for sending ThinICE params");
            return null;
        }
    }
}
