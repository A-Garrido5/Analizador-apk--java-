// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import android.graphics.Bitmap;
import android.net.http.SslError;
import java.lang.reflect.Field;
import android.content.pm.ActivityInfo;
import java.lang.reflect.Method;
import android.graphics.Point;
import android.view.Display;
import android.view.WindowManager;
import android.os.Build$VERSION;
import android.content.Context;
import java.lang.reflect.InvocationTargetException;
import android.graphics.Paint;
import android.webkit.WebView;

public class WrapperFunctions
{
    private static int a;
    
    private static void a(final WebView webView, final int n) {
        try {
            webView.getClass().getMethod("setLayerType", Integer.TYPE, Paint.class).invoke(webView, n, null);
        }
        catch (NoSuchMethodException ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot set hardware accl", ex);
        }
        catch (IllegalArgumentException ex2) {
            Log.internal("[InMobi]-4.4.3", "Cannot set hardware accl", ex2);
        }
        catch (IllegalAccessException ex3) {
            Log.internal("[InMobi]-4.4.3", "Cannot set hardware accl", ex3);
        }
        catch (InvocationTargetException ex4) {
            Log.internal("[InMobi]-4.4.3", "Cannot set hardware accl", ex4);
        }
    }
    
    public static void disableHardwareAccl(final WebView webView) {
        a(webView, 1);
    }
    
    public static int getCurrentOrientationInFixedValues(final Context context) {
        switch (context.getResources().getConfiguration().orientation) {
            default: {
                return 1;
            }
            case 1: {
                if (Build$VERSION.SDK_INT < 8) {
                    return 1;
                }
                final int rotation = ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getRotation();
                if (rotation == 1 || rotation == 2) {
                    return 9;
                }
                return 1;
            }
            case 2: {
                if (Build$VERSION.SDK_INT < 8) {
                    return 0;
                }
                final int rotation2 = ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getRotation();
                if (rotation2 == 0 || rotation2 == 1) {
                    return 0;
                }
                return 8;
            }
        }
    }
    
    public static int getDisplayHeight(final Display display) {
        final Class[] array = { Point.class };
        Label_0106: {
            Method method;
            while (true) {
                try {
                    method = Display.class.getMethod("getSize", (Class<?>[])array);
                    final boolean b = true;
                    if (b) {
                        final Point point = new Point();
                        final Method method2 = method;
                        final Display display2 = display;
                        final int n = 1;
                        final Object[] array2 = new Object[n];
                        final int n2 = 0;
                        final Point point2 = point;
                        array2[n2] = point2;
                        method2.invoke(display2, array2);
                        final Point point3 = point;
                        final int y = point3.y;
                        return y;
                    }
                    break Label_0106;
                }
                catch (NoSuchMethodException ex5) {
                    try {
                        method = Display.class.getMethod("getHeight", (Class<?>[])null);
                        final boolean b = false;
                    }
                    catch (NoSuchMethodException ex) {
                        Log.internal("[InMobi]-4.4.3", "Cannot get display height", ex);
                        method = null;
                        final boolean b = false;
                    }
                    continue;
                }
                break;
            }
            try {
                final Point point = new Point();
                final Method method2 = method;
                final Display display2 = display;
                final int n = 1;
                final Object[] array2 = new Object[n];
                final int n2 = 0;
                final Point point2 = point;
                array2[n2] = point2;
                method2.invoke(display2, array2);
                final Point point3 = point;
                final int y2;
                final int y = y2 = point3.y;
                return y2;
                return (int)method.invoke(display, (Object[])null);
            }
            catch (IllegalArgumentException ex2) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display height", ex2);
                return 0;
            }
            catch (IllegalAccessException ex3) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display height", ex3);
                return 0;
            }
            catch (InvocationTargetException ex4) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display height", ex4);
                return 0;
            }
        }
    }
    
    public static int getDisplayWidth(final Display display) {
        final Class[] array = { Point.class };
        Label_0106: {
            Method method;
            while (true) {
                try {
                    method = Display.class.getMethod("getSize", (Class<?>[])array);
                    final boolean b = true;
                    if (b) {
                        final Point point = new Point();
                        final Method method2 = method;
                        final Display display2 = display;
                        final int n = 1;
                        final Object[] array2 = new Object[n];
                        final int n2 = 0;
                        final Point point2 = point;
                        array2[n2] = point2;
                        method2.invoke(display2, array2);
                        final Point point3 = point;
                        final int x = point3.x;
                        return x;
                    }
                    break Label_0106;
                }
                catch (NoSuchMethodException ex5) {
                    try {
                        method = Display.class.getMethod("getWidth", (Class<?>[])null);
                        final boolean b = false;
                    }
                    catch (NoSuchMethodException ex) {
                        Log.internal("[InMobi]-4.4.3", "Cannot get display width", ex);
                        method = null;
                        final boolean b = false;
                    }
                    continue;
                }
                break;
            }
            try {
                final Point point = new Point();
                final Method method2 = method;
                final Display display2 = display;
                final int n = 1;
                final Object[] array2 = new Object[n];
                final int n2 = 0;
                final Point point2 = point;
                array2[n2] = point2;
                method2.invoke(display2, array2);
                final Point point3 = point;
                final int x2;
                final int x = x2 = point3.x;
                return x2;
                return (int)method.invoke(display, (Object[])null);
            }
            catch (IllegalArgumentException ex2) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display width", ex2);
                return 0;
            }
            catch (IllegalAccessException ex3) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display width", ex3);
                return 0;
            }
            catch (InvocationTargetException ex4) {
                Log.internal("[InMobi]-4.4.3", "Cannot get display width", ex4);
                return 0;
            }
        }
    }
    
    public static int getParamConfigScreenSize() {
        final ActivityInfo activityInfo = new ActivityInfo();
        try {
            final Field field = ActivityInfo.class.getField("CONFIG_SCREEN_SIZE");
            int int1 = 0;
            if (field != null) {
                int1 = field.getInt(activityInfo);
            }
            return int1;
        }
        catch (NoSuchFieldException ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get screen size", ex);
            return 0;
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-4.4.3", "Cannot get screen size", ex2);
            return 0;
        }
    }
    
    public static int getParamConfigSmallestScreenSize() {
        final ActivityInfo activityInfo = new ActivityInfo();
        try {
            final Field field = ActivityInfo.class.getField("CONFIG_SMALLEST_SCREEN_SIZE");
            int int1 = 0;
            if (field != null) {
                int1 = field.getInt(activityInfo);
            }
            return int1;
        }
        catch (NoSuchFieldException ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get smallest screen size", ex);
            return 0;
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-4.4.3", "Cannot get smallest screen size", ex2);
            return 0;
        }
    }
    
    public static int getParamFillParent() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/inmobi/commons/internal/WrapperFunctions.a:I
        //     3: ifne            55
        //     6: ldc             Lcom/inmobi/commons/internal/WrapperFunctions;.class
        //     8: monitorenter   
        //     9: getstatic       com/inmobi/commons/internal/WrapperFunctions.a:I
        //    12: ifne            52
        //    15: new             Landroid/view/ViewGroup$LayoutParams;
        //    18: dup            
        //    19: iconst_1       
        //    20: iconst_1       
        //    21: invokespecial   android/view/ViewGroup$LayoutParams.<init>:(II)V
        //    24: astore_1       
        //    25: ldc             Landroid/view/ViewGroup$LayoutParams;.class
        //    27: ldc             "MATCH_PARENT"
        //    29: invokevirtual   java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
        //    32: astore          7
        //    34: aload           7
        //    36: astore          4
        //    38: aload           4
        //    40: ifnull          52
        //    43: aload           4
        //    45: aload_1        
        //    46: invokevirtual   java/lang/reflect/Field.getInt:(Ljava/lang/Object;)I
        //    49: putstatic       com/inmobi/commons/internal/WrapperFunctions.a:I
        //    52: ldc             Lcom/inmobi/commons/internal/WrapperFunctions;.class
        //    54: monitorexit    
        //    55: getstatic       com/inmobi/commons/internal/WrapperFunctions.a:I
        //    58: ireturn        
        //    59: astore_2       
        //    60: ldc             Landroid/view/ViewGroup$LayoutParams;.class
        //    62: ldc             "FILL_PARENT"
        //    64: invokevirtual   java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
        //    67: astore          6
        //    69: aload           6
        //    71: astore          4
        //    73: goto            38
        //    76: astore_3       
        //    77: ldc             "[InMobi]-4.4.3"
        //    79: ldc             "Cannot get fill parent param"
        //    81: aload_3        
        //    82: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //    85: aconst_null    
        //    86: astore          4
        //    88: goto            38
        //    91: astore          5
        //    93: ldc             "[InMobi]-4.4.3"
        //    95: ldc             "Cannot get fill parent param"
        //    97: aload           5
        //    99: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   102: goto            52
        //   105: astore_0       
        //   106: ldc             Lcom/inmobi/commons/internal/WrapperFunctions;.class
        //   108: monitorexit    
        //   109: aload_0        
        //   110: athrow         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                            
        //  -----  -----  -----  -----  --------------------------------
        //  9      25     105    111    Any
        //  25     34     59     91     Ljava/lang/NoSuchFieldException;
        //  25     34     105    111    Any
        //  43     52     91     105    Ljava/lang/Exception;
        //  43     52     105    111    Any
        //  52     55     105    111    Any
        //  60     69     76     91     Ljava/lang/NoSuchFieldException;
        //  60     69     105    111    Any
        //  77     85     105    111    Any
        //  93     102    105    111    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0052:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static int getParamLandscapeOrientation(final int n) {
        int int1 = 0;
        if (n != 3) {
            return int1;
        }
        final ActivityInfo activityInfo = new ActivityInfo();
        try {
            final Field field = ActivityInfo.class.getField("SCREEN_ORIENTATION_REVERSE_LANDSCAPE");
            int1 = 0;
            if (field != null) {
                int1 = field.getInt(activityInfo);
            }
            return int1;
        }
        catch (NoSuchFieldException ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get landscape orientation", ex);
            return 0;
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-4.4.3", "Cannot get landscape orientation", ex2);
            return 0;
        }
    }
    
    public static int getParamPortraitOrientation(final int n) {
        int int1 = 1;
        if (n != 2) {
            return int1;
        }
        final ActivityInfo activityInfo = new ActivityInfo();
        try {
            final Field field = ActivityInfo.class.getField("SCREEN_ORIENTATION_REVERSE_PORTRAIT");
            if (field != null) {
                int1 = field.getInt(activityInfo);
            }
            return int1;
        }
        catch (NoSuchFieldException ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get portrait orientation", ex);
            return int1;
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-4.4.3", "Cannot get portrait orientation", ex2);
            return int1;
        }
    }
    
    public static String getSSLErrorUrl(final SslError sslError) {
        try {
            return Class.forName("android.net.http.SslError").getDeclaredMethod("getUrl", (Class<?>[])new Class[0]).invoke(sslError, new Object[0]).toString();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get SSL Url", ex);
            return null;
        }
    }
    
    public static Bitmap getVideoBitmap(final String s) {
        try {
            return (Bitmap)Class.forName("android.media.ThumbnailUtils").getDeclaredMethod("createVideoThumbnail", String.class, Integer.TYPE).invoke(null, s, 1);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get video bitmap", ex);
            throw ex;
        }
    }
}
