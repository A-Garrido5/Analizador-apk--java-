// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import android.annotation.SuppressLint;
import android.content.Context;
import java.util.Iterator;
import android.annotation.TargetApi;
import java.lang.reflect.Proxy;
import java.lang.reflect.Method;
import android.app.Activity;
import android.os.Handler;
import java.lang.reflect.InvocationHandler;
import android.os.Build$VERSION;
import java.util.ArrayList;
import android.app.Application;
import android.os.HandlerThread;
import java.util.List;

public class ApplicationFocusManager
{
    protected static final int MSG_PAUSED = 1001;
    protected static final int MSG_RESUMED = 1002;
    private static List a;
    private static Object b;
    private static HandlerThread c;
    private static Application d;
    
    static {
        ApplicationFocusManager.a = new ArrayList();
        ApplicationFocusManager.c = null;
    }
    
    public static void addFocusChangedListener(final ApplicationFocusManager$FocusChangedListener applicationFocusManager$FocusChangedListener) {
        if (Build$VERSION.SDK_INT >= 14) {
            ApplicationFocusManager.a.add(applicationFocusManager$FocusChangedListener);
            if (ApplicationFocusManager.a.size() == 1) {
                b();
            }
        }
    }
    
    @TargetApi(14)
    private static void b() {
        while (true) {
            while (true) {
                int n = 0;
                Class<?> clazz2 = null;
                Label_0150: {
                    Class<?> clazz;
                    try {
                        (ApplicationFocusManager.c = new HandlerThread("InMobiAFM")).start();
                        final Class<?>[] declaredClasses = Application.class.getDeclaredClasses();
                        clazz = null;
                        final int length = declaredClasses.length;
                        n = 0;
                        if (n >= length) {
                            final Object proxyInstance = Proxy.newProxyInstance(clazz.getClassLoader(), new Class[] { clazz }, new InvocationHandler() {
                                private final Handler a = new ApplicationFocusManager$b(ApplicationFocusManager.c.getLooper());
                                
                                public final void a(final Activity activity) {
                                    this.a.sendEmptyMessageDelayed(1001, 3000L);
                                }
                                
                                public final void b(final Activity activity) {
                                    this.a.removeMessages(1001);
                                    this.a.sendEmptyMessage(1002);
                                }
                                
                                @Override
                                public final Object invoke(final Object o, final Method method, final Object[] array) {
                                    if (array != null) {
                                        try {
                                            if (method.getName().equals("onActivityPaused")) {
                                                this.a((Activity)array[0]);
                                            }
                                            else if (method.getName().equals("onActivityResumed")) {
                                                this.b((Activity)array[0]);
                                            }
                                        }
                                        catch (Exception ex) {
                                            Log.internal("[InMobi]-4.4.3", "Unable to invoke method", ex);
                                        }
                                    }
                                    return null;
                                }
                            });
                            if (proxyInstance != null) {
                                Application.class.getMethod("registerActivityLifecycleCallbacks", clazz).invoke(ApplicationFocusManager.d, proxyInstance);
                            }
                            return;
                        }
                        clazz2 = declaredClasses[n];
                        if (clazz2.getSimpleName().equalsIgnoreCase("ActivityLifecycleCallbacks")) {
                            (new Class[1])[0] = clazz2;
                            break Label_0150;
                        }
                    }
                    catch (Exception ex) {
                        ex.printStackTrace();
                        Log.internal("[InMobi]-4.4.3", "Cannot register activity lifecycle callbacks", ex);
                        return;
                    }
                    clazz2 = clazz;
                }
                ++n;
                Class<?> clazz = clazz2;
                continue;
            }
        }
    }
    
    private static void b(final Boolean b) {
        final Iterator<ApplicationFocusManager$FocusChangedListener> iterator = ApplicationFocusManager.a.iterator();
        while (iterator.hasNext()) {
            iterator.next().onFocusChanged(b);
        }
    }
    
    @TargetApi(14)
    private static void c() {
        try {
            if (ApplicationFocusManager.b != null) {
                Application.class.getMethod("unregisterActivityLifecycleCallbacks", (Class<?>[])null).invoke(ApplicationFocusManager.d, (Object[])ApplicationFocusManager.b);
            }
            ApplicationFocusManager.c.stop();
            ApplicationFocusManager.c = null;
        }
        catch (Exception ex) {
            ex.printStackTrace();
            Log.internal("[InMobi]-4.4.3", "Exception unregister app lifecycle callback", ex);
        }
    }
    
    @SuppressLint({ "NewApi" })
    public static void init(final Context context) {
        if (Build$VERSION.SDK_INT >= 14 && ApplicationFocusManager.d == null) {
            if (!(context instanceof Activity)) {
                ApplicationFocusManager.d = (Application)context.getApplicationContext();
                return;
            }
            ApplicationFocusManager.d = ((Activity)context).getApplication();
        }
    }
    
    public static void removeFocusChangedListener(final ApplicationFocusManager$FocusChangedListener applicationFocusManager$FocusChangedListener) {
        if (Build$VERSION.SDK_INT >= 14) {
            ApplicationFocusManager.a.remove(applicationFocusManager$FocusChangedListener);
            if (ApplicationFocusManager.a.size() == 0) {
                c();
            }
        }
    }
}
