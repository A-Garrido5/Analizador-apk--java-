// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import com.inmobi.commons.thinICE.icedatacollector.BuildSettings;

public class Log
{
    private static Log$INTERNAL_LOG_LEVEL a;
    
    static {
        Log.a = Log$INTERNAL_LOG_LEVEL.NOT_SET;
    }
    
    public static void debug(final String s, final String s2) {
        if (Log.a.getValue() >= Log$INTERNAL_LOG_LEVEL.DEBUG.getValue() || (Log.a == Log$INTERNAL_LOG_LEVEL.NOT_SET && CommonsConfig.getLogLevelConfig() >= Log$INTERNAL_LOG_LEVEL.DEBUG.getValue())) {
            android.util.Log.d(s, s2);
        }
    }
    
    public static void debug(final String s, final String s2, final Throwable t) {
        switch (Log$a.a[Log.a.ordinal()]) {
            default: {}
            case 1: {
                debug(s, s2);
            }
            case 2: {
                internal(s, s2, t);
            }
        }
    }
    
    public static Log$INTERNAL_LOG_LEVEL getLogLevel() {
        return Log.a;
    }
    
    public static Log$INTERNAL_LOG_LEVEL getLogLevelValue(final long n) {
        if (n == 2L) {
            return Log$INTERNAL_LOG_LEVEL.INTERNAL;
        }
        if (n == 1L) {
            return Log$INTERNAL_LOG_LEVEL.DEBUG;
        }
        return Log$INTERNAL_LOG_LEVEL.NONE;
    }
    
    public static void internal(final String s, final String s2) {
        if (Log.a.getValue() >= Log$INTERNAL_LOG_LEVEL.INTERNAL.getValue() || (Log.a == Log$INTERNAL_LOG_LEVEL.NOT_SET && CommonsConfig.getLogLevelConfig() >= Log$INTERNAL_LOG_LEVEL.INTERNAL.getValue())) {
            final StackTraceElement stackTraceElement = new Throwable().getStackTrace()[1];
            android.util.Log.v(s, stackTraceElement.getFileName() + ": " + stackTraceElement.getMethodName() + " " + s2);
        }
    }
    
    public static void internal(final String s, final String s2, final Throwable t) {
        if (Log.a.getValue() >= Log$INTERNAL_LOG_LEVEL.INTERNAL.getValue() || (Log.a == Log$INTERNAL_LOG_LEVEL.NOT_SET && CommonsConfig.getLogLevelConfig() >= Log$INTERNAL_LOG_LEVEL.INTERNAL.getValue())) {
            final StackTraceElement stackTraceElement = new Throwable().getStackTrace()[1];
            android.util.Log.e(s, stackTraceElement.getFileName() + ": " + stackTraceElement.getMethodName() + " " + s2, t);
        }
    }
    
    public static void setInternalLogLevel(final Log$INTERNAL_LOG_LEVEL a) {
        Log.a = a;
        if (a == Log$INTERNAL_LOG_LEVEL.INTERNAL) {
            BuildSettings.DEBUG = true;
        }
    }
    
    public static void verbose(final String s, final String s2) {
        if (Log.a.getValue() >= Log$INTERNAL_LOG_LEVEL.VERBOSE.getValue() || (Log.a == Log$INTERNAL_LOG_LEVEL.NOT_SET && CommonsConfig.getLogLevelConfig() >= Log$INTERNAL_LOG_LEVEL.VERBOSE.getValue())) {
            android.util.Log.i(s, s2);
        }
    }
    
    public static void verbose(final String s, final String s2, final Throwable t) {
        switch (Log$a.a[Log.a.ordinal()]) {
            default: {}
            case 1:
            case 3: {
                verbose(s, s2);
            }
            case 2: {
                internal(s, s2, t);
            }
        }
    }
}
