// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import java.util.Iterator;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import java.util.HashMap;
import org.json.JSONObject;
import com.inmobi.commons.metric.Storage$PreProcessor;

final class b implements Storage$PreProcessor
{
    @Override
    public final JSONObject process(final JSONObject jsonObject) {
        HashMap<Object, Integer> hashMap;
        while (true) {
            hashMap = (HashMap<Object, Integer>)new HashMap<Object, Object>();
            while (true) {
                int n = 0;
                Label_0223: {
                    try {
                        final JSONArray jsonArray = jsonObject.getJSONArray("payload");
                        n = 0;
                        if (n < jsonArray.length()) {
                            final int int1 = jsonArray.getJSONObject(n).getInt("t");
                            final Integer n2 = hashMap.get(int1);
                            if (n2 == null) {
                                hashMap.put(int1, 1);
                                break Label_0223;
                            }
                            hashMap.put(int1, 1 + n2);
                            break Label_0223;
                        }
                    }
                    catch (JSONException ex) {
                        Log.internal("[InMobi]-4.4.3", "Unable to aggregate data. Sending data as-is.");
                        return jsonObject;
                    }
                    break;
                }
                ++n;
                continue;
            }
        }
        final JSONArray jsonArray2 = new JSONArray();
        for (final Map.Entry<Integer, Integer> entry : hashMap.entrySet()) {
            final JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("t", (Object)entry.getKey());
            jsonObject2.put("v", (Object)entry.getValue());
            jsonArray2.put((Object)jsonObject2);
        }
        jsonObject.put("payload", (Object)jsonArray2);
        return jsonObject;
    }
}
