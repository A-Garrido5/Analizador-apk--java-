// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.internal;

import java.util.Iterator;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import com.inmobi.commons.uid.AdvertisingId;
import com.inmobi.commons.uid.UIDHelper;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.inmobi.commons.cache.CacheController;
import com.inmobi.commons.InMobi;
import android.webkit.WebView;
import android.os.Build$VERSION;
import java.lang.reflect.Method;
import android.view.Display;
import android.net.NetworkInfo;
import org.json.JSONException;
import org.json.JSONObject;
import android.net.ConnectivityManager;
import android.content.SharedPreferences$Editor;
import android.content.SharedPreferences;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.net.HttpURLConnection;
import java.security.InvalidAlgorithmParameterException;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.Mac;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import java.security.InvalidKeyException;
import javax.crypto.NoSuchPaddingException;
import java.security.spec.InvalidKeySpecException;
import java.security.NoSuchAlgorithmException;
import java.security.Key;
import javax.crypto.Cipher;
import java.security.spec.KeySpec;
import java.security.KeyFactory;
import java.security.interfaces.RSAPublicKey;
import java.math.BigInteger;
import java.nio.ByteOrder;
import java.nio.ByteBuffer;
import com.inmobi.commons.uid.UID;
import com.inmobi.commons.uid.UIDUtil;
import com.inmobi.commons.thirdparty.Base64;
import java.util.HashMap;
import com.inmobi.commons.cache.CacheController$Validator;
import java.util.Map;
import android.content.Context;

public class InternalSDKUtil
{
    public static final String BASE_LOG_TAG = "[InMobi]";
    public static final String CLASS_PLATFORM_ID = "com.inmobi.commons.uid.PlatformId";
    public static final String CLASS_PLAYSERVICES = "com.google.android.gms.common.GooglePlayServicesUtil";
    public static final String IM_PREF = "impref";
    public static final String INMOBI_SDK_RELEASE_DATE = "20140730";
    public static final String INMOBI_SDK_RELEASE_VERSION = "4.4.3";
    public static final String KEY_LTVID = "ltvid";
    public static final String LOGGING_TAG = "[InMobi]-4.4.3";
    public static final String METHOD_PLAY_AVAILABLE = "isGooglePlayServicesAvailable";
    public static final String PRODUCT_COMMONS = "commons";
    private static CommonsConfig a;
    private static String b;
    private static Context c;
    private static Map d;
    private static CacheController$Validator e;
    private static boolean f;
    private static byte[] g;
    private static String h;
    private static String i;
    private static String j;
    private static String k;
    private static String l;
    private static String m;
    private static String n;
    private static String o;
    private static String p;
    
    static {
        InternalSDKUtil.a = new CommonsConfig();
        InternalSDKUtil.c = null;
        InternalSDKUtil.d = new HashMap();
        InternalSDKUtil.e = new d();
        InternalSDKUtil.f = true;
        InternalSDKUtil.g = new byte[16];
        InternalSDKUtil.h = "SHA1PRNG";
        InternalSDKUtil.i = "Crypto";
        InternalSDKUtil.j = "HmacSHA1";
        InternalSDKUtil.k = "RSA";
        InternalSDKUtil.l = "RSA/ECB/nopadding";
        InternalSDKUtil.m = "aeskeygenerate";
        InternalSDKUtil.n = "last_key_generate";
        InternalSDKUtil.o = "AES/CBC/PKCS7Padding";
        InternalSDKUtil.p = "AES";
    }
    
    public static byte[] DeAe(final byte[] array, final byte[] array2, final byte[] array3) {
        return a(array, array2, array3);
    }
    
    public static String SeMeGe(final String s, final byte[] array, final byte[] array2, final byte[] array3, final String s2, final String s3) {
        return a(s, array, array2, array3, s2, s3);
    }
    
    private static String a(final String s, final byte[] array, final byte[] array2, final byte[] array3, final String s2, final String s3) {
        try {
            final byte[] b = b(s.getBytes("UTF-8"), array, array2);
            return new String(Base64.encode(b(a(a(b(b(a(array), a(array3)), a(array2)), s3, s2)), b(a(b), a(a(b, array3)))), 8));
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
    
    private static void a() {
        InternalSDKUtil.d = UIDUtil.getMap(getContext(), null);
    }
    
    static boolean a(final Map fromMap) {
        a();
        try {
            final CommonsConfig a = new CommonsConfig();
            a.setFromMap(fromMap);
            InternalSDKUtil.a = a;
            ApiStatCollector.getLogger().setMetricConfigParams(a.getApiStatsConfig());
            return true;
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
    
    private static byte[] a(final byte[] array) {
        final long n = array.length;
        final ByteBuffer allocate = ByteBuffer.allocate(8);
        allocate.order(ByteOrder.LITTLE_ENDIAN);
        allocate.putLong(n);
        final byte[] array2 = allocate.array();
        final byte[] array3 = new byte[array2.length + array.length];
        System.arraycopy(array2, 0, array3, 0, array2.length);
        System.arraycopy(array, 0, array3, array2.length, array.length);
        return array3;
    }
    
    private static byte[] a(final byte[] array, final String s, final String s2) {
        final BigInteger bigInteger = new BigInteger(s2, 16);
        final BigInteger bigInteger2 = new BigInteger(s, 16);
        try {
            final RSAPublicKey rsaPublicKey = (RSAPublicKey)KeyFactory.getInstance(InternalSDKUtil.k).generatePublic(new InternalSDKUtil$a(bigInteger, bigInteger2));
            final Cipher instance = Cipher.getInstance(InternalSDKUtil.l);
            instance.init(1, rsaPublicKey);
            return instance.doFinal(array);
        }
        catch (NoSuchAlgorithmException ex) {
            Log.internal("[InMobi]-4.4.3", "NoSuchAlgorithmException");
            return null;
        }
        catch (InvalidKeySpecException ex2) {
            Log.internal("[InMobi]-4.4.3", "InvalidKeySpecException");
            return null;
        }
        catch (NoSuchPaddingException ex3) {
            Log.internal("[InMobi]-4.4.3", "NoSuchPaddingException");
            return null;
        }
        catch (InvalidKeyException ex4) {
            Log.internal("[InMobi]-4.4.3", "InvalidKeyException");
            return null;
        }
        catch (IllegalBlockSizeException ex5) {
            Log.internal("[InMobi]-4.4.3", "IllegalBlockSizeException");
            return null;
        }
        catch (BadPaddingException ex6) {
            Log.internal("[InMobi]-4.4.3", "BadPaddingException");
            return null;
        }
    }
    
    private static byte[] a(final byte[] array, final byte[] array2) {
        final InternalSDKUtil$d internalSDKUtil$d = new InternalSDKUtil$d(array2, 0, array2.length, InternalSDKUtil.j);
        try {
            final Mac instance = Mac.getInstance(InternalSDKUtil.j);
            instance.init(internalSDKUtil$d);
            return instance.doFinal(array);
        }
        catch (NoSuchAlgorithmException ex) {
            Log.internal("[InMobi]-4.4.3", "NoSuchAlgorithmException");
            return null;
        }
        catch (InvalidKeyException ex2) {
            Log.internal("[InMobi]-4.4.3", "InvalidKeyException");
            return null;
        }
    }
    
    private static byte[] a(final byte[] array, final byte[] array2, final byte[] array3) {
        final InternalSDKUtil$d internalSDKUtil$d = new InternalSDKUtil$d(array2, InternalSDKUtil.p);
        try {
            final Cipher instance = Cipher.getInstance(InternalSDKUtil.o);
            instance.init(2, internalSDKUtil$d, new InternalSDKUtil$c(array3));
            return instance.doFinal(array);
        }
        catch (NoSuchAlgorithmException ex) {
            Log.internal("[InMobi]-4.4.3", "NoSuchAlgorithmException");
            return null;
        }
        catch (NoSuchPaddingException ex2) {
            Log.internal("[InMobi]-4.4.3", "NoSuchPaddingException");
            return null;
        }
        catch (InvalidKeyException ex3) {
            Log.internal("[InMobi]-4.4.3", "InvalidKeyException");
            return null;
        }
        catch (IllegalBlockSizeException ex4) {
            Log.internal("[InMobi]-4.4.3", "IllegalBlockSizeException");
            return null;
        }
        catch (BadPaddingException ex5) {
            Log.internal("[InMobi]-4.4.3", "BadPaddingException");
            return null;
        }
        catch (InvalidAlgorithmParameterException ex6) {
            Log.internal("[InMobi]-4.4.3", "InvalidAlgorithmParameterException");
            return null;
        }
    }
    
    public static void addCommonPropertiesToConnection(final HttpURLConnection httpURLConnection) {
        final String userAgent = getUserAgent(getContext());
        if (userAgent != null) {
            httpURLConnection.setRequestProperty("User-Agent", userAgent);
        }
    }
    
    private static byte[] b() {
        try {
            SecureRandom.getInstance(InternalSDKUtil.h, InternalSDKUtil.i).nextBytes(InternalSDKUtil.g);
            return InternalSDKUtil.g;
        }
        catch (NoSuchAlgorithmException ex) {
            Log.internal("[InMobi]-4.4.3", "NoSuchAlgorithmException");
            return InternalSDKUtil.g;
        }
        catch (NoSuchProviderException ex2) {
            Log.internal("[InMobi]-4.4.3", "NoSuchProviderException");
            return InternalSDKUtil.g;
        }
    }
    
    private static byte[] b(final byte[] array, final byte[] array2) {
        final byte[] array3 = new byte[array.length + array2.length];
        System.arraycopy(array, 0, array3, 0, array.length);
        System.arraycopy(array2, 0, array3, array.length, array2.length);
        return array3;
    }
    
    private static byte[] b(final byte[] array, final byte[] array2, final byte[] array3) {
        final InternalSDKUtil$d internalSDKUtil$d = new InternalSDKUtil$d(array2, InternalSDKUtil.p);
        final InternalSDKUtil$c internalSDKUtil$c = new InternalSDKUtil$c(array3);
        try {
            final Cipher instance = Cipher.getInstance(InternalSDKUtil.o);
            instance.init(1, internalSDKUtil$d, internalSDKUtil$c);
            return instance.doFinal(array);
        }
        catch (NoSuchAlgorithmException ex) {
            Log.internal("[InMobi]-4.4.3", "NoSuchAlgorithmException");
            return null;
        }
        catch (NoSuchPaddingException ex2) {
            Log.internal("[InMobi]-4.4.3", "NoSuchPaddingException");
            return null;
        }
        catch (InvalidKeyException ex3) {
            Log.internal("[InMobi]-4.4.3", "InvalidKeyException");
            return null;
        }
        catch (IllegalBlockSizeException ex4) {
            Log.internal("[InMobi]-4.4.3", "IllegalBlockSizeException");
            return null;
        }
        catch (BadPaddingException ex5) {
            Log.internal("[InMobi]-4.4.3", "BadPaddingException");
            return null;
        }
        catch (InvalidAlgorithmParameterException ex6) {
            Log.internal("[InMobi]-4.4.3", "InvalidAlgorithmParameterException");
            return null;
        }
    }
    
    private static byte[] c() {
        final SharedPreferences sharedPreferences = getContext().getSharedPreferences(InternalSDKUtil.m, 0);
        final long long1 = sharedPreferences.getLong(InternalSDKUtil.n, 0L);
        if (0L == long1) {
            Log.internal("[InMobi]-4.4.3", "Generating for first time");
            final SharedPreferences$Editor edit = sharedPreferences.edit();
            edit.putLong(InternalSDKUtil.n, System.currentTimeMillis());
            edit.commit();
            return b();
        }
        if (long1 + 86400000L - System.currentTimeMillis() <= 0L) {
            Log.internal("[InMobi]-4.4.3", "generated again");
            final SharedPreferences$Editor edit2 = sharedPreferences.edit();
            edit2.putLong(InternalSDKUtil.n, System.currentTimeMillis());
            edit2.commit();
            return b();
        }
        Log.internal("[InMobi]-4.4.3", "already generated");
        return InternalSDKUtil.g;
    }
    
    public static boolean checkNetworkAvailibility(final Context context) {
        if (context == null) {
            return false;
        }
        try {
            final ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService("connectivity");
            return connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnected();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot check network state", ex);
            return false;
        }
    }
    
    public static boolean getBooleanFromJSON(final JSONObject jsonObject, final String s, final boolean b) {
        try {
            return jsonObject.getBoolean(s);
        }
        catch (Exception ex) {
            try {
                Log.debug("[InMobi]-4.4.3", "JSON with property " + s + " found but has bad datatype(" + jsonObject.get(s).getClass() + "). Reverting to " + b);
                return b;
            }
            catch (JSONException ex2) {
                return b;
            }
        }
    }
    
    public static boolean getBooleanFromMap(final Map map, final String s) {
        final Boolean value = map.get(s);
        if (value instanceof Boolean) {
            return value;
        }
        Log.internal("[InMobi]-4.4.3", "Key " + s + " has illegal value");
        throw new IllegalArgumentException();
    }
    
    public static CommonsConfig getConfig() {
        return InternalSDKUtil.a;
    }
    
    public static String getConnectivityType(final Context context) {
        Block_0: {
            break Block_0;
        Label_0109:
            while (true) {
                int i = 0;
                do {
                    Label_0099: {
                        Label_0074: {
                            break Label_0074;
                            try {
                                if (context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
                                    return null;
                                }
                                final ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService("connectivity");
                                if (connectivityManager == null) {
                                    return null;
                                }
                                final NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
                                final int type = activeNetworkInfo.getType();
                                i = activeNetworkInfo.getSubtype();
                                if (type == 1) {
                                    return "wifi";
                                }
                                if (type != 0) {
                                    return null;
                                }
                                final String s = "carrier";
                                if (i == 1) {
                                    return "gprs";
                                }
                                break Label_0099;
                                // iftrue(Label_0097:, i != 0)
                                return "carrier";
                            }
                            catch (Exception ex) {
                                Log.internal("[InMobi]-4.4.3", "Error getting the network info", ex);
                                return null;
                            }
                        }
                        return null;
                    }
                    if (i == 2) {
                        return "edge";
                    }
                    continue Label_0109;
                    final String s = null;
                    Label_0097: {
                        return s;
                    }
                } while (i != 3);
                break;
            }
        }
        return "umts";
    }
    
    public static Context getContext() {
        return InternalSDKUtil.c;
    }
    
    public static int getDisplayRotation(final Display display) {
        Method method;
        while (true) {
            try {
                method = Display.class.getMethod("getRotation", (Class<?>[])null);
                if (method != null) {
                    final Method method2 = method;
                    final Display display2 = display;
                    final Object[] array = null;
                    final Object o = method2.invoke(display2, array);
                    final Integer n = (Integer)o;
                    final int intValue = n;
                    return intValue;
                }
                return -999;
            }
            catch (NoSuchMethodException ex) {
                try {
                    method = Display.class.getMethod("getOrientation", (Class<?>[])null);
                }
                catch (NoSuchMethodException ex2) {
                    Log.internal("commons", "Unable to access getOrientation method via reflection");
                    method = null;
                }
                continue;
            }
            break;
        }
        try {
            final Method method2 = method;
            final Display display2 = display;
            final Object[] array = null;
            final Object o = method2.invoke(display2, array);
            final Integer n = (Integer)o;
            final int intValue2;
            final int intValue = intValue2 = n;
            return intValue2;
        }
        catch (Exception ex3) {
            Log.internal("commons", "Unable to access display rotation");
        }
        return -999;
    }
    
    public static String getFinalRedirectedUrl(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: iconst_0       
        //     1: istore_1       
        //     2: aload_0        
        //     3: astore_2       
        //     4: new             Ljava/net/URL;
        //     7: dup            
        //     8: aload_2        
        //     9: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
        //    12: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
        //    15: checkcast       Ljava/net/HttpURLConnection;
        //    18: astore          6
        //    20: aload           6
        //    22: invokestatic    com/inmobi/commons/internal/InternalSDKUtil.addCommonPropertiesToConnection:(Ljava/net/HttpURLConnection;)V
        //    25: aload           6
        //    27: iconst_0       
        //    28: invokevirtual   java/net/HttpURLConnection.setUseCaches:(Z)V
        //    31: aload           6
        //    33: ldc_w           "GET"
        //    36: invokevirtual   java/net/HttpURLConnection.setRequestMethod:(Ljava/lang/String;)V
        //    39: aload           6
        //    41: invokevirtual   java/net/HttpURLConnection.getResponseCode:()I
        //    44: istore          7
        //    46: iload           7
        //    48: sipush          300
        //    51: if_icmplt       152
        //    54: iload           7
        //    56: sipush          400
        //    59: if_icmpge       152
        //    62: aload           6
        //    64: ldc_w           "Location"
        //    67: invokevirtual   java/net/HttpURLConnection.getHeaderField:(Ljava/lang/String;)Ljava/lang/String;
        //    70: astore          10
        //    72: aload           10
        //    74: astore          8
        //    76: aload           8
        //    78: ifnull          152
        //    81: aload           6
        //    83: invokevirtual   java/net/HttpURLConnection.getResponseCode:()I
        //    86: sipush          200
        //    89: if_icmpeq       102
        //    92: iload_1        
        //    93: iconst_1       
        //    94: iadd           
        //    95: istore          11
        //    97: iload_1        
        //    98: iconst_5       
        //    99: if_icmplt       143
        //   102: aload           6
        //   104: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   107: aload           8
        //   109: areturn        
        //   110: astore_3       
        //   111: aload_3        
        //   112: astore          4
        //   114: aload_2        
        //   115: astore          5
        //   117: ldc             "[InMobi]-4.4.3"
        //   119: ldc_w           "Cannot get redirect url"
        //   122: aload           4
        //   124: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   127: aload           5
        //   129: areturn        
        //   130: astore          9
        //   132: aload           8
        //   134: astore          5
        //   136: aload           9
        //   138: astore          4
        //   140: goto            117
        //   143: iload           11
        //   145: istore_1       
        //   146: aload           8
        //   148: astore_2       
        //   149: goto            4
        //   152: aload_2        
        //   153: astore          8
        //   155: goto            102
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  4      46     110    117    Ljava/lang/Exception;
        //  62     72     110    117    Ljava/lang/Exception;
        //  81     92     130    143    Ljava/lang/Exception;
        //  102    107    130    143    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0102:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static String getInMobiInternalVersion(final String s) {
        final String[] split = s.split("[.]");
        final StringBuffer sb = new StringBuffer("");
        int n = 0;
    Label_0055_Outer:
        while (true) {
            Label_0061: {
                if (n >= split.length) {
                    break Label_0061;
                }
                while (true) {
                    try {
                        sb.append("T").append((char)(65 + Integer.valueOf(split[n])));
                        ++n;
                        continue Label_0055_Outer;
                        Label_0075: {
                            return sb.substring(1).toString();
                        }
                        // iftrue(Label_0075:, !sb.equals((Object)""))
                        return "";
                    }
                    catch (NumberFormatException ex) {
                        continue;
                    }
                    break;
                }
            }
        }
    }
    
    public static int getIntFromJSON(final JSONObject jsonObject, final String s, final int n) {
        try {
            return jsonObject.getInt(s);
        }
        catch (Exception ex) {
            try {
                Log.debug("[InMobi]-4.4.3", "JSON with property " + s + " found but has bad datatype(" + jsonObject.get(s).getClass() + "). Reverting to " + n);
                return n;
            }
            catch (JSONException ex2) {
                return n;
            }
        }
    }
    
    public static int getIntFromMap(final Map map, final String s, final int n, final long n2) {
        final Integer value = map.get(s);
        if (value instanceof Integer) {
            final int intValue = value;
            if (intValue <= n2 && intValue >= n) {
                return intValue;
            }
        }
        Log.internal("[InMobi]-4.4.3", "Key " + s + " has illegal value");
        throw new IllegalArgumentException();
    }
    
    public static long getLongFromJSON(final JSONObject jsonObject, final String s, final long n) {
        try {
            return jsonObject.getLong(s);
        }
        catch (Exception ex) {
            try {
                Log.debug("[InMobi]-4.4.3", "JSON with property " + s + " found but has bad datatype(" + jsonObject.get(s).getClass() + "). Reverting to " + n);
                return n;
            }
            catch (JSONException ex2) {
                return n;
            }
        }
    }
    
    public static long getLongFromMap(final Map map, final String s, long n, long n2) {
        final Long value = map.get(s);
        if (value instanceof Long) {
            final long longValue = value;
            if (longValue <= n2 && longValue >= n) {
                return longValue;
            }
        }
        if (n < -2147483648L) {
            n = -2147483648L;
        }
        final int n3 = (int)n;
        if (n2 > 2147483647L) {
            n2 = 2147483647L;
        }
        return getIntFromMap(map, s, n3, (int)n2);
    }
    
    public static String getSavedUserAgent() {
        return InternalSDKUtil.b;
    }
    
    public static String getStringFromJSON(final JSONObject jsonObject, final String s, final String s2) {
        try {
            return jsonObject.getString(s);
        }
        catch (Exception ex) {
            try {
                Log.debug("[InMobi]-4.4.3", "JSON with property " + s + " found but has bad datatype(" + jsonObject.get(s).getClass() + "). Reverting to " + s2);
                return s2;
            }
            catch (JSONException ex2) {
                return s2;
            }
        }
    }
    
    public static String getStringFromMap(final Map map, final String s) {
        final String value = map.get(s);
        if (value instanceof String) {
            return value;
        }
        Log.internal("[InMobi]-4.4.3", "Key " + s + " has illegal value");
        throw new IllegalArgumentException();
    }
    
    public static String getUserAgent(final Context context) {
        try {
            if (InternalSDKUtil.b == null) {
                if (Build$VERSION.SDK_INT >= 17) {
                    InternalSDKUtil.b = InternalSDKUtil$b.a(context);
                }
                else {
                    InternalSDKUtil.b = new WebView(context).getSettings().getUserAgentString();
                }
            }
            return InternalSDKUtil.b;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get user agent", ex);
            return InternalSDKUtil.b;
        }
    }
    
    public static void initialize(final Context context) {
        if (getContext() == null) {
            if (context == null) {
                InternalSDKUtil.c.getApplicationContext();
            }
            else {
                InternalSDKUtil.c = context.getApplicationContext();
            }
        }
        if (InMobi.getAppId() == null) {
            return;
        }
        if (InternalSDKUtil.f) {
            InternalSDKUtil.f = false;
            a();
        }
        try {
            a(CacheController.getConfig("commons", context, InternalSDKUtil.d, InternalSDKUtil.e).getData());
        }
        catch (CommonsException ex) {
            Log.internal("[InMobi]-4.4.3", "IMCommons config init: IMCommonsException caught. Reason: " + ex.toString());
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-4.4.3", "Exception while getting commons config data.");
        }
    }
    
    public static boolean isDefOrientationLandscape(final int n, final int n2, final int n3) {
        return (n2 > n3 && (n == 0 || n == 2)) || (n2 < n3 && (n == 1 || n == 3));
    }
    
    public static boolean isGooglePlayServicesJarIncluded() {
        try {
            final int googlePlayServicesAvailable = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getContext());
            boolean b = false;
            if (googlePlayServicesAvailable == 0) {
                b = true;
            }
            return b;
        }
        catch (Error error) {
            return false;
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    public static boolean isHexString(final String s) {
        return s.matches("[0-9A-F]+");
    }
    
    public static boolean isInitializedSuccessfully() {
        return isInitializedSuccessfully(true);
    }
    
    public static boolean isInitializedSuccessfully(final boolean b) {
        if (getContext() == null || InMobi.getAppId() == null) {
            if (b) {
                Log.debug("[InMobi]-4.4.3", "InMobi not initialized. Call InMobi.initialize before using any InMobi API");
            }
            return false;
        }
        return true;
    }
    
    public static boolean isLimitAdTrackingEnabled() {
        final AdvertisingId advertisingId = UIDHelper.getAdvertisingId();
        return advertisingId != null && advertisingId.isLimitAdTracking();
    }
    
    public static boolean isTablet(final Context context) {
        final Display defaultDisplay = ((WindowManager)context.getSystemService("window")).getDefaultDisplay();
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        defaultDisplay.getMetrics(displayMetrics);
        final double n = displayMetrics.widthPixels / displayMetrics.xdpi;
        final double n2 = displayMetrics.heightPixels / displayMetrics.ydpi;
        return Math.sqrt(n * n + n2 * n2) > 7.0;
    }
    
    public static byte[] keag() {
        return c();
    }
    
    public static void populate(final Map map, final Map map2, final boolean b) {
        for (final String s : map.keySet()) {
            if (map2.get(s) == null) {
                map2.put(s, map.get(s));
            }
            final V value = map.get(s);
            final Map value2 = map2.get(s);
            if (value instanceof Map && value2 instanceof Map) {
                if (!b) {
                    map2.put(s, value);
                }
                else {
                    populate((Map)value, value2, true);
                }
            }
            else {
                map2.put(s, value);
            }
        }
    }
    
    public static void populate(final JSONObject jsonObject, final JSONObject jsonObject2, final boolean b) {
        final Iterator keys = jsonObject.keys();
        while (keys.hasNext()) {
            final String s = keys.next();
            Object value = null;
            Label_0130: {
                Object value2 = null;
                Label_0113: {
                    try {
                        jsonObject2.get(s);
                        try {
                            value = jsonObject.get(s);
                            value2 = jsonObject2.get(s);
                            if (!(value instanceof JSONObject) || !(value2 instanceof JSONObject)) {
                                break Label_0130;
                            }
                            if (b) {
                                break Label_0113;
                            }
                            jsonObject2.put(s, value);
                        }
                        catch (JSONException ex) {
                            Log.internal("[InMobi]-4.4.3", "Cannot populate to json exception", (Throwable)ex);
                        }
                        continue;
                    }
                    catch (JSONException ex2) {
                        jsonObject2.put(s, jsonObject.get(s));
                        continue;
                    }
                }
                populate((JSONObject)value, (JSONObject)value2, true);
                continue;
            }
            jsonObject2.put(s, value);
        }
    }
    
    public static JSONObject populateToNewJSON(final JSONObject jsonObject, final JSONObject jsonObject2, final boolean b) {
        final JSONObject jsonObject3 = new JSONObject();
        populate(jsonObject2, jsonObject3, false);
        populate(jsonObject, jsonObject3, b);
        return jsonObject3;
    }
    
    public static Map populateToNewMap(final Map map, final Map map2, final boolean b) {
        final HashMap hashMap = new HashMap();
        populate(map2, hashMap, false);
        populate(map, hashMap, b);
        return hashMap;
    }
    
    public static void printPublisherTestId() {
        try {
            if (!isGooglePlayServicesJarIncluded()) {
                Log.debug("[InMobi]-4.4.3", "Publisher device Id is " + UIDHelper.getODIN1(UIDHelper.getPlatformId()));
                return;
            }
            final AdvertisingId advertisingId = UIDHelper.getAdvertisingId();
            if (advertisingId != null) {
                final String adId = advertisingId.getAdId();
                if (adId != null) {
                    Log.debug("[InMobi]-4.4.3", "Publisher device Id is " + adId);
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Cannot get publisher device id", ex);
        }
    }
    
    public static void setContext(final Context context) {
        if (InternalSDKUtil.c == null) {
            InternalSDKUtil.c = context.getApplicationContext();
            if (InMobi.getAppId() != null) {
                a();
                try {
                    CacheController.getConfig("commons", context, InternalSDKUtil.d, InternalSDKUtil.e);
                }
                catch (CommonsException ex) {
                    Log.internal("commons", "Unable retrive config for commons product");
                }
            }
        }
    }
    
    public static boolean validateAppId(final String s) {
        if (s == null) {
            Log.debug("[InMobi]-4.4.3", "appId is null");
            return false;
        }
        if (s.matches("(x)+")) {
            Log.debug("[InMobi]-4.4.3", "appId is all xxxxxxx");
            return false;
        }
        if ("".equals(s.trim())) {
            Log.debug("[InMobi]-4.4.3", "appId is all blank");
            return false;
        }
        return true;
    }
}
