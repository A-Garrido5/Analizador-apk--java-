// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thinICE.icedatacollector;

import android.os.Build$VERSION;
import android.os.HandlerThread;
import java.util.List;
import com.inmobi.commons.thinICE.wifi.WifiUtil;
import com.inmobi.commons.thinICE.wifi.WifiInfo;
import android.util.Log;
import java.util.LinkedList;
import android.app.Activity;
import android.os.Handler;
import android.os.Looper;
import android.content.Context;

public final class IceDataCollector
{
    public static final String TAG = "IceDataCollector";
    private static Context a;
    private static ThinICEConfigSettings b;
    private static Looper c;
    private static Handler d;
    private static boolean e;
    private static Activity f;
    private static Runnable g;
    private static LinkedList h;
    private static Sample i;
    private static final Object j;
    private static ThinICEListener k;
    private static Runnable l;
    
    static {
        IceDataCollector.a = null;
        IceDataCollector.b = new ThinICEConfigSettings();
        IceDataCollector.c = null;
        IceDataCollector.d = null;
        IceDataCollector.e = false;
        IceDataCollector.f = null;
        IceDataCollector.g = new b();
        IceDataCollector.h = new LinkedList();
        IceDataCollector.i = null;
        j = new Object();
        IceDataCollector.k = null;
        IceDataCollector.l = new a();
    }
    
    private static final boolean a(final ThinICEConfigSettings thinICEConfigSettings, final ThinICEConfigSettings thinICEConfigSettings2) {
        return thinICEConfigSettings.isEnabled() != thinICEConfigSettings2.isEnabled() || thinICEConfigSettings.getSampleInterval() != thinICEConfigSettings2.getSampleInterval();
    }
    
    public static void flush() {
        synchronized (IceDataCollector.class) {
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "-- flush()");
            }
            synchronized (IceDataCollector.j) {
                IceDataCollector.i = null;
                IceDataCollector.h = new LinkedList();
            }
        }
    }
    
    public static ThinICEConfigSettings getConfig() {
        return new ThinICEConfigSettings(IceDataCollector.b);
    }
    
    public static WifiInfo getConnectedWifiInfo(final Context context) {
        final int wifiFlags = IceDataCollector.b.getWifiFlags();
        final boolean b = !ThinICEConfigSettings.bitTest(wifiFlags, 2);
        final boolean bitTest = ThinICEConfigSettings.bitTest(wifiFlags, 1);
        if (IceDataCollector.b.isSampleConnectedWifiEnabled()) {
            try {
                if (WifiUtil.hasGetConnectedWifiInfoPermission(context)) {
                    return WifiUtil.getConnectedWifiInfo(context, b, bitTest);
                }
                if (BuildSettings.DEBUG) {
                    Log.w("IceDataCollector", "application does not have permission to access connected wifi ap");
                }
                return null;
            }
            catch (Exception ex) {
                if (BuildSettings.DEBUG) {
                    Log.e("IceDataCollector", "Error getting wifi data", (Throwable)ex);
                }
            }
        }
        return null;
    }
    
    public static List getData() {
        if (BuildSettings.DEBUG) {
            Log.d("IceDataCollector", "-- getData()");
        }
        synchronized (IceDataCollector.j) {
            final LinkedList h = IceDataCollector.h;
            flush();
            return h;
        }
    }
    
    public static int getSampleCount() {
        synchronized (IceDataCollector.j) {
            return IceDataCollector.h.size();
        }
    }
    
    private static void m() {
        if (BuildSettings.DEBUG) {
            Log.d("IceDataCollector", "startSampling()");
        }
        if (IceDataCollector.c != null) {
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "ignoring, already sampling");
            }
        }
        else {
            final HandlerThread handlerThread = new HandlerThread("IDC");
            handlerThread.start();
            IceDataCollector.c = handlerThread.getLooper();
            (IceDataCollector.d = new Handler(IceDataCollector.c)).postDelayed(IceDataCollector.l, IceDataCollector.b.getSampleInterval() / 2L);
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "next sample in " + IceDataCollector.b.getSampleInterval() / 2L + " ms");
            }
        }
    }
    
    private static void n() {
        if (BuildSettings.DEBUG) {
            Log.d("IceDataCollector", "stopSampling()");
        }
        if (IceDataCollector.c == null) {
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "ignoring, not currently sampling");
            }
        }
        else {
            IceDataCollector.d.removeCallbacks(IceDataCollector.l);
            IceDataCollector.d = null;
            IceDataCollector.c.quit();
            IceDataCollector.c = null;
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "sampling stopped");
            }
        }
    }
    
    public static void setConfig(final ThinICEConfigSettings p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: ldc             Lcom/inmobi/commons/thinICE/icedatacollector/IceDataCollector;.class
        //     2: monitorenter   
        //     3: getstatic       com/inmobi/commons/thinICE/icedatacollector/BuildSettings.DEBUG:Z
        //     6: ifeq            36
        //     9: ldc             "IceDataCollector"
        //    11: new             Ljava/lang/StringBuilder;
        //    14: dup            
        //    15: ldc             "-- setConfig("
        //    17: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    20: aload_0        
        //    21: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //    24: ldc             ")"
        //    26: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    29: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    32: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //    35: pop            
        //    36: aload_0        
        //    37: ifnonnull       58
        //    40: getstatic       com/inmobi/commons/thinICE/icedatacollector/BuildSettings.DEBUG:Z
        //    43: ifeq            54
        //    46: ldc             "IceDataCollector"
        //    48: ldc             "aborting, config is null"
        //    50: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //    53: pop            
        //    54: ldc             Lcom/inmobi/commons/thinICE/icedatacollector/IceDataCollector;.class
        //    56: monitorexit    
        //    57: return         
        //    58: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.b:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;
        //    61: astore_3       
        //    62: aload_0        
        //    63: putstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.b:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;
        //    66: aload_3        
        //    67: invokevirtual   com/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings.getSampleHistorySize:()I
        //    70: istore          4
        //    72: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.b:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;
        //    75: invokevirtual   com/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings.getSampleHistorySize:()I
        //    78: istore          5
        //    80: iload           5
        //    82: iload           4
        //    84: if_icmpge       144
        //    87: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.j:Ljava/lang/Object;
        //    90: astore          6
        //    92: aload           6
        //    94: monitorenter   
        //    95: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.h:Ljava/util/LinkedList;
        //    98: invokevirtual   java/util/LinkedList.size:()I
        //   101: iload           5
        //   103: if_icmple       141
        //   106: getstatic       com/inmobi/commons/thinICE/icedatacollector/BuildSettings.DEBUG:Z
        //   109: ifeq            120
        //   112: ldc             "IceDataCollector"
        //   114: ldc             "new sample history size, removing samples from start of list"
        //   116: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   119: pop            
        //   120: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.h:Ljava/util/LinkedList;
        //   123: iconst_0       
        //   124: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.h:Ljava/util/LinkedList;
        //   127: invokevirtual   java/util/LinkedList.size:()I
        //   130: iload           5
        //   132: isub           
        //   133: invokevirtual   java/util/LinkedList.subList:(II)Ljava/util/List;
        //   136: invokeinterface java/util/List.clear:()V
        //   141: aload           6
        //   143: monitorexit    
        //   144: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.c:Landroid/os/Looper;
        //   147: ifnonnull       181
        //   150: getstatic       com/inmobi/commons/thinICE/icedatacollector/BuildSettings.DEBUG:Z
        //   153: ifeq            54
        //   156: ldc             "IceDataCollector"
        //   158: ldc             "not restarting sampling, not currently sampling"
        //   160: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   163: pop            
        //   164: goto            54
        //   167: astore_1       
        //   168: ldc             Lcom/inmobi/commons/thinICE/icedatacollector/IceDataCollector;.class
        //   170: monitorexit    
        //   171: aload_1        
        //   172: athrow         
        //   173: astore          7
        //   175: aload           6
        //   177: monitorexit    
        //   178: aload           7
        //   180: athrow         
        //   181: aload_3        
        //   182: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.b:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;
        //   185: invokestatic    com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.a:(Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;)Z
        //   188: ifeq            54
        //   191: invokestatic    com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.n:()V
        //   194: getstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.b:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings;
        //   197: invokevirtual   com/inmobi/commons/thinICE/icedatacollector/ThinICEConfigSettings.isEnabled:()Z
        //   200: ifeq            209
        //   203: invokestatic    com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.m:()V
        //   206: goto            54
        //   209: invokestatic    com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.flush:()V
        //   212: aconst_null    
        //   213: putstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.a:Landroid/content/Context;
        //   216: aconst_null    
        //   217: putstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.f:Landroid/app/Activity;
        //   220: aconst_null    
        //   221: putstatic       com/inmobi/commons/thinICE/icedatacollector/IceDataCollector.k:Lcom/inmobi/commons/thinICE/icedatacollector/ThinICEListener;
        //   224: goto            54
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  3      36     167    173    Any
        //  40     54     167    173    Any
        //  58     80     167    173    Any
        //  87     95     167    173    Any
        //  95     120    173    181    Any
        //  120    141    173    181    Any
        //  141    144    173    181    Any
        //  144    164    167    173    Any
        //  175    181    167    173    Any
        //  181    206    167    173    Any
        //  209    224    167    173    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0120:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static void setListener(final ThinICEListener k) {
        IceDataCollector.k = k;
    }
    
    public static void start(final Context context) {
        while (true) {
            Label_0074: {
                synchronized (IceDataCollector.class) {
                    if (BuildSettings.DEBUG) {
                        Log.d("IceDataCollector", "-- start()");
                    }
                    if (context == null) {
                        if (BuildSettings.DEBUG) {
                            Log.d("IceDataCollector", "aborting, context is null");
                        }
                    }
                    else {
                        if (IceDataCollector.b.isEnabled()) {
                            break Label_0074;
                        }
                        if (BuildSettings.DEBUG) {
                            Log.d("IceDataCollector", "ignoring, data collection is disabled in settings");
                        }
                    }
                    return;
                }
            }
            if (Build$VERSION.SDK_INT < 14) {
                if (!(context instanceof Activity)) {
                    if (BuildSettings.DEBUG) {
                        Log.w("IceDataCollector", "aborting, build < 14 and context is not an activity");
                    }
                    return;
                }
                else {
                    IceDataCollector.f = (Activity)context;
                }
            }
            IceDataCollector.a = context.getApplicationContext();
            m();
            if (IceDataCollector.e) {
                if (BuildSettings.DEBUG) {
                    Log.d("IceDataCollector", "stop previously requested, clearing request");
                }
                IceDataCollector.e = false;
                IceDataCollector.d.removeCallbacks(IceDataCollector.g);
            }
        }
    }
    
    public static void stop() {
        while (true) {
            Label_0061: {
                synchronized (IceDataCollector.class) {
                    if (BuildSettings.DEBUG) {
                        Log.d("IceDataCollector", "-- stop()");
                    }
                    if (IceDataCollector.c == null) {
                        Log.d("IceDataCollector", "ignoring, not currently running");
                    }
                    else {
                        if (!IceDataCollector.e) {
                            break Label_0061;
                        }
                        Log.d("IceDataCollector", "ignoring, stop already requested");
                    }
                    return;
                }
            }
            IceDataCollector.e = true;
            IceDataCollector.d.postDelayed(IceDataCollector.g, IceDataCollector.b.getStopRequestTimeout());
            if (BuildSettings.DEBUG) {
                Log.d("IceDataCollector", "stop requested, occurring in " + IceDataCollector.b.getStopRequestTimeout() + " ms");
            }
        }
    }
}
