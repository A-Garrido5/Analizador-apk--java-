// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thinICE.icedatacollector;

import java.util.Iterator;
import com.inmobi.commons.thinICE.location.LocationInfo;
import java.util.Calendar;
import java.util.List;
import java.util.HashMap;
import com.inmobi.commons.thinICE.wifi.WifiInfo;
import com.inmobi.commons.thinICE.cellular.CellTowerInfo;
import com.inmobi.commons.thinICE.cellular.CellOperatorInfo;

public final class Sample
{
    public CellOperatorInfo cellOperator;
    public CellTowerInfo connectedCellTowerInfo;
    public WifiInfo connectedWifiAp;
    public HashMap lastKnownLocations;
    public long utc;
    public List visibleWifiAp;
    public int zoneOffset;
    
    Sample() {
        final Calendar instance = Calendar.getInstance();
        this.utc = instance.getTimeInMillis();
        this.zoneOffset = instance.get(15) + instance.get(16);
    }
    
    @Override
    public final String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName()).append("[\n");
        sb.append("-- utc: ").append(this.utc).append("\n");
        sb.append("-- zoneOffset: ").append(this.zoneOffset).append("\n");
        sb.append("-- cell operator: ").append(this.cellOperator).append("\n");
        sb.append("-- connected wifi access point: ").append(this.connectedWifiAp).append("\n");
        sb.append("-- last known locations:");
        if (this.lastKnownLocations == null) {
            sb.append(" null\n");
        }
        else {
            sb.append("\n");
            final Iterator<LocationInfo> iterator = this.lastKnownLocations.values().iterator();
            while (iterator.hasNext()) {
                sb.append("   + ").append(iterator.next()).append("\n");
            }
        }
        sb.append("-- visible wifi aps:");
        if (this.visibleWifiAp == null) {
            sb.append(" null\n");
        }
        else {
            sb.append("\n");
            final Iterator<WifiInfo> iterator2 = this.visibleWifiAp.iterator();
            while (iterator2.hasNext()) {
                sb.append("   + ").append(iterator2.next()).append("\n");
            }
        }
        sb.append("-- connected serving cell tower: ").append(this.connectedCellTowerInfo).append("\n");
        sb.append("]");
        return sb.toString();
    }
}
