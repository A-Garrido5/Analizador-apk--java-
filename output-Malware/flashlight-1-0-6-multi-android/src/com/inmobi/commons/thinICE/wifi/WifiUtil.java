// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thinICE.wifi;

import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import com.inmobi.commons.thinICE.icedatacollector.ThinICEConfigSettings;
import com.inmobi.commons.thinICE.icedatacollector.IceDataCollector;
import android.content.Context;

public final class WifiUtil
{
    private static final String[] a;
    private static final String[] b;
    private static final String[] c;
    
    static {
        a = new String[] { "android.permission.ACCESS_WIFI_STATE" };
        b = new String[] { "android.permission.ACCESS_WIFI_STATE", "android.permission.CHANGE_WIFI_STATE" };
        c = new String[] { "android.permission.WAKE_LOCK" };
    }
    
    private static long a(final byte b) {
        return 0xFFL & b;
    }
    
    private static long a(final byte[] array) {
        long n = 0L;
        if (array != null && array.length == 6) {
            n = (a(array[5]) | a(array[4]) << 8 | a(array[3]) << 16 | a(array[2]) << 24 | a(array[1]) << 32 | a(array[0]) << 40);
        }
        return n;
    }
    
    private static boolean a(final boolean b, final String s) {
        return b && s != null && s.endsWith("_nomap");
    }
    
    public static WifiInfo getConnectedWifiInfo(final Context context) {
        final int wifiFlags = IceDataCollector.getConfig().getWifiFlags();
        return getConnectedWifiInfo(context, !ThinICEConfigSettings.bitTest(wifiFlags, 2), ThinICEConfigSettings.bitTest(wifiFlags, 1));
    }
    
    public static WifiInfo getConnectedWifiInfo(final Context context, final boolean b, final boolean b2) {
        final android.net.wifi.WifiInfo connectionInfo = ((WifiManager)context.getSystemService("wifi")).getConnectionInfo();
        if (connectionInfo != null) {
            final WifiInfo wifiInfo = new WifiInfo();
            final String bssid = connectionInfo.getBSSID();
            String ssid = connectionInfo.getSSID();
            if (bssid != null && !a(b, ssid)) {
                wifiInfo.bssid = macToLong(bssid);
                if (b2) {
                    ssid = null;
                }
                wifiInfo.ssid = ssid;
                wifiInfo.rssi = connectionInfo.getRssi();
                wifiInfo.ip = connectionInfo.getIpAddress();
                return wifiInfo;
            }
        }
        return null;
    }
    
    public static boolean hasGetConnectedWifiInfoPermission(final Context context) {
        final String[] a = WifiUtil.a;
        for (int length = a.length, i = 0; i < length; ++i) {
            if (context.checkCallingOrSelfPermission(a[i]) != 0) {
                return false;
            }
        }
        return true;
    }
    
    public static boolean hasWifiScanPermission(final Context context, final boolean b) {
        final String[] b2 = WifiUtil.b;
        for (int length = b2.length, i = 0; i < length; ++i) {
            if (context.checkCallingOrSelfPermission(b2[i]) != 0) {
                return false;
            }
        }
        if (b) {
            final String[] c = WifiUtil.c;
            for (int length2 = c.length, j = 0; j < length2; ++j) {
                if (context.checkCallingOrSelfPermission(c[j]) != 0) {
                    return false;
                }
            }
        }
        return true;
    }
    
    public static long macToLong(final String s) {
        final String[] split = s.split("\\:");
        final byte[] array = new byte[6];
        for (int i = 0; i < 6; ++i) {
            array[i] = (byte)Integer.parseInt(split[i], 16);
        }
        return a(array);
    }
    
    public static WifiInfo scanResultToWifiInfo(final ScanResult scanResult, final boolean b) {
        if (scanResult == null) {
            return null;
        }
        final WifiInfo wifiInfo = new WifiInfo();
        wifiInfo.bssid = macToLong(scanResult.BSSID);
        String ssid = null;
        if (!b) {
            ssid = scanResult.SSID;
        }
        wifiInfo.ssid = ssid;
        wifiInfo.rssi = scanResult.level;
        return wifiInfo;
    }
    
    public static List scanResultsToWifiInfos(final List list, final boolean b, final boolean b2) {
        if (list == null) {
            return null;
        }
        final ArrayList<WifiInfo> list2 = new ArrayList<WifiInfo>();
        for (final ScanResult scanResult : list) {
            if (!a(b, scanResult.SSID)) {
                list2.add(scanResultToWifiInfo(scanResult, b2));
            }
        }
        return list2;
    }
}
