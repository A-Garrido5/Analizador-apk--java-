// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.androidsdk;

import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import android.os.Build$VERSION;
import android.content.Context;
import com.inmobi.commons.analytics.iat.impl.net.AdTrackerNetworkInterface;
import com.inmobi.commons.analytics.iat.impl.AdTrackerUtils;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.internal.FileOperations;
import com.inmobi.commons.internal.InternalSDKUtil;

public final class IMAdTracker
{
    private static IMAdTracker a;
    
    private boolean a(final String s) {
        try {
            final String preferences = FileOperations.getPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "mk-siteid");
            if (InternalSDKUtil.getContext() == null || preferences == null || preferences.trim().equals("")) {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Please call init() with valid context and app id");
                return false;
            }
            if (s == null || "".equals(s.trim())) {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Please pass a valid GoalName");
                return false;
            }
            final boolean checkDownloadGoalUploaded = AdTrackerUtils.checkDownloadGoalUploaded();
            if ("download".equals(s) && checkDownloadGoalUploaded) {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Download goal already uploaded");
                return false;
            }
            AdTrackerNetworkInterface.init();
            if ("download".equals(s)) {
                if (!AdTrackerUtils.checkDownloadGoalAdded()) {
                    FileOperations.setPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "insertStatus", true);
                    Log.debug("[InMobi]-[AdTracker]-4.4.3", "Goal Queued " + s);
                    AdTrackerNetworkInterface.getGoalList().addGoal(s, 1, 0L, 0, false);
                }
            }
            else {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Goal Queued " + s);
                AdTrackerNetworkInterface.getGoalList().addGoal(s, 1, 0L, 0, false);
            }
            AdTrackerNetworkInterface.reportToServer(preferences);
            return true;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Cannot report goal", ex);
            return false;
        }
    }
    
    public static IMAdTracker getInstance() {
        synchronized (IMAdTracker.class) {
            if (IMAdTracker.a == null) {
                IMAdTracker.a = new IMAdTracker();
            }
            return IMAdTracker.a;
        }
    }
    
    public final void init(final Context context, final String s) {
        Label_0019: {
            if (context != null) {
                break Label_0019;
            }
            try {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Application Context NULL");
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "context cannot be null");
                return;
                // iftrue(Label_0048:, s != null)
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "APP ID Cannot be NULL");
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "appId cannot be null");
                return;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to init", ex);
                return;
            }
        }
        Label_0048: {
            if (s.trim().equals("")) {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "appId cannot be blank");
                return;
            }
        }
        Log.debug("[InMobi]-[AdTracker]-4.4.3", "IMAdtracker init successfull");
        FileOperations.setPreferences(context, "IMAdTrackerStatusUpload", "mk-siteid", s);
        if (!AdTrackerUtils.isPermissionGranted("android.permission.INTERNET") || !AdTrackerUtils.isPermissionGranted("android.permission.ACCESS_NETWORK_STATE")) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "Add android.permission.INTERNET and android.permission.ACCESS_NETWORK_STATE permission in Android manifest");
            return;
        }
        if (Build$VERSION.SDK_INT < 17 && !AdTrackerUtils.isPermissionGranted("android.permission.READ_LOGS")) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "Add android.permission.READ_LOGS permission in Android Manifest");
        }
        if (0L == FileOperations.getLongPreferences(context.getApplicationContext(), "IMAdTrackerStatusUpload", "t1")) {
            FileOperations.setPreferences(context.getApplicationContext(), "IMAdTrackerStatusUpload", "t1", System.currentTimeMillis());
        }
        final IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        intentFilter.addAction("com.android.vending.INSTALL_REFERRER");
        context.getApplicationContext().registerReceiver((BroadcastReceiver)new IMAdTrackerReceiver(), intentFilter);
    }
    
    public final void reportAppDownloadGoal() {
        this.a("download");
    }
    
    public final void reportCustomGoal(final String s) {
        if ("download".equals(s)) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "Download Goal should be reported using reportAppDownloadGoal()..");
            return;
        }
        this.a(s);
    }
}
