// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.net;

import java.util.ArrayList;
import org.json.JSONException;
import android.os.Build;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.os.Build$VERSION;
import com.inmobi.commons.analytics.util.AnalyticsUtils;
import com.inmobi.commons.analytics.util.SessionInfo;
import android.content.Context;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.analytics.db.AnalyticsEvent$TRANSACTION_STATUS_SERVER_CODE;
import com.inmobi.commons.analytics.db.AnalyticsEvent$TRANSACTION_ITEM_TYPE;
import com.inmobi.commons.thirdparty.Base62;
import org.json.JSONObject;
import com.inmobi.commons.analytics.db.AnalyticsEvent;
import org.json.JSONArray;
import java.util.List;

public class AnalyticsPayloadBuilder
{
    private JSONArray a(final List list) {
        final JSONArray jsonArray = new JSONArray();
        for (final AnalyticsEvent analyticsEvent : list) {
            final JSONObject jsonObject = new JSONObject();
            while (true) {
                try {
                    final String fromBase10 = Base62.fromBase10(analyticsEvent.getEventId());
                    if (fromBase10 != null) {
                        jsonObject.put("eid", (Object)fromBase10);
                    }
                    jsonObject.put("t", (Object)analyticsEvent.getEventType());
                    jsonObject.put("ts", analyticsEvent.getEventTimeStamp());
                    jsonObject.put("ld", (Object)analyticsEvent.getEventLevelId());
                    jsonObject.put("ls", (Object)analyticsEvent.getEventLevelStatus());
                    jsonObject.put("ln", (Object)analyticsEvent.getEventLevelName());
                    Label_0166: {
                        if (analyticsEvent.getEventAttributeMap() == null) {
                            break Label_0166;
                        }
                        try {
                            jsonObject.put("am", (Object)new JSONObject(analyticsEvent.getEventAttributeMap()));
                            jsonObject.put("tt", (Object)analyticsEvent.getEventTimeTaken());
                            if (analyticsEvent.getEventAttemptCount() != null) {
                                jsonObject.put("ac", 1);
                            }
                            jsonObject.put("at", (Object)analyticsEvent.getEventAttemptTime());
                            jsonObject.put("en", (Object)analyticsEvent.getEventCustomName());
                            if ("pi".equals(analyticsEvent.getEventType())) {
                                jsonObject.put("in", (Object)analyticsEvent.getTransactionItemName());
                                final int transactionItemCount = analyticsEvent.getTransactionItemCount();
                                if (transactionItemCount > 0) {
                                    jsonObject.put("n", transactionItemCount);
                                }
                                jsonObject.put("id", (Object)analyticsEvent.getTransactionItemDescription());
                                jsonObject.put("ip", analyticsEvent.getTransactionItemPrice());
                                jsonObject.put("c", (Object)analyticsEvent.getTransactionCurrencyCode());
                                jsonObject.put("pi", (Object)analyticsEvent.getTransactionProductId());
                                jsonObject.put("ti", (Object)analyticsEvent.getTransactionId());
                                final int transactionItemType = analyticsEvent.getTransactionItemType();
                                if (AnalyticsEvent$TRANSACTION_ITEM_TYPE.INVALID.getValue() != transactionItemType) {
                                    jsonObject.put("it", transactionItemType);
                                }
                                final int transactionStatus = analyticsEvent.getTransactionStatus();
                                if (AnalyticsEvent$TRANSACTION_STATUS_SERVER_CODE.INVALID.getValue() != transactionStatus) {
                                    jsonObject.put("tp", transactionStatus);
                                }
                            }
                            jsonArray.put((Object)jsonObject);
                        }
                        catch (Exception ex2) {
                            Log.debug("[InMobi]-[Analytics]-4.4.3", "Events attribute map is incorrect. Not sending custom event map.");
                        }
                    }
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Analytics]-4.4.3", "Creation of events json object failed", ex);
                    continue;
                }
                break;
            }
            break;
        }
        return jsonArray;
    }
    
    private JSONObject a(final String s, final long n, final Context context) {
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("ft", SessionInfo.getFirstTime());
            jsonObject.put("a", (Object)context.getPackageName());
            jsonObject.put("an", (Object)AnalyticsUtils.getApplicationName(context));
            jsonObject.put("av", (Object)AnalyticsUtils.getAppVersion(context));
            jsonObject.put("p", (Object)"android");
            jsonObject.put("pv", (Object)Build$VERSION.RELEASE);
            jsonObject.put("ca", (Object)InternalSDKUtil.getConnectivityType(context));
            jsonObject.put("ma", (Object)Build.MANUFACTURER);
            jsonObject.put("mo", (Object)Build.MODEL);
            jsonObject.put("ss", (Object)s);
            jsonObject.put("sts", n);
            jsonObject.put("sv", (Object)"4.4.3");
            jsonObject.put("co", AnalyticsUtils.getCountryISO(context));
            return jsonObject;
        }
        catch (JSONException ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Creation of session object failed", (Throwable)ex);
            return jsonObject;
        }
    }
    
    private JSONObject a(final JSONObject p0, final JSONArray p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Lorg/json/JSONObject;
        //     3: dup            
        //     4: invokespecial   org/json/JSONObject.<init>:()V
        //     7: astore_3       
        //     8: aload_3        
        //     9: ldc_w           "session"
        //    12: aload_1        
        //    13: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    16: pop            
        //    17: aload_3        
        //    18: ldc_w           "events"
        //    21: aload_2        
        //    22: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //    25: pop            
        //    26: aload_3        
        //    27: areturn        
        //    28: astore          4
        //    30: ldc             "[InMobi]-[Analytics]-4.4.3"
        //    32: ldc_w           "Session addition to payload failed"
        //    35: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;)V
        //    38: goto            17
        //    41: astore          5
        //    43: ldc             "[InMobi]-[Analytics]-4.4.3"
        //    45: ldc_w           "Events addition to payload failed"
        //    48: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;)V
        //    51: aload_3        
        //    52: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                    
        //  -----  -----  -----  -----  ------------------------
        //  8      17     28     41     Lorg/json/JSONException;
        //  17     26     41     53     Lorg/json/JSONException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0017:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public AnalyticsPayload getPayloadList(final List list, final Context context) {
        Log.debug("[InMobi]-[Analytics]-4.4.3", "PayloadBuilder->getPayloadList:");
        final JSONArray jsonArray = new JSONArray();
        final ArrayList<AnalyticsEvent> list2 = new ArrayList<AnalyticsEvent>();
        final ArrayList<Long> list3 = new ArrayList<Long>();
        int n;
        for (int i = 0; i < list.size(); i = n) {
            list2.clear();
            final AnalyticsEvent analyticsEvent = list.get(i);
            String eventSessionId;
            for (eventSessionId = analyticsEvent.getEventSessionId(), n = i; n < list.size() && eventSessionId.equals(list.get(n).getEventSessionId()); ++n) {
                list3.add(list.get(n).getEventTableId());
                list2.add(list.get(n));
            }
            jsonArray.put((Object)this.a(this.a(eventSessionId, analyticsEvent.getEventSessionTimeStamp(), context), this.a(list2)));
        }
        final AnalyticsPayload analyticsPayload = new AnalyticsPayload(null, list3);
        if (jsonArray.length() != 0) {
            analyticsPayload.setCompletePayload(jsonArray.toString());
            analyticsPayload.setPayloadSize(list.size());
        }
        return analyticsPayload;
    }
}
