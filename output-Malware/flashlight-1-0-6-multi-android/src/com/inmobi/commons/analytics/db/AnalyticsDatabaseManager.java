// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.db;

import java.io.File;
import com.inmobi.commons.analytics.util.SessionInfo;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.inmobi.commons.analytics.net.AnalyticsNetworkManager;
import android.content.ContentValues;
import com.inmobi.commons.analytics.util.AnalyticsUtils;
import com.inmobi.commons.internal.Log;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public final class AnalyticsDatabaseManager
{
    private static AnalyticsDatabaseManager c;
    private static final String[] d;
    private static final String[] e;
    private static final String[] f;
    private static final String[] g;
    private static final String[] h;
    private static final String[] i;
    private AnalyticsSQLiteHelper a;
    private SQLiteDatabase b;
    
    static {
        d = new String[] { "_id", "eventid", "type", "sid", "ts", "ssts", "am" };
        e = new String[] { "_id", "levelid", "levelname" };
        f = new String[] { "_id", "levelid", "levelname", "levelstatus", "timetaken", "attemptcount", "attempttime" };
        g = new String[] { "_id", "eventname" };
        h = new String[] { "_id", "levelid", "begintime", "totalcount", "totaltime" };
        i = new String[] { "_id", "itemName", "itemType", "itemCount", "itemDescription", "itemPrice", "currencyCode", "productId", "transactionId", "transactionStatus" };
    }
    
    private AnalyticsEvent a(final Cursor cursor) {
        final AnalyticsEvent analyticsEvent = new AnalyticsEvent(cursor.getString(2));
        analyticsEvent.setEventSessionId(cursor.getString(3));
        analyticsEvent.setEventId(cursor.getLong(0));
        analyticsEvent.setEventTimeStamp(cursor.getLong(4));
        analyticsEvent.setEventSessionTimeStamp(cursor.getLong(5));
        analyticsEvent.setEventAttributeMap(cursor.getString(6));
        final long long1 = cursor.getLong(1);
        final String string = Long.toString(long1);
        Log.debug("[InMobi]-[Analytics]-4.4.3", "IMAppDatabaseManager->" + analyticsEvent.getEventType() + "-" + long1);
        if (long1 > -1L) {
            Cursor cursor2;
            if (analyticsEvent.getEventType().equals("lb")) {
                cursor2 = this.b.query("levelbegin", AnalyticsDatabaseManager.e, "_id = ?", new String[] { string }, (String)null, (String)null, (String)null);
                cursor2.moveToFirst();
                analyticsEvent.setEventLevelId(cursor2.getString(1));
                analyticsEvent.setEventLevelName(cursor2.getString(2));
            }
            else if (analyticsEvent.getEventType().equals("le")) {
                cursor2 = this.b.query("levelend", AnalyticsDatabaseManager.f, "_id = ?", new String[] { string }, (String)null, (String)null, (String)null);
                cursor2.moveToFirst();
                analyticsEvent.setEventLevelId(cursor2.getString(1));
                analyticsEvent.setEventLevelName(cursor2.getString(2));
                analyticsEvent.setEventLevelStatus(cursor2.getString(3));
                analyticsEvent.setEventTimeTaken(cursor2.getString(4));
                analyticsEvent.setEventAttemptCount(cursor2.getString(5));
                analyticsEvent.setEventAttemptTime(cursor2.getString(6));
            }
            else if (analyticsEvent.getEventType().equals("ce")) {
                cursor2 = this.b.query("customevent", AnalyticsDatabaseManager.g, "_id = ?", new String[] { string }, (String)null, (String)null, (String)null);
                cursor2.moveToFirst();
                analyticsEvent.setEventCustomName(cursor2.getString(1));
            }
            else {
                final boolean equals = analyticsEvent.getEventType().equals("pi");
                cursor2 = null;
                if (equals) {
                    cursor2 = this.b.query("transactiondetail", AnalyticsDatabaseManager.i, "_id = ?", new String[] { string }, (String)null, (String)null, (String)null);
                    cursor2.moveToFirst();
                    analyticsEvent.setTransactionItemName(cursor2.getString(1));
                    analyticsEvent.setTransactionItemType(cursor2.getInt(2));
                    analyticsEvent.setTransactionItemCount(cursor2.getInt(3));
                    analyticsEvent.setTransactionItemDescription(cursor2.getString(4));
                    analyticsEvent.setTransactionItemPrice(cursor2.getDouble(5));
                    analyticsEvent.setTransactionCurrencyCode(cursor2.getString(6));
                    analyticsEvent.setTransactionProductId(cursor2.getString(7));
                    analyticsEvent.setTransactionId(cursor2.getString(8));
                    analyticsEvent.setTransactionStatus(cursor2.getInt(9));
                }
            }
            if (cursor2 != null) {
                cursor2.close();
            }
        }
        return analyticsEvent;
    }
    
    private void a() {
        this.b = this.a.getWritableDatabase();
    }
    
    private void a(final AnalyticsEvent analyticsEvent, final long n) {
        Log.debug("[InMobi]-[Analytics]-4.4.3", "IMAppDatabaseManager->insertEvents-" + analyticsEvent.getEventType());
        if (n < AnalyticsUtils.getMaxdbcount()) {
            final ContentValues contentValues = new ContentValues();
            long n2 = -1L;
            final long eventTimeStamp = analyticsEvent.getEventTimeStamp();
            if (analyticsEvent.getEventType().equals("lb")) {
                final ContentValues contentValues2 = new ContentValues();
                contentValues2.put("begintime", eventTimeStamp);
                if (this.b.update("attemptdata", contentValues2, "levelid = ?", new String[] { analyticsEvent.getEventLevelId() }) <= 0) {
                    contentValues2.put("levelid", analyticsEvent.getEventLevelId());
                    contentValues2.put("totalcount", Integer.toString(0));
                    contentValues2.put("totaltime", Integer.toString(0));
                    this.b.insert("attemptdata", (String)null, contentValues2);
                }
                contentValues.put("levelid", analyticsEvent.getEventLevelId());
                contentValues.put("levelname", analyticsEvent.getEventLevelName());
                n2 = this.b.insert("levelbegin", (String)null, contentValues);
            }
            else if (analyticsEvent.getEventType().equals("le")) {
                final Cursor query = this.b.query("attemptdata", AnalyticsDatabaseManager.h, "levelid = ?", new String[] { analyticsEvent.getEventLevelId() }, (String)null, (String)null, (String)null, "1");
                String string;
                String string2;
                String string3;
                if (query.getCount() > 0) {
                    query.moveToFirst();
                    final long n3 = eventTimeStamp - Long.parseLong(query.getString(2));
                    string = Long.toString(n3);
                    string2 = Long.toString(n3 + Long.parseLong(query.getString(4)));
                    string3 = Integer.toString(1 + Integer.parseInt(query.getString(3)));
                    final ContentValues contentValues3 = new ContentValues();
                    contentValues3.put("totalcount", string3);
                    contentValues3.put("totaltime", string2);
                    this.b.update("attemptdata", contentValues3, "levelid = ?", new String[] { analyticsEvent.getEventLevelId() });
                }
                else {
                    string2 = "0";
                    string3 = "0";
                    string = "0";
                }
                query.close();
                contentValues.put("levelid", analyticsEvent.getEventLevelId());
                contentValues.put("levelstatus", analyticsEvent.getEventLevelStatus());
                contentValues.put("levelname", analyticsEvent.getEventLevelName());
                contentValues.put("timetaken", string);
                contentValues.put("attemptcount", string3);
                contentValues.put("attempttime", string2);
                n2 = this.b.insert("levelend", (String)null, contentValues);
            }
            else if (analyticsEvent.getEventType().equals("pi")) {
                contentValues.put("itemName", analyticsEvent.getTransactionItemName());
                final int transactionItemType = analyticsEvent.getTransactionItemType();
                if (AnalyticsEvent$TRANSACTION_ITEM_TYPE.INVALID.getValue() != transactionItemType) {
                    contentValues.put("itemType", transactionItemType);
                }
                final int transactionItemCount = analyticsEvent.getTransactionItemCount();
                if (transactionItemCount > 0) {
                    contentValues.put("itemCount", transactionItemCount);
                }
                contentValues.put("itemDescription", analyticsEvent.getTransactionItemDescription());
                contentValues.put("itemPrice", analyticsEvent.getTransactionItemPrice());
                contentValues.put("currencyCode", analyticsEvent.getTransactionCurrencyCode());
                contentValues.put("productId", analyticsEvent.getTransactionProductId());
                contentValues.put("transactionId", analyticsEvent.getTransactionId());
                final int transactionStatus = analyticsEvent.getTransactionStatus();
                if (AnalyticsEvent$TRANSACTION_STATUS_SERVER_CODE.INVALID.getValue() != transactionStatus) {
                    contentValues.put("transactionStatus", transactionStatus);
                }
                n2 = this.b.insert("transactiondetail", (String)null, contentValues);
            }
            else if (analyticsEvent.getEventType().equals("ce")) {
                contentValues.put("eventname", analyticsEvent.getEventCustomName());
                n2 = this.b.insert("customevent", (String)null, contentValues);
            }
            final ContentValues contentValues4 = new ContentValues();
            contentValues4.put("eventid", n2);
            contentValues4.put("type", analyticsEvent.getEventType());
            contentValues4.put("sid", analyticsEvent.getEventSessionId());
            contentValues4.put("ts", analyticsEvent.getEventTimeStamp());
            contentValues4.put("ssts", analyticsEvent.getEventSessionTimeStamp());
            contentValues4.put("am", analyticsEvent.getEventAttributeMap());
            this.b.insert("eventlist", (String)null, contentValues4);
        }
        else {
            Log.debug("[InMobi]-[Analytics]-4.4.3", "Database full");
        }
        if (!AnalyticsUtils.getStartHandle() && AnalyticsNetworkManager.getHandler() != null) {
            AnalyticsUtils.setStartHandle(true);
            AnalyticsNetworkManager.getHandler().sendEmptyMessageDelayed(1001, AnalyticsUtils.getTimeinterval());
        }
    }
    
    private void a(final List list) {
        Log.debug("[InMobi]-[Analytics]-4.4.3", "IMAppDatabaseManager->deleteEvents");
        final Iterator<Long> iterator = list.iterator();
        while (iterator.hasNext()) {
            final String string = iterator.next().toString();
            final Cursor query = this.b.query("eventlist", AnalyticsDatabaseManager.d, "_id=?", new String[] { string }, (String)null, (String)null, (String)null, "1");
            query.moveToFirst();
            final Long value = query.getLong(1);
            final String string2 = value.toString();
            final String string3 = query.getString(2);
            if (value > -1L) {
                if (string3.equals("lb")) {
                    this.b.delete("levelbegin", "_id = ?", new String[] { string2 });
                }
                else if (string3.equals("le")) {
                    this.b.delete("levelend", "_id = ?", new String[] { string2 });
                }
                else if (string3.equals("ce")) {
                    this.b.delete("customevent", "_id = ?", new String[] { string2 });
                }
                else if (string3.equals("pi")) {
                    this.b.delete("transactiondetail", "_id = ?", new String[] { string2 });
                }
            }
            query.close();
            this.b.delete("eventlist", "_id = ?", new String[] { string });
        }
    }
    
    private void b() {
        this.a.close();
    }
    
    private List c() {
        Log.debug("[InMobi]-[Analytics]-4.4.3", "IMAppDatabaseManager->getEvents");
        final ArrayList<AnalyticsEvent> list = new ArrayList<AnalyticsEvent>();
        if (!this.b.isOpen()) {
            android.util.Log.v("[InMobi]-[Analytics]-4.4.3", "IMAppDatabaseManager->getEvents()-database is not open");
            return list;
        }
        final Cursor query = this.b.query("eventlist", AnalyticsDatabaseManager.d, (String)null, (String[])null, (String)null, (String)null, (String)null, AnalyticsUtils.getMaxevents());
        query.moveToFirst();
        while (!query.isAfterLast()) {
            final AnalyticsEvent a = this.a(query);
            a.setEventTableId(query.getLong(0));
            list.add(a);
            query.moveToNext();
        }
        query.close();
        return list;
    }
    
    public static AnalyticsDatabaseManager getInstance() {
        synchronized (AnalyticsDatabaseManager.class) {
            if (AnalyticsDatabaseManager.c == null) {
                AnalyticsDatabaseManager.c = new AnalyticsDatabaseManager();
                final File databasePath = InternalSDKUtil.getContext().getDatabasePath("appengage.db");
                if (databasePath.isFile()) {
                    databasePath.renameTo(InternalSDKUtil.getContext().getDatabasePath("ltvp.db"));
                    SessionInfo.updatedFromOldSDK(InternalSDKUtil.getContext());
                }
                AnalyticsDatabaseManager.c.a = new AnalyticsSQLiteHelper(InternalSDKUtil.getContext());
            }
            return AnalyticsDatabaseManager.c;
        }
    }
    
    public final void deleteEvents(final List list) {
        synchronized (this) {
            try {
                this.a();
                this.a(list);
                this.a.close();
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Error deleting from DB.");
            }
        }
    }
    
    public final List getEvents() {
        synchronized (this) {
            try {
                this.a();
                final List c = this.c();
                this.a.close();
                return c;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Error reading events from DB.");
                return new ArrayList();
            }
        }
    }
    
    public final void insertEvents(final AnalyticsEvent analyticsEvent) {
        synchronized (this) {
            try {
                this.a();
                this.a(analyticsEvent, this.b.compileStatement("SELECT COUNT(*) FROM eventlist").simpleQueryForLong());
                this.a.close();
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Error in inserting into DB.", ex);
                ex.printStackTrace();
            }
        }
    }
}
