// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.events;

import com.inmobi.commons.analytics.db.FunctionTagTransaction;
import android.os.Bundle;
import android.content.Intent;
import com.inmobi.commons.analytics.db.FunctionTagEvent;
import com.inmobi.commons.analytics.db.FunctionStartSession;
import com.inmobi.commons.analytics.db.FunctionEndSession;
import com.inmobi.commons.analytics.db.FunctionLevelEnd;
import com.inmobi.commons.analytics.db.FunctionLevelBegin;
import com.inmobi.commons.analytics.net.AnalyticsNetworkManager;
import com.inmobi.commons.analytics.util.AnalyticsUtils;
import java.util.Map;
import com.inmobi.commons.InMobi;
import com.inmobi.commons.analytics.util.SessionInfo;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.analytics.db.AnalyticsEventsQueue;

public final class AnalyticsEventsWrapper
{
    private static AnalyticsEventsWrapper a;
    private static boolean c;
    private AnalyticsEventsQueue b;
    
    static {
        AnalyticsEventsWrapper.c = false;
    }
    
    private void a(final String s) {
        Log.debug("[InMobi]-[Analytics]-4.4.3", "IllegalArgumentException", new IllegalArgumentException(s));
    }
    
    private boolean a() {
        if (InternalSDKUtil.getContext() != null && SessionInfo.getSessionId(InternalSDKUtil.getContext()) == null) {
            this.startSession(InMobi.getAppId(), null);
        }
        else if (SessionInfo.getSessionId(InternalSDKUtil.getContext()) == null) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Please call InMobi.initialize or startSession before calling any events API");
            return false;
        }
        return true;
    }
    
    public static AnalyticsEventsWrapper getInstance() {
        synchronized (AnalyticsEventsWrapper.class) {
            if (AnalyticsUtils.getWebviewUserAgent() == null) {
                AnalyticsUtils.setWebviewUserAgent(InternalSDKUtil.getUserAgent(InternalSDKUtil.getContext()));
            }
            if (AnalyticsEventsWrapper.a == null) {
                AnalyticsEventsWrapper.a = new AnalyticsEventsWrapper();
                AnalyticsUtils.setStartHandle(false);
                AnalyticsNetworkManager.startInstance();
            }
            AnalyticsEventsWrapper.a.b = AnalyticsEventsQueue.getInstance();
            return AnalyticsEventsWrapper.a;
        }
    }
    
    public static boolean isEventsUser() {
        return AnalyticsEventsWrapper.c;
    }
    
    public static void setIsEventsUser() {
        AnalyticsEventsWrapper.c = true;
    }
    
    public final void beginSection(final int n, final String s, final Map map) {
        if (s == null) {
            this.a("arguments cannot be null");
        }
        else {
            try {
                if (this.a()) {
                    this.b.addElement(new FunctionLevelBegin(InternalSDKUtil.getContext(), n, s, map));
                    this.b.processFunctions();
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Begin Section Exception", ex);
            }
        }
    }
    
    public final void endSection(final int n, final String s, final Map map) {
        if (s == null) {
            this.a("arguments cannot be null");
        }
        else {
            try {
                if (this.a()) {
                    this.b.addElement(new FunctionLevelEnd(InternalSDKUtil.getContext(), n, s, null, map));
                    this.b.processFunctions();
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "End Section Exception", ex);
            }
        }
    }
    
    public final void endSession(final Map map) {
        try {
            this.b.addElement(new FunctionEndSession(InternalSDKUtil.getContext(), map));
            this.b.processFunctions();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "End Session Exception", ex);
        }
    }
    
    public final void startSession(final String s, final Map map) {
        if (s == null || s.trim().equals("")) {
            this.a("appid cannot be null or empty");
            return;
        }
        try {
            this.b.addElement(new FunctionStartSession(InternalSDKUtil.getContext(), s, map));
            this.b.processFunctions();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Init exception", ex);
        }
    }
    
    public final void tagEvent(final String s, final Map map) {
        if (s == null || s.trim().equals("")) {
            this.a("arguments cannot be null or empty");
        }
        else {
            try {
                if (this.a()) {
                    this.b.addElement(new FunctionTagEvent(InternalSDKUtil.getContext(), s, map));
                    this.b.processFunctions();
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Tag Event Exception", ex);
            }
        }
    }
    
    public final void tagTransactionManually(final Intent intent, final Bundle bundle) {
        if (intent == null) {
            this.a("transaction intent cannot be null or empty");
        }
        else {
            try {
                if (this.a()) {
                    this.b.addElement(new FunctionTagTransaction(InternalSDKUtil.getContext(), intent, bundle));
                    this.b.processFunctions();
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[Analytics]-4.4.3", "Tag Transaction Manually Exception", ex);
            }
        }
    }
}
