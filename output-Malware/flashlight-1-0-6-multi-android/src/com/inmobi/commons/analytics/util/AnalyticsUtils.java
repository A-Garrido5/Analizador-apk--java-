// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.util;

import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import android.telephony.TelephonyManager;
import android.content.pm.PackageManager;
import android.content.Context;
import java.util.Iterator;
import org.json.JSONObject;
import java.util.Map;
import com.inmobi.commons.analytics.events.AnalyticsEventsWrapper$IMSectionStatus;
import com.inmobi.commons.analytics.events.AnalyticsEventsWrapper$IMItemType;
import com.inmobi.commons.internal.Log;
import java.util.zip.GZIPOutputStream;
import java.io.OutputStream;
import android.util.Base64OutputStream;
import java.io.ByteArrayOutputStream;

public class AnalyticsUtils
{
    public static final String ANALYTICS_LOGGING_TAG = "[InMobi]-[Analytics]-4.4.3";
    public static final String INITIALIZE_NOT_CALLED = "Please call InMobi.initialize or startSession before calling any events API";
    private static String a;
    private static boolean b;
    
    public static void asyncPingInternal(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_1       
        //     2: aload_0        
        //     3: ldc             "%25"
        //     5: ldc             "%"
        //     7: invokevirtual   java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //    10: astore          4
        //    12: ldc             "[InMobi]-[Analytics]-4.4.3"
        //    14: new             Ljava/lang/StringBuilder;
        //    17: dup            
        //    18: ldc             "Pinging URL: "
        //    20: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    23: aload           4
        //    25: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    28: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    31: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;)V
        //    34: new             Ljava/net/URL;
        //    37: dup            
        //    38: aload           4
        //    40: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
        //    43: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
        //    46: checkcast       Ljava/net/HttpURLConnection;
        //    49: astore          5
        //    51: aload           5
        //    53: sipush          20000
        //    56: invokevirtual   java/net/HttpURLConnection.setConnectTimeout:(I)V
        //    59: aload           5
        //    61: ldc             "GET"
        //    63: invokevirtual   java/net/HttpURLConnection.setRequestMethod:(Ljava/lang/String;)V
        //    66: aload           5
        //    68: invokestatic    com/inmobi/commons/internal/InternalSDKUtil.addCommonPropertiesToConnection:(Ljava/net/HttpURLConnection;)V
        //    71: ldc             "[InMobi]-[Analytics]-4.4.3"
        //    73: new             Ljava/lang/StringBuilder;
        //    76: dup            
        //    77: ldc             "Async Ping Connection Response Code: "
        //    79: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    82: aload           5
        //    84: invokevirtual   java/net/HttpURLConnection.getResponseCode:()I
        //    87: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    90: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    93: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;)V
        //    96: aload           5
        //    98: ifnull          106
        //   101: aload           5
        //   103: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   106: return         
        //   107: astore_3       
        //   108: ldc             "[InMobi]-[Analytics]-4.4.3"
        //   110: ldc             "Error doing async Ping. "
        //   112: aload_3        
        //   113: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   116: aload_1        
        //   117: ifnull          106
        //   120: aload_1        
        //   121: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   124: return         
        //   125: astore_2       
        //   126: aload_1        
        //   127: ifnull          134
        //   130: aload_1        
        //   131: invokevirtual   java/net/HttpURLConnection.disconnect:()V
        //   134: aload_2        
        //   135: athrow         
        //   136: astore          7
        //   138: aload           5
        //   140: astore_1       
        //   141: aload           7
        //   143: astore_2       
        //   144: goto            126
        //   147: astore          6
        //   149: aload           5
        //   151: astore_1       
        //   152: aload           6
        //   154: astore_3       
        //   155: goto            108
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  2      51     107    108    Ljava/lang/Exception;
        //  2      51     125    126    Any
        //  51     96     147    158    Ljava/lang/Exception;
        //  51     96     136    147    Any
        //  108    116    125    126    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0106:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static String compressPayload(final String s) {
        try {
            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            final Base64OutputStream base64OutputStream = new Base64OutputStream((OutputStream)byteArrayOutputStream, 0);
            final GZIPOutputStream gzipOutputStream = new GZIPOutputStream((OutputStream)base64OutputStream);
            gzipOutputStream.write(s.getBytes("UTF-8"));
            gzipOutputStream.close();
            base64OutputStream.close();
            return byteArrayOutputStream.toString();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Exception compress sdk payload.", ex);
            return null;
        }
    }
    
    public static String convertItemType(final AnalyticsEventsWrapper$IMItemType analyticsEventsWrapper$IMItemType) {
        String s;
        if (analyticsEventsWrapper$IMItemType == AnalyticsEventsWrapper$IMItemType.CONSUMABLE) {
            s = "1";
        }
        else {
            if (analyticsEventsWrapper$IMItemType == AnalyticsEventsWrapper$IMItemType.DURABLE) {
                return "2";
            }
            final AnalyticsEventsWrapper$IMItemType personalization = AnalyticsEventsWrapper$IMItemType.PERSONALIZATION;
            s = null;
            if (analyticsEventsWrapper$IMItemType == personalization) {
                return "3";
            }
        }
        return s;
    }
    
    public static String convertLevelStatus(final AnalyticsEventsWrapper$IMSectionStatus analyticsEventsWrapper$IMSectionStatus) {
        String s;
        if (analyticsEventsWrapper$IMSectionStatus == AnalyticsEventsWrapper$IMSectionStatus.COMPLETED) {
            s = "1";
        }
        else {
            if (analyticsEventsWrapper$IMSectionStatus == AnalyticsEventsWrapper$IMSectionStatus.FAILED) {
                return "2";
            }
            final AnalyticsEventsWrapper$IMSectionStatus canceled = AnalyticsEventsWrapper$IMSectionStatus.CANCELED;
            s = null;
            if (analyticsEventsWrapper$IMSectionStatus == canceled) {
                return "3";
            }
        }
        return s;
    }
    
    public static String convertToJSON(final Map map) {
        if (map.size() > getExtraParamsLimit()) {
            Log.verbose("[InMobi]-[Analytics]-4.4.3", "Analytics events - number of key-value pairs in attribute map exceeds " + getExtraParamsLimit());
            return null;
        }
        JSONObject jsonObject = null;
        Label_0233: {
            Label_0193: {
                String s2 = null;
                Label_0153: {
                    try {
                        jsonObject = new JSONObject();
                        for (final String s : map.keySet()) {
                            if (s.length() <= 0 || s.length() > getMaxparamskey()) {
                                break Label_0193;
                            }
                            s2 = (String)map.get(s);
                            if (s2.length() > getMaxstring()) {
                                break Label_0153;
                            }
                            jsonObject.put(s, (Object)map.get(s));
                        }
                        break Label_0233;
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[Analytics]-4.4.3", "Unable to convert map to JSON");
                    }
                    return null;
                }
                Log.verbose("[InMobi]-[Analytics]-4.4.3", "Analytics events - value : " + s2 + " ,exceeds inmobi's limitation of " + getMaxstring() + " characters.");
                return null;
            }
            final String s;
            Log.verbose("[InMobi]-[Analytics]-4.4.3", "Analytics events - key : " + s + " ,exceeds inmobi's limitation of " + getMaxparamskey() + " characters.");
            return null;
        }
        if (jsonObject.length() > 0) {
            return jsonObject.toString();
        }
        return null;
    }
    
    public static String getAppVersion(final Context context) {
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Error retrieving application version");
            return null;
        }
    }
    
    public static String getApplicationName(final Context context) {
        try {
            final PackageManager packageManager = context.getPackageManager();
            return (String)packageManager.getApplicationLabel(packageManager.getApplicationInfo(context.getPackageName(), 0));
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Error retrieving application name");
            return null;
        }
    }
    
    public static Object getCountryISO(final Context context) {
        final TelephonyManager telephonyManager = (TelephonyManager)context.getSystemService("phone");
        if (telephonyManager.getNetworkCountryIso().equals("")) {
            return context.getResources().getConfiguration().locale.getISO3Country();
        }
        return telephonyManager.getNetworkCountryIso();
    }
    
    public static float getDeviceDensity(final Context context) {
        return context.getResources().getDisplayMetrics().density;
    }
    
    public static String getEventUrl() {
        return AnalyticsInitializer.getConfigParams().getEndPoints().getEventsUrl();
    }
    
    public static int getExtraParamsLimit() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getExtraParamsLimit();
        }
    }
    
    public static int getMaxRetryBeforeDiscard() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getMaxRetryBeforeCacheDiscard();
        }
    }
    
    public static long getMaxdbcount() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getMaxDbEvents();
        }
    }
    
    public static String getMaxevents() {
        synchronized (AnalyticsUtils.class) {
            return new StringBuilder().append(AnalyticsInitializer.getConfigParams().getGetParamsLimit()).toString();
        }
    }
    
    public static int getMaxparamskey() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getMaxKeyLength();
        }
    }
    
    public static int getMaxstring() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getMaxValLength();
        }
    }
    
    public static String getScreenHeight(final Context context) {
        return new StringBuilder().append(context.getResources().getDisplayMetrics().heightPixels).toString();
    }
    
    public static String getScreenWidth(final Context context) {
        return new StringBuilder().append(context.getResources().getDisplayMetrics().widthPixels).toString();
    }
    
    public static boolean getStartHandle() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsUtils.b;
        }
    }
    
    public static long getTimeinterval() {
        synchronized (AnalyticsUtils.class) {
            return AnalyticsInitializer.getConfigParams().getPingInterval();
        }
    }
    
    public static String getWebviewUserAgent() {
        return AnalyticsUtils.a;
    }
    
    public static void setStartHandle(final boolean b) {
        synchronized (AnalyticsUtils.class) {
            AnalyticsUtils.b = b;
        }
    }
    
    public static void setWebviewUserAgent(final String a) {
        AnalyticsUtils.a = a;
    }
}
