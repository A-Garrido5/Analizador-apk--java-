// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.iat.impl.net;

import com.inmobi.commons.analytics.iat.impl.config.AdTrackerEventType;
import com.inmobi.commons.analytics.iat.impl.AdTrackerConstants$StatusCode;
import android.content.Context;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import com.inmobi.commons.internal.CommonsException;
import org.json.JSONObject;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import java.util.Date;
import java.util.Calendar;
import com.inmobi.commons.analytics.iat.impl.AdTrackerUtils;
import com.inmobi.commons.internal.FileOperations;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.analytics.iat.impl.config.AdTrackerInitializer;
import com.inmobi.commons.analytics.iat.impl.Goal;
import java.util.Timer;
import android.os.Handler;
import java.util.concurrent.atomic.AtomicBoolean;
import com.inmobi.commons.analytics.iat.impl.GoalList;

public class AdTrackerNetworkInterface
{
    private static GoalList a;
    private static AtomicBoolean b;
    private static AtomicBoolean c;
    private static Thread d;
    private static Handler e;
    private static AtomicBoolean f;
    private static AtomicBoolean g;
    private static AdTrackerWebViewLoader h;
    private static boolean i;
    private static int j;
    private static String k;
    private static String l;
    private static String m;
    private static Timer n;
    
    static {
        AdTrackerNetworkInterface.b = null;
        AdTrackerNetworkInterface.f = null;
        AdTrackerNetworkInterface.g = null;
        AdTrackerNetworkInterface.i = false;
        AdTrackerNetworkInterface.j = 0;
        AdTrackerNetworkInterface.k = "https://d.appsdt.com/download/tracker/?";
        AdTrackerNetworkInterface.l = "https://d.appsdt.com/sdkdwnldbeacon.html";
        AdTrackerNetworkInterface.m = "https://d.appsdt.com/download/tracker/iatsdkconfs?";
        AdTrackerNetworkInterface.n = new Timer();
    }
    
    static String a() {
        return AdTrackerNetworkInterface.k;
    }
    
    private static void a(final Goal goal) {
        try {
            final String goalName = goal.getGoalName();
            long retryTime = goal.getRetryTime();
            final int maxWaitTime = AdTrackerInitializer.getConfigParams().getRetryParams().getMaxWaitTime();
            Label_0094: {
                if (!AdTrackerNetworkInterface.f.get()) {
                    break Label_0094;
                }
                retryTime = 0L;
                Label_0033: {
                    if (retryTime > 0L) {
                        Log.debug("[InMobi]-[AdTracker]-4.4.3", "Retrying goalname: " + goalName + " after " + retryTime / 1000L + " secs");
                    }
                }
                synchronized (AdTrackerNetworkInterface.d) {
                    Thread.sleep(retryTime);
                    return;
                    // iftrue(Label_0033:, retryTime <= (long)maxWaitTime)
                    retryTime = maxWaitTime;
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to reduce wait time exception", ex);
        }
    }
    
    private static void a(final String s, final Goal goal) {
        final boolean duplicateGoal = goal.isDuplicateGoal();
        final int goalCount = goal.getGoalCount();
        final String goalName = goal.getGoalName();
        Boolean b;
        if (!h()) {
            b = reportUsingWebview(s, goal);
        }
        else {
            b = reportUsingNetwork(s, goal);
        }
        if (b) {
            FileOperations.setPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "goalPingSuccess", true);
            AdTrackerNetworkInterface.a.removeGoal(goalName, goalCount);
            if ("download".equals(goalName)) {
                AdTrackerUtils.updateStatus();
            }
            return;
        }
        AdTrackerNetworkInterface.a.increaseRetryTime(goalName, goalCount, duplicateGoal);
    }
    
    static String b() {
        return AdTrackerNetworkInterface.l;
    }
    
    private static void b(final String s) {
        try {
            AdTrackerNetworkInterface.a.saveGoals();
            AdTrackerNetworkInterface.i = AdTrackerInitializer.getLogger().startNewSample();
            final Goal goal = AdTrackerNetworkInterface.a.get(0);
            if (!InternalSDKUtil.checkNetworkAvailibility(InternalSDKUtil.getContext())) {
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Network Unavailable");
                AdTrackerNetworkInterface.j = 1;
                deinit();
                return;
            }
            a(goal);
            g();
            a(s, goal);
            FileOperations.setPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "waitForReferrer", true);
            AdTrackerNetworkInterface.j = 0;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to process IAT goals", ex);
        }
    }
    
    public static void deinit() {
        if (AdTrackerNetworkInterface.b != null) {
            AdTrackerNetworkInterface.b.set(false);
        }
        if (AdTrackerNetworkInterface.a != null && !AdTrackerNetworkInterface.a.isEmpty()) {
            AdTrackerNetworkInterface.a.saveGoals();
        }
        AdTrackerNetworkInterface.c.set(false);
        AdTrackerNetworkInterface.a = null;
    }
    
    private static void g() {
        try {
            if (!i() && !l()) {
                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Getting wait time for referrer");
                final long j = j();
                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Waiting for referrer for " + j + "secs");
                Label_0080: {
                    if (i()) {
                        break Label_0080;
                    }
                    synchronized (AdTrackerNetworkInterface.d) {
                        AdTrackerNetworkInterface.d.wait(j * 1000L);
                        // monitorexit(AdTrackerNetworkInterface.d)
                        if (i()) {
                            return;
                        }
                        final String referrerFromLogs = AdTrackerUtils.getReferrerFromLogs();
                        if (referrerFromLogs != null) {
                            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Saving referrer from logs: " + referrerFromLogs);
                            AdTrackerUtils.setReferrerFromLogs(InternalSDKUtil.getContext(), referrerFromLogs);
                        }
                    }
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to set referrer", ex);
        }
    }
    
    public static GoalList getGoalList() {
        return AdTrackerNetworkInterface.a;
    }
    
    public static Thread getNetworkThread() {
        return AdTrackerNetworkInterface.d;
    }
    
    public static Handler getUIHandler() {
        return AdTrackerNetworkInterface.e;
    }
    
    public static AtomicBoolean getWebviewUploadStatus() {
        return AdTrackerNetworkInterface.g;
    }
    
    private static boolean h() {
        try {
            final String preferences = FileOperations.getPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "timetoLive");
            final String preferences2 = FileOperations.getPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "iat_ids");
            final Calendar instance = Calendar.getInstance();
            instance.setTime(new Date());
            instance.getTime().toString();
            if (preferences != null) {
                if (preferences2 == null) {
                    return false;
                }
                final Date time = instance.getTime();
                instance.add(11, Integer.parseInt(preferences));
                if (instance.getTime().after(time)) {
                    return true;
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Error parsing ttl", ex);
        }
        return false;
    }
    
    private static boolean i() {
        return FileOperations.getPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "referrer") != null;
    }
    
    public static void init() {
        if (AdTrackerNetworkInterface.a == null) {
            AdTrackerNetworkInterface.a = GoalList.getLoggedGoals();
        }
        if (AdTrackerNetworkInterface.b == null) {
            AdTrackerNetworkInterface.b = new AtomicBoolean(false);
        }
        AdTrackerNetworkInterface.c = new AtomicBoolean(false);
        if (AdTrackerNetworkInterface.e == null) {
            AdTrackerNetworkInterface.e = new Handler();
        }
        AdTrackerNetworkInterface.f = new AtomicBoolean(true);
        AdTrackerNetworkInterface.g = new AtomicBoolean(false);
    }
    
    public static boolean isMetricSample() {
        return AdTrackerNetworkInterface.i;
    }
    
    public static boolean isSynced() {
        return AdTrackerNetworkInterface.c.get();
    }
    
    public static int isUnstableNetwork() {
        return AdTrackerNetworkInterface.j;
    }
    
    private static long j() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: invokestatic    com/inmobi/commons/analytics/iat/impl/config/AdTrackerInitializer.getConfigParams:()Lcom/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams;
        //     3: invokevirtual   com/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams.getReferrerWaitTimeRetryCount:()I
        //     6: istore          4
        //     8: invokestatic    com/inmobi/commons/analytics/iat/impl/config/AdTrackerInitializer.getConfigParams:()Lcom/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams;
        //    11: invokevirtual   com/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams.getReferrerWaitTimeRetryInterval:()I
        //    14: istore          5
        //    16: invokestatic    com/inmobi/commons/analytics/iat/impl/config/AdTrackerInitializer.getConfigParams:()Lcom/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams;
        //    19: invokevirtual   com/inmobi/commons/analytics/iat/impl/config/AdTrackerConfigParams.getReferrerWaitTime:()I
        //    22: istore          6
        //    24: iload           4
        //    26: iconst_0       
        //    27: iload           4
        //    29: iload           5
        //    31: imul           
        //    32: iadd           
        //    33: imul           
        //    34: iconst_2       
        //    35: idiv           
        //    36: istore          7
        //    38: new             Lcom/inmobi/commons/cache/RetryMechanism;
        //    41: dup            
        //    42: iload           4
        //    44: iconst_1       
        //    45: isub           
        //    46: iload           5
        //    48: getstatic       com/inmobi/commons/analytics/iat/impl/net/AdTrackerNetworkInterface.n:Ljava/util/Timer;
        //    51: invokespecial   com/inmobi/commons/cache/RetryMechanism.<init>:(IILjava/util/Timer;)V
        //    54: new             Lcom/inmobi/commons/analytics/iat/impl/net/AdTrackerNetworkInterface$b;
        //    57: dup            
        //    58: invokespecial   com/inmobi/commons/analytics/iat/impl/net/AdTrackerNetworkInterface$b.<init>:()V
        //    61: invokevirtual   com/inmobi/commons/cache/RetryMechanism.rescheduleTimer:(Lcom/inmobi/commons/cache/RetryMechanism$RetryRunnable;)V
        //    64: getstatic       com/inmobi/commons/analytics/iat/impl/net/AdTrackerNetworkInterface.d:Ljava/lang/Thread;
        //    67: astore          8
        //    69: aload           8
        //    71: monitorenter   
        //    72: getstatic       com/inmobi/commons/analytics/iat/impl/net/AdTrackerNetworkInterface.d:Ljava/lang/Thread;
        //    75: iload           7
        //    77: i2l            
        //    78: invokevirtual   java/lang/Object.wait:(J)V
        //    81: aload           8
        //    83: monitorexit    
        //    84: invokestatic    com/inmobi/commons/internal/InternalSDKUtil.getContext:()Landroid/content/Context;
        //    87: ldc             "IMAdTrackerStatusUpload"
        //    89: ldc_w           "referrerWaitTime"
        //    92: invokestatic    com/inmobi/commons/internal/FileOperations.getLongPreferences:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)J
        //    95: lstore          10
        //    97: lload           10
        //    99: lstore_1       
        //   100: lconst_0       
        //   101: lload_1        
        //   102: lcmp           
        //   103: ifne            118
        //   106: iload           6
        //   108: sipush          1000
        //   111: idiv           
        //   112: istore          12
        //   114: iload           12
        //   116: i2l            
        //   117: lstore_1       
        //   118: lload_1        
        //   119: lreturn        
        //   120: astore          9
        //   122: aload           8
        //   124: monitorexit    
        //   125: aload           9
        //   127: athrow         
        //   128: astore_0       
        //   129: lconst_0       
        //   130: lstore_1       
        //   131: aload_0        
        //   132: astore_3       
        //   133: ldc             "[InMobi]-[AdTracker]-4.4.3"
        //   135: ldc_w           "Failed to get wait time"
        //   138: aload_3        
        //   139: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
        //   142: lload_1        
        //   143: lreturn        
        //   144: astore_3       
        //   145: goto            133
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  0      72     128    133    Ljava/lang/Exception;
        //  72     84     120    128    Any
        //  84     97     128    133    Ljava/lang/Exception;
        //  106    114    144    148    Ljava/lang/Exception;
        //  122    128    128    133    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0118:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static void k() {
        final DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
        final String string = AdTrackerNetworkInterface.m + "t=" + System.currentTimeMillis();
        Log.internal("[InMobi]-[AdTracker]-4.4.3", "Fetch Wait time URL: " + string);
        final HttpGet httpGet = new HttpGet(string);
        HttpResponse execute;
        while (true) {
            try {
                execute = defaultHttpClient.execute((HttpUriRequest)httpGet);
                if (execute.getStatusLine().getStatusCode() == 200) {
                    final HttpResponse httpResponse = execute;
                    final HttpEntity httpEntity = httpResponse.getEntity();
                    final String s = EntityUtils.toString(httpEntity);
                    final String s2 = "[InMobi]-[AdTracker]-4.4.3";
                    final String s3 = "Wait time received for referrer: ";
                    final StringBuilder sb = new StringBuilder(s3);
                    final String s4 = s;
                    final StringBuilder sb2 = sb.append(s4);
                    final String s5 = sb2.toString();
                    Log.internal(s2, s5);
                    final String s6 = s;
                    final JSONObject jsonObject = new JSONObject(s6);
                    final String s7 = "referrerWaitTime";
                    final long n = jsonObject.getLong(s7);
                    final Context context = InternalSDKUtil.getContext();
                    final String s8 = "IMAdTrackerStatusUpload";
                    final String s9 = "referrerWaitTime";
                    final long n2 = n;
                    FileOperations.setPreferences(context, s8, s9, n2);
                    return;
                }
                throw new CommonsException(-1);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Error fetching wait time for referrer", ex);
                execute = null;
                continue;
            }
            break;
        }
        try {
            final HttpResponse httpResponse = execute;
            final HttpEntity httpEntity = httpResponse.getEntity();
            final String s = EntityUtils.toString(httpEntity);
            final String s2 = "[InMobi]-[AdTracker]-4.4.3";
            final String s3 = "Wait time received for referrer: ";
            final StringBuilder sb = new StringBuilder(s3);
            final String s4 = s;
            final StringBuilder sb2 = sb.append(s4);
            final String s5 = sb2.toString();
            Log.internal(s2, s5);
            final String s6 = s;
            final JSONObject jsonObject = new JSONObject(s6);
            final String s7 = "referrerWaitTime";
            final long n = jsonObject.getLong(s7);
            final Context context = InternalSDKUtil.getContext();
            final String s8 = "IMAdTrackerStatusUpload";
            final String s9 = "referrerWaitTime";
            final long n2 = n;
            FileOperations.setPreferences(context, s8, s9, n2);
            return;
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Error fetching wait time for referrer", ex2);
            return;
        }
        throw new CommonsException(-1);
    }
    
    private static boolean l() {
        return FileOperations.getBooleanPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "waitForReferrer");
    }
    
    public static void notifyThread() {
        try {
            synchronized (AdTrackerNetworkInterface.d) {
                AdTrackerNetworkInterface.d.notify();
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to notify thread", ex);
        }
    }
    
    public static AdTrackerConstants$StatusCode reportToServer(final String s) {
        synchronized (AdTrackerNetworkInterface.class) {
            if (AdTrackerNetworkInterface.b.compareAndSet(false, true)) {
                (AdTrackerNetworkInterface.d = new Thread(new Runnable() {
                    @Override
                    public final void run() {
                        while (true) {
                            try {
                                if (AdTrackerNetworkInterface.c.get()) {
                                    break;
                                }
                                AdTrackerNetworkInterface.a.saveGoals();
                                AdTrackerNetworkInterface.c.set(true);
                                if (AdTrackerNetworkInterface.a == null || AdTrackerNetworkInterface.a.isEmpty()) {
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "GoalList Empty");
                                    AdTrackerNetworkInterface.deinit();
                                    return;
                                }
                                try {
                                    while (!AdTrackerNetworkInterface.a.isEmpty()) {
                                        b(s);
                                    }
                                }
                                catch (Exception ex2) {
                                    AdTrackerNetworkInterface.deinit();
                                    return;
                                }
                            }
                            catch (Exception ex) {
                                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Exception reporting goals", ex);
                                return;
                            }
                            AdTrackerNetworkInterface.b.set(false);
                        }
                        AdTrackerNetworkInterface.deinit();
                    }
                })).setPriority(1);
                AdTrackerNetworkInterface.d.start();
            }
            return AdTrackerConstants$StatusCode.APP_ANALYTICS_UPLOAD_SUCCESS;
        }
    }
    
    protected static boolean reportUsingNetwork(final String s, final Goal goal) {
        while (true) {
            final String goalName = goal.getGoalName();
            while (true) {
                Label_0135: {
                    try {
                        final String preferences = FileOperations.getPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "iat_ids");
                        final AdTrackerConstants$StatusCode app_ANALYTICS_UPLOAD_FAILURE = AdTrackerConstants$StatusCode.APP_ANALYTICS_UPLOAD_FAILURE;
                        final AdTrackerConstants$StatusCode sendHTTPRequest = AdTrackerRequestResponseBuilder.sendHTTPRequest(s, goal, preferences);
                        if (AdTrackerConstants$StatusCode.APP_ANALYTICS_UPLOAD_SUCCESS == sendHTTPRequest) {
                            AdTrackerNetworkInterface.f.set(true);
                            Log.debug("[InMobi]-[AdTracker]-4.4.3", "Successfully uploaded goal: " + goalName);
                        }
                        else {
                            if (AdTrackerConstants$StatusCode.RELOAD_WEBVIEW_ERROR != sendHTTPRequest) {
                                break Label_0135;
                            }
                            AdTrackerNetworkInterface.f.set(false);
                        }
                        return AdTrackerNetworkInterface.f.get();
                    }
                    catch (Exception ex) {
                        AdTrackerNetworkInterface.f.set(false);
                        Log.debug("[InMobi]-[AdTracker]-4.4.3", "Failed to upload goal: " + goalName);
                        Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to report goal: ", ex);
                        return AdTrackerNetworkInterface.f.get();
                    }
                    continue;
                }
                AdTrackerNetworkInterface.f.set(false);
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Failed to upload goal: " + goalName);
                continue;
            }
        }
    }
    
    protected static boolean reportUsingWebview(final String s, final Goal goal) {
        while (true) {
            while (true) {
                while (true) {
                    try {
                        final int webviewTimeout = AdTrackerInitializer.getConfigParams().getWebviewTimeout();
                        AdTrackerNetworkInterface.h = new AdTrackerWebViewLoader();
                        AdTrackerRequestResponseBuilder.saveWebviewRequestParam(s, goal);
                        AdTrackerNetworkInterface.h.loadWebview(goal);
                        synchronized (AdTrackerNetworkInterface.d) {
                            AdTrackerNetworkInterface.d.wait(webviewTimeout);
                            // monitorexit(AdTrackerNetworkInterface.d)
                            if (AdTrackerWebViewLoader.isWebviewLoading()) {
                                AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_FAILURE, goal, 0, 0L, 408, null);
                            }
                            if (!AdTrackerNetworkInterface.g.get()) {
                                AdTrackerNetworkInterface.f.set(false);
                                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Failed to upload goal: " + goal.getGoalName());
                                AdTrackerNetworkInterface.h.deinit(webviewTimeout);
                                return AdTrackerNetworkInterface.g.get();
                            }
                        }
                    }
                    catch (Exception ex) {
                        AdTrackerNetworkInterface.f.set(false);
                        Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to load webview Exception", ex);
                        continue;
                    }
                    break;
                }
                AdTrackerNetworkInterface.f.set(true);
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Uploaded goal successfully: " + goal.getGoalName());
                continue;
            }
        }
    }
    
    public static void setSynced(final boolean b) {
        AdTrackerNetworkInterface.c.set(b);
    }
    
    public static void setWebviewUploadStatus(final boolean b) {
        AdTrackerNetworkInterface.g.set(b);
    }
    
    public static void waitThread(final int n) {
        try {
            synchronized (AdTrackerNetworkInterface.d) {
                AdTrackerNetworkInterface.d.wait(n);
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to notify thread", ex);
        }
    }
}
