// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.iat.impl.net;

import com.inmobi.commons.internal.FileOperations;
import org.json.JSONObject;
import java.net.URLDecoder;
import com.inmobi.commons.analytics.iat.impl.AdTrackerUtils;
import com.inmobi.commons.analytics.iat.impl.config.AdTrackerEventType;
import com.inmobi.commons.internal.Log;
import android.webkit.WebViewClient;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.analytics.iat.impl.Goal;
import java.util.concurrent.atomic.AtomicBoolean;
import android.webkit.WebView;

public class AdTrackerWebViewLoader
{
    private static WebView a;
    private static AtomicBoolean b;
    private long c;
    private long d;
    private Goal e;
    
    static {
        AdTrackerWebViewLoader.a = null;
    }
    
    public AdTrackerWebViewLoader() {
        this.c = 0L;
        this.d = 0L;
        AdTrackerNetworkInterface.getUIHandler().post((Runnable)new Runnable() {
            @Override
            public void run() {
                AdTrackerWebViewLoader.b = new AtomicBoolean(false);
                AdTrackerWebViewLoader.a = new WebView(InternalSDKUtil.getContext());
                AdTrackerWebViewLoader.a.setWebViewClient((WebViewClient)new AdTrackerWebViewLoader$MyWebViewClient(AdTrackerWebViewLoader.this));
                AdTrackerWebViewLoader.a.getSettings().setJavaScriptEnabled(true);
                AdTrackerWebViewLoader.a.getSettings().setCacheMode(2);
                AdTrackerWebViewLoader.a.addJavascriptInterface((Object)new AdTrackerWebViewLoader$JSInterface(), "iatsdk");
            }
        });
    }
    
    private AdTrackerWebViewLoader$e a(final String s) {
        AdTrackerWebViewLoader$e adTrackerWebViewLoader$e;
        while (true) {
            adTrackerWebViewLoader$e = new AdTrackerWebViewLoader$e();
        Label_0048_Outer:
            while (true) {
                int n = 0;
            Label_0378:
                while (true) {
                    int n2 = 0;
                    Label_0372: {
                        while (true) {
                            try {
                                final String[] split = s.split("&");
                                n = 0;
                                String s2 = null;
                                int int1 = 0;
                                Label_0225: {
                                    Exception ex;
                                    int n3;
                                    try {
                                        if (n < split.length) {
                                            final String[] split2 = split[n].split("=");
                                            n2 = 0;
                                            if (n2 >= split2.length) {
                                                break Label_0378;
                                            }
                                            if ("err".equals(split2[n2])) {
                                                int1 = Integer.parseInt(split2[n2 + 1]);
                                                break Label_0372;
                                            }
                                            if ("res".equals(split2[n2])) {
                                                s2 = split2[n2 + 1];
                                            }
                                            break Label_0372;
                                        }
                                        else {
                                            adTrackerWebViewLoader$e.a = int1;
                                            adTrackerWebViewLoader$e.b = s2;
                                            if (5003 == int1) {
                                                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Webview Timeout " + s2);
                                                break;
                                            }
                                            if (5001 == int1) {
                                                Log.internal("[InMobi]-[AdTracker]-4.4.3", "Invalid params passed " + s2);
                                                break;
                                            }
                                            break Label_0225;
                                        }
                                    }
                                    catch (Exception ex2) {
                                        ex = ex2;
                                        n3 = int1;
                                    }
                                    AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_FAILURE, this.e, 0, 0L, n3, null);
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "Check content Exception", ex);
                                    return null;
                                }
                                if (5002 == int1) {
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "XMLHTTP request not supported " + s2);
                                    break;
                                }
                                if (5005 == int1) {
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "Invalid JSON Response " + s2);
                                    break;
                                }
                                if (5004 == int1) {
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "Webview Server Error " + s2);
                                    break;
                                }
                                if (5000 == int1) {
                                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "Webview response " + URLDecoder.decode(s2, "utf-8"));
                                    break;
                                }
                                break;
                            }
                            catch (Exception ex3) {
                                final Exception ex = ex3;
                                final int n3 = 0;
                                continue;
                            }
                            break;
                        }
                    }
                    ++n2;
                    continue;
                }
                ++n;
                continue Label_0048_Outer;
            }
        }
        return adTrackerWebViewLoader$e;
    }
    
    private boolean b(final String s) {
        try {
            final JSONObject jsonObject = new JSONObject(URLDecoder.decode(s, "utf-8"));
            final JSONObject jsonObject2 = jsonObject.getJSONObject("iat_ids");
            final String string = jsonObject.getString("errmsg");
            final int int1 = jsonObject.getInt("timetoLive");
            final int int2 = jsonObject.getInt("errcode");
            if (int2 != 6000) {
                AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_FAILURE, this.e, 0, 0L, int2, null);
                Log.debug("[InMobi]-[AdTracker]-4.4.3", "Failed to upload goal in webview" + string);
                return false;
            }
            AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_SUCCESS, this.e, 0, this.d, 0, null);
            String string2 = jsonObject2.toString();
            if (int2 == 6001) {
                string2 = null;
            }
            FileOperations.setPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "iat_ids", string2);
            FileOperations.setPreferences(InternalSDKUtil.getContext(), "IMAdTrackerStatusUpload", "timetoLive", Integer.toString(int1));
            return true;
        }
        catch (Exception ex) {
            AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_FAILURE, this.e, 0, 0L, 424, ex.getMessage());
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Failed to upload goal in webview", ex);
            return false;
        }
    }
    
    public static WebView getWebview() {
        return AdTrackerWebViewLoader.a;
    }
    
    public static boolean isWebviewLoading() {
        return AdTrackerWebViewLoader.b.get();
    }
    
    public void deinit(final int n) {
        AdTrackerNetworkInterface.getUIHandler().postDelayed((Runnable)new Runnable() {
            @Override
            public void run() {
                if (AdTrackerWebViewLoader.a != null) {
                    AdTrackerWebViewLoader.a.stopLoading();
                    AdTrackerWebViewLoader.a.destroy();
                    AdTrackerWebViewLoader.a = null;
                    AdTrackerWebViewLoader.b.set(false);
                }
            }
        }, (long)n);
    }
    
    public boolean loadWebview(final Goal e) {
        this.e = e;
        try {
            AdTrackerNetworkInterface.getUIHandler().post((Runnable)new Runnable() {
                @Override
                public void run() {
                    AdTrackerWebViewLoader.this.c = System.currentTimeMillis();
                    AdTrackerWebViewLoader.b.set(true);
                    Log.internal("[InMobi]-[AdTracker]-4.4.3", "Load Webview: " + AdTrackerNetworkInterface.b());
                    AdTrackerWebViewLoader.a.loadUrl(AdTrackerNetworkInterface.b());
                }
            });
            return true;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", ex.toString());
            return false;
        }
    }
    
    public void stopLoading() {
        AdTrackerNetworkInterface.getUIHandler().post((Runnable)new Runnable() {
            @Override
            public void run() {
                if (AdTrackerWebViewLoader.a != null) {
                    AdTrackerWebViewLoader.b.set(false);
                }
                AdTrackerWebViewLoader.a.stopLoading();
            }
        });
    }
}
