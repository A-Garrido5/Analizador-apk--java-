// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.analytics.iat.impl;

import com.inmobi.commons.analytics.iat.impl.config.AdTrackerEventType;
import com.inmobi.commons.analytics.iat.impl.config.AdTrackerInitializer;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.analytics.iat.impl.net.AdTrackerNetworkInterface;
import com.inmobi.commons.internal.FileOperations;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.util.Vector;

public class GoalList extends Vector
{
    public static GoalList getLoggedGoals() {
        final boolean fileExist = FileOperations.isFileExist(InternalSDKUtil.getContext(), "eventlog");
        GoalList list = null;
        if (fileExist) {
            list = (GoalList)FileOperations.readFromFile(InternalSDKUtil.getContext(), "eventlog");
        }
        if (list == null) {
            list = new GoalList();
        }
        return list;
    }
    
    public boolean addGoal(final String s, final int n, final long retryTime, final int retryCount, final boolean duplicateGoal) {
        AdTrackerNetworkInterface.setSynced(false);
        if (s == null || "".equals(s.trim())) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "GoalName is null");
            return false;
        }
        if (n <= 0 || retryTime < 0L) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "GoalCount cant be 0 or RetryTime cannot be negative");
            return false;
        }
        while (true) {
            while (true) {
                Label_0162: {
                    try {
                        Block_5: {
                            for (final Goal goal : this) {
                                if (goal.getGoalName().equals(s)) {
                                    break Block_5;
                                }
                            }
                            break Label_0162;
                        }
                        final Goal goal;
                        if (!"download".equals(s)) {
                            goal.setGoalCount(n + goal.getGoalCount());
                        }
                        goal.setRetryCount(retryCount);
                        goal.setRetryTime(retryTime);
                        goal.setDuplicateGoal(duplicateGoal);
                        final int n2 = 1;
                        if (n2 == 0) {
                            this.add(new Goal(s, n, retryTime, retryCount, duplicateGoal));
                        }
                        return true;
                    }
                    catch (Exception ex) {
                        return false;
                    }
                }
                final int n2 = 0;
                continue;
            }
        }
    }
    
    public Goal getGoal(final String s) {
        if (s == null || "".equals(s.trim())) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "GoalName is null");
            return null;
        }
        try {
            for (final Goal goal : this) {
                if (goal.getGoalName().equals(s)) {
                    return goal;
                }
            }
            return null;
        }
        catch (Exception ex) {
            return null;
        }
        return null;
    }
    
    public boolean increaseRetryTime(final String s, final int n, final boolean b) {
        Label_0016: {
            if (s == null) {
                break Label_0016;
            }
            while (true) {
                while (true) {
                    int maxWaitTime = 0;
                    Label_0169: {
                        try {
                            if ("".equals(s.trim())) {
                                Log.internal("[InMobi]-[AdTracker]-4.4.3", "GoalName cannot be null");
                                return false;
                            }
                            final Goal goal = this.getGoal(s);
                            maxWaitTime = AdTrackerInitializer.getConfigParams().getRetryParams().getMaxWaitTime();
                            final int maxRetry = AdTrackerInitializer.getConfigParams().getRetryParams().getMaxRetry();
                            if (goal != null) {
                                final long retryTime = goal.getRetryTime();
                                final int retryCount = goal.getRetryCount();
                                if (retryTime >= maxWaitTime) {
                                    break Label_0169;
                                }
                                final long n2 = 30000L + retryTime * 2L;
                                if (n2 > maxWaitTime) {
                                    break Label_0169;
                                }
                                this.removeGoal(s, n);
                                final int n3 = retryCount + 1;
                                if (n3 < maxRetry) {
                                    this.addGoal(s, n, n2, n3, b);
                                    return true;
                                }
                                AdTrackerUtils.reportMetric(AdTrackerEventType.GOAL_DUMPED, goal, 0, 0L, 0, null);
                                return true;
                            }
                        }
                        catch (Exception ex) {
                            Log.internal("[InMobi]-[AdTracker]-4.4.3", "Cant increase retry time", ex);
                        }
                        return false;
                    }
                    final long n2 = maxWaitTime;
                    continue;
                }
            }
        }
    }
    
    public boolean removeGoal(final String s, final int n) {
        AdTrackerNetworkInterface.setSynced(false);
        if (s == null || "".equals(s.trim())) {
            Log.debug("[InMobi]-[AdTracker]-4.4.3", "GoalName is null");
            return false;
        }
        if (n <= 0) {
            Log.internal("[InMobi]-[AdTracker]-4.4.3", "GoalCount cannot be 0 or negative");
            return false;
        }
        for (final Goal goal : this) {
            if (goal.getGoalName().equals(s)) {
                final int goalCount = goal.getGoalCount() - n;
                if (s.equals("download")) {
                    this.remove(goal);
                    break;
                }
                if (goalCount <= 0) {
                    this.remove(goal);
                    break;
                }
                goal.setGoalCount(goalCount);
                break;
            }
        }
        return true;
    }
    
    public void saveGoals() {
        FileOperations.saveToFile(InternalSDKUtil.getContext(), "eventlog", this);
    }
}
