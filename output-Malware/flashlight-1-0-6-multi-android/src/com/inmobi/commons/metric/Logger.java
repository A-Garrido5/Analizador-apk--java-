// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.metric;

public class Logger
{
    private MetricConfigParams a;
    private Integer b;
    private Storage c;
    private Queuer d;
    private Logger$MetricsCallback e;
    
    public Logger(final int n, final String s) {
        this.a = new MetricConfigParams();
        this.b = 2147483646;
        this.c = null;
        this.d = new Queuer();
        this.e = null;
        this.c = new Storage(n, s, this.d, this.a);
    }
    
    public Logger(final int n, final String s, final Storage$PreProcessor storage$PreProcessor) {
        this.a = new MetricConfigParams();
        this.b = 2147483646;
        this.c = null;
        this.d = new Queuer();
        this.e = null;
        this.c = new Storage(n, s, this.d, this.a, storage$PreProcessor);
    }
    
    @Override
    protected void finalize() {
        this.c.saveToLatest();
        super.finalize();
    }
    
    public void logEvent(final EventLog eventLog) {
        this.c.readNumberOfEventsAndTimeStampFromPersistent();
        if (this.e != null) {
            this.e.dataCollected(eventLog);
        }
        this.d.log(eventLog);
        if (this.d.a() >= this.a.getDumpThreshhold()) {
            this.c.saveLocalCache();
        }
        if (this.c.getEvents() >= this.a.getMaxInQueue() || this.c.getTimestamp() + this.a.getNextRetryInterval() <= System.currentTimeMillis() / 1000L) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    Logger.this.c.sendFile();
                }
            }).start();
        }
    }
    
    public void setCallback(final Logger$MetricsCallback logger$MetricsCallback) {
        this.e = logger$MetricsCallback;
        this.c.setCallback(logger$MetricsCallback);
    }
    
    public void setMetricConfigParams(final MetricConfigParams metricConfigParams) {
        if (metricConfigParams != null) {
            this.a = metricConfigParams;
            this.c.a = metricConfigParams;
        }
    }
    
    public boolean startNewSample() {
        synchronized (this.b) {
            final Integer b = this.b;
            ++this.b;
            if (this.b >= this.a.getSamplingFactor()) {
                this.b = 0;
                return true;
            }
            return false;
        }
    }
}
