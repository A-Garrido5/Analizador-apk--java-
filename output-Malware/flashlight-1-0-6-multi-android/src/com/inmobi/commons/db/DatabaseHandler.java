// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.db;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.content.ContentValues;
import android.database.Cursor;
import java.util.LinkedHashMap;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import android.database.sqlite.SQLiteDatabase$CursorFactory;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import java.util.ArrayList;
import android.database.sqlite.SQLiteOpenHelper;

public abstract class DatabaseHandler extends SQLiteOpenHelper
{
    public static final String DATABASE_NAME = "im.db";
    private static String c;
    private static String d;
    private static String e;
    private static String f;
    private static String g;
    private static String h;
    private static String i;
    private static String j;
    private static String k;
    private static String l;
    private ArrayList a;
    private SQLiteDatabase b;
    
    static {
        DatabaseHandler.c = "CREATE TABLE IF NOT EXISTS ";
        DatabaseHandler.d = "DROP TABLE IF EXISTS ";
        DatabaseHandler.e = " PRIMARY KEY ";
        DatabaseHandler.f = " AUTOINCREMENT ";
        DatabaseHandler.g = " NOT NULL ";
        DatabaseHandler.h = "SELECT * FROM ";
        DatabaseHandler.i = " WHERE ";
        DatabaseHandler.j = " ORDER BY ";
        DatabaseHandler.k = "; ";
        DatabaseHandler.l = " Limit ?";
    }
    
    protected DatabaseHandler(final Context context, final ArrayList a) {
        super(context, "im.db", (SQLiteDatabase$CursorFactory)null, 1);
        this.a = a;
    }
    
    private void a(final SQLiteDatabase sqLiteDatabase) {
        while (true) {
            while (true) {
                StringBuilder sb = null;
                Label_0251: {
                    try {
                        if (this.a != null && !this.a.isEmpty()) {
                            final Iterator<TableData> iterator = this.a.iterator();
                            if (iterator.hasNext()) {
                                final TableData tableData = iterator.next();
                                final String getmTableName = tableData.getmTableName();
                                final LinkedHashMap getmColumns = tableData.getmColumns();
                                sb = new StringBuilder(DatabaseHandler.c + getmTableName + " (");
                                for (final String s : getmColumns.keySet()) {
                                    final ColumnData columnData = (ColumnData)getmColumns.get(s);
                                    sb.append(" " + s + " " + columnData.getDataType().toString());
                                    if (columnData.isPrimaryKey()) {
                                        sb.append(DatabaseHandler.e);
                                    }
                                    if (columnData.isAutoIncrement()) {
                                        sb.append(DatabaseHandler.f);
                                    }
                                    if (columnData.isMandatory()) {
                                        sb.append(DatabaseHandler.g);
                                    }
                                    sb.append(",");
                                }
                                break Label_0251;
                            }
                        }
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-4.4.3", "Exception creating table", ex);
                    }
                    break;
                }
                String s2;
                if (',' == sb.charAt(-1 + sb.length())) {
                    s2 = sb.substring(0, -2 + sb.length());
                }
                else {
                    s2 = sb.toString();
                }
                final String concat = s2.concat(" );");
                Log.internal("[InMobi]-4.4.3", "Table: " + concat);
                sqLiteDatabase.execSQL(concat);
                continue;
            }
        }
    }
    
    public void close() {
        try {
            this.b.close();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Failed to close  db", ex);
        }
    }
    
    public int delete(final String s, final String s2, final String[] array) {
        synchronized (this) {
            try {
                return this.b.delete(s, s2, array);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to insert to db", ex);
                return -1;
            }
        }
    }
    
    public Cursor executeQuery(final String s, final String[] array) {
        synchronized (this) {
            try {
                return this.b.rawQuery(s, array);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to execute db query", ex);
                return null;
            }
        }
    }
    
    public Cursor getAll(final String s, final String s2) {
        // monitorenter(this)
        Label_0018: {
            if (s2 == null) {
                break Label_0018;
            }
            try {
                Cursor cursor;
                if ("".equals(s2.trim())) {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.k, (String[])null);
                }
                else {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.j + s2 + DatabaseHandler.k, (String[])null);
                }
                cursor.moveToFirst();
                return cursor;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to all rows", ex);
                return null;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    public Cursor getNRows(final String s, final String s2, final int n) {
        // monitorenter(this)
        Label_0018: {
            if (s2 == null) {
                break Label_0018;
            }
            try {
                Cursor cursor;
                if ("".equals(s2.trim())) {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.k, (String[])null);
                }
                else {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.j + s2 + DatabaseHandler.l + DatabaseHandler.k, new String[] { String.valueOf(n) });
                }
                cursor.moveToFirst();
                return cursor;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to all rows", ex);
                return null;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    public int getNoOfRows(final String s, final String s2, final String[] array) {
        // monitorenter(this)
        Label_0079: {
            if (s2 == null) {
                break Label_0079;
            }
            try {
                Cursor cursor;
                if (!"".equals(s2.trim())) {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.i + s2, array);
                }
                else {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.k, (String[])null);
                }
                final int count = cursor.getCount();
                cursor.close();
                return count;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to get number of rows", ex);
                return 0;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    public Cursor getRow(final String s, final String s2, final String[] array) {
        // monitorenter(this)
        Label_0018: {
            if (s2 == null) {
                break Label_0018;
            }
            try {
                Cursor cursor;
                if ("".equals(s2.trim())) {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.k, (String[])null);
                }
                else {
                    cursor = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.i + s2 + DatabaseHandler.k, array);
                }
                cursor.moveToFirst();
                return cursor;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to all rows", ex);
                return null;
            }
            finally {
            }
            // monitorexit(this)
        }
    }
    
    protected int getTableSize(final String s) {
        synchronized (this) {
            try {
                final Cursor rawQuery = this.b.rawQuery(DatabaseHandler.h + s + DatabaseHandler.k, (String[])null);
                final int count = rawQuery.getCount();
                rawQuery.close();
                return count;
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to table size ", ex);
                return 0;
            }
        }
    }
    
    public long insert(final String s, final ContentValues contentValues) {
        synchronized (this) {
            try {
                return this.b.insert(s, (String)null, contentValues);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to insert to db", ex);
                return -1L;
            }
        }
    }
    
    public void onCreate(final SQLiteDatabase sqLiteDatabase) {
        try {
            this.a(sqLiteDatabase);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Exception Creating table", ex);
        }
    }
    
    public void onUpgrade(final SQLiteDatabase sqLiteDatabase, final int n, final int n2) {
        try {
            final Iterator<TableData> iterator = this.a.iterator();
            while (iterator.hasNext()) {
                sqLiteDatabase.execSQL(DatabaseHandler.d + iterator.next().getmTableName());
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Exception Deleting table", ex);
            return;
        }
        this.onCreate(sqLiteDatabase);
    }
    
    public void open() {
        try {
            this.b = this.getWritableDatabase();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Failed to open  db", ex);
        }
    }
    
    public long update(final String s, final ContentValues contentValues, final String s2, final String[] array) {
        synchronized (this) {
            try {
                return this.b.update(s, contentValues, s2, array);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Failed to insert to db", ex);
                return -1L;
            }
        }
    }
}
