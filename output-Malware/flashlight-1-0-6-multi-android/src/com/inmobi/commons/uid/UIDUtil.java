// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.uid;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import android.content.pm.PackageManager$NameNotFoundException;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.InMobi;
import android.content.Context;
import org.json.JSONException;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.analytics.net.AnalyticsCommon;
import org.json.JSONObject;
import java.util.Iterator;
import java.net.URLConnection;
import java.util.Map;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Random;

public class UIDUtil
{
    private static Random a;
    
    static {
        UIDUtil.a = new Random();
    }
    
    static String a(final String s) {
        if (s == null) {
            return "";
        }
        try {
            return URLEncoder.encode(s, "UTF-8");
        }
        catch (UnsupportedEncodingException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
    
    public static void bindToConnection(final Map map, final URLConnection urlConnection) {
        for (final String s : map.keySet()) {
            urlConnection.addRequestProperty(s, (String)map.get(s));
        }
    }
    
    public static void bindToEncodedJSON(final Map map, final JSONObject jsonObject) {
        for (final String s : map.keySet()) {
            try {
                jsonObject.put(AnalyticsCommon.getURLEncoded(s), (Object)AnalyticsCommon.getURLEncoded((String)map.get(s)));
            }
            catch (JSONException ex) {
                Log.internal("[InMobi]-4.4.3", "UIDUtil: Unable to bind to JSON for key " + s);
            }
        }
    }
    
    public static String bindToGetParam(final Map map) {
        final StringBuilder sb = new StringBuilder();
        for (final String s : map.keySet()) {
            if (sb.length() > 0) {
                sb.append("&");
            }
            sb.append(String.format("%s=%s", a(s), a((String)map.get(s))));
        }
        return sb.toString();
    }
    
    public static void bindToJSON(final Map map, final JSONObject jsonObject) {
        for (final String s : map.keySet()) {
            try {
                jsonObject.put(s, (Object)map.get(s));
            }
            catch (JSONException ex) {
                Log.internal("[InMobi]-4.4.3", "UIDUtil: Unable to bind to JSON for key " + s);
            }
        }
    }
    
    public static String getEncryptedJSON(final Map map) {
        final JSONObject jsonObject = new JSONObject();
        bindToJSON(map, jsonObject);
        return UIDHelper.encryptRSA(jsonObject.toString());
    }
    
    public static String getEncryptedUid(final String s) {
        return UID.getCommonsUid().getDefaultUidMap(1, s, null);
    }
    
    public static String getJSON(final Map map) {
        final JSONObject jsonObject = new JSONObject();
        bindToJSON(map, jsonObject);
        return jsonObject.toString();
    }
    
    public static Map getMap(final Context context, final UID uid) {
        final Map uid2 = getUid(uid);
        final String packageName = context.getPackageName();
        String string = "";
        while (true) {
            try {
                string = Integer.valueOf(context.getPackageManager().getPackageInfo(packageName, 0).versionCode).toString();
                uid2.put("u-appbid", packageName);
                uid2.put("u-appver", string);
                String appId = InMobi.getAppId();
                if (appId == null) {
                    appId = "";
                }
                uid2.put("mk-siteid", appId);
                uid2.put("mk-version", "pr-SAND-" + InternalSDKUtil.getInMobiInternalVersion("4.4.3") + "-20140730");
                uid2.put("ua", InternalSDKUtil.getSavedUserAgent());
                return uid2;
            }
            catch (PackageManager$NameNotFoundException ex) {
                Log.internal("[InMobi]-4.4.3", "Unable to get app version", (Throwable)ex);
                continue;
            }
            break;
        }
    }
    
    public static Map getUid(final UID uid) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        final String string = Integer.toString(UIDUtil.a.nextInt());
        hashMap.put("u-id-key", string);
        hashMap.put("u-key-ver", UIDHelper.getRSAKeyVersion());
        if (uid == null) {
            hashMap.put("u-id-map", UID.getCommonsUid().getDefaultUidMap(1, string, null));
            return hashMap;
        }
        hashMap.put("u-id-map", uid.getUidMap(1, string, null));
        return hashMap;
    }
}
