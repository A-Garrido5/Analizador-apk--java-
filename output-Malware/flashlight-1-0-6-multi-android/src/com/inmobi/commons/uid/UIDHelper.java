// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.uid;

import com.inmobi.commons.internal.FileOperations;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.database.Cursor;
import android.content.Context;
import java.security.Key;
import java.security.spec.KeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.interfaces.RSAPublicKey;
import java.security.MessageDigest;
import javax.crypto.Cipher;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.thirdparty.Base64;
import android.net.Uri;

public class UIDHelper
{
    private static final Uri a;
    private static String b;
    private static AdvertisingId c;
    
    static {
        a = Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
        UIDHelper.b = null;
        UIDHelper.c = null;
    }
    
    static String a(final String s, final String s2) {
        try {
            final byte[] bytes = s.getBytes("UTF-8");
            final byte[] array = new byte[bytes.length];
            final byte[] bytes2 = s2.getBytes("UTF-8");
            for (int i = 0; i < bytes.length; ++i) {
                array[i] = (byte)(bytes[i] ^ bytes2[i % bytes2.length]);
            }
            return new String(Base64.encode(array, 2), "UTF-8");
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-4.4.3", "Exception in xor with random integer", ex);
            return "";
        }
    }
    
    private static byte[] a(final byte[] array, final int n, final Cipher cipher) {
        final byte[] array2 = new byte[0];
        final int length = array.length;
        final byte[] array3 = new byte[64];
        byte[] array4 = array2;
        byte[] array5 = array3;
        for (int i = 0; i < length; ++i) {
            if (i > 0 && i % 64 == 0) {
                final byte[] a = a(array4, cipher.doFinal(array5));
                int n2;
                if (i + 64 > length) {
                    n2 = length - i;
                }
                else {
                    n2 = 64;
                }
                array5 = new byte[n2];
                array4 = a;
            }
            array5[i % 64] = array[i];
        }
        return a(array4, cipher.doFinal(array5));
    }
    
    private static byte[] a(final byte[] array, final byte[] array2) {
        final byte[] array3 = new byte[array.length + array2.length];
        System.arraycopy(array, 0, array3, 0, array.length);
        System.arraycopy(array2, 0, array3, array.length, array2.length);
        return array3;
    }
    
    private static String b(final String s, final String s2) {
        if (s != null) {
            try {
                if (!"".equals(s.trim())) {
                    final MessageDigest instance = MessageDigest.getInstance(s2);
                    instance.update(s.getBytes());
                    final byte[] digest = instance.digest();
                    final StringBuffer sb = new StringBuffer();
                    for (int i = 0; i < digest.length; ++i) {
                        sb.append(Integer.toString(256 + (0xFF & digest[i]), 16).substring(1));
                    }
                    return sb.toString();
                }
            }
            catch (Exception ex) {
                Log.debug("[InMobi]-4.4.3", "Exception in getting ODIN-1", ex);
                return null;
            }
        }
        return "TEST_EMULATOR";
    }
    
    public static String byteToHex(final byte b) {
        try {
            final char[] array = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            return new String(new char[] { array[0xF & b >> 4], array[b & 0xF] });
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    public static String encryptRSA(final String s) {
        if (s == null || "".equals(s)) {
            return null;
        }
        try {
            final RSAPublicKey rsaPublicKey = (RSAPublicKey)KeyFactory.getInstance("RSA").generatePublic(new RSAPublicKeySpec(new BigInteger("C10F7968CFE2C76AC6F0650C877806D4514DE58FC239592D2385BCE5609A84B2A0FBDAF29B05505EAD1FDFEF3D7209ACBF34B5D0A806DF18147EA9C0337D6B5B", 16), new BigInteger("010001", 16)));
            final Cipher instance = Cipher.getInstance("RSA/ECB/nopadding");
            instance.init(1, rsaPublicKey);
            return new String(Base64.encode(a(s.getBytes("UTF-8"), 1, instance), 0));
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-4.4.3", "Exception in encryptRSA", ex);
            return null;
        }
    }
    
    public static AdvertisingId getAdvertisingId() {
        return UIDHelper.c;
    }
    
    public static String getAppId() {
        return UIDHelper.b;
    }
    
    public static String getFBId(final Context context) {
        try {
            final Cursor query = context.getContentResolver().query(UIDHelper.a, new String[] { "aid" }, (String)null, (String[])null, (String)null);
            if (query != null) {
                if (query.moveToFirst()) {
                    final String string = query.getString(query.getColumnIndex("aid"));
                    if (string == null || string.length() == 0) {
                        return null;
                    }
                    return string;
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Unable to retrieve Facebook attrib id: " + ex);
            return null;
        }
        return null;
    }
    
    public static String getODIN1(final String s) {
        return b(s, "SHA-1");
    }
    
    public static String getPlatformId() {
        try {
            return (String)Class.forName("com.inmobi.commons.uid.PlatformId").getDeclaredMethod("getAndroidId", Context.class).invoke(null, InternalSDKUtil.getContext());
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    public static String getRSAKeyVersion() {
        return "1";
    }
    
    public static String getUM5(final String s) {
        return b(s, "MD5");
    }
    
    public static void setAdvertisingId() {
        (UIDHelper.c = new AdvertisingId()).a(FileOperations.getPreferences(InternalSDKUtil.getContext(), "impref", "gpid"));
        UIDHelper.c.a(FileOperations.getBooleanPreferences(InternalSDKUtil.getContext(), "impref", "limitadtrck"));
        new Thread(new Runnable() {
            @Override
            public final void run() {
                try {
                    final Class<?> forName = Class.forName("com.google.android.gms.ads.identifier.AdvertisingIdClient");
                    final Class<?> forName2 = Class.forName("com.google.android.gms.ads.identifier.AdvertisingIdClient$Info");
                    final Object invoke = forName.getDeclaredMethod("getAdvertisingIdInfo", Context.class).invoke(null, InternalSDKUtil.getContext());
                    final String s = (String)forName2.getDeclaredMethod("getId", (Class<?>[])null).invoke(invoke, (Object[])null);
                    UIDHelper.c.a(s);
                    FileOperations.setPreferences(InternalSDKUtil.getContext(), "impref", "gpid", s);
                    final Boolean b = (Boolean)forName2.getDeclaredMethod("isLimitAdTrackingEnabled", (Class<?>[])null).invoke(invoke, (Object[])null);
                    UIDHelper.c.a(b);
                    FileOperations.setPreferences(InternalSDKUtil.getContext(), "impref", "limitadtrck", b);
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-4.4.3", "Exception getting advertiser id", ex);
                }
            }
        }).start();
    }
    
    public static void setAppId(final String b) {
        UIDHelper.b = b;
    }
}
