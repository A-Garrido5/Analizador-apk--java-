// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons;

import com.inmobi.commons.internal.Log$INTERNAL_LOG_LEVEL;
import java.util.Calendar;
import android.location.Location;
import android.app.Activity;
import com.inmobi.commons.data.UserInfo;
import com.inmobi.commons.internal.ActivityRecognitionManager;
import java.util.Map;
import com.inmobi.commons.analytics.events.AnalyticsEventsWrapper;
import com.inmobi.commons.internal.ApplicationFocusManager$FocusChangedListener;
import com.inmobi.commons.internal.ApplicationFocusManager;
import com.inmobi.commons.analytics.androidsdk.IMAdTracker;
import com.inmobi.commons.internal.ThinICE;
import com.inmobi.commons.cache.LocalCache;
import com.inmobi.commons.internal.FileOperations;
import com.inmobi.commons.uid.UIDHelper;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.commons.internal.Log;
import android.content.Context;

public final class InMobi
{
    public static final int EXCLUDE_FB_ID = 4;
    public static final int EXCLUDE_ODIN1 = 2;
    public static final int EXCLUDE_UM5_ID = 8;
    public static final int ID_DEVICE_NONE = 0;
    public static final int INCLUDE_DEFAULT = 1;
    private static String a;
    
    static {
        InMobi.a = null;
    }
    
    private static void a(final Context context, final String s) {
        if (context == null) {
            Log.debug("[InMobi]-4.4.3", "Application Context NULL");
            Log.debug("[InMobi]-4.4.3", "context cannot be null");
            return;
        }
        final Context applicationContext = context.getApplicationContext();
        InternalSDKUtil.setContext(applicationContext);
        UIDHelper.setAdvertisingId();
        try {
            final String preferences = FileOperations.getPreferences(context.getApplicationContext(), "impref", "version");
            if (preferences == null || !preferences.equals(getVersion())) {
                FileOperations.setPreferences(context.getApplicationContext(), "impref", "version", getVersion());
                LocalCache.reset();
            }
            InternalSDKUtil.getUserAgent(context.getApplicationContext());
            if (InMobi.a != null) {
                ThinICE.start(context);
                return;
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "Exception in initialize", ex);
            return;
        }
        if (s == null || "".equals(s.trim())) {
            Log.debug("[InMobi]-4.4.3", "appId cannot be blank");
            return;
        }
        Log.debug("[InMobi]-4.4.3", "InMobi init successful");
        InMobi.a = s.trim();
        ThinICE.start(context);
        IMAdTracker.getInstance().init(applicationContext, s);
        IMAdTracker.getInstance().reportAppDownloadGoal();
        ApplicationFocusManager.init(context);
        ApplicationFocusManager.addFocusChangedListener(new ApplicationFocusManager$FocusChangedListener() {
            @Override
            public final void onFocusChanged(final boolean b) {
                if (b) {
                    UIDHelper.setAdvertisingId();
                    AnalyticsEventsWrapper.getInstance().startSession(InMobi.a, null);
                    return;
                }
                AnalyticsEventsWrapper.getInstance().endSession(null);
            }
        });
        AnalyticsEventsWrapper.getInstance().startSession(InMobi.a, null);
        ActivityRecognitionManager.init(context.getApplicationContext());
        UserInfo.getInstance().updateInfo();
    }
    
    public static void addIDType(final IMIDType imidType, final String s) {
        UserInfo.getInstance().addIDType(imidType, s);
    }
    
    public static String getAppId() {
        return InMobi.a;
    }
    
    public static String getVersion() {
        return "4.4.3";
    }
    
    public static void initialize(final Activity activity, final String s) {
        a((Context)activity, s);
    }
    
    public static void initialize(final Context context, final String s) {
        a(context, s);
    }
    
    public static void removeIDType(final IMIDType imidType) {
        UserInfo.getInstance().removeIDType(imidType);
    }
    
    public static void setAge(final int n) {
        UserInfo.getInstance().setAge(n);
    }
    
    public static void setAreaCode(final String areaCode) {
        if (areaCode != null && !"".equals(areaCode.trim())) {
            UserInfo.getInstance().setAreaCode(areaCode);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Area code cannot be null");
    }
    
    public static void setCurrentLocation(final Location currentLocation) {
        if (currentLocation != null) {
            UserInfo.getInstance().setCurrentLocation(currentLocation);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Location cannot be null");
    }
    
    public static void setDateOfBirth(final Calendar dateOfBirth) {
        if (dateOfBirth != null) {
            UserInfo.getInstance().setDateOfBirth(dateOfBirth);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Date Of Birth cannot be null");
    }
    
    public static void setDeviceIDMask(final int deviceIDMask) {
        UserInfo.getInstance().setDeviceIDMask(deviceIDMask);
    }
    
    public static void setEducation(final EducationType education) {
        if (education != null) {
            UserInfo.getInstance().setEducation(education);
        }
    }
    
    public static void setEthnicity(final EthnicityType ethnicity) {
        if (ethnicity != null) {
            UserInfo.getInstance().setEthnicity(ethnicity);
        }
    }
    
    public static void setGender(final GenderType gender) {
        if (gender != null) {
            UserInfo.getInstance().setGender(gender);
        }
    }
    
    public static void setHasChildren(final HasChildren hasChildren) {
        if (hasChildren != null) {
            UserInfo.getInstance().setHasChildren(hasChildren);
        }
    }
    
    public static void setIncome(final int n) {
        UserInfo.getInstance().setIncome(n);
    }
    
    public static void setInterests(final String interests) {
        if (interests != null && !"".equals(interests.trim())) {
            UserInfo.getInstance().setInterests(interests);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Interests cannot be null");
    }
    
    public static void setLanguage(final String language) {
        if (language != null && !"".equals(language.trim())) {
            UserInfo.getInstance().setLanguage(language);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Language cannot be null");
    }
    
    public static void setLocationInquiryAllowed(final boolean locationInquiryAllowed) {
        UserInfo.getInstance().setLocationInquiryAllowed(locationInquiryAllowed);
    }
    
    public static void setLocationWithCityStateCountry(final String s, final String s2, final String s3) {
        UserInfo.getInstance().setLocationWithCityStateCountry(s, s2, s3);
    }
    
    public static void setLogLevel(final InMobi$LOG_LEVEL inMobi$LOG_LEVEL) {
        if (inMobi$LOG_LEVEL == InMobi$LOG_LEVEL.NONE) {
            Log.setInternalLogLevel(Log$INTERNAL_LOG_LEVEL.NONE);
            return;
        }
        if (inMobi$LOG_LEVEL == InMobi$LOG_LEVEL.DEBUG) {
            Log.setInternalLogLevel(Log$INTERNAL_LOG_LEVEL.DEBUG);
            return;
        }
        if (inMobi$LOG_LEVEL == InMobi$LOG_LEVEL.VERBOSE) {
            Log.setInternalLogLevel(Log$INTERNAL_LOG_LEVEL.VERBOSE);
            return;
        }
        Log.setInternalLogLevel(Log$INTERNAL_LOG_LEVEL.INTERNAL);
    }
    
    public static void setMaritalStatus(final MaritalStatus maritalStatus) {
        if (maritalStatus != null) {
            UserInfo.getInstance().setMaritalStatus(maritalStatus);
        }
    }
    
    public static void setPostalCode(final String postalCode) {
        if (postalCode != null && !"".equals(postalCode.trim())) {
            UserInfo.getInstance().setPostalCode(postalCode);
            return;
        }
        Log.debug("[InMobi]-4.4.3", "Postal Code cannot be null");
    }
    
    public static void setSexualOrientation(final SexualOrientation sexualOrientation) {
        if (sexualOrientation != null) {
            UserInfo.getInstance().setSexualOrientation(sexualOrientation);
        }
    }
}
