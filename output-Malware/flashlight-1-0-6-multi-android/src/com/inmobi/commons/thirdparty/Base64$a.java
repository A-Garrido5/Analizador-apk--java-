// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thirdparty;

class Base64$a extends Base64$c
{
    static final /* synthetic */ boolean e;
    private static final byte[] h;
    private static final byte[] i;
    int a;
    public final boolean b;
    public final boolean c;
    public final boolean d;
    private final byte[] j;
    private int k;
    private final byte[] l;
    
    static {
        e = !Base64.class.desiredAssertionStatus();
        h = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
        i = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };
    }
    
    public Base64$a(final int n, final byte[] f) {
        boolean d = true;
        this.f = f;
        this.b = ((n & 0x1) == 0x0 && d);
        this.c = ((n & 0x2) == 0x0 && d);
        if ((n & 0x4) == 0x0) {
            d = false;
        }
        this.d = d;
        byte[] l;
        if ((n & 0x8) == 0x0) {
            l = Base64$a.h;
        }
        else {
            l = Base64$a.i;
        }
        this.l = l;
        this.j = new byte[2];
        this.a = 0;
        int k;
        if (this.c) {
            k = 19;
        }
        else {
            k = -1;
        }
        this.k = k;
    }
    
    public boolean a(final byte[] array, final int n, final int n2, final boolean b) {
        final byte[] l = this.l;
        final byte[] f = this.f;
        final int k = this.k;
        final int n3 = n2 + n;
        int n4 = 0;
        int n5 = 0;
        Label_0058: {
            switch (this.a) {
                case 0: {
                    n4 = -1;
                    n5 = n;
                    break Label_0058;
                }
                case 1: {
                    if (n + 2 <= n3) {
                        final int n6 = (0xFF & this.j[0]) << 16;
                        final int n7 = n + 1;
                        final int n8 = n6 | (0xFF & array[n]) << 8;
                        final int n9 = n7 + 1;
                        final int n10 = n8 | (0xFF & array[n7]);
                        this.a = 0;
                        n4 = n10;
                        n5 = n9;
                        break Label_0058;
                    }
                    break;
                }
                case 2: {
                    if (n + 1 <= n3) {
                        final int n11 = (0xFF & this.j[0]) << 16 | (0xFF & this.j[1]) << 8;
                        n5 = n + 1;
                        final int n12 = n11 | (0xFF & array[n]);
                        this.a = 0;
                        n4 = n12;
                        break Label_0058;
                    }
                    break;
                }
            }
            n4 = -1;
            n5 = n;
        }
        int g;
        int i;
        if (n4 != -1) {
            f[0] = l[0x3F & n4 >> 18];
            f[1] = l[0x3F & n4 >> 12];
            f[2] = l[0x3F & n4 >> 6];
            int n13 = 4;
            f[3] = l[n4 & 0x3F];
            final int n14 = k - 1;
            if (n14 == 0) {
                if (this.d) {
                    n13 = 5;
                    f[4] = 13;
                }
                g = n13 + 1;
                f[n13] = 10;
                i = 19;
            }
            else {
                i = n14;
                g = n13;
            }
        }
        else {
            i = k;
            g = 0;
        }
        while (n5 + 3 <= n3) {
            final int n15 = (0xFF & array[n5]) << 16 | (0xFF & array[n5 + 1]) << 8 | (0xFF & array[n5 + 2]);
            f[g] = l[0x3F & n15 >> 18];
            f[g + 1] = l[0x3F & n15 >> 12];
            f[g + 2] = l[0x3F & n15 >> 6];
            f[g + 3] = l[n15 & 0x3F];
            final int n16 = n5 + 3;
            final int n17 = g + 4;
            final int n18 = i - 1;
            if (n18 == 0) {
                int n19;
                if (this.d) {
                    n19 = n17 + 1;
                    f[n17] = 13;
                }
                else {
                    n19 = n17;
                }
                g = n19 + 1;
                f[n19] = 10;
                n5 = n16;
                i = 19;
            }
            else {
                i = n18;
                g = n17;
                n5 = n16;
            }
        }
        if (b) {
            if (n5 - this.a == n3 - 1) {
                int n20;
                byte b2;
                if (this.a > 0) {
                    final byte[] j = this.j;
                    n20 = 1;
                    b2 = j[0];
                }
                else {
                    final int n21 = n5 + 1;
                    b2 = array[n5];
                    n5 = n21;
                    n20 = 0;
                }
                final int n22 = (b2 & 0xFF) << 4;
                this.a -= n20;
                final int n23 = g + 1;
                f[g] = l[0x3F & n22 >> 6];
                int n24 = n23 + 1;
                f[n23] = l[n22 & 0x3F];
                if (this.b) {
                    final int n25 = n24 + 1;
                    f[n24] = 61;
                    n24 = n25 + 1;
                    f[n25] = 61;
                }
                if (this.c) {
                    if (this.d) {
                        final int n26 = n24 + 1;
                        f[n24] = 13;
                        n24 = n26;
                    }
                    final int n27 = n24 + 1;
                    f[n24] = 10;
                    n24 = n27;
                }
                g = n24;
            }
            else if (n5 - this.a == n3 - 2) {
                int n28;
                byte b3;
                if (this.a > 1) {
                    final byte[] m = this.j;
                    n28 = 1;
                    b3 = m[0];
                }
                else {
                    final int n29 = n5 + 1;
                    b3 = array[n5];
                    n5 = n29;
                    n28 = 0;
                }
                final int n30 = (b3 & 0xFF) << 10;
                byte b4;
                if (this.a > 0) {
                    final byte[] j2 = this.j;
                    final int n31 = n28 + 1;
                    b4 = j2[n28];
                    n28 = n31;
                }
                else {
                    final int n32 = n5 + 1;
                    b4 = array[n5];
                    n5 = n32;
                }
                final int n33 = n30 | (b4 & 0xFF) << 2;
                this.a -= n28;
                final int n34 = g + 1;
                f[g] = l[0x3F & n33 >> 12];
                final int n35 = n34 + 1;
                f[n34] = l[0x3F & n33 >> 6];
                final int n36 = n35 + 1;
                f[n35] = l[n33 & 0x3F];
                int n37;
                if (this.b) {
                    n37 = n36 + 1;
                    f[n36] = 61;
                }
                else {
                    n37 = n36;
                }
                if (this.c) {
                    if (this.d) {
                        final int n38 = n37 + 1;
                        f[n37] = 13;
                        n37 = n38;
                    }
                    final int n39 = n37 + 1;
                    f[n37] = 10;
                    n37 = n39;
                }
                g = n37;
            }
            else if (this.c && g > 0 && i != 19) {
                int n40;
                if (this.d) {
                    n40 = g + 1;
                    f[g] = 13;
                }
                else {
                    n40 = g;
                }
                g = n40 + 1;
                f[n40] = 10;
            }
            if (!Base64$a.e && this.a != 0) {
                throw new AssertionError();
            }
            if (!Base64$a.e && n5 != n3) {
                throw new AssertionError();
            }
        }
        else if (n5 == n3 - 1) {
            this.j[this.a++] = array[n5];
        }
        else if (n5 == n3 - 2) {
            this.j[this.a++] = array[n5];
            this.j[this.a++] = array[n5 + 1];
        }
        this.g = g;
        this.k = i;
        return true;
    }
}
