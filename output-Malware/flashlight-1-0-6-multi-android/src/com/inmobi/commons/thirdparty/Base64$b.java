// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thirdparty;

class Base64$b extends Base64$c
{
    private static final int[] a;
    private static final int[] b;
    private int c;
    private int d;
    private final int[] e;
    
    static {
        a = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        b = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    }
    
    public Base64$b(final int n, final byte[] f) {
        this.f = f;
        int[] e;
        if ((n & 0x8) == 0x0) {
            e = Base64$b.a;
        }
        else {
            e = Base64$b.b;
        }
        this.e = e;
        this.c = 0;
        this.d = 0;
    }
    
    public boolean a(final byte[] array, final int n, final int n2, final boolean b) {
        if (this.c == 6) {
            return false;
        }
        final int n3 = n2 + n;
        final int c = this.c;
        int d = this.d;
        int n4 = 0;
        final byte[] f = this.f;
        final int[] e = this.e;
        int n5 = c;
        int i = n;
        while (i < n3) {
            if (n5 == 0) {
                while (i + 4 <= n3) {
                    d = (e[0xFF & array[i]] << 18 | e[0xFF & array[i + 1]] << 12 | e[0xFF & array[i + 2]] << 6 | e[0xFF & array[i + 3]]);
                    if (d < 0) {
                        break;
                    }
                    f[n4 + 2] = (byte)d;
                    f[n4 + 1] = (byte)(d >> 8);
                    f[n4] = (byte)(d >> 16);
                    n4 += 3;
                    i += 4;
                }
                if (i >= n3) {
                    break;
                }
            }
            final int n6 = i + 1;
            final int n7 = e[0xFF & array[i]];
            switch (n5) {
                case 0: {
                    if (n7 >= 0) {
                        ++n5;
                        d = n7;
                        i = n6;
                        continue;
                    }
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
                case 1: {
                    if (n7 >= 0) {
                        d = (n7 | d << 6);
                        ++n5;
                        i = n6;
                        continue;
                    }
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
                case 2: {
                    if (n7 >= 0) {
                        d = (n7 | d << 6);
                        ++n5;
                        i = n6;
                        continue;
                    }
                    if (n7 == -2) {
                        final int n8 = n4 + 1;
                        f[n4] = (byte)(d >> 4);
                        n5 = 4;
                        n4 = n8;
                        i = n6;
                        continue;
                    }
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
                case 3: {
                    if (n7 >= 0) {
                        d = (n7 | d << 6);
                        f[n4 + 2] = (byte)d;
                        f[n4 + 1] = (byte)(d >> 8);
                        f[n4] = (byte)(d >> 16);
                        n4 += 3;
                        i = n6;
                        n5 = 0;
                        continue;
                    }
                    if (n7 == -2) {
                        f[n4 + 1] = (byte)(d >> 2);
                        f[n4] = (byte)(d >> 10);
                        n4 += 2;
                        n5 = 5;
                        i = n6;
                        continue;
                    }
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
                case 4: {
                    if (n7 == -2) {
                        ++n5;
                        i = n6;
                        continue;
                    }
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
                case 5: {
                    if (n7 != -1) {
                        this.c = 6;
                        return false;
                    }
                    break;
                }
            }
            i = n6;
        }
        final int d2 = d;
        if (!b) {
            this.c = n5;
            this.d = d2;
            this.g = n4;
            return true;
        }
        switch (n5) {
            case 1: {
                this.c = 6;
                return false;
            }
            case 2: {
                final int n9 = n4 + 1;
                f[n4] = (byte)(d2 >> 4);
                n4 = n9;
                break;
            }
            case 3: {
                final int n10 = n4 + 1;
                f[n4] = (byte)(d2 >> 10);
                n4 = n10 + 1;
                f[n10] = (byte)(d2 >> 2);
                break;
            }
            case 4: {
                this.c = 6;
                return false;
            }
        }
        this.c = n5;
        this.g = n4;
        return true;
    }
}
