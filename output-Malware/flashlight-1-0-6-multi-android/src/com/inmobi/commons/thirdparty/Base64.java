// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.thirdparty;

import java.io.UnsupportedEncodingException;

public class Base64
{
    public static final int CRLF = 4;
    public static final int DEFAULT = 0;
    public static final int NO_CLOSE = 16;
    public static final int NO_PADDING = 1;
    public static final int NO_WRAP = 2;
    public static final int URL_SAFE = 8;
    static final /* synthetic */ boolean a;
    
    static {
        a = !Base64.class.desiredAssertionStatus();
    }
    
    public static byte[] decode(final String s, final int n) {
        return decode(s.getBytes(), n);
    }
    
    public static byte[] decode(final byte[] array, final int n) {
        return decode(array, 0, array.length, n);
    }
    
    public static byte[] decode(final byte[] array, final int n, final int n2, final int n3) {
        final Base64$b base64$b = new Base64$b(n3, new byte[n2 * 3 / 4]);
        if (!base64$b.a(array, n, n2, true)) {
            throw new IllegalArgumentException("bad base-64");
        }
        if (base64$b.g == base64$b.f.length) {
            return base64$b.f;
        }
        final byte[] array2 = new byte[base64$b.g];
        System.arraycopy(base64$b.f, 0, array2, 0, base64$b.g);
        return array2;
    }
    
    public static byte[] encode(final byte[] array, final int n) {
        return encode(array, 0, array.length, n);
    }
    
    public static byte[] encode(final byte[] array, final int n, final int n2, final int n3) {
        final Base64$a base64$a = new Base64$a(n3, null);
        int n4 = 4 * (n2 / 3);
        if (base64$a.b) {
            if (n2 % 3 > 0) {
                n4 += 4;
            }
        }
        else {
            switch (n2 % 3) {
                case 2: {
                    n4 += 3;
                    break;
                }
                case 1: {
                    n4 += 2;
                }
            }
        }
        if (base64$a.c && n2 > 0) {
            final int n5 = 1 + (n2 - 1) / 57;
            int n6;
            if (base64$a.d) {
                n6 = 2;
            }
            else {
                n6 = 1;
            }
            n4 += n6 * n5;
        }
        base64$a.f = new byte[n4];
        base64$a.a(array, n, n2, true);
        if (!Base64.a && base64$a.g != n4) {
            throw new AssertionError();
        }
        return base64$a.f;
    }
    
    public static String encodeToString(final byte[] array, final int n) {
        try {
            return new String(encode(array, n), "US-ASCII");
        }
        catch (UnsupportedEncodingException ex) {
            throw new AssertionError((Object)ex);
        }
    }
    
    public static String encodeToString(final byte[] array, final int n, final int n2, final int n3) {
        try {
            return new String(encode(array, n, n2, n3), "US-ASCII");
        }
        catch (UnsupportedEncodingException ex) {
            throw new AssertionError((Object)ex);
        }
    }
}
