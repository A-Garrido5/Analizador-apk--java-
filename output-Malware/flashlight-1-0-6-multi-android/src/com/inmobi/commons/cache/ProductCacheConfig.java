// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.commons.cache;

import org.json.JSONException;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import com.inmobi.commons.uid.UIDUtil;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.io.IOException;
import com.inmobi.commons.internal.Log;
import java.util.HashMap;
import org.json.JSONObject;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.Timer;

public class ProductCacheConfig extends ProductConfig
{
    public static final int DEFAULT_EXPIRY = 432000;
    public static final int DEFAULT_INTERVAL = 60;
    public static final int DEFAULT_MAX_RETRY = 3;
    private static Timer a;
    private AtomicBoolean b;
    private Map c;
    private CacheController$Validator d;
    private RetryMechanism e;
    private CacheController$Committer f;
    private long g;
    
    static {
        ProductCacheConfig.a = new Timer();
    }
    
    public ProductCacheConfig(final JSONObject jsonObject) {
        this.b = new AtomicBoolean(false);
        this.c = new HashMap();
        this.d = null;
        this.e = new RetryMechanism(3, 60000, ProductCacheConfig.a);
        try {
            this.loadFromJSON(jsonObject);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-4.4.3", "JSON retrieved is invalid.");
        }
    }
    
    public ProductCacheConfig(final JSONObject jsonObject, final CacheController$Committer f) {
        this(jsonObject);
        this.f = f;
    }
    
    private void a() {
        ProductCacheConfig$b c = null;
        Label_0152: {
            String a;
            try {
                c = this.c();
                a = c.b;
                if (a == null) {
                    break Label_0152;
                }
                if (this.d != null && !this.d.validate(this.a(a))) {
                    throw new IOException("Invalid config.");
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-4.4.3", "Error connecting to url, or " + this.getUrl() + " did not return 200. Purge cache update.", ex);
                throw ex;
            }
            this.setData(a);
            this.setTimestamp((int)(System.currentTimeMillis() / 1000L));
            this.g = c.c;
            Log.internal("[InMobi]-4.4.3", "Product with url " + this.getUrl() + " accepted data " + this.getRawData());
            this.f.onCommit();
            return;
        }
        this.setTimestamp((int)(System.currentTimeMillis() / 1000L));
        this.g = c.c;
        this.f.onCommit();
    }
    
    private void b() {
        if (!this.b.compareAndSet(false, true)) {
            return;
        }
        this.e.rescheduleTimer(new RetryMechanism$RetryRunnable() {
            @Override
            public void completed() {
                ProductCacheConfig.this.b.set(false);
            }
            
            @Override
            public void run() {
                try {
                    if (InternalSDKUtil.checkNetworkAvailibility(InternalSDKUtil.getContext())) {
                        ProductCacheConfig.this.a();
                        return;
                    }
                    throw new IOException("Network unavailable");
                }
                catch (Exception ex) {
                    throw ex;
                }
            }
        });
    }
    
    private ProductCacheConfig$b c() {
        String string = "";
        final String bindToGetParam = UIDUtil.bindToGetParam(this.c);
        String s;
        if (bindToGetParam != null && !"".equals(bindToGetParam)) {
            if (this.getUrl().endsWith("?")) {
                s = this.getUrl() + bindToGetParam;
            }
            else if (this.getUrl().contains("?")) {
                s = this.getUrl() + "&" + bindToGetParam;
            }
            else {
                s = this.getUrl() + "?" + bindToGetParam;
            }
        }
        else {
            s = this.getUrl();
        }
        final URL url = new URL(s);
        Log.internal("[InMobi]-4.4.3", "Sending request to " + s + " to retreive cache..");
        final HttpURLConnection httpURLConnection = (HttpURLConnection)url.openConnection();
        InternalSDKUtil.addCommonPropertiesToConnection(httpURLConnection);
        httpURLConnection.setIfModifiedSince(this.g);
        httpURLConnection.setRequestMethod("GET");
        final int responseCode = httpURLConnection.getResponseCode();
        if (responseCode == 304) {
            final ProductCacheConfig$b productCacheConfig$b = new ProductCacheConfig$b(this, null);
            productCacheConfig$b.b = null;
            productCacheConfig$b.c = httpURLConnection.getLastModified();
            return productCacheConfig$b;
        }
        if (responseCode != 200) {
            throw new IOException("Server did not return 200. ");
        }
        final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
        while (true) {
            final String line = bufferedReader.readLine();
            if (line == null) {
                break;
            }
            string += line;
        }
        bufferedReader.close();
        final ProductCacheConfig$b productCacheConfig$b2 = new ProductCacheConfig$b(this, null);
        productCacheConfig$b2.b = string;
        productCacheConfig$b2.c = httpURLConnection.getLastModified();
        return productCacheConfig$b2;
    }
    
    public ProductConfig getConfig() {
        return this;
    }
    
    public String getData(final CacheController$Validator d) {
        if (d != null) {
            this.d = d;
        }
        this.setRetryNumber(0);
        if (this.getTimestamp() + this.getExpiry() - (int)(System.currentTimeMillis() / 1000L) <= 0) {
            this.b();
        }
        return this.getRawData();
    }
    
    public String getData(final Map c, final CacheController$Validator cacheController$Validator) {
        if (c != null) {
            this.c = c;
        }
        return this.getData(cacheController$Validator);
    }
    
    public Map getMap() {
        return this.c;
    }
    
    public CacheController$Validator getValidator() {
        return this.d;
    }
    
    public final void loadFromJSON(final JSONObject jsonObject) {
        this.setExpiry(InternalSDKUtil.getIntFromJSON(jsonObject, "expiry", 432000));
        this.setMaxRetry(InternalSDKUtil.getIntFromJSON(jsonObject, "maxRetry", 3));
        this.setRetryInterval(InternalSDKUtil.getIntFromJSON(jsonObject, "retryInterval", 60));
        this.g = InternalSDKUtil.getLongFromJSON(jsonObject, "lastModified", 0L);
        this.setUrl(InternalSDKUtil.getStringFromJSON(jsonObject, "url", ""));
        this.setProtocol(InternalSDKUtil.getStringFromJSON(jsonObject, "protocol", "json"));
        this.e = new RetryMechanism(this.getMaxRetry(), 1000 * this.getRetryInterval(), ProductCacheConfig.a);
        this.setTimestamp(InternalSDKUtil.getIntFromJSON(jsonObject, "timestamp", 0));
        this.setData(InternalSDKUtil.getStringFromJSON(jsonObject, "data", null));
    }
    
    protected void reset() {
        this.setExpiry(0);
        this.setRetryInterval(0);
        this.setMaxRetry(0);
        this.setTimestamp(0);
        this.setUrl(null);
        this.setProtocol(null);
        this.setData(null);
    }
    
    public void setMap(final Map c) {
        this.c = c;
    }
    
    public void setValidator(final CacheController$Validator d) {
        this.d = d;
    }
    
    public JSONObject toJSON() {
        final JSONObject jsonObject = new JSONObject();
        JSONObject jsonObject2;
        try {
            final JSONObject jsonObject3;
            jsonObject2 = (jsonObject3 = new JSONObject("{expiry:" + this.getExpiry() + ",maxRetry:" + this.getMaxRetry() + ",retryInterval:" + this.getRetryInterval() + ",protocol:" + this.getProtocol() + ",timestamp:" + this.getTimestamp() + "}"));
            final String s = "url";
            final ProductCacheConfig productCacheConfig = this;
            final String s2 = productCacheConfig.getUrl();
            jsonObject3.put(s, (Object)s2);
            final JSONObject jsonObject4 = jsonObject2;
            final String s3 = "data";
            final ProductCacheConfig productCacheConfig2 = this;
            final String s4 = productCacheConfig2.getRawData();
            jsonObject4.put(s3, (Object)s4);
            final JSONObject jsonObject5 = jsonObject2;
            final String s5 = "lastModified";
            final ProductCacheConfig productCacheConfig3 = this;
            final long n = productCacheConfig3.g;
            jsonObject5.put(s5, n);
            return jsonObject2;
        }
        catch (JSONException ex) {
            jsonObject2 = jsonObject;
            final Throwable t = (Throwable)ex;
        }
        while (true) {
            try {
                final JSONObject jsonObject3 = jsonObject2;
                final String s = "url";
                final ProductCacheConfig productCacheConfig = this;
                final String s2 = productCacheConfig.getUrl();
                jsonObject3.put(s, (Object)s2);
                final JSONObject jsonObject4 = jsonObject2;
                final String s3 = "data";
                final ProductCacheConfig productCacheConfig2 = this;
                final String s4 = productCacheConfig2.getRawData();
                jsonObject4.put(s3, (Object)s4);
                final JSONObject jsonObject5 = jsonObject2;
                final String s5 = "lastModified";
                final ProductCacheConfig productCacheConfig3 = this;
                final long n = productCacheConfig3.g;
                jsonObject5.put(s5, n);
                return jsonObject2;
                final Throwable t;
                Log.internal("[InMobi]-4.4.3", "Ill formed JSON product(" + this.getUrl() + ") toString", t);
                return jsonObject2;
            }
            catch (JSONException t) {
                continue;
            }
            break;
        }
    }
    
    @Override
    public String toString() {
        return this.toJSON().toString();
    }
}
