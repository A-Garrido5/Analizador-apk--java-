// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization.internal.objects;

import com.inmobi.monetization.internal.GetLtvpRulesResponse;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import java.util.HashMap;
import android.content.SharedPreferences$Editor;
import android.content.Context;
import android.content.SharedPreferences;

public class LtvpRuleCache
{
    static LtvpRuleCache a;
    private static String c;
    private static String d;
    private static String e;
    private static String f;
    private SharedPreferences b;
    
    static {
        LtvpRuleCache.c = "IMAdMLtvpRuleCache";
        LtvpRuleCache.d = "IMAdMLtvpRuleId";
        LtvpRuleCache.e = "IMAdMLtvpHardExpiry";
        LtvpRuleCache.f = "IMAdMLtvpSoftExpiry";
    }
    
    private LtvpRuleCache(final Context context) {
        this.b = null;
        this.b = context.getSharedPreferences(LtvpRuleCache.c, 0);
    }
    
    private void a(final long n) {
        final SharedPreferences$Editor edit = this.b.edit();
        edit.putLong(LtvpRuleCache.e, n);
        edit.commit();
    }
    
    private void a(final String s) {
        final SharedPreferences$Editor edit = this.b.edit();
        edit.putString(LtvpRuleCache.d, s);
        edit.commit();
    }
    
    private void a(final HashMap hashMap) {
        SharedPreferences$Editor edit;
        try {
            edit = this.b.edit();
            for (final String s : hashMap.keySet()) {
                edit.putInt(s, (int)hashMap.get(s));
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Analytics]-4.4.3", "Exception saving rule map", ex);
            return;
        }
        edit.commit();
    }
    
    private void b(final long n) {
        final SharedPreferences$Editor edit = this.b.edit();
        edit.putLong(LtvpRuleCache.f, n);
        edit.commit();
    }
    
    public static LtvpRuleCache getInstance(final Context context) {
        Label_0029: {
            if (LtvpRuleCache.a != null) {
                break Label_0029;
            }
            synchronized (LtvpRuleCache.class) {
                if (LtvpRuleCache.a == null) {
                    LtvpRuleCache.a = new LtvpRuleCache(context);
                }
                return LtvpRuleCache.a;
            }
        }
    }
    
    public void clearLtvpRuleCache() {
        final SharedPreferences$Editor edit = this.b.edit();
        edit.clear();
        edit.commit();
    }
    
    public long getHardExpiryForLtvpRule() {
        return this.b.getLong(LtvpRuleCache.e, 0L);
    }
    
    public int getLtvpRule(final long n) {
        return this.b.getInt(String.valueOf(n), 0);
    }
    
    public String getLtvpRuleId() {
        return this.b.getString(LtvpRuleCache.d, "");
    }
    
    public long getSoftExpiryForLtvpRule() {
        return this.b.getLong(LtvpRuleCache.f, 0L);
    }
    
    public void setLtvpRuleConfig(final GetLtvpRulesResponse getLtvpRulesResponse) {
        this.a(getLtvpRulesResponse.getRuleId());
        this.a(getLtvpRulesResponse.getHardExpiry() + getLtvpRulesResponse.getTimeStamp());
        this.b(getLtvpRulesResponse.getSoftExpiry() + getLtvpRulesResponse.getTimeStamp());
        this.a(getLtvpRulesResponse.getRules());
    }
}
