// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization.internal;

import java.util.Iterator;
import org.apache.http.HttpResponse;
import java.util.HashMap;
import org.json.JSONObject;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.client.methods.HttpGet;
import com.inmobi.commons.internal.Log;
import org.apache.http.impl.client.DefaultHttpClient;
import java.net.URL;
import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import com.inmobi.monetization.internal.abstraction.IGetLtvpRuleRequestListener;

public class GetLtvpRuleRequestTask implements Runnable
{
    private GetLtvpRulesRequest a;
    private IGetLtvpRuleRequestListener b;
    private final int c;
    private final int d;
    
    GetLtvpRuleRequestTask(final GetLtvpRulesRequest a, final IGetLtvpRuleRequestListener b) {
        this.c = 60000;
        this.d = -1;
        this.a = a;
        this.b = b;
    }
    
    @Override
    public void run() {
        GetLtvpRulesResponse getLtvpRulesResponse;
        String string3;
        long long1;
        long long2;
        long long3;
        HashMap<String, Integer> rules;
        try {
            final URL url = new URL(AnalyticsInitializer.getConfigParams().getEndPoints().getRulesUrl());
            final DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
            final String string = url + "?" + this.a.getEncodedRequestParams();
            Log.debug("[InMobi]-[Monetization]", "Getting LTVP rule: " + string);
            final HttpGet httpGet = new HttpGet(string);
            final BasicHttpParams params = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout((HttpParams)params, 60000);
            HttpConnectionParams.setSoTimeout((HttpParams)params, 60000);
            defaultHttpClient.setParams((HttpParams)params);
            final HttpResponse execute = defaultHttpClient.execute((HttpUriRequest)httpGet);
            if (execute.getStatusLine().getStatusCode() != 200) {
                return;
            }
            final JSONObject jsonObject = new JSONObject(EntityUtils.toString(execute.getEntity()));
            if (!jsonObject.getBoolean("success")) {
                final int int1 = jsonObject.getInt("error_code");
                final String string2 = jsonObject.getString("error_message");
                Log.debug("[InMobi]-[Monetization]", "Received LTVP rule fetch failure: " + int1 + " : " + string2);
                if (this.b != null) {
                    this.b.onLtvpGetRuleFailed(this.a, new LtvpErrorCode(int1, string2));
                }
                return;
            }
            else {
                final JSONObject jsonObject2 = jsonObject.getJSONObject("response");
                Log.debug("[InMobi]-[Monetization]", "Received LTVP rule fetch success: " + jsonObject2.toString());
                getLtvpRulesResponse = new GetLtvpRulesResponse();
                string3 = jsonObject2.getString("rule_id");
                long1 = jsonObject2.getLong("ts");
                final JSONObject jsonObject3 = jsonObject2.getJSONObject("exp");
                long2 = jsonObject3.getLong("se");
                long3 = jsonObject3.getLong("he");
                rules = new HashMap<String, Integer>();
                final JSONObject jsonObject4 = jsonObject2.getJSONObject("rules");
                final Iterator keys = jsonObject4.keys();
                while (keys.hasNext()) {
                    final String s = keys.next();
                    rules.put(s, jsonObject4.getInt(String.valueOf(s)));
                }
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[Monetization]", "Received LTVP rule fetch exception", ex);
            if (this.b != null) {
                this.b.onLtvpGetRuleFailed(this.a, new LtvpErrorCode(-1, "Ltvp rule server unreachable"));
            }
            return;
        }
        getLtvpRulesResponse.setRuleId(string3);
        getLtvpRulesResponse.setTimeStamp(long1);
        getLtvpRulesResponse.setSoftExpiry(long2);
        getLtvpRulesResponse.setHardExpiry(long3);
        getLtvpRulesResponse.setRules(rules);
        if (this.b != null) {
            this.b.onLtvpGetRuleSucceeded(this.a, getLtvpRulesResponse);
        }
    }
}
