// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization.internal;

import java.io.Writer;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import org.json.JSONArray;
import java.util.List;
import java.util.ArrayList;
import org.json.JSONObject;
import com.inmobi.commons.thirdparty.Base64;
import com.inmobi.monetization.IMErrorCode;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import com.inmobi.commons.data.DeviceInfo;
import com.inmobi.androidsdk.bootstrapper.Initializer;
import java.io.IOException;
import java.io.Closeable;
import java.security.SecureRandom;
import java.net.URL;
import com.inmobi.commons.internal.Log;
import com.inmobi.androidsdk.bootstrapper.PkInitilaizer;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.net.HttpURLConnection;
import com.inmobi.monetization.internal.abstraction.INativeAdController;

public class NativeAdRequestTask implements Runnable
{
    byte[] a;
    String b;
    String c;
    String d;
    private NativeAdRequest e;
    private INativeAdController f;
    private HttpURLConnection g;
    private final int h;
    private final int i;
    private byte[] j;
    private byte[] k;
    
    NativeAdRequestTask(final NativeAdRequest e, final INativeAdController f) {
        this.h = 8;
        this.i = 16;
        this.b = "";
        this.c = "";
        this.d = "";
        this.e = e;
        this.f = f;
    }
    
    private String a(final String s, final INativeAdController nativeAdController) {
        this.a();
        this.j = InternalSDKUtil.keag();
        this.b = PkInitilaizer.getConfigParams().getExponent();
        this.c = PkInitilaizer.getConfigParams().getModulus();
        this.d = PkInitilaizer.getConfigParams().getVersion();
        if (this.b.equals("") || this.c.equals("") || this.d.equals("")) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Exception retreiving Ad due to key problem");
            return null;
        }
        final String seMeGe = InternalSDKUtil.SeMeGe(s, this.j, this.k, this.a, this.c, this.b);
        final StringBuilder sb = new StringBuilder();
        sb.append("sm=");
        sb.append(seMeGe);
        sb.append("&sn=");
        sb.append(this.d);
        final String string = sb.toString();
        Log.debug("[InMobi]-[Network]-4.4.3", string);
        return string;
    }
    
    private HttpURLConnection a(final String s) {
        final HttpURLConnection httpURLConnection = (HttpURLConnection)new URL(s).openConnection();
        a(httpURLConnection);
        return httpURLConnection;
    }
    
    private void a() {
        try {
            this.a = new byte[8];
            final SecureRandom secureRandom = new SecureRandom();
            secureRandom.nextBytes(this.a);
            secureRandom.nextBytes(this.k = new byte[16]);
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void a(final Closeable closeable) {
        if (closeable == null) {
            return;
        }
        try {
            closeable.close();
        }
        catch (IOException ex) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Exception closing resource: " + closeable, ex);
        }
    }
    
    private static void a(final HttpURLConnection httpURLConnection) {
        final int fetchTimeOut = Initializer.getConfigParams().getFetchTimeOut();
        httpURLConnection.setConnectTimeout(fetchTimeOut);
        httpURLConnection.setReadTimeout(fetchTimeOut);
        httpURLConnection.setRequestProperty("user-agent", DeviceInfo.getPhoneDefaultUserAgent());
        httpURLConnection.setUseCaches(false);
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setDoInput(true);
        httpURLConnection.setRequestMethod("POST");
        httpURLConnection.setRequestProperty("content-type", "application/x-www-form-urlencoded");
    }
    
    private void b() {
        int responseCode = 0;
        String headerField;
        BufferedReader bufferedReader;
        StringBuilder sb;
        String line;
        NativeAdRequestTask nativeAdRequestTask;
        INativeAdController nativeAdController;
        NativeAdRequestTask nativeAdRequestTask2;
        NativeAdRequest nativeAdRequest;
        IMErrorCode imErrorCode;
        final String s2;
        String s;
        JSONArray jsonArray = null;
        ArrayList<String> list;
        int length;
        int getmFetchLimit;
        int i;
        JSONObject jsonObject;
        String optString;
        String optString2;
        String optString3;
        Label_0261_Outer:Label_0322_Outer:
        while (true) {
            while (true) {
                Label_0658: {
                    try {
                        Log.debug("[InMobi]-[Network]-4.4.3", "Http Status Code: " + this.g.getResponseCode());
                        responseCode = this.g.getResponseCode();
                        Log.debug("[InMobi]-[Network]-4.4.3", "Im Id: " + this.g.getHeaderField("im-id"));
                        headerField = this.g.getHeaderField("im-ec");
                        if (headerField != null) {
                            Log.debug("[InMobi]-[Network]-4.4.3", "Sandbox error Id: " + headerField);
                        }
                        if (responseCode != 200) {
                            break Label_0658;
                        }
                        try {
                            bufferedReader = new BufferedReader(new InputStreamReader(this.g.getInputStream(), "UTF-8"));
                            sb = new StringBuilder();
                            while (true) {
                                line = bufferedReader.readLine();
                                if (line == null) {
                                    goto Label_0220;
                                }
                                sb.append(line);
                            }
                        }
                        finally {
                            this.g.disconnect();
                            this.a((Closeable)null);
                        }
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[Monetization]", "Failed to retrieve native ad", ex);
                        if (this.f == null) {
                            goto Label_0219;
                        }
                        this.f.onAdRequestFailed(this.e, IMErrorCode.INTERNAL_ERROR);
                    }
                    catch (OutOfMemoryError outOfMemoryError) {
                        Log.internal("[InMobi]-[Monetization]", "Out of memory error received while retieving ad", outOfMemoryError);
                        if (this.f != null) {
                            nativeAdRequestTask = this;
                            nativeAdController = nativeAdRequestTask.f;
                            nativeAdRequestTask2 = this;
                            nativeAdRequest = nativeAdRequestTask2.e;
                            imErrorCode = IMErrorCode.INTERNAL_ERROR;
                            nativeAdController.onAdRequestFailed(nativeAdRequest, imErrorCode);
                            return;
                        }
                        goto Label_0219;
                    }
                Label_0418:
                    while (true) {
                    Label_0382:
                        while (true) {
                            try {
                                s = new String(InternalSDKUtil.DeAe(Base64.decode(s2.getBytes(), 0), this.j, this.k));
                                if (s != null) {
                                    jsonArray = new JSONObject(s).getJSONArray("ads");
                                    if (jsonArray != null) {
                                        if (jsonArray.length() != 0) {
                                            break Label_0418;
                                        }
                                        Log.debug("[InMobi]-[Network]-4.4.3", "Server returned No Fill ");
                                        if (this.f != null) {
                                            this.f.onAdRequestFailed(this.e, IMErrorCode.NO_FILL);
                                        }
                                    }
                                    this.g.disconnect();
                                    this.a((Closeable)null);
                                    return;
                                }
                                break Label_0382;
                                nativeAdRequestTask = this;
                                nativeAdController = nativeAdRequestTask.f;
                                nativeAdRequestTask2 = this;
                                nativeAdRequest = nativeAdRequestTask2.e;
                                imErrorCode = IMErrorCode.INTERNAL_ERROR;
                                nativeAdController.onAdRequestFailed(nativeAdRequest, imErrorCode);
                                return;
                            }
                            catch (Exception ex2) {
                                ex2.printStackTrace();
                                s = null;
                                continue Label_0261_Outer;
                            }
                            break;
                        }
                        if (this.f != null) {
                            break;
                        }
                        s = s2;
                        continue Label_0322_Outer;
                    }
                    list = new ArrayList<String>();
                    length = jsonArray.length();
                    getmFetchLimit = Initializer.getConfigParams().getNativeSdkConfigParams().getmFetchLimit();
                    i = 0;
                    if (length <= getmFetchLimit) {
                        getmFetchLimit = length;
                        i = 0;
                    }
                    while (i < getmFetchLimit) {
                        try {
                            jsonObject = jsonArray.getJSONObject(i);
                            optString = jsonObject.optString("pubContent");
                            optString2 = jsonObject.optString("contextCode");
                            optString3 = jsonObject.optString("namespace");
                            if (optString != null) {
                                if (!"".equals(optString.trim())) {
                                    if (optString2 != null && !"".equals(optString2.trim()) && optString3 != null && !"".equals(optString3.trim())) {
                                        list.add(jsonObject.toString());
                                    }
                                }
                            }
                        }
                        catch (Exception ex3) {
                            Log.internal("[InMobi]-[Monetization]", "JSON Exception", ex3);
                        }
                        ++i;
                    }
                    if (this.f == null) {
                        continue;
                    }
                    if (list.size() > 0) {
                        this.f.onAdRequestSucceded(this.e, new NativeAdResponse(list));
                        continue;
                    }
                    Log.debug("[InMobi]-[Network]-4.4.3", "Server Error");
                    this.f.onAdRequestFailed(this.e, IMErrorCode.INTERNAL_ERROR);
                    continue;
                }
                if (responseCode == 400) {
                    Log.debug("[InMobi]-[Network]-4.4.3", "Invalid App Id.Please check the app Id in the adrequest is valid and in active state");
                    if (this.f != null) {
                        this.f.onAdRequestFailed(this.e, IMErrorCode.INVALID_REQUEST);
                        continue;
                    }
                    continue;
                }
                else {
                    Log.debug("[InMobi]-[Network]-4.4.3", "Server Error");
                    if (this.f != null) {
                        this.f.onAdRequestFailed(this.e, IMErrorCode.INTERNAL_ERROR);
                        continue;
                    }
                    continue;
                }
                break;
            }
        }
        this.f.onAdRequestFailed(this.e, IMErrorCode.INTERNAL_ERROR);
        this.g.disconnect();
        this.a((Closeable)null);
    }
    
    private void b(final String s) {
        this.g.setRequestProperty("Content-Length", Integer.toString(s.length()));
        BufferedWriter bufferedWriter;
        try {
            final BufferedWriter bufferedWriter2;
            bufferedWriter = (bufferedWriter2 = new BufferedWriter(new OutputStreamWriter(this.g.getOutputStream())));
            final String s2 = s;
            bufferedWriter2.write(s2);
            final NativeAdRequestTask nativeAdRequestTask = this;
            final BufferedWriter bufferedWriter3 = bufferedWriter;
            nativeAdRequestTask.a(bufferedWriter3);
            return;
        }
        finally {
            final Object o2;
            final Object o = o2;
            bufferedWriter = null;
        }
        while (true) {
            try {
                final BufferedWriter bufferedWriter2 = bufferedWriter;
                final String s2 = s;
                bufferedWriter2.write(s2);
                final NativeAdRequestTask nativeAdRequestTask = this;
                final BufferedWriter bufferedWriter3 = bufferedWriter;
                nativeAdRequestTask.a(bufferedWriter3);
                return;
                this.a(bufferedWriter);
                throw;
            }
            finally {
                continue;
            }
            break;
        }
    }
    
    @Override
    public void run() {
        try {
            Log.internal("[InMobi]-[Network]-4.4.3", "Ad Serving URL: http://i.w.inmobi.com/showad.asm");
            final String buildPostBody = this.e.buildPostBody();
            Log.internal("[InMobi]-[Network]-4.4.3", "Native Unencrypted Postbody" + buildPostBody);
            final String a = this.a(buildPostBody, this.f);
            this.g = this.a("http://i.w.inmobi.com/showad.asm");
            if (a != null) {
                this.b(a);
                this.b();
                return;
            }
            if (this.f != null) {
                this.f.onAdRequestFailed(this.e, IMErrorCode.INTERNAL_ERROR);
            }
        }
        catch (Exception ex) {
            if (this.f != null) {
                this.f.onAdRequestFailed(this.e, IMErrorCode.NETWORK_ERROR);
            }
            Log.debug("[InMobi]-[Monetization]", "Failed to get native ads", ex);
        }
    }
}
