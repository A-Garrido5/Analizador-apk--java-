// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization;

import java.util.Map;
import com.inmobi.monetization.internal.NativeAdsController;
import com.inmobi.androidsdk.carb.CARB;
import java.util.HashMap;
import android.view.View;
import android.view.ViewGroup;
import com.inmobi.monetization.internal.objects.NativeAd;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.util.Log;
import com.inmobi.commons.InMobi;
import com.inmobi.monetization.internal.abstraction.INativeAdListener;
import com.inmobi.monetization.internal.NativeAdRequest;
import android.os.Handler;
import com.inmobi.monetization.internal.TrackerView;

public class IMNative
{
    TrackerView a;
    private String b;
    private String c;
    private String d;
    private String e;
    private IMNativeListener f;
    private Handler g;
    private NativeAdRequest h;
    private boolean i;
    private IMNative$a j;
    private INativeAdListener k;
    
    public IMNative(final IMNativeListener imNativeListener) {
        this.b = null;
        this.c = null;
        this.d = null;
        this.a = null;
        this.e = null;
        this.f = null;
        this.h = null;
        this.i = false;
        this.j = IMNative$a.g;
        this.k = new a(this);
        this.a(InMobi.getAppId(), imNativeListener);
        this.a(IMNative$a.a);
    }
    
    public IMNative(final String s, final IMNativeListener imNativeListener) {
        this.b = null;
        this.c = null;
        this.d = null;
        this.a = null;
        this.e = null;
        this.f = null;
        this.h = null;
        this.i = false;
        this.j = IMNative$a.g;
        this.k = new a(this);
        if (s == null || "".equals(s.trim())) {
            Log.e("[InMobi]-[Monetization]", "Please create an instance of native ad with valid appId");
            return;
        }
        this.a(s, imNativeListener);
        this.a(IMNative$a.a);
    }
    
    protected IMNative(final String b, final String c, final String d) {
        this.b = null;
        this.c = null;
        this.d = null;
        this.a = null;
        this.e = null;
        this.f = null;
        this.h = null;
        this.i = false;
        this.j = IMNative$a.g;
        this.k = new a(this);
        this.b = b;
        this.c = c;
        this.d = d;
    }
    
    private IMNative$a a() {
        synchronized (this) {
            return this.j;
        }
    }
    
    private void a(final IMNative$a j) {
        synchronized (this) {
            this.j = j;
        }
    }
    
    private void a(final String s, final IMNativeListener f) {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            Log.e("[InMobi]-[Monetization]", "Please initialize inmobi before requesting for native ads");
            return;
        }
        new NativeAd(null, null, null);
        this.e = s.trim();
        this.f = f;
        this.h = new NativeAdRequest(this.e);
        try {
            this.g = new Handler();
        }
        catch (Throwable t) {
            Log.e("[InMobi]-[Monetization]", "Please create a native ad instance in the main thread");
        }
    }
    
    public void attachToView(final ViewGroup viewGroup) {
        try {
            if (!InternalSDKUtil.isInitializedSuccessfully()) {
                Log.e("[InMobi]-[Monetization]", "Please initialize inmobi before requesting for native ads");
                return;
            }
            if (!this.i) {
                Log.e("[InMobi]-[Monetization]", "Please load a native ad before attach");
                return;
            }
        }
        catch (Exception ex) {
            Log.e("[InMobi]-[Monetization]", "Please pass a valid view to attach");
            return;
        }
        if (viewGroup == null) {
            Log.e("[InMobi]-[Monetization]", "Please pass a valid view to attach");
            return;
        }
        if (this.a() == IMNative$a.d) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Ad is already attached");
            return;
        }
        if (this.a() != IMNative$a.c) {
            Log.e("[InMobi]-[Monetization]", "Cannot attach an ad which is not ready or detached from view");
            return;
        }
        if (this.g == null) {
            Log.e("[InMobi]-[Monetization]", "Please create a native ad instance in the main thread");
            return;
        }
        this.g.post((Runnable)new Runnable() {
            @Override
            public void run() {
                try {
                    IMNative.this.a = new TrackerView(viewGroup.getContext(), IMNative.this.c, IMNative.this.d);
                    viewGroup.addView((View)IMNative.this.a);
                }
                catch (Exception ex) {
                    Log.e("[InMobi]-[Monetization]", "Failed to attach the view");
                    IMNative.this.a(IMNative$a.f);
                }
            }
        });
        this.a(IMNative$a.d);
    }
    
    public void detachFromView() {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            Log.e("[InMobi]-[Monetization]", "Please initialize inmobi before requesting for native ads");
            return;
        }
        if (!this.i) {
            Log.e("[InMobi]-[Monetization]", "Please load a native ad before detach");
            return;
        }
        if (this.a() != IMNative$a.d) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Please attach the native ad view before calling detach");
            return;
        }
        if (this.g == null) {
            Log.e("[InMobi]-[Monetization]", "Please create a native ad instance in the main thread");
            return;
        }
        this.g.post((Runnable)new Runnable() {
            @Override
            public void run() {
                try {
                    if (IMNative.this.a != null) {
                        IMNative.this.a.destroy();
                        IMNative.this.a = null;
                        return;
                    }
                    Log.e("[InMobi]-[Monetization]", "Please attach the native ad view before calling detach");
                    IMNative.this.a(IMNative$a.f);
                }
                catch (Exception ex) {
                    IMNative.this.a(IMNative$a.f);
                    com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Failed to detach a view");
                }
            }
        });
        this.i = false;
        this.a(IMNative$a.e);
    }
    
    public String getContent() {
        return this.b;
    }
    
    public void handleClick(final HashMap hashMap) {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            Log.e("[InMobi]-[Monetization]", "Please initialize inmobi before requesting for native ads");
            return;
        }
        if (!this.i) {
            Log.e("[InMobi]-[Monetization]", "Cannot handle click, native ad not loaded or detached from view");
            return;
        }
        if (this.a() != IMNative$a.d) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Please attach to view before handling any events");
            return;
        }
        if (this.g == null) {
            Log.e("[InMobi]-[Monetization]", "Please create a native ad instance in the main thread");
            return;
        }
        this.g.post((Runnable)new Runnable() {
            @Override
            public void run() {
                try {
                    IMNative.this.a.click(hashMap);
                }
                catch (Exception ex) {
                    com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Failed to track click");
                }
            }
        });
    }
    
    public void loadAd() {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            Log.e("[InMobi]-[Monetization]", "Please initialize inmobi before requesting for native ads");
        }
        else if (this.e != null && !"".equals(this.e)) {
            if (this.g == null) {
                Log.e("[InMobi]-[Monetization]", "Please create a native ad instance in the main thread");
                return;
            }
            CARB.getInstance().startCarb();
            InternalSDKUtil.printPublisherTestId();
            if (this.a() == IMNative$a.a) {
                com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Loading Native Ad");
                this.a(IMNative$a.b);
                NativeAdsController.getInstance().getAd(this.e, this.h, this.k);
                return;
            }
            if (this.a() == IMNative$a.b) {
                Log.e("[InMobi]-[Monetization]", "Ad is already loading. Please wait");
                return;
            }
            if (this.a() != IMNative$a.g) {
                com.inmobi.commons.internal.Log.debug("[InMobi]-[Monetization]", "Loading native ad");
                if (this.a() == IMNative$a.d) {
                    this.detachFromView();
                }
                this.b = null;
                this.c = null;
                this.d = null;
                this.a(IMNative$a.b);
                NativeAdsController.getInstance().getAd(this.e, this.h, this.k);
            }
        }
    }
    
    public void setKeywords(final String keywords) {
        if (keywords == null || "".equals(keywords.trim())) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Network]-4.4.3", "Keywords cannot be null or blank.");
            return;
        }
        this.h.setKeywords(keywords);
    }
    
    public void setRefTagParam(final String s, final String s2) {
        if (s == null || "".equals(s.trim())) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Network]-4.4.3", "Ref tag key cannot be null or blank.");
            return;
        }
        if (s2 == null || "".equals(s2.trim())) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Network]-4.4.3", "RefTag value cannot be null or blank.");
            return;
        }
        this.h.setRefTagParam(s, s2);
    }
    
    public void setRequestParams(final Map requestParams) {
        if (requestParams == null || requestParams.isEmpty()) {
            com.inmobi.commons.internal.Log.debug("[InMobi]-[Network]-4.4.3", "Request params cannot be null or empty.");
            return;
        }
        this.h.setRequestParams(requestParams);
    }
}
