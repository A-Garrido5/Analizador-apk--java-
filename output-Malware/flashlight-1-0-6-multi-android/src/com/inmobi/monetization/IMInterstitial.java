// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization;

import android.view.View;
import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import com.inmobi.androidsdk.Mode;
import com.inmobi.commons.internal.Log;
import android.content.Context;
import com.inmobi.commons.internal.ThinICE;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.monetization.internal.MonetizationUtils;
import com.inmobi.androidsdk.AdRequest$ErrorCode;
import com.inmobi.androidsdk.InterstitialViewListener;
import com.inmobi.commons.InMobi;
import com.inmobi.monetization.internal.LtvpRuleProcessor;
import java.util.Map;
import android.os.Handler;
import java.util.concurrent.atomic.AtomicBoolean;
import android.app.Activity;
import com.inmobi.androidsdk.InterstitialView;
import com.inmobi.monetization.internal.LtvpRuleProcessor$ActionsRule;

public class IMInterstitial
{
    private static LtvpRuleProcessor$ActionsRule g;
    InterstitialView a;
    LtvpRuleProcessor$ActionsRule b;
    IMInterstitial$AdMode c;
    boolean d;
    private IMInterstitialListener e;
    private IMIncentivisedListener f;
    private long h;
    private Activity i;
    private AtomicBoolean j;
    private IMInterstitial$State k;
    private Handler l;
    private String m;
    private String n;
    private Map o;
    
    static {
        IMInterstitial.g = null;
    }
    
    public IMInterstitial(final Activity activity, final long h) {
        this.b = LtvpRuleProcessor$ActionsRule.MEDIATION;
        this.h = -1L;
        this.j = new AtomicBoolean(false);
        this.k = IMInterstitial$State.INIT;
        this.l = new Handler();
        this.m = null;
        this.n = null;
        this.o = null;
        this.c = IMInterstitial$AdMode.AD_NETWORK;
        this.d = false;
        this.h = h;
        this.a(activity);
    }
    
    public IMInterstitial(final Activity activity, final String m) {
        this.b = LtvpRuleProcessor$ActionsRule.MEDIATION;
        this.h = -1L;
        this.j = new AtomicBoolean(false);
        this.k = IMInterstitial$State.INIT;
        this.l = new Handler();
        this.m = null;
        this.n = null;
        this.o = null;
        this.c = IMInterstitial$AdMode.AD_NETWORK;
        this.d = false;
        this.a(activity);
        this.m = m;
    }
    
    private LtvpRuleProcessor$ActionsRule a() {
        return LtvpRuleProcessor.getInstance().getLtvpRuleConfig(this.h);
    }
    
    private void a(final long n) {
        (this.a = new InterstitialView(this.i, InMobi.getAppId(), n)).setIMAdInterstitialListener(new InterstitialViewListener() {
            @Override
            public void onAdRequestFailed(final InterstitialView interstitialView, final AdRequest$ErrorCode adRequest$ErrorCode) {
                if (IMInterstitial.this.b == LtvpRuleProcessor$ActionsRule.ACTIONS_TO_MEDIATION) {
                    if (IMInterstitial.this.e != null) {
                        IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, IMErrorCode.DO_MONETIZE);
                    }
                }
                else if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, MonetizationUtils.getErrorCode(adRequest$ErrorCode));
                }
                IMInterstitial.this.j.set(false);
                IMInterstitial.this.k = IMInterstitial$State.INIT;
            }
            
            @Override
            public void onAdRequestLoaded(final InterstitialView interstitialView) {
                IMInterstitial.this.k = IMInterstitial$State.READY;
                IMInterstitial.this.j.set(false);
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onInterstitialLoaded(IMInterstitial.this);
                }
            }
            
            @Override
            public void onDismissAdScreen(final InterstitialView interstitialView) {
                IMInterstitial.this.k = IMInterstitial$State.INIT;
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onDismissInterstitialScreen(IMInterstitial.this);
                }
            }
            
            @Override
            public void onIncentCompleted(final InterstitialView interstitialView, final Map map) {
                if (IMInterstitial.this.f != null) {
                    IMInterstitial.this.f.onIncentCompleted(IMInterstitial.this, map);
                }
            }
            
            @Override
            public void onInterstitialInteraction(final InterstitialView interstitialView, final Map map) {
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onInterstitialInteraction(IMInterstitial.this, map);
                }
            }
            
            @Override
            public void onLeaveApplication(final InterstitialView interstitialView) {
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onLeaveApplication(IMInterstitial.this);
                }
            }
            
            @Override
            public void onShowAdScreen(final InterstitialView interstitialView) {
                IMInterstitial.this.k = IMInterstitial$State.ACTIVE;
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onShowInterstitialScreen(IMInterstitial.this);
                }
            }
        });
    }
    
    private void a(final Activity i) {
        this.i = i;
        if (InternalSDKUtil.isInitializedSuccessfully()) {
            while (true) {
                try {
                    ThinICE.start((Context)this.i);
                    if (this.h != -1L) {
                        this.a();
                    }
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Network]-4.4.3", "Cannot start ice. Activity is null");
                    continue;
                }
                break;
            }
        }
    }
    
    private void b() {
        if (InternalSDKUtil.isInitializedSuccessfully(false) && !this.j.get() && (this.getState() == IMInterstitial$State.READY || this.getState() == IMInterstitial$State.INIT)) {
            this.d();
            if (this.h != -1L) {
                this.b = this.a();
                if (IMInterstitial.g != null) {
                    this.b = IMInterstitial.g;
                }
                switch (IMInterstitial$a.a[this.b.ordinal()]) {
                    default: {
                        this.e();
                        this.l.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                if (IMInterstitial.this.e != null) {
                                    IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, IMErrorCode.NO_FILL);
                                }
                            }
                        });
                        break;
                    }
                    case 1:
                    case 2: {
                        this.c();
                        break;
                    }
                    case 3: {
                        this.e();
                        this.l.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                IMInterstitial.this.j.set(false);
                                IMInterstitial.this.k = IMInterstitial$State.INIT;
                                if (IMInterstitial.this.e != null) {
                                    IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, IMErrorCode.DO_MONETIZE);
                                }
                            }
                        });
                        break;
                    }
                    case 4: {
                        this.e();
                        this.l.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                IMInterstitial.this.j.set(false);
                                IMInterstitial.this.k = IMInterstitial$State.INIT;
                                if (IMInterstitial.this.e != null) {
                                    IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, IMErrorCode.DO_NOTHING);
                                }
                            }
                        });
                        break;
                    }
                }
            }
            if (this.a != null) {
                MonetizationUtils.updateIMAdRequest(this.a.getIMAdRequest());
                if (this.o != null) {
                    this.a.getIMAdRequest().setRequestParams(this.o);
                }
                if (this.n != null) {
                    this.a.getIMAdRequest().setKeywords(this.n);
                }
                Mode mode;
                if (this.c == IMInterstitial$AdMode.AD_NETWORK) {
                    mode = Mode.AD_NETWORK;
                }
                else {
                    mode = Mode.APP_GALLERY;
                }
                this.a.setMode(mode);
                if (this.d) {
                    this.a.disableHardwareAcceleration();
                }
            }
        }
    }
    
    private void c() {
        this.d();
        this.a.setAdServerUrl(AnalyticsInitializer.getConfigParams().getEndPoints().getHouseUrl());
        this.a.setSlotId(this.h);
        this.a.getIMAdRequest().setRequestParams(MonetizationUtils.buildLtvpRequestMap(null));
        this.a.setAppId(InMobi.getAppId());
    }
    
    private void d() {
        if (this.a == null) {
            this.a(this.h);
        }
        if (this.m != null) {
            this.a.setAppId(this.m);
        }
    }
    
    private void e() {
        if (this.a != null) {
            this.a.setIMAdInterstitialListener(null);
            this.a = null;
        }
    }
    
    public void destroy() {
        if (this.a != null) {
            this.a.destroy();
        }
    }
    
    public void disableHardwareAcceleration() {
        this.d = true;
    }
    
    public IMInterstitial$State getState() {
        return this.k;
    }
    
    public void loadInterstitial() {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            return;
        }
        this.b();
        if (this.j.get() || (this.getState() != IMInterstitial$State.READY && this.getState() != IMInterstitial$State.INIT)) {
            final IMErrorCode invalid_REQUEST = IMErrorCode.INVALID_REQUEST;
            String message;
            if (this.j.get()) {
                message = "Interstitial load is already in progress.";
            }
            else {
                message = "Interstitial can only be loaded in init or ready state.";
            }
            invalid_REQUEST.setMessage(message);
            this.l.post((Runnable)new Runnable() {
                @Override
                public void run() {
                    if (IMInterstitial.this.e != null) {
                        IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, invalid_REQUEST);
                    }
                }
            });
            Log.verbose("[InMobi]-[Monetization]", message);
            return;
        }
        this.j.set(true);
        this.k = IMInterstitial$State.LOADING;
        Log.debug("[InMobi]-[Monetization]", "loading");
        if (this.a == null) {
            this.j.set(false);
            return;
        }
        if (this.m != null || this.h != -1L) {
            this.a.loadNewAd();
            return;
        }
        this.j.set(false);
        this.k = IMInterstitial$State.INIT;
        this.l.post((Runnable)new Runnable() {
            @Override
            public void run() {
                Log.debug("[InMobi]-[Network]-4.4.3", "AppId cannot be set to null");
                if (IMInterstitial.this.e != null) {
                    IMInterstitial.this.e.onInterstitialFailed(IMInterstitial.this, IMErrorCode.INVALID_REQUEST);
                }
            }
        });
    }
    
    public void setAppId(final String m) {
        if (m == null || "".equals(m.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "AppId cannot be null or blank.");
            return;
        }
        if (this.h != -1L) {
            Log.debug("[InMobi]-[Network]-4.4.3", "A new appId cannot be set if a slotId is already set.");
            return;
        }
        this.m = m;
    }
    
    public void setIMIncentivisedListener(final IMIncentivisedListener f) {
        this.f = f;
    }
    
    public void setIMInterstitialListener(final IMInterstitialListener e) {
        this.e = e;
    }
    
    public void setKeywords(final String n) {
        if (n == null || "".equals(n.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Keywords cannot be null or blank.");
            return;
        }
        this.n = n;
    }
    
    public void setMode(final IMInterstitial$AdMode c) {
        if (c != null) {
            this.c = c;
            return;
        }
        Log.debug("[InMobi]-[Network]-4.4.3", "AdMode cannot be null.");
    }
    
    public void setRequestParams(final Map o) {
        if (o == null || o.isEmpty()) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Request params cannot be null or empty.");
            return;
        }
        this.o = o;
    }
    
    public void setSlotId(final long h) {
        if (h == -1L) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Invalid slotId : -1");
        }
        else {
            if (this.h == -1L && this.m != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "A new slotId can be set only if a valid slotId is provided during object construction.");
                return;
            }
            this.h = h;
            if (this.a != null) {
                this.a.setSlotId(this.h);
            }
        }
    }
    
    public void show() {
        if (this.a != null) {
            this.a.show();
        }
        try {
            ThinICE.start((Context)this.i);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Cannot start ice. Activity is null");
        }
    }
    
    @Deprecated
    public void show(final long n) {
        if (this.a != null) {
            this.a.show(n);
        }
        try {
            ThinICE.start((Context)this.i);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[Network]-4.4.3", "Cannot start ice. Activity is null");
        }
    }
    
    public void stopLoading() {
        if (this.a != null) {
            this.a.stopLoading();
        }
    }
}
