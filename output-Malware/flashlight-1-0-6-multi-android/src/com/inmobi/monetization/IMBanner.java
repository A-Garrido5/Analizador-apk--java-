// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.monetization;

import com.inmobi.androidsdk.AdRequest$ErrorCode;
import com.inmobi.commons.InMobi;
import android.view.View;
import com.inmobi.commons.analytics.bootstrapper.AnalyticsInitializer;
import com.inmobi.monetization.internal.MonetizationUtils;
import com.inmobi.monetization.internal.LtvpRuleProcessor;
import java.util.HashMap;
import com.inmobi.commons.internal.ThinICE;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.androidsdk.bootstrapper.Initializer;
import com.inmobi.commons.internal.Log;
import android.util.AttributeSet;
import android.content.Context;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import com.inmobi.commons.AnimationType;
import android.app.Activity;
import com.inmobi.androidsdk.BannerViewListener;
import com.inmobi.androidsdk.BannerView;
import com.inmobi.monetization.internal.LtvpRuleProcessor$ActionsRule;
import android.widget.RelativeLayout;

public final class IMBanner extends RelativeLayout
{
    public static final int INMOBI_AD_UNIT_120X600 = 13;
    public static final int INMOBI_AD_UNIT_300X250 = 10;
    public static final int INMOBI_AD_UNIT_320X48 = 9;
    public static final int INMOBI_AD_UNIT_320X50 = 15;
    public static final int INMOBI_AD_UNIT_468X60 = 12;
    public static final int INMOBI_AD_UNIT_728X90 = 11;
    public static final int REFRESH_INTERVAL_MINIMUM = 0;
    public static final int REFRESH_INTERVAL_OFF = -1;
    private static LtvpRuleProcessor$ActionsRule j;
    BannerView a;
    LtvpRuleProcessor$ActionsRule b;
    BannerViewListener c;
    Activity d;
    long e;
    int f;
    AnimationType g;
    boolean h;
    private AtomicBoolean i;
    private IMBannerListener k;
    private AtomicBoolean l;
    private String m;
    private String n;
    private String o;
    private Map p;
    private String q;
    private int r;
    private int s;
    private IMBanner$a t;
    
    static {
        IMBanner.j = null;
    }
    
    public IMBanner(final Activity d, final long e) {
        super((Context)d);
        this.a = null;
        this.i = new AtomicBoolean(false);
        this.b = LtvpRuleProcessor$ActionsRule.MEDIATION;
        this.c = null;
        this.l = new AtomicBoolean(false);
        this.e = -1L;
        this.f = 15;
        this.m = null;
        this.n = null;
        this.o = null;
        this.p = null;
        this.q = null;
        this.g = null;
        this.h = false;
        this.r = 0;
        this.s = 0;
        this.t = new IMBanner$a(this);
        this.d = d;
        this.e = e;
        this.a();
    }
    
    public IMBanner(final Activity d, final String q, final int f) {
        super((Context)d);
        this.a = null;
        this.i = new AtomicBoolean(false);
        this.b = LtvpRuleProcessor$ActionsRule.MEDIATION;
        this.c = null;
        this.l = new AtomicBoolean(false);
        this.e = -1L;
        this.f = 15;
        this.m = null;
        this.n = null;
        this.o = null;
        this.p = null;
        this.q = null;
        this.g = null;
        this.h = false;
        this.r = 0;
        this.s = 0;
        this.t = new IMBanner$a(this);
        this.d = d;
        this.f = f;
        this.q = q;
        this.a();
    }
    
    public IMBanner(final Context context, final AttributeSet set) {
        super(context, set);
        this.a = null;
        this.i = new AtomicBoolean(false);
        this.b = LtvpRuleProcessor$ActionsRule.MEDIATION;
        this.c = null;
        this.l = new AtomicBoolean(false);
        this.e = -1L;
        this.f = 15;
        this.m = null;
        this.n = null;
        this.o = null;
        this.p = null;
        this.q = null;
        this.g = null;
        this.h = false;
        this.r = 0;
        this.s = 0;
        this.t = new IMBanner$a(this);
        this.d = (Activity)context;
        while (true) {
            try {
                this.e = Long.parseLong(set.getAttributeValue((String)null, "slotId"));
                try {
                    this.f = Integer.parseInt(set.getAttributeValue((String)null, "adSize"));
                    try {
                        this.q = set.getAttributeValue((String)null, "appId");
                        if (this.e == -1L && this.q == null) {
                            Log.debug("[InMobi]-[Monetization]", "slotId and appId is missing in IMBanner xml layout. Please integrate using appId or slotId. Refer integration guidelines for more details.");
                        }
                        this.a();
                    }
                    catch (Exception ex) {}
                }
                catch (Exception ex2) {}
            }
            catch (Exception ex3) {
                continue;
            }
            break;
        }
    }
    
    private void a() {
        this.setRefreshInterval(Initializer.getConfigParams().getDefaultRefreshRate());
        if (InternalSDKUtil.isInitializedSuccessfully()) {
            while (true) {
                try {
                    ThinICE.start((Context)this.d);
                    if (this.e != -1L) {
                        this.b();
                    }
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Network]-4.4.3", "Cannot start ice. Activity is null");
                    continue;
                }
                break;
            }
        }
    }
    
    private void a(final int r) {
        this.r = r;
        if (r == -1) {
            this.t.removeMessages(100);
            return;
        }
        final int minimumRefreshRate = Initializer.getConfigParams().getMinimumRefreshRate();
        if (r < minimumRefreshRate) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Refresh Interval cannot be less than " + minimumRefreshRate + " seconds. Setting refresh rate to " + minimumRefreshRate);
        }
        this.h();
    }
    
    private void a(final boolean b) {
        if (!InternalSDKUtil.isInitializedSuccessfully()) {
            return;
        }
        this.c();
        if (this.i.get() || this.l.get()) {
            final IMErrorCode invalid_REQUEST = IMErrorCode.INVALID_REQUEST;
            String message;
            if (this.i.get()) {
                message = "Banner load is already in progress.";
            }
            else {
                message = "Banner click in progress.";
            }
            invalid_REQUEST.setMessage(message);
            this.t.post((Runnable)new Runnable() {
                @Override
                public void run() {
                    if (IMBanner.this.k != null) {
                        IMBanner.this.k.onBannerRequestFailed(IMBanner.this, invalid_REQUEST);
                    }
                }
            });
            Log.verbose("[InMobi]-[Monetization]", message);
            this.h();
            return;
        }
        this.i.set(true);
        this.t.removeMessages(100);
        if (this.a == null) {
            this.i.set(false);
            return;
        }
        Map<String, String> requestParams = (Map<String, String>)this.a.getIMAdRequest().getRequestParams();
        if (requestParams == null) {
            requestParams = new HashMap<String, String>();
        }
        if (b) {
            requestParams.put("u-rt", "0");
        }
        else {
            requestParams.put("u-rt", "1");
        }
        this.a.getIMAdRequest().setRequestParams(requestParams);
        if (this.q != null || this.e != -1L) {
            this.a.loadNewAd();
            return;
        }
        this.i.set(false);
        this.t.post((Runnable)new Runnable() {
            @Override
            public void run() {
                Log.debug("[InMobi]-[Network]-4.4.3", "AppId Not Set - Please call setAppId on the IMBanner object with a valid appId. For XML, please add \"appId\" attribute to the XML. Please refer integration guideline for more details.");
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onBannerRequestFailed(IMBanner.this, IMErrorCode.INVALID_REQUEST);
                }
                IMBanner.this.h();
            }
        });
    }
    
    private LtvpRuleProcessor$ActionsRule b() {
        return LtvpRuleProcessor.getInstance().getLtvpRuleConfig(this.e);
    }
    
    private void c() {
        if (InternalSDKUtil.isInitializedSuccessfully(false) && !this.i.get() && !this.l.get()) {
            this.e();
            if (this.e != -1L) {
                this.b = this.b();
                if (IMBanner.j != null) {
                    this.b = IMBanner.j;
                }
                switch (IMBanner$f.a[this.b.ordinal()]) {
                    default: {
                        this.g();
                        this.t.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                if (IMBanner.this.k != null) {
                                    IMBanner.this.k.onBannerRequestFailed(IMBanner.this, IMErrorCode.NO_FILL);
                                }
                            }
                        });
                        break;
                    }
                    case 1:
                    case 2: {
                        this.d();
                        break;
                    }
                    case 3: {
                        this.g();
                        this.t.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                if (IMBanner.this.k != null) {
                                    IMBanner.this.k.onBannerRequestFailed(IMBanner.this, IMErrorCode.DO_MONETIZE);
                                }
                            }
                        });
                        break;
                    }
                    case 4: {
                        this.g();
                        this.t.post((Runnable)new Runnable() {
                            @Override
                            public void run() {
                                if (IMBanner.this.k != null) {
                                    IMBanner.this.k.onBannerRequestFailed(IMBanner.this, IMErrorCode.DO_NOTHING);
                                }
                            }
                        });
                        break;
                    }
                }
            }
            if (this.a != null) {
                MonetizationUtils.updateIMAdRequest(this.a.getIMAdRequest());
                if (this.n != null && this.o != null) {
                    this.a.setRefTagParam(this.n, this.o);
                }
                if (this.p != null) {
                    this.a.getIMAdRequest().setRequestParams(this.p);
                }
                if (this.m != null) {
                    this.a.getIMAdRequest().setKeywords(this.m);
                }
                this.a.setAdSize(this.f);
                if (this.g != null) {
                    this.a.setAnimationType(this.g);
                }
                if (this.h) {
                    this.a.disableHardwareAcceleration();
                }
            }
        }
    }
    
    private void d() {
        this.a.setAdServerUrl(AnalyticsInitializer.getConfigParams().getEndPoints().getHouseUrl());
        this.a.setSlotId(this.e);
        this.a.getIMAdRequest().setRequestParams(MonetizationUtils.buildLtvpRequestMap((View)this));
        this.a.setAppId(InMobi.getAppId());
    }
    
    private void e() {
        if (this.a == null) {
            this.f();
        }
        if (this.q != null) {
            this.a.setAppId(this.q);
        }
    }
    
    private void f() {
        this.a = new BannerView(this.d, this.f, InMobi.getAppId(), -1L);
        MonetizationUtils.updateIMAdRequest(this.a.getIMAdRequest());
        this.c = new BannerViewListener() {
            @Override
            public void onAdRequestCompleted(final BannerView bannerView) {
                IMBanner.this.i.set(false);
                IMBanner.this.h();
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onBannerRequestSucceeded(IMBanner.this);
                }
            }
            
            @Override
            public void onAdRequestFailed(final BannerView bannerView, final AdRequest$ErrorCode adRequest$ErrorCode) {
                if (IMBanner.this.b == LtvpRuleProcessor$ActionsRule.ACTIONS_TO_MEDIATION) {
                    if (IMBanner.this.k != null) {
                        IMBanner.this.k.onBannerRequestFailed(IMBanner.this, IMErrorCode.DO_MONETIZE);
                    }
                }
                else if (IMBanner.this.k != null) {
                    IMBanner.this.k.onBannerRequestFailed(IMBanner.this, MonetizationUtils.getErrorCode(adRequest$ErrorCode));
                }
                IMBanner.this.i.set(false);
                IMBanner.this.h();
            }
            
            @Override
            public void onBannerInteraction(final BannerView bannerView, final Map map) {
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onBannerInteraction(IMBanner.this, map);
                }
            }
            
            @Override
            public void onDismissAdScreen(final BannerView bannerView) {
                IMBanner.this.l.set(false);
                IMBanner.this.h();
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onDismissBannerScreen(IMBanner.this);
                }
            }
            
            @Override
            public void onLeaveApplication(final BannerView bannerView) {
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onLeaveApplication(IMBanner.this);
                }
            }
            
            @Override
            public void onShowAdScreen(final BannerView bannerView) {
                IMBanner.this.l.set(true);
                if (IMBanner.this.k != null) {
                    IMBanner.this.k.onShowBannerScreen(IMBanner.this);
                }
            }
        };
        this.a.setIMAdListener(this.c);
        this.addView((View)this.a);
    }
    
    private void g() {
        if (this.a != null) {
            this.a.destroy();
            this.removeView((View)this.a);
            this.a = null;
            this.c = null;
        }
    }
    
    private void h() {
        this.t.removeMessages(100);
        if (this.r == -1) {
            return;
        }
        final int minimumRefreshRate = Initializer.getConfigParams().getMinimumRefreshRate();
        if (this.r < minimumRefreshRate) {
            this.t.sendEmptyMessageDelayed(100, (long)(minimumRefreshRate * 1000));
            return;
        }
        this.t.sendEmptyMessageDelayed(100, (long)(1000 * this.r));
    }
    
    public final void destroy() {
        if (this.a != null) {
            this.a.destroy();
        }
    }
    
    public final void disableHardwareAcceleration() {
        this.h = true;
    }
    
    public final void loadBanner() {
        this.a(true);
    }
    
    protected final void onWindowVisibilityChanged(final int n) {
        if (n == 0) {
            while (true) {
                try {
                    ThinICE.start((Context)this.d);
                    this.a(this.s);
                    return;
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[Network]-4.4.3", "Cannot start ice. Activity is null");
                    continue;
                }
                break;
            }
        }
        this.a(-1);
    }
    
    public final void setAdSize(final int f) {
        this.f = f;
    }
    
    public final void setAnimationType(final AnimationType g) {
        this.g = g;
    }
    
    public final void setAppId(final String q) {
        if (q == null || "".equals(q.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "AppId cannot be null or blank.");
            return;
        }
        if (this.e != -1L) {
            Log.debug("[InMobi]-[Network]-4.4.3", "A new appId cannot be set if a slotId is already set.");
            return;
        }
        this.q = q;
    }
    
    public final void setIMBannerListener(final IMBannerListener k) {
        this.k = k;
    }
    
    public final void setKeywords(final String m) {
        if (m == null || "".equals(m.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Keywords cannot be null or blank.");
            return;
        }
        this.m = m;
    }
    
    public final void setRefTagParam(final String n, final String o) {
        if (n == null || "".equals(n.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Ref tag key cannot be null or blank.");
            return;
        }
        if (o == null || "".equals(o.trim())) {
            Log.debug("[InMobi]-[Network]-4.4.3", "RefTag value cannot be null or blank.");
            return;
        }
        this.n = n;
        this.o = o;
    }
    
    public final void setRefreshInterval(final int s) {
        this.a(this.s = s);
    }
    
    public final void setRequestParams(final Map p) {
        if (p == null || p.isEmpty()) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Request params cannot be null or empty.");
            return;
        }
        this.p = p;
    }
    
    public final void setSlotId(final long e) {
        if (e == -1L) {
            Log.debug("[InMobi]-[Network]-4.4.3", "Invalid slotId : -1");
        }
        else {
            if (this.e == -1L && this.q != null) {
                Log.debug("[InMobi]-[Network]-4.4.3", "A new slotId can be set only if a valid slotId is provided during object construction.");
                return;
            }
            this.e = e;
            if (this.a != null) {
                this.a.setSlotId(this.e);
            }
        }
    }
    
    public final void stopLoading() {
        if (this.a != null) {
            this.a.stopLoading();
        }
    }
}
