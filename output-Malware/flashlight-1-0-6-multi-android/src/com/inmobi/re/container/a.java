// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container;

import com.inmobi.re.controller.JSController$ResizeProperties;
import java.io.File;
import com.inmobi.re.controller.JSController$Dimensions;
import android.os.Parcelable;
import com.inmobi.re.controller.JSController$PlayerProperties;
import android.os.Vibrator;
import java.util.HashMap;
import android.os.Handler;
import java.util.Locale;
import com.inmobi.androidsdk.IMBrowserActivity;
import android.os.Bundle;
import com.inmobi.re.controller.JSController$ExpandProperties;
import com.inmobi.re.controller.util.AVPlayer;
import com.inmobi.re.controller.util.AVPlayer$playerState;
import android.os.AsyncTask$Status;
import android.net.Uri;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import com.inmobi.commons.internal.WrapperFunctions;
import android.net.http.SslError;
import android.webkit.SslErrorHandler;
import android.annotation.SuppressLint;
import android.os.Build$VERSION;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import com.inmobi.re.configs.Initializer;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.util.Iterator;
import android.content.pm.ResolveInfo;
import android.content.Intent;
import android.util.AttributeSet;
import android.app.Activity;
import android.os.Message;
import java.util.ArrayList;
import android.view.ViewGroup;
import com.inmobi.re.container.mraidimpl.MRAIDResizeController;
import com.inmobi.re.container.mraidimpl.MRAIDBasic;
import com.inmobi.re.container.mraidimpl.MRAIDInterstitialController;
import com.inmobi.re.container.mraidimpl.MRAIDExpandController;
import com.inmobi.re.container.mraidimpl.MRAIDAudioVideoController;
import com.inmobi.re.controller.JSUtilityController;
import org.json.JSONObject;
import java.util.concurrent.atomic.AtomicBoolean;
import android.media.MediaPlayer$OnCompletionListener;
import android.webkit.WebViewClient;
import android.view.ViewParent;
import java.io.Serializable;
import android.view.KeyEvent;
import android.view.View$OnKeyListener;
import android.view.ViewGroup$LayoutParams;
import android.widget.AbsoluteLayout$LayoutParams;
import android.view.View$OnFocusChangeListener;
import android.widget.MediaController;
import android.widget.VideoView;
import android.widget.FrameLayout;
import android.view.MotionEvent;
import android.view.View$OnTouchListener;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import android.webkit.JsResult;
import android.webkit.WebView;
import com.inmobi.commons.internal.Log;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.content.Context;
import android.app.AlertDialog$Builder;
import android.webkit.GeolocationPermissions$Callback;
import android.webkit.WebChromeClient;

class a extends WebChromeClient
{
    final /* synthetic */ IMWebView a;
    
    a(final IMWebView a) {
        this.a = a;
    }
    
    public void onGeolocationPermissionsShowPrompt(final String s, final GeolocationPermissions$Callback geolocationPermissions$Callback) {
        try {
            final AlertDialog$Builder alertDialog$Builder = new AlertDialog$Builder((Context)this.a.v);
            alertDialog$Builder.setTitle((CharSequence)"Locations access");
            alertDialog$Builder.setMessage((CharSequence)"Allow location access").setCancelable(true).setPositiveButton((CharSequence)"Accept", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                public void onClick(final DialogInterface dialogInterface, final int n) {
                    geolocationPermissions$Callback.invoke(s, true, false);
                }
            }).setNegativeButton((CharSequence)"Decline", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                public void onClick(final DialogInterface dialogInterface, final int n) {
                    geolocationPermissions$Callback.invoke(s, false, false);
                }
            });
            alertDialog$Builder.create().show();
            super.onGeolocationPermissionsShowPrompt(s, geolocationPermissions$Callback);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Exception while accessing location from creative ", ex);
            geolocationPermissions$Callback.invoke(s, false, false);
        }
    }
    
    public boolean onJsAlert(final WebView webView, final String title, final String message, final JsResult jsResult) {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onJsAlert, " + message);
        try {
            Object o;
            if (this.a.isExpanded() || this.a.mIsInterstitialAd) {
                o = this.a.getExpandedActivity();
            }
            else {
                o = webView.getContext();
            }
            new AlertDialog$Builder((Context)o).setTitle((CharSequence)title).setMessage((CharSequence)message).setPositiveButton(17039370, (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                public void onClick(final DialogInterface dialogInterface, final int n) {
                    jsResult.confirm();
                }
            }).setCancelable(false).create().show();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "webchrome client exception onJSAlert ", ex);
        }
        return true;
    }
    
    public void onShowCustomView(final View view, final WebChromeClient$CustomViewCallback webChromeClient$CustomViewCallback) {
        this.a.l = view;
        this.a.m = webChromeClient$CustomViewCallback;
        Log.debug("[InMobi]-[RE]-4.4.3", "onShowCustomView ******************************" + view);
        try {
            this.a.a(this.a.l, (View$OnTouchListener)new View$OnTouchListener() {
                public boolean onTouch(final View view, final MotionEvent motionEvent) {
                    return false;
                }
            });
            this.a.l.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                public boolean onTouch(final View view, final MotionEvent motionEvent) {
                    return true;
                }
            });
            if (view instanceof FrameLayout) {
                this.a.o = (FrameLayout)view;
                final FrameLayout frameLayout = (FrameLayout)this.a.v.findViewById(16908290);
                if (this.a.o.getFocusedChild() instanceof VideoView) {
                    this.a.k = (VideoView)this.a.o.getFocusedChild();
                    Object o;
                    if (this.a.isExpanded() || this.a.mIsInterstitialAd) {
                        o = this.a.getExpandedActivity();
                    }
                    else {
                        o = view.getContext();
                    }
                    this.a.k.setMediaController(new MediaController((Context)o));
                    this.a.o.setBackgroundColor(-16777216);
                    this.a.k.setOnCompletionListener(this.a.G);
                    this.a.k.setOnFocusChangeListener((View$OnFocusChangeListener)new View$OnFocusChangeListener() {
                        public void onFocusChange(final View view, final boolean b) {
                            com.inmobi.re.container.a.this.a.k.requestFocus();
                        }
                    });
                    frameLayout.addView(this.a.l, (ViewGroup$LayoutParams)new AbsoluteLayout$LayoutParams(-1, -1, 0, 0));
                    Log.debug("[InMobi]-[RE]-4.4.3", "Registering");
                    this.a.a(this.a.l, (View$OnKeyListener)new View$OnKeyListener() {
                        public boolean onKey(final View view, final int n, final KeyEvent keyEvent) {
                            if (4 == keyEvent.getKeyCode() && keyEvent.getAction() == 0) {
                                Log.debug("[InMobi]-[RE]-4.4.3", "Back Button pressed when html5 video is playing");
                                com.inmobi.re.container.a.this.a.k.stopPlayback();
                                com.inmobi.re.container.a.this.a.d();
                                return true;
                            }
                            return false;
                        }
                    });
                    return;
                }
                this.a.l = view;
                view.setBackgroundColor(-16777216);
                Log.debug("[InMobi]-[RE]-4.4.3", "adding " + view);
                frameLayout.addView(view, (ViewGroup$LayoutParams)new AbsoluteLayout$LayoutParams(-1, -1, 0, 0));
                this.a.a(this.a.l, (View$OnKeyListener)new View$OnKeyListener() {
                    public boolean onKey(final View view, final int n, final KeyEvent keyEvent) {
                        Log.debug("[InMobi]-[RE]-4.4.3", "Back Button pressed when html5 video is playing");
                        com.inmobi.re.container.a.this.a.d();
                        return true;
                    }
                });
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMWebview onShowCustomView exception ", ex);
        }
    }
}
