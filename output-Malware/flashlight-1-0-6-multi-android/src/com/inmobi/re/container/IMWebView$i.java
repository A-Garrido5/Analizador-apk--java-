// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container;

import com.inmobi.re.controller.JSController$ResizeProperties;
import com.inmobi.re.controller.JSController$Dimensions;
import android.os.Parcelable;
import com.inmobi.re.controller.JSController$PlayerProperties;
import android.os.Vibrator;
import android.view.MotionEvent;
import android.view.ViewGroup$LayoutParams;
import java.util.HashMap;
import android.os.Handler;
import java.util.Locale;
import com.inmobi.androidsdk.IMBrowserActivity;
import android.os.Bundle;
import com.inmobi.re.controller.JSController$ExpandProperties;
import com.inmobi.re.controller.util.AVPlayer;
import com.inmobi.re.controller.util.AVPlayer$playerState;
import android.os.AsyncTask$Status;
import android.net.Uri;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import com.inmobi.commons.internal.WrapperFunctions;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.net.http.SslError;
import android.webkit.SslErrorHandler;
import android.view.View$OnTouchListener;
import android.view.View$OnKeyListener;
import android.annotation.SuppressLint;
import android.os.Build$VERSION;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import java.util.Iterator;
import android.content.pm.ResolveInfo;
import android.content.Intent;
import android.util.AttributeSet;
import android.content.Context;
import android.app.Activity;
import android.os.Message;
import java.util.ArrayList;
import android.widget.FrameLayout;
import android.view.ViewGroup;
import com.inmobi.re.container.mraidimpl.MRAIDResizeController;
import com.inmobi.re.container.mraidimpl.MRAIDBasic;
import com.inmobi.re.container.mraidimpl.MRAIDInterstitialController;
import com.inmobi.re.container.mraidimpl.MRAIDExpandController;
import com.inmobi.re.container.mraidimpl.MRAIDAudioVideoController;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import android.widget.VideoView;
import com.inmobi.re.controller.JSUtilityController;
import java.util.concurrent.atomic.AtomicBoolean;
import android.media.MediaPlayer$OnCompletionListener;
import android.webkit.WebChromeClient;
import android.webkit.WebViewClient;
import android.view.ViewParent;
import java.io.Serializable;
import android.webkit.WebView;
import org.json.JSONObject;
import java.io.InputStream;
import android.content.pm.PackageManager;
import org.json.JSONException;
import java.io.IOException;
import java.net.ProtocolException;
import java.net.MalformedURLException;
import java.io.FileNotFoundException;
import java.net.SocketTimeoutException;
import java.io.FileOutputStream;
import android.util.Log;
import java.net.URL;
import java.net.HttpURLConnection;
import com.inmobi.re.configs.Initializer;
import android.os.Environment;
import android.webkit.URLUtil;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.os.Binder;
import java.io.File;
import android.os.AsyncTask;

class IMWebView$i extends AsyncTask
{
    File a;
    String b;
    String c;
    int d;
    String e;
    final /* synthetic */ IMWebView f;
    
    IMWebView$i(final IMWebView f, final File a, final String b, final String c) {
        this.f = f;
        this.d = -1;
        this.e = "";
        this.a = a;
        this.b = b;
        this.c = c;
        f.p.add(this);
    }
    
    public String a() {
        return this.c;
    }
    
    protected String a(final Void... array) {
        final PackageManager packageManager = this.f.v.getPackageManager();
        int n;
        if (packageManager.checkPermission("android.permission.WRITE_EXTERNAL_STORAGE", packageManager.getNameForUid(Binder.getCallingUid())) == 0) {
            n = 1;
        }
        else {
            n = 0;
        }
        if (n == 0) {
            this.d = IMWebView$f.j.ordinal();
            return "failure";
        }
        if (!InternalSDKUtil.checkNetworkAvailibility(InternalSDKUtil.getContext())) {
            this.d = IMWebView$f.i.ordinal();
            return "failure";
        }
        if (!this.c.matches("[A-Za-z0-9]+") || this.c.equals("")) {
            this.d = IMWebView$f.c.ordinal();
            return "failure";
        }
        if (this.b.equals("") || !URLUtil.isValidUrl(this.b)) {
            this.d = IMWebView$f.d.ordinal();
            return "failure";
        }
        if (!Environment.getExternalStorageState().equals("mounted")) {
            this.d = IMWebView$f.k.ordinal();
            return "failure";
        }
        final String replace = Initializer.getConfigParams().getAllowedContentType().replace("\\", "");
        final String substring = replace.substring(1, -1 + replace.length());
        Label_0360: {
            if (!substring.contains(",")) {
                break Label_0360;
            }
            String[] split = substring.split(",");
        Label_0342_Outer:
            while (true) {
                final int maxSaveContentSize = Initializer.getConfigParams().getMaxSaveContentSize();
                while (true) {
                    Label_0845: {
                        try {
                            System.currentTimeMillis();
                            final HttpURLConnection httpURLConnection = (HttpURLConnection)new URL(this.b).openConnection();
                            httpURLConnection.setRequestMethod("GET");
                            httpURLConnection.setDoOutput(true);
                            httpURLConnection.setConnectTimeout(5000);
                            final String contentType = httpURLConnection.getContentType();
                            Log.i("Nilanjana", "contentType_url: " + contentType);
                            Block_11: {
                                for (int i = 0; i < split.length; ++i) {
                                    if (split[i].substring(1, -1 + split[i].length()).equals(contentType)) {
                                        break Block_11;
                                    }
                                }
                                break Label_0845;
                            }
                            final int n2 = 1;
                            if (n2 == 0) {
                                this.d = IMWebView$f.g.ordinal();
                                return "failure";
                            }
                            final long n3 = httpURLConnection.getContentLength();
                            if (n3 >= 0L && n3 > 1024 * (maxSaveContentSize * 1024)) {
                                this.d = IMWebView$f.h.ordinal();
                                return "failure";
                            }
                            httpURLConnection.connect();
                            final FileOutputStream fileOutputStream = new FileOutputStream(this.a);
                            final InputStream inputStream = httpURLConnection.getInputStream();
                            final byte[] array2 = new byte[1024];
                            long n4 = 0L;
                            while (true) {
                                final int read = inputStream.read(array2);
                                if (read <= 0) {
                                    goto Label_0549;
                                }
                                n4 += read;
                                if (n4 > 1024 * (maxSaveContentSize * 1024)) {
                                    break;
                                }
                                fileOutputStream.write(array2, 0, read);
                            }
                            this.d = IMWebView$f.h.ordinal();
                            return "failure";
                            split = new String[] { substring };
                            continue Label_0342_Outer;
                        }
                        catch (SocketTimeoutException ex) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "SocketTimeoutException");
                            this.d = IMWebView$f.i.ordinal();
                            return "failure";
                        }
                        catch (FileNotFoundException ex2) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "FileNotFoundException");
                            this.d = IMWebView$f.e.ordinal();
                            return "failure";
                        }
                        catch (MalformedURLException ex3) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "MalformedURLException");
                            this.d = IMWebView$f.d.ordinal();
                            return "failure";
                        }
                        catch (ProtocolException ex4) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "ProtocolException");
                            this.d = IMWebView$f.i.ordinal();
                            return "failure";
                        }
                        catch (IOException ex5) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "IOException");
                            this.d = IMWebView$f.a.ordinal();
                            return "failure";
                        }
                        catch (JSONException ex6) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "JSONException");
                            this.d = IMWebView$f.a.ordinal();
                            return "failure";
                        }
                        catch (Exception ex7) {
                            com.inmobi.commons.internal.Log.internal("[InMobi]-[RE]-4.4.3", "Unknown Exception");
                            this.d = IMWebView$f.a.ordinal();
                            return "failure";
                        }
                    }
                    final int n2 = 0;
                    continue;
                }
            }
        }
    }
    
    protected void a(final String s) {
        if (s.equals("success")) {
            this.f.injectJavaScript("window.mraid.sendSaveContentResult(\"saveContent_" + this.c + "\", 'success', \"" + this.e + "\");");
            if (this.f.c != null) {
                this.f.c.postSuccess();
            }
        }
        else {
            final JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("url", (Object)this.b);
                jsonObject.put("reason", this.d);
                this.f.injectJavaScript("window.mraid.sendSaveContentResult(\"saveContent_" + this.c + "\", 'failure', \"" + jsonObject.toString().replace("\"", "\\\"") + "\");");
                if (this.f.c != null) {
                    this.f.c.postFailed(this.d);
                }
            }
            catch (JSONException ex) {}
        }
        super.onPostExecute((Object)s);
    }
    
    protected void onCancelled() {
        super.onCancelled();
    }
}
