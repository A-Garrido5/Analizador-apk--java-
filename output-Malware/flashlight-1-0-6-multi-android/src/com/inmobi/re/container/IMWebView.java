// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container;

import com.inmobi.re.controller.JSController$ResizeProperties;
import java.io.File;
import com.inmobi.re.controller.JSController$Dimensions;
import android.os.Parcelable;
import com.inmobi.re.controller.JSController$PlayerProperties;
import android.os.Vibrator;
import android.view.MotionEvent;
import android.view.ViewGroup$LayoutParams;
import java.util.HashMap;
import android.os.Handler;
import java.util.Locale;
import com.inmobi.androidsdk.IMBrowserActivity;
import android.os.Bundle;
import com.inmobi.re.controller.JSController$ExpandProperties;
import com.inmobi.re.controller.util.AVPlayer;
import com.inmobi.re.controller.util.AVPlayer$playerState;
import android.os.AsyncTask$Status;
import android.net.Uri;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import com.inmobi.commons.internal.WrapperFunctions;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.net.http.SslError;
import android.webkit.SslErrorHandler;
import android.view.View$OnTouchListener;
import android.view.View$OnKeyListener;
import android.annotation.SuppressLint;
import com.inmobi.commons.internal.Log;
import android.os.Build$VERSION;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import com.inmobi.re.configs.Initializer;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.util.Iterator;
import android.content.pm.ResolveInfo;
import android.content.Intent;
import android.util.AttributeSet;
import android.content.Context;
import android.app.Activity;
import android.os.Message;
import java.util.ArrayList;
import android.widget.FrameLayout;
import android.view.ViewGroup;
import com.inmobi.re.container.mraidimpl.MRAIDResizeController;
import com.inmobi.re.container.mraidimpl.MRAIDBasic;
import com.inmobi.re.container.mraidimpl.MRAIDInterstitialController;
import com.inmobi.re.container.mraidimpl.MRAIDExpandController;
import com.inmobi.re.container.mraidimpl.MRAIDAudioVideoController;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import android.widget.VideoView;
import com.inmobi.re.controller.JSUtilityController;
import org.json.JSONObject;
import java.util.concurrent.atomic.AtomicBoolean;
import android.media.MediaPlayer$OnCompletionListener;
import android.webkit.WebChromeClient;
import android.webkit.WebViewClient;
import android.view.ViewParent;
import java.io.Serializable;
import android.webkit.WebView;

public class IMWebView extends WebView implements Serializable
{
    private static Class D;
    public static final String DIMENSIONS = "expand_dimensions";
    public static final String EXPAND_URL = "expand_url";
    protected static final int IMWEBVIEW_INTERSTITIAL_ID = 117;
    public static final String PLAYER_PROPERTIES = "player_properties";
    private static int[] d;
    private static final long serialVersionUID = 7098506283154473782L;
    public static boolean userInitiatedClose;
    private ViewParent A;
    private int B;
    private boolean C;
    private WebViewClient E;
    private WebChromeClient F;
    private MediaPlayer$OnCompletionListener G;
    private boolean H;
    double a;
    public AtomicBoolean acqMutexcPos;
    public AtomicBoolean acqMutexdPos;
    AtomicBoolean b;
    IMWebView$InstantVideoCallbackCallback c;
    public JSONObject curPosition;
    public JSONObject defPosition;
    public AtomicBoolean doNotFireVisibilityChanged;
    private boolean e;
    private JSUtilityController f;
    private float g;
    private int h;
    private int i;
    public AtomicBoolean isMutexAquired;
    public boolean isTablet;
    private IMWebView$ViewState j;
    private VideoView k;
    private View l;
    private WebChromeClient$CustomViewCallback m;
    public MRAIDAudioVideoController mAudioVideoController;
    public MRAIDExpandController mExpandController;
    public MRAIDInterstitialController mInterstitialController;
    public boolean mIsInterstitialAd;
    public boolean mIsViewable;
    public IMWebView$IMWebViewListener mListener;
    public MRAIDBasic mMraidBasic;
    public IMWebView mOriginalWebviewForExpandUrl;
    public MRAIDResizeController mResizeController;
    public boolean mWebViewIsBrowserActivity;
    protected boolean mraidLoaded;
    public Object mutex;
    public Object mutexcPos;
    public Object mutexdPos;
    private ViewGroup n;
    private FrameLayout o;
    private ArrayList p;
    public int publisherOrientation;
    private boolean q;
    private boolean r;
    private boolean s;
    private Message t;
    private Message u;
    private Activity v;
    private WebViewClient w;
    public String webviewUserAgent;
    private IMWebView$l x;
    private ArrayList y;
    private AtomicBoolean z;
    
    static {
        IMWebView.d = new int[] { 16843039, 16843040 };
        IMWebView.userInitiatedClose = false;
        IMWebView.D = null;
    }
    
    public IMWebView(final Context context, final AttributeSet set) {
        super(context, set);
        this.doNotFireVisibilityChanged = new AtomicBoolean(false);
        this.j = IMWebView$ViewState.LOADING;
        this.m = null;
        this.p = new ArrayList();
        this.q = false;
        this.mIsInterstitialAd = false;
        this.isTablet = false;
        this.mOriginalWebviewForExpandUrl = null;
        this.mWebViewIsBrowserActivity = false;
        this.r = false;
        this.mutex = new Object();
        this.mutexcPos = new Object();
        this.mutexdPos = new Object();
        this.isMutexAquired = new AtomicBoolean(false);
        this.acqMutexcPos = new AtomicBoolean(true);
        this.acqMutexdPos = new AtomicBoolean(true);
        this.y = new ArrayList();
        this.z = new AtomicBoolean();
        this.C = false;
        this.E = new b(this);
        this.F = new a(this);
        this.mIsViewable = false;
        this.G = (MediaPlayer$OnCompletionListener)new c(this);
        this.a = -1.0;
        this.b = new AtomicBoolean(false);
        this.H = true;
        this.c = null;
        this.v = (Activity)context;
        this.a();
        this.getContext().obtainStyledAttributes(set, IMWebView.d).recycle();
    }
    
    public IMWebView(final Context context, final IMWebView$IMWebViewListener mListener) {
        super(context);
        this.doNotFireVisibilityChanged = new AtomicBoolean(false);
        this.j = IMWebView$ViewState.LOADING;
        this.m = null;
        this.p = new ArrayList();
        this.q = false;
        this.mIsInterstitialAd = false;
        this.isTablet = false;
        this.mOriginalWebviewForExpandUrl = null;
        this.mWebViewIsBrowserActivity = false;
        this.r = false;
        this.mutex = new Object();
        this.mutexcPos = new Object();
        this.mutexdPos = new Object();
        this.isMutexAquired = new AtomicBoolean(false);
        this.acqMutexcPos = new AtomicBoolean(true);
        this.acqMutexdPos = new AtomicBoolean(true);
        this.y = new ArrayList();
        this.z = new AtomicBoolean();
        this.C = false;
        this.E = new b(this);
        this.F = new a(this);
        this.mIsViewable = false;
        this.G = (MediaPlayer$OnCompletionListener)new c(this);
        this.a = -1.0;
        this.b = new AtomicBoolean(false);
        this.H = true;
        this.c = null;
        this.mListener = mListener;
        this.v = (Activity)context;
        this.a();
    }
    
    public IMWebView(final Context context, final IMWebView$IMWebViewListener mListener, final boolean mIsInterstitialAd, final boolean mWebViewIsBrowserActivity) {
        super(context);
        this.doNotFireVisibilityChanged = new AtomicBoolean(false);
        this.j = IMWebView$ViewState.LOADING;
        this.m = null;
        this.p = new ArrayList();
        this.q = false;
        this.mIsInterstitialAd = false;
        this.isTablet = false;
        this.mOriginalWebviewForExpandUrl = null;
        this.mWebViewIsBrowserActivity = false;
        this.r = false;
        this.mutex = new Object();
        this.mutexcPos = new Object();
        this.mutexdPos = new Object();
        this.isMutexAquired = new AtomicBoolean(false);
        this.acqMutexcPos = new AtomicBoolean(true);
        this.acqMutexdPos = new AtomicBoolean(true);
        this.y = new ArrayList();
        this.z = new AtomicBoolean();
        this.C = false;
        this.E = new b(this);
        this.F = new a(this);
        this.mIsViewable = false;
        this.G = (MediaPlayer$OnCompletionListener)new c(this);
        this.a = -1.0;
        this.b = new AtomicBoolean(false);
        this.H = true;
        this.c = null;
        this.v = (Activity)context;
        this.mIsInterstitialAd = mIsInterstitialAd;
        this.mWebViewIsBrowserActivity = mWebViewIsBrowserActivity;
        if (this.mIsInterstitialAd) {
            this.setId(117);
        }
        this.mListener = mListener;
        this.a();
    }
    
    private int a(final Activity activity) {
        for (final ResolveInfo resolveInfo : activity.getPackageManager().queryIntentActivities(new Intent((Context)activity, (Class)activity.getClass()), 65536)) {
            if (resolveInfo.activityInfo.name.contentEquals(activity.getClass().getName())) {
                return resolveInfo.activityInfo.configChanges;
            }
        }
        ResolveInfo resolveInfo = null;
        return resolveInfo.activityInfo.configChanges;
    }
    
    @SuppressLint({ "SetJavaScriptEnabled", "NewApi" })
    private void a() {
        this.setScrollContainer(IMWebView.userInitiatedClose = false);
        this.setVerticalScrollBarEnabled(false);
        this.setHorizontalScrollBarEnabled(false);
        this.webviewUserAgent = this.getSettings().getUserAgentString();
        InternalSDKUtil.getUserAgent((Context)this.v);
        this.setBackgroundColor(Initializer.getConfigParams().getWebviewBgColor());
        ((WindowManager)this.getContext().getSystemService("window")).getDefaultDisplay().getMetrics(new DisplayMetrics());
        if (Build$VERSION.SDK_INT >= 17) {
            this.getSettings().setMediaPlaybackRequiresUserGesture(false);
        }
        this.g = this.v.getResources().getDisplayMetrics().density;
        this.e = false;
        this.getSettings().setJavaScriptEnabled(true);
        this.getSettings().setGeolocationEnabled(true);
        this.addJavascriptInterface((Object)(this.f = new JSUtilityController(this, this.getContext())), "utilityController");
        this.setWebViewClient(this.E);
        this.setWebChromeClient(this.F);
        this.mExpandController = new MRAIDExpandController(this, this.v);
        this.mResizeController = new MRAIDResizeController(this, this.v);
        this.mMraidBasic = new MRAIDBasic(this, this.v);
        this.mInterstitialController = new MRAIDInterstitialController(this, this.v);
        this.mAudioVideoController = new MRAIDAudioVideoController(this);
        this.x = new IMWebView$l(this, this.mMraidBasic, this.mExpandController, this.mInterstitialController, this.mAudioVideoController, this.mResizeController);
        this.mExpandController.mSensorDisplay = ((WindowManager)this.v.getSystemService("window")).getDefaultDisplay();
        this.mAudioVideoController.videoValidateWidth = this.v.getResources().getDisplayMetrics().widthPixels;
        while (true) {
            try {
                this.addJavascriptInterface(IMWebView.D.getDeclaredConstructor(IMWebView.class).newInstance(this), "imaiController");
                this.f.setWebViewClosed(false);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "Error adding js interface imai controller");
                continue;
            }
            break;
        }
    }
    
    private void a(final int n, final int n2) {
        this.injectJavaScript("window.mraid.broadcastEvent('sizeChange'," + n + "," + n2 + ");");
    }
    
    private void a(final View view, final View$OnKeyListener onKeyListener) {
        view.setOnKeyListener(onKeyListener);
        view.setFocusable(true);
        view.setFocusableInTouchMode(true);
        if (view instanceof ViewGroup) {
            final ViewGroup viewGroup = (ViewGroup)view;
            for (int i = 0; i < viewGroup.getChildCount(); ++i) {
                this.a(viewGroup.getChildAt(i), onKeyListener);
            }
        }
    }
    
    private void a(final View view, final View$OnTouchListener onTouchListener) {
        view.setOnTouchListener(onTouchListener);
        view.setFocusable(true);
        view.setFocusableInTouchMode(true);
        if (view instanceof ViewGroup) {
            final ViewGroup viewGroup = (ViewGroup)view;
            for (int i = 0; i < viewGroup.getChildCount(); ++i) {
                this.a(viewGroup.getChildAt(i), onTouchListener);
            }
        }
    }
    
    @TargetApi(8)
    private void a(final SslErrorHandler sslErrorHandler, final SslError sslError) {
        final AlertDialog$Builder alertDialog$Builder = new AlertDialog$Builder((Context)this.v);
        alertDialog$Builder.setPositiveButton((CharSequence)"Continue", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
            public void onClick(final DialogInterface dialogInterface, final int n) {
                dialogInterface.cancel();
                sslErrorHandler.proceed();
            }
        });
        alertDialog$Builder.setNegativeButton((CharSequence)"Go Back", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
            public void onClick(final DialogInterface dialogInterface, final int n) {
                dialogInterface.cancel();
                sslErrorHandler.cancel();
            }
        });
        if (Build$VERSION.SDK_INT >= 14) {
            alertDialog$Builder.setNeutralButton((CharSequence)"Open Browser", (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                public void onClick(final DialogInterface dialogInterface, final int n) {
                    dialogInterface.cancel();
                    IMWebView.this.a(WrapperFunctions.getSSLErrorUrl(sslError));
                }
            });
        }
        alertDialog$Builder.setTitle((CharSequence)"Security Warning");
        alertDialog$Builder.setMessage((CharSequence)"There are problems with the security certificate for this site.");
        final AlertDialog create = alertDialog$Builder.create();
        try {
            create.show();
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Dialog could not be shown due to an exception.", ex);
        }
    }
    
    private void a(final String s) {
        final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
        intent.addFlags(268435456);
        this.v.startActivity(intent);
        this.fireOnLeaveApplication();
    }
    
    private void a(final boolean b) {
        Log.debug("[InMobi]-[RE]-4.4.3", "Viewable:" + b);
        this.injectJavaScript("window.mraid.broadcastEvent('viewableChange'," + this.isViewable() + ");");
    }
    
    private void b() {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> initStates");
        this.j = IMWebView$ViewState.LOADING;
        this.z.set(false);
    }
    
    private void c() {
        if (this.j == IMWebView$ViewState.EXPANDED) {
            this.mExpandController.closeExpanded();
        }
        this.invalidate();
        this.f.stopAllListeners();
        this.resetLayout();
    }
    
    private void d() {
        if (this.l == null) {
            return;
        }
        if (this.m != null) {
            this.m.onCustomViewHidden();
        }
        this.m = null;
        if (this.l.getParent() != null) {
            ((ViewGroup)this.l.getParent()).removeView(this.l);
        }
        this.l = null;
    }
    
    private boolean e() {
        return this.b.get();
    }
    
    static /* synthetic */ void o(final IMWebView imWebView) {
        imWebView.destroy();
    }
    
    public static void setIMAIController(final Class d) {
        IMWebView.D = d;
    }
    
    public void addJavascriptObject(final Object o, final String s) {
        this.addJavascriptInterface(o, s);
    }
    
    public void cancelLoad() {
        this.z.set(true);
    }
    
    public void cancelSaveContent(final String s) {
        if (this.p != null) {
            for (int i = 0; i < this.p.size(); ++i) {
                final IMWebView$i imWebView$i = this.p.get(i);
                if (imWebView$i.a().equals(s) && imWebView$i.getStatus() == AsyncTask$Status.RUNNING) {
                    imWebView$i.cancel(true);
                    break;
                }
            }
        }
    }
    
    public void clearView() {
        this.c();
        super.clearView();
    }
    
    public void close() {
        try {
            this.removeSaveContentDir();
            this.f.setWebViewClosed(true);
            if (!this.x.hasMessages(1001)) {
                this.x.sendEmptyMessage(1001);
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Exception closing webview. Webview not initialized properly", ex);
        }
    }
    
    public void closeExpanded() {
        this.x.sendEmptyMessage(1005);
    }
    
    protected void closeOpened(final View view) {
        ((ViewGroup)((Activity)this.getContext()).getWindow().getDecorView()).removeView(view);
        this.requestLayout();
    }
    
    public void closeResized() {
        this.x.sendEmptyMessage(1031);
    }
    
    public void closeVideo(final String s) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "closeVideo");
            return;
        }
        if (videoPlayer.getState() == AVPlayer$playerState.RELEASED) {
            this.raiseError("Invalid player state", "closeVideo");
            return;
        }
        this.mAudioVideoController.videoPlayerList.remove(s);
        final Message obtainMessage = this.x.obtainMessage(1012);
        obtainMessage.obj = videoPlayer;
        this.x.sendMessage(obtainMessage);
    }
    
    public void deinit() {
        if (this.getStateVariable() == IMWebView$ViewState.EXPANDED || this.getStateVariable() == IMWebView$ViewState.EXPANDING) {
            this.close();
        }
    }
    
    public void destroy() {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView: Destroy called.");
        this.close();
        this.postInHandler(new Runnable() {
            @Override
            public void run() {
                if (IMWebView.this.getParent() != null) {
                    ((ViewGroup)IMWebView.this.getParent()).removeView((View)IMWebView.this);
                }
                IMWebView.this.b.set(true);
                IMWebView.o(IMWebView.this);
            }
        });
    }
    
    public void disableHardwareAcceleration() {
        this.H = false;
        Log.internal("[InMobi]-[RE]-4.4.3", "disableHardwareAcceleration called.");
        if (Build$VERSION.SDK_INT >= 14) {
            WrapperFunctions.disableHardwareAccl(this);
            this.mExpandController.disableEnableHardwareAccelerationForExpandWithURLView();
        }
    }
    
    public void doHidePlayers() {
        this.x.sendEmptyMessage(1023);
    }
    
    public void expand(final String s, final JSController$ExpandProperties expandProperties) {
        this.setState(IMWebView$ViewState.EXPANDING);
        this.mExpandController.mIsExpandUrlValid = false;
        this.isMutexAquired.set(true);
        final Message obtainMessage = this.x.obtainMessage(1004);
        final Bundle data = new Bundle();
        data.putString("expand_url", s);
        obtainMessage.setData(data);
        this.mExpandController.expandProperties = expandProperties;
        Log.debug("[InMobi]-[RE]-4.4.3", "Dimensions: {" + this.mExpandController.expandProperties.x + " ," + this.mExpandController.expandProperties.y + " ," + this.mExpandController.expandProperties.width + " ," + this.mExpandController.expandProperties.height + "}");
        this.mExpandController.tempExpPropsLock = this.mExpandController.expandProperties.lockOrientation;
        this.x.sendMessage(obtainMessage);
    }
    
    public void fireOnLeaveApplication() {
        if (this.mListener != null) {
            this.mListener.onLeaveApplication();
        }
    }
    
    public void fireOnShowAdScreen() {
        if (this.mListener != null && this.getStateVariable() == IMWebView$ViewState.DEFAULT && !this.mIsInterstitialAd) {
            IMBrowserActivity.requestOnAdDismiss(this.x.obtainMessage(1028));
            this.mListener.onShowAdScreen();
        }
    }
    
    public Activity getActivity() {
        return this.v;
    }
    
    public int getAudioVolume(final String s) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "getAudioVolume");
            return -1;
        }
        return currentAudioPlayer.getVolume();
    }
    
    public String getCurrentRotation(final int n) {
        switch (n) {
            default: {
                return "-1";
            }
            case 0: {
                return "0";
            }
            case 1: {
                return "90";
            }
            case 2: {
                return "180";
            }
            case 3: {
                return "270";
            }
        }
    }
    
    public boolean getCustomClose() {
        return this.r;
    }
    
    public float getDensity() {
        return this.g;
    }
    
    public int getDismissMessage() {
        return 1028;
    }
    
    public Activity getExpandedActivity() {
        return this.v;
    }
    
    public int getIntegerCurrentRotation() {
        int displayRotation = InternalSDKUtil.getDisplayRotation(((WindowManager)this.v.getSystemService("window")).getDefaultDisplay());
        if (InternalSDKUtil.isDefOrientationLandscape(displayRotation, this.v.getResources().getDisplayMetrics().widthPixels, this.v.getResources().getDisplayMetrics().heightPixels)) {
            if (++displayRotation > 3) {
                displayRotation = 0;
            }
            if (InternalSDKUtil.isTablet(this.v.getApplicationContext())) {
                this.isTablet = true;
            }
        }
        return displayRotation;
    }
    
    public double getLastGoodKnownMicValue() {
        return this.a;
    }
    
    public ArrayList getMRAIDUrls() {
        return this.y;
    }
    
    public int getOriginalIndex() {
        return this.B;
    }
    
    public ViewParent getOriginalParent() {
        if (this.A == null) {
            this.saveOriginalViewParent();
        }
        return this.A;
    }
    
    public String getPlacementType() {
        if (this.mIsInterstitialAd) {
            return "interstitial";
        }
        return "inline";
    }
    
    public String getSize() {
        return "{ width: " + (int)(this.getWidth() / this.g) + ", height: " + (int)(this.getHeight() / this.g) + "}";
    }
    
    public String getState() {
        return this.j.toString().toLowerCase(Locale.ENGLISH);
    }
    
    public IMWebView$ViewState getStateVariable() {
        return this.j;
    }
    
    public int getVideoVolume(final String s) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "getVideoVolume");
            return -1;
        }
        return videoPlayer.getVolume();
    }
    
    public IMWebView$ViewState getViewState() {
        return this.j;
    }
    
    public Handler getWebviewHandler() {
        return this.x;
    }
    
    public void hide() {
        this.x.sendEmptyMessage(1002);
    }
    
    public void hideVideo(final String s) {
        final Message obtainMessage = this.x.obtainMessage(1013);
        final Bundle data = new Bundle();
        data.putString("pid", s);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void incentCompleted(final HashMap hashMap) {
        final Message obtainMessage = this.x.obtainMessage(1034);
        final Bundle data = new Bundle();
        data.putSerializable("incent_ad_map", (Serializable)hashMap);
        obtainMessage.setData(data);
        obtainMessage.sendToTarget();
    }
    
    public void injectJavaScript(final String s) {
        if (s == null) {
            return;
        }
        try {
            if (s.length() < 400) {
                Log.debug("[InMobi]-[RE]-4.4.3", "Injecting JavaScript: " + s);
            }
            if (!this.e()) {
                super.loadUrl("javascript:try{" + s + "}catch(e){}");
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Error injecting javascript ", ex);
        }
    }
    
    public boolean isAudioMuted(final String s) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "isAudioMuted");
            return false;
        }
        return currentAudioPlayer.isMediaMuted();
    }
    
    public boolean isBusy() {
        return this.q;
    }
    
    public boolean isConfigChangesListed(final Activity activity) {
        final int sdk_INT = Build$VERSION.SDK_INT;
        final int a = this.a(activity);
        boolean b;
        if ((a & 0x10) == 0x0 || (a & 0x20) == 0x0 || (a & 0x80) == 0x0) {
            b = false;
        }
        else {
            b = true;
        }
        boolean b2;
        if (sdk_INT >= 13 && ((a & 0x400) == 0x0 || (a & 0x800) == 0x0)) {
            b2 = false;
        }
        else {
            b2 = true;
        }
        return b && b2;
    }
    
    public boolean isEnabledHardwareAcceleration() {
        return this.H;
    }
    
    public boolean isExpanded() {
        return this.j == IMWebView$ViewState.EXPANDED;
    }
    
    public boolean isLandscapeSyncOrientation(final int n) {
        return n == 1 || n == 3;
    }
    
    public boolean isModal() {
        return this.mIsInterstitialAd || this.j == IMWebView$ViewState.EXPANDED;
    }
    
    public boolean isPageFinished() {
        return this.e;
    }
    
    public boolean isPortraitSyncOrientation(final int n) {
        return n == 0 || n == 2;
    }
    
    public boolean isVideoMuted(final String s) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "isVideoMuted");
            return false;
        }
        return videoPlayer.isMediaMuted();
    }
    
    public boolean isViewable() {
        return this.mIsViewable;
    }
    
    public void loadData(final String s, final String s2, final String s3) {
        super.loadData(s, s2, s3);
    }
    
    public void loadDataWithBaseURL(final String s, final String s2, final String s3, final String s4, final String s5) {
        if (this.j == IMWebView$ViewState.EXPANDED) {
            return;
        }
        this.b();
        super.loadDataWithBaseURL(s, s2, s3, s4, s5);
    }
    
    public void loadUrl(final String s) {
        if (this.j == IMWebView$ViewState.EXPANDED) {
            return;
        }
        this.b();
        super.loadUrl(s);
    }
    
    public void lockExpandOrientation(final Activity activity, final boolean b, final String s) {
        Label_0205: {
            int integerCurrentRotation;
            try {
                if (!this.isConfigChangesListed(activity)) {
                    return;
                }
                final int requestedOrientation = activity.getRequestedOrientation();
                if (requestedOrientation == 0 || requestedOrientation == 1 || (Build$VERSION.SDK_INT >= 9 && (requestedOrientation == 8 || requestedOrientation == 9 || requestedOrientation == 6 || requestedOrientation == 7))) {
                    return;
                }
                if (b) {
                    break Label_0205;
                }
                integerCurrentRotation = this.getIntegerCurrentRotation();
                this.mExpandController.initialExpandOrientation = activity.getRequestedOrientation();
                if (s.equalsIgnoreCase("portrait")) {
                    this.mExpandController.useLockOrient = true;
                    activity.setRequestedOrientation(WrapperFunctions.getParamPortraitOrientation(integerCurrentRotation));
                    return;
                }
            }
            catch (Exception ex) {
                Log.debug("[InMobi]-[RE]-4.4.3", "Exception handling the orientation ", ex);
                return;
            }
            if (s.equalsIgnoreCase("landscape")) {
                this.mExpandController.useLockOrient = true;
                activity.setRequestedOrientation(WrapperFunctions.getParamLandscapeOrientation(integerCurrentRotation));
                return;
            }
            this.mExpandController.useLockOrient = true;
            if (activity.getResources().getConfiguration().orientation == 2) {
                Log.internal("[InMobi]-[RE]-4.4.3", "In allowFalse, none mode dev orientation:ORIENTATION_LANDSCAPE");
                activity.setRequestedOrientation(0);
                return;
            }
            Log.internal("[InMobi]-[RE]-4.4.3", "In allowFalse, none mode dev orientation:ORIENTATION_PORTRAIT");
            activity.setRequestedOrientation(1);
            return;
        }
        if (activity.getResources().getConfiguration().orientation == 2) {
            Log.internal("[InMobi]-[RE]-4.4.3", "In allow true,  device orientation:ORIENTATION_LANDSCAPE");
            return;
        }
        Log.internal("[InMobi]-[RE]-4.4.3", "In allow true,  device orientation:ORIENTATION_PORTRAIT");
    }
    
    public void mediaPlayerReleased(final AVPlayer avPlayer) {
        this.mAudioVideoController.mediaPlayerReleased(avPlayer);
    }
    
    public void muteAudio(final String s) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "muteAudio");
            return;
        }
        if (currentAudioPlayer.getState() == AVPlayer$playerState.RELEASED) {
            this.raiseError("Invalid player state", "muteAudio");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1019);
        final Bundle data = new Bundle();
        data.putString("aplayerref", s);
        obtainMessage.setData(data);
        obtainMessage.sendToTarget();
    }
    
    public void muteVideo(final String s) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "muteVideo");
            return;
        }
        if (videoPlayer.getState() == AVPlayer$playerState.RELEASED || videoPlayer.getState() == AVPlayer$playerState.INIT) {
            this.raiseError("Invalid player state", "muteVideo");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1015);
        obtainMessage.obj = videoPlayer;
        this.x.sendMessage(obtainMessage);
    }
    
    protected void onAttachedToWindow() {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onAttachedToWindow");
        this.saveOriginalViewParent();
        if (!this.s) {
            final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
            this.h = layoutParams.height;
            this.i = layoutParams.width;
            this.s = true;
        }
        this.f.registerBroadcastListener();
        super.onAttachedToWindow();
    }
    
    protected void onDetachedFromWindow() {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onDetatchedFromWindow");
        this.f.stopAllListeners();
        this.y.clear();
        this.f.unRegisterBroadcastListener();
        if (this.mIsInterstitialAd && !this.mWebViewIsBrowserActivity) {
            this.mInterstitialController.handleInterstitialClose();
        }
        super.onDetachedFromWindow();
    }
    
    protected void onIMWebviewVisibilityChanged(final boolean mIsViewable) {
        if (this.mIsViewable != mIsViewable) {
            this.mIsViewable = mIsViewable;
            if (!this.doNotFireVisibilityChanged.get()) {
                this.a(mIsViewable);
            }
        }
    }
    
    public void onOrientationEventChange() {
        this.x.sendEmptyMessage(1027);
    }
    
    protected void onSizeChanged(final int n, final int n2, final int n3, final int n4) {
        super.onSizeChanged(n, n2, n3, n4);
        if (n != 0 && n2 != 0) {
            if (!this.C) {
                this.a((int)(n / this.getDensity()), (int)(n2 / this.getDensity()));
            }
            this.C = false;
        }
    }
    
    public boolean onTouchEvent(final MotionEvent motionEvent) {
        this.requestFocus();
        return super.onTouchEvent(motionEvent);
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        super.onWindowVisibilityChanged(n);
        Label_0050: {
            if (n != 0) {
                break Label_0050;
            }
            boolean b = true;
            while (true) {
                this.onIMWebviewVisibilityChanged(b);
                if (n == 0) {
                    return;
                }
                try {
                    if (this.f.supports("vibrate")) {
                        ((Vibrator)this.v.getSystemService("vibrator")).cancel();
                    }
                    return;
                    b = false;
                    continue;
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[RE]-4.4.3", "Failed to cancel existing vibration", ex);
                }
                break;
            }
        }
    }
    
    public void openExternal(final String s) {
        final Intent intent = new Intent("android.intent.action.VIEW");
        intent.setData(Uri.parse(s));
        intent.addFlags(268435456);
        try {
            this.getContext().startActivity(intent);
            if (this.mListener != null) {
                this.mListener.onLeaveApplication();
            }
        }
        catch (Exception ex) {
            this.raiseError("Request must specify a valid URL", "openExternal");
        }
    }
    
    public void openURL(final String s) {
        if (!this.isViewable()) {
            this.raiseError("Cannot open URL.Ad is not viewable yet", "openURL");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1024);
        final Bundle data = new Bundle();
        data.putString("expand_url", s);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void pageFinishedCallbackForAdCreativeTesting(final Message u) {
        this.u = u;
    }
    
    public void pauseAudio(final String s) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "pauseAudio");
        }
        else if (currentAudioPlayer.getState() != AVPlayer$playerState.PLAYING) {
            if (currentAudioPlayer.getState() == AVPlayer$playerState.INIT && !currentAudioPlayer.isPrepared()) {
                currentAudioPlayer.setAutoPlay(false);
                return;
            }
            this.raiseError("Invalid player state", "pauseAudio");
        }
        else if (currentAudioPlayer.isPlaying()) {
            final Message obtainMessage = this.x.obtainMessage(1010);
            final Bundle data = new Bundle();
            data.putString("aplayerref", s);
            obtainMessage.setData(data);
            obtainMessage.sendToTarget();
        }
    }
    
    public void pauseVideo(final String s) {
        final Message obtainMessage = this.x.obtainMessage(1011);
        final Bundle data = new Bundle();
        data.putString("pid", s);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void playAudio(final String s, final boolean b, final boolean b2, final boolean b3, final String s2, final String s3, final String s4) {
        synchronized (this.mutex) {
            Label_0031: {
                if (!this.isMutexAquired.get()) {
                    break Label_0031;
                }
                try {
                    this.mutex.wait();
                    // monitorexit(this.mutex)
                    if (!this.mIsInterstitialAd && this.j != IMWebView$ViewState.EXPANDED) {
                        this.raiseError("Cannot play audio.Ad is not in an expanded state", "playAudio");
                        return;
                    }
                }
                catch (InterruptedException ex) {
                    Log.debug("[InMobi]-[RE]-4.4.3", "mutex failed ", ex);
                }
            }
        }
        if (!this.isViewable()) {
            this.raiseError("Cannot play audio.Ad is not viewable yet", "playAudio");
            return;
        }
        final JSController$PlayerProperties jsController$PlayerProperties = new JSController$PlayerProperties();
        jsController$PlayerProperties.setProperties(false, b, b2, b3, s2, s3, s4);
        final Bundle data = new Bundle();
        data.putString("expand_url", s);
        data.putParcelable("player_properties", (Parcelable)jsController$PlayerProperties);
        final Message obtainMessage = this.x.obtainMessage(1007);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void playVideo(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final JSController$Dimensions jsController$Dimensions, final String s2, final String s3, final String s4) {
        synchronized (this.mutex) {
            Label_0031: {
                if (!this.isMutexAquired.get()) {
                    break Label_0031;
                }
                try {
                    this.mutex.wait();
                    // monitorexit(this.mutex)
                    if (!this.mIsInterstitialAd && this.j != IMWebView$ViewState.EXPANDED) {
                        this.raiseError("Cannot play video.Ad is not in an expanded state", "playVideo");
                        return;
                    }
                }
                catch (InterruptedException ex) {
                    Log.debug("[InMobi]-[RE]-4.4.3", "mutex failed ", ex);
                }
            }
        }
        if (!this.isViewable()) {
            this.raiseError("Cannot play video.Ad is not viewable yet", "playVideo");
            return;
        }
        if (!this.mAudioVideoController.videoPlayerList.isEmpty() && this.mAudioVideoController.videoPlayerList.size() >= 5 && !this.mAudioVideoController.videoPlayerList.containsKey(s4)) {
            this.raiseError("Player Error. Exceeding permissible limit for saved play instances", "playVideo");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1006);
        final JSController$PlayerProperties jsController$PlayerProperties = new JSController$PlayerProperties();
        jsController$PlayerProperties.setProperties(b, b2, b3, b4, s2, s3, s4);
        final Bundle data = new Bundle();
        data.putString("expand_url", s);
        data.putParcelable("player_properties", (Parcelable)jsController$PlayerProperties);
        Log.debug("[InMobi]-[RE]-4.4.3", "Before validation dimension: (" + jsController$Dimensions.x + ", " + jsController$Dimensions.y + ", " + jsController$Dimensions.width + ", " + jsController$Dimensions.height + ")");
        this.mAudioVideoController.validateVideoDimensions(jsController$Dimensions);
        Log.debug("[InMobi]-[RE]-4.4.3", "After validation dimension: (" + jsController$Dimensions.x + ", " + jsController$Dimensions.y + ", " + jsController$Dimensions.width + ", " + jsController$Dimensions.height + ")");
        data.putParcelable("expand_dimensions", (Parcelable)jsController$Dimensions);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void postInHandler(final Runnable runnable) {
        this.x.post(runnable);
    }
    
    public void postInjectJavaScript(final String s) {
        if (s != null) {
            if (s.length() < 400) {
                Log.debug("[InMobi]-[RE]-4.4.3", "Injecting JavaScript: " + s);
            }
            final Message obtainMessage = this.x.obtainMessage(1025);
            final Bundle data = new Bundle();
            data.putString("injectMessage", s);
            obtainMessage.setData(data);
            obtainMessage.sendToTarget();
        }
    }
    
    public void raiseCameraPictureCapturedEvent(final String s, final int n, final int n2) {
        final String string = "window.mraidview.fireCameraPictureCatpturedEvent('" + s + "','" + n + "','" + n2 + "')";
        if (this.v != null) {
            this.v.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    IMWebView.this.injectJavaScript(string);
                }
            });
        }
    }
    
    public void raiseError(final String s, final String s2) {
        final Message obtainMessage = this.x.obtainMessage(1008);
        final Bundle data = new Bundle();
        data.putString("message", s);
        data.putString("action", s2);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void raiseGalleryImageSelectedEvent(final String s, final int n, final int n2) {
        final String string = "window.mraidview.fireGalleryImageSelectedEvent('" + s + "','" + n + "','" + n2 + "')";
        if (this.v != null) {
            this.v.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    IMWebView.this.injectJavaScript(string);
                }
            });
        }
    }
    
    public void raiseMicEvent(final double a) {
        this.a = a;
        final String string = "window.mraid.broadcastEvent('micIntensityChange'," + a + ")";
        if (this.v != null) {
            this.v.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    IMWebView.this.injectJavaScript(string);
                }
            });
        }
    }
    
    public void raiseVibrateCompleteEvent() {
        if (this.v != null) {
            this.v.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    try {
                        IMWebView.this.injectJavaScript("window.mraid.broadcastEvent('vibrateComplete')");
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[RE]-4.4.3", "Exception giviing vibration complete callback", ex);
                    }
                }
            });
        }
    }
    
    public void removeSaveContentDir() {
        int i = 0;
        if (this.p != null) {
            android.util.Log.i("Nilanjana", "list_downloadTask not null");
            for (int j = 0; j < this.p.size(); ++j) {
                final IMWebView$i imWebView$i = this.p.get(j);
                if (imWebView$i.getStatus() == AsyncTask$Status.RUNNING) {
                    imWebView$i.cancel(true);
                }
            }
            this.p.clear();
            this.p = null;
        }
        final File file = new File(InternalSDKUtil.getContext().getExternalFilesDir((String)null) + "/im_cached_content/");
        if (file.exists() && file.isDirectory()) {
            for (String[] list = file.list(); i < list.length; ++i) {
                new File(file, list[i]).delete();
            }
            file.delete();
        }
    }
    
    public void requestOnInterstitialClosed(final Message mMsgOnInterstitialClosed) {
        this.mInterstitialController.mMsgOnInterstitialClosed = mMsgOnInterstitialClosed;
    }
    
    public void requestOnInterstitialShown(final Message mMsgOnInterstitialShown) {
        this.mInterstitialController.mMsgOnInterstitialShown = mMsgOnInterstitialShown;
    }
    
    public void requestOnPageFinishedCallback(final Message t) {
        this.t = t;
    }
    
    public void resetLayout() {
        final ViewGroup$LayoutParams layoutParams = this.getLayoutParams();
        if (this.s) {
            layoutParams.height = this.h;
            layoutParams.width = this.i;
        }
        this.setVisibility(0);
        this.requestLayout();
    }
    
    public void resetMraid() {
        this.mExpandController.reset();
        this.mResizeController.reset();
        this.f.reset();
    }
    
    public void resize(final JSController$ResizeProperties resizeProperties) {
        this.setState(IMWebView$ViewState.RESIZING);
        this.isMutexAquired.set(true);
        final Message obtainMessage = this.x.obtainMessage(1030);
        this.mResizeController.resizeProperties = resizeProperties;
        this.x.sendMessage(obtainMessage);
    }
    
    public void saveFile(final File file, final String s, final String s2) {
        new IMWebView$i(this, file, s, s2).execute((Object[])new Void[0]);
    }
    
    public void saveOriginalViewParent() {
        if (this.A == null) {
            this.A = this.getParent();
            if (this.A != null) {
                int childCount;
                int b;
                for (childCount = ((ViewGroup)this.A).getChildCount(), b = 0; b < childCount && ((ViewGroup)this.A).getChildAt(b) != this; ++b) {}
                this.B = b;
            }
        }
    }
    
    public void seekAudio(final String s, final int n) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "seekAudio");
            return;
        }
        if (currentAudioPlayer.getState() == AVPlayer$playerState.RELEASED) {
            this.raiseError("Invalid player state", "seekAudio");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1022);
        final Bundle data = new Bundle();
        data.putInt("seekaudio", n);
        obtainMessage.setData(data);
        obtainMessage.obj = currentAudioPlayer;
        obtainMessage.sendToTarget();
    }
    
    public void seekVideo(final String s, final int n) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "seekVideo");
            return;
        }
        if (videoPlayer.getState() == AVPlayer$playerState.RELEASED || videoPlayer.getState() == AVPlayer$playerState.INIT) {
            this.raiseError("Invalid player state", "seekVideo");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1018);
        final Bundle data = new Bundle();
        data.putInt("seek", n);
        obtainMessage.setData(data);
        obtainMessage.obj = videoPlayer;
        this.x.sendMessage(obtainMessage);
    }
    
    public void sendToCPHandler() {
        this.x.sendEmptyMessage(1029);
    }
    
    public void sendToDPHandler() {
        this.x.sendEmptyMessage(1032);
    }
    
    public void sendasyncPing(final String s) {
        this.f.asyncPing(s);
    }
    
    public void setActivity(final Activity v) {
        this.v = v;
    }
    
    public void setAudioVolume(final String s, final int n) {
        if (this.mAudioVideoController.getCurrentAudioPlayer(s) == null) {
            this.raiseError("Invalid property ID", "setAudioVolume");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1021);
        final Bundle data = new Bundle();
        data.putInt("vol", n);
        data.putString("aplayerref", s);
        obtainMessage.setData(data);
        obtainMessage.sendToTarget();
    }
    
    public void setBrowserActivity(final Activity activity) {
        if (activity != null) {
            this.v = activity;
        }
    }
    
    public void setBusy(final boolean q) {
        this.q = q;
    }
    
    public void setCallBack(final IMWebView$InstantVideoCallbackCallback c) {
        this.c = c;
    }
    
    public void setCloseButton() {
        try {
            final CustomView customView = (CustomView)((ViewGroup)this.getRootView()).findViewById(225);
            if (customView != null) {
                if (this.getCustomClose()) {
                    customView.setSwitchInt(CustomView$SwitchIconType.CLOSE_TRANSPARENT);
                    customView.invalidate();
                    return;
                }
                customView.setSwitchInt(CustomView$SwitchIconType.CLOSE_BUTTON);
                customView.invalidate();
            }
        }
        catch (Exception ex) {}
    }
    
    public void setCustomClose(final boolean r) {
        this.r = r;
        this.x.sendMessage(this.x.obtainMessage(1009));
    }
    
    public void setExpandPropertiesForInterstitial(final boolean customClose, final boolean lockOrientationValueForInterstitial, final String orientationValueForInterstitial) {
        this.setCustomClose(customClose);
        this.mInterstitialController.orientationValueForInterstitial = orientationValueForInterstitial;
        this.mInterstitialController.lockOrientationValueForInterstitial = lockOrientationValueForInterstitial;
        if (this.mWebViewIsBrowserActivity) {
            this.mExpandController.handleOrientationFor2Piece();
        }
        if (this.isViewable() && this.mIsInterstitialAd) {
            this.x.sendEmptyMessage(1026);
        }
    }
    
    public void setExternalWebViewClient(final WebViewClient w) {
        this.w = w;
    }
    
    public void setOrientationPropertiesForInterstitial(final boolean lockOrientationValueForInterstitial, final String orientationValueForInterstitial) {
        this.mInterstitialController.orientationValueForInterstitial = orientationValueForInterstitial;
        this.mInterstitialController.lockOrientationValueForInterstitial = lockOrientationValueForInterstitial;
        if (this.mWebViewIsBrowserActivity) {
            this.mExpandController.handleOrientationFor2Piece();
        }
        if (this.isViewable() && this.mIsInterstitialAd) {
            this.x.sendEmptyMessage(1026);
        }
    }
    
    public void setOriginalParent(final ViewParent a) {
        this.A = a;
    }
    
    public void setState(final IMWebView$ViewState j) {
        Log.debug("[InMobi]-[RE]-4.4.3", "State changing from " + this.j + " to " + j);
        this.j = j;
        if (j != IMWebView$ViewState.EXPANDING && j != IMWebView$ViewState.RESIZING) {
            this.injectJavaScript("window.mraid.broadcastEvent('stateChange','" + this.getState() + "');");
        }
    }
    
    public void setVideoVolume(final String s, final int n) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "setVideoVolume");
            return;
        }
        if (videoPlayer.getState() == AVPlayer$playerState.RELEASED) {
            this.raiseError("Invalid player state", "setVideoVolume");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1017);
        final Bundle data = new Bundle();
        data.putInt("volume", n);
        obtainMessage.setData(data);
        obtainMessage.obj = videoPlayer;
        this.x.sendMessage(obtainMessage);
    }
    
    public void show() {
        this.x.sendEmptyMessage(1003);
    }
    
    public void showVideo(final String s) {
        final Message obtainMessage = this.x.obtainMessage(1014);
        final Bundle data = new Bundle();
        data.putString("pid", s);
        obtainMessage.setData(data);
        this.x.sendMessage(obtainMessage);
    }
    
    public void unMuteAudio(final String s) {
        final AVPlayer currentAudioPlayer = this.mAudioVideoController.getCurrentAudioPlayer(s);
        if (currentAudioPlayer == null) {
            this.raiseError("Invalid property ID", "unmuteAudio");
            return;
        }
        if (currentAudioPlayer.getState() == AVPlayer$playerState.RELEASED) {
            this.raiseError("Invalid player state", "unmuteAudio");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1020);
        final Bundle data = new Bundle();
        data.putString("aplayerref", s);
        obtainMessage.setData(data);
        obtainMessage.sendToTarget();
    }
    
    public void unMuteVideo(final String s) {
        final AVPlayer videoPlayer = this.mAudioVideoController.getVideoPlayer(s);
        if (videoPlayer == null) {
            this.raiseError("Invalid property ID", "unMuteVideo");
            return;
        }
        if (videoPlayer.getState() == AVPlayer$playerState.RELEASED || videoPlayer.getState() == AVPlayer$playerState.INIT) {
            this.raiseError("Invalid player state", "unMuteVideo");
            return;
        }
        final Message obtainMessage = this.x.obtainMessage(1016);
        obtainMessage.obj = videoPlayer;
        this.x.sendMessage(obtainMessage);
    }
    
    public void userInteraction(final HashMap hashMap) {
        final Message obtainMessage = this.x.obtainMessage(1033);
        final Bundle data = new Bundle();
        data.putSerializable("map", (Serializable)hashMap);
        obtainMessage.setData(data);
        obtainMessage.sendToTarget();
    }
}
