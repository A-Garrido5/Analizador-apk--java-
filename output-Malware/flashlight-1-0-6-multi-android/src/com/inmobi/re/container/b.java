// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container;

import com.inmobi.re.controller.JSController$ResizeProperties;
import java.io.File;
import com.inmobi.re.controller.JSController$Dimensions;
import android.os.Parcelable;
import com.inmobi.re.controller.JSController$PlayerProperties;
import android.os.Vibrator;
import android.view.MotionEvent;
import android.view.ViewGroup$LayoutParams;
import java.util.HashMap;
import android.os.Handler;
import java.util.Locale;
import com.inmobi.androidsdk.IMBrowserActivity;
import android.os.Bundle;
import com.inmobi.re.controller.JSController$ExpandProperties;
import com.inmobi.re.controller.util.AVPlayer;
import com.inmobi.re.controller.util.AVPlayer$playerState;
import android.os.AsyncTask$Status;
import android.net.Uri;
import android.app.AlertDialog;
import com.inmobi.commons.internal.WrapperFunctions;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import android.view.View$OnTouchListener;
import android.view.View$OnKeyListener;
import android.annotation.SuppressLint;
import android.os.Build$VERSION;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import com.inmobi.commons.internal.InternalSDKUtil;
import java.util.Iterator;
import android.content.pm.ResolveInfo;
import android.content.Intent;
import android.util.AttributeSet;
import android.content.Context;
import android.app.Activity;
import java.util.ArrayList;
import android.widget.FrameLayout;
import android.view.ViewGroup;
import com.inmobi.re.container.mraidimpl.MRAIDResizeController;
import com.inmobi.re.container.mraidimpl.MRAIDBasic;
import com.inmobi.re.container.mraidimpl.MRAIDInterstitialController;
import com.inmobi.re.container.mraidimpl.MRAIDExpandController;
import com.inmobi.re.container.mraidimpl.MRAIDAudioVideoController;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import android.widget.VideoView;
import com.inmobi.re.controller.JSUtilityController;
import org.json.JSONObject;
import java.util.concurrent.atomic.AtomicBoolean;
import android.media.MediaPlayer$OnCompletionListener;
import android.webkit.WebChromeClient;
import android.view.ViewParent;
import java.io.Serializable;
import android.annotation.TargetApi;
import android.net.http.SslError;
import android.webkit.SslErrorHandler;
import android.os.Message;
import android.graphics.Bitmap;
import com.inmobi.re.configs.Initializer;
import com.inmobi.commons.internal.Log;
import android.webkit.WebView;
import android.webkit.WebViewClient;

class b extends WebViewClient
{
    final /* synthetic */ IMWebView a;
    
    b(final IMWebView a) {
        this.a = a;
    }
    
    public void onLoadResource(final WebView webView, final String s) {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onLoadResource:" + s);
        try {
            if (this.a.w != null) {
                this.a.w.onLoadResource(webView, s);
            }
            if (s != null && s.contains("/mraid.js") && !this.a.getUrl().equals("about:blank") && !this.a.getUrl().startsWith("file:")) {
                Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onLoadResource:Hippy, Mraid ad alert!...injecting mraid and mraidview object at " + webView.getUrl());
                final String url = this.a.getUrl();
                if (!this.a.y.contains(url)) {
                    this.a.y.add(url);
                }
                if (!this.a.mraidLoaded) {
                    this.a.injectJavaScript(Initializer.getMRAIDString());
                }
                this.a.mraidLoaded = true;
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Cannot load resource", ex);
        }
    }
    
    public void onPageFinished(final WebView webView, final String s) {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onPageFinished, url: " + s);
        if (this.a.w != null) {
            this.a.w.onPageFinished(webView, s);
        }
        try {
            if (this.a.y.contains(s) && !this.a.mraidLoaded) {
                this.a.injectJavaScript(Initializer.getMRAIDString());
            }
            Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> Current State:" + this.a.j);
            if (this.a.j == IMWebView$ViewState.LOADING) {
                this.a.injectJavaScript("window.mraid.broadcastEvent('ready');");
                Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> Firing ready event at " + webView);
                if (this.a.mOriginalWebviewForExpandUrl != null) {
                    this.a.setState(IMWebView$ViewState.EXPANDED);
                }
                else {
                    this.a.setState(IMWebView$ViewState.DEFAULT);
                }
                if ((!this.a.mIsInterstitialAd || this.a.mWebViewIsBrowserActivity) && this.a.getVisibility() == 4) {
                    this.a.setVisibility(0);
                }
                if (this.a.t != null && !this.a.z.get()) {
                    this.a.t.sendToTarget();
                }
                if (this.a.u != null) {
                    this.a.u.sendToTarget();
                }
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in onPageFinished ", ex);
        }
    }
    
    public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
        this.a.setState(IMWebView$ViewState.LOADING);
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> onPageStarted url: " + s + " p " + this.a.getParent());
        if (this.a.getParent() == null) {
            this.a.C = true;
        }
        if (this.a.w != null) {
            this.a.w.onPageStarted(webView, s, bitmap);
        }
        this.a.mraidLoaded = false;
    }
    
    public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> error: " + s);
        if (this.a.w != null) {
            this.a.w.onReceivedError(webView, n, s, s2);
        }
        try {
            if (this.a.j == IMWebView$ViewState.LOADING && this.a.mListener != null && !this.a.z.get()) {
                this.a.mListener.onError();
            }
            this.a.t = null;
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in webview loading ", ex);
        }
    }
    
    @TargetApi(14)
    public void onReceivedSslError(final WebView webView, final SslErrorHandler sslErrorHandler, final SslError sslError) {
        this.a.a(sslErrorHandler, sslError);
    }
    
    public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
        Log.debug("[InMobi]-[RE]-4.4.3", "IMWebView-> shouldOverrideUrlLoading, url:" + s + "webview id" + webView);
        try {
            if (this.a.mWebViewIsBrowserActivity) {
                if (s.startsWith("http:") || s.startsWith("https:")) {
                    this.a.doHidePlayers();
                    return false;
                }
                this.a.a(s);
                return true;
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Should override exception", ex);
            return false;
        }
        this.a.a(s);
        return true;
    }
}
