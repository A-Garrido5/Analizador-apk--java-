// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container.mraidimpl;

import android.os.Bundle;
import com.inmobi.re.container.IMWebView$ViewState;
import android.view.View$OnClickListener;
import com.inmobi.re.container.CustomView;
import com.inmobi.re.container.CustomView$SwitchIconType;
import com.inmobi.commons.internal.Log;
import android.view.ViewGroup$LayoutParams;
import android.view.View;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.RelativeLayout;
import android.widget.FrameLayout$LayoutParams;
import com.inmobi.commons.internal.WrapperFunctions;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.app.Activity;
import com.inmobi.re.controller.JSController$ResizeProperties;
import com.inmobi.re.container.IMWebView;

public class MRAIDResizeController
{
    protected static final int PLACEHOLDER_ID = 437;
    protected static final int RELATIVELAYOUT_ID = 438;
    private IMWebView a;
    private ResizeDimensions b;
    public JSController$ResizeProperties resizeProperties;
    
    public MRAIDResizeController(final IMWebView a, final Activity activity) {
        this.b = null;
        this.a = a;
    }
    
    private FrameLayout a(final JSController$ResizeProperties jsController$ResizeProperties) {
        final FrameLayout frameLayout = (FrameLayout)((ViewGroup)this.a.getOriginalParent()).getRootView().findViewById(16908290);
        this.a();
        final FrameLayout frameLayout2 = new FrameLayout(this.a.getContext());
        final FrameLayout$LayoutParams frameLayout$LayoutParams = new FrameLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent());
        frameLayout2.setId(435);
        final FrameLayout$LayoutParams frameLayout$LayoutParams2 = new FrameLayout$LayoutParams(jsController$ResizeProperties.width, jsController$ResizeProperties.height);
        final RelativeLayout relativeLayout = new RelativeLayout(this.a.getContext());
        relativeLayout.setId(438);
        relativeLayout.addView((View)this.a, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(jsController$ResizeProperties.width, jsController$ResizeProperties.height));
        this.a((ViewGroup)relativeLayout, jsController$ResizeProperties.customClosePosition);
        frameLayout2.addView((View)relativeLayout, (ViewGroup$LayoutParams)frameLayout$LayoutParams2);
        this.a(frameLayout, frameLayout2, this.a, jsController$ResizeProperties);
        frameLayout.addView((View)frameLayout2, (ViewGroup$LayoutParams)frameLayout$LayoutParams);
        this.a.setFocusable(true);
        this.a.setFocusableInTouchMode(true);
        this.a.requestFocus();
        return frameLayout2;
    }
    
    private RelativeLayout$LayoutParams a(final String s) {
        final String b = this.b(s);
        final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams((int)(50.0f * this.a.getDensity()), (int)(50.0f * this.a.getDensity()));
        if (b.equals("top-right") || b.equals("bottom-right")) {
            relativeLayout$LayoutParams.addRule(11);
        }
        if (b.equals("bottom-right") || b.equals("bottom-left") || b.equals("bottom-center")) {
            relativeLayout$LayoutParams.addRule(12);
            relativeLayout$LayoutParams.addRule(4);
        }
        if (b.equals("bottom-center") || b.equals("top-center") || b.equals("center")) {
            relativeLayout$LayoutParams.addRule(13);
        }
        if (b.equals("top-center")) {
            relativeLayout$LayoutParams.addRule(10);
        }
        return relativeLayout$LayoutParams;
    }
    
    private void a() {
        try {
            final FrameLayout frameLayout = new FrameLayout(this.a.getContext());
            frameLayout.setId(437);
            ((ViewGroup)this.a.getOriginalParent()).addView((View)frameLayout, this.a.getOriginalIndex(), new ViewGroup$LayoutParams(this.a.getWidth(), this.a.getHeight()));
            ((ViewGroup)this.a.getParent()).removeView((View)this.a);
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in replaceByPlaceHolder ", ex);
        }
    }
    
    private void a(final ViewGroup viewGroup, final String s) {
        final RelativeLayout$LayoutParams a = this.a(s);
        final CustomView customView = new CustomView(this.a.getContext(), this.a.getDensity(), CustomView$SwitchIconType.CLOSE_TRANSPARENT);
        viewGroup.addView((View)customView, (ViewGroup$LayoutParams)a);
        customView.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                IMWebView.userInitiatedClose = true;
                MRAIDResizeController.this.a.close();
            }
        });
    }
    
    private void a(final FrameLayout frameLayout, final FrameLayout frameLayout2, final IMWebView imWebView, final JSController$ResizeProperties jsController$ResizeProperties) {
        final int[] array = new int[2];
        final int[] array2 = new int[2];
        ((View)imWebView.getOriginalParent()).getLocationOnScreen(array);
        ((View)frameLayout).getLocationOnScreen(array2);
        array[1] -= array2[1];
        array[0] -= array2[0];
        array[0] += jsController$ResizeProperties.offsetX;
        array[1] += jsController$ResizeProperties.offsetY;
        if (!jsController$ResizeProperties.allowOffscreen) {
            if (jsController$ResizeProperties.width > frameLayout.getWidth() - array[0]) {
                array[0] = frameLayout.getWidth() - jsController$ResizeProperties.width;
            }
            if (jsController$ResizeProperties.height > frameLayout.getHeight() - array[1]) {
                array[1] = frameLayout.getHeight() - jsController$ResizeProperties.height;
            }
            if (array[0] < 0) {
                array[0] = 0;
            }
            if (array[1] < 0) {
                array[1] = 0;
            }
        }
        this.b = new ResizeDimensions(array[0], array[1], jsController$ResizeProperties.width, jsController$ResizeProperties.height);
        final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(jsController$ResizeProperties.width, jsController$ResizeProperties.height);
        layoutParams.leftMargin = array[0];
        layoutParams.topMargin = array[1];
        layoutParams.gravity = 3;
        ((View)imWebView.getParent()).setLayoutParams((ViewGroup$LayoutParams)layoutParams);
    }
    
    private String b(String s) {
        if (!s.equals("top-left") && !s.equals("top-right") && !s.equals("bottom-left") && !s.equals("bottom-right") && !s.equals("top-center") && !s.equals("bottom-center") && !s.equals("center")) {
            s = "top-right";
        }
        return s;
    }
    
    private void b() {
        ((ViewGroup)this.a.getParent().getParent().getParent()).removeView((View)this.a.getParent().getParent());
        ((ViewGroup)this.a.getParent()).removeView((View)this.a);
        final View viewById = ((View)this.a.getOriginalParent()).findViewById(437);
        ((ViewGroup)viewById.getParent()).removeView(viewById);
        ((ViewGroup)this.a.getOriginalParent()).addView((View)this.a, this.a.getOriginalIndex());
        this.a.resetLayout();
    }
    
    public void closeResized() {
        if (this.a.getViewState().compareTo(IMWebView$ViewState.DEFAULT) == 0) {
            return;
        }
        synchronized (this.a.mutex) {
            this.a.isMutexAquired.set(false);
            this.a.mutex.notifyAll();
            // monitorexit(this.a.mutex)
            this.a.doNotFireVisibilityChanged.set(true);
            this.b();
            this.a.closeResized();
            this.a.setVisibility(0);
            this.a.setState(IMWebView$ViewState.DEFAULT);
            this.a.doNotFireVisibilityChanged.set(false);
        }
    }
    
    public void doResize(final Bundle bundle) {
        this.a.doNotFireVisibilityChanged.set(true);
        try {
            if (this.a.getOriginalParent() == null) {
                this.a.saveOriginalViewParent();
            }
            if (((FrameLayout)this.a.getParent().getParent()).getId() == 435) {
                this.a((FrameLayout)this.a.getParent().getParent().getParent(), (FrameLayout)this.a.getParent().getParent(), this.a, this.resizeProperties);
                final RelativeLayout$LayoutParams a = this.a(this.resizeProperties.customClosePosition);
                this.a.setLayoutParams((ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(this.resizeProperties.width, this.resizeProperties.height));
                ((ViewGroup)this.a.getParent()).getChildAt(1).setLayoutParams((ViewGroup$LayoutParams)a);
                if (bundle != null) {
                    this.a.setState(IMWebView$ViewState.RESIZED);
                }
                this.a.requestLayout();
                this.a.invalidate();
                this.a.postInHandler(new Runnable() {
                    @Override
                    public void run() {
                        if (MRAIDResizeController.this.a.mListener != null) {
                            MRAIDResizeController.this.a.mListener.onResize(MRAIDResizeController.this.b);
                        }
                    }
                });
                this.a.doNotFireVisibilityChanged.set(false);
                return;
            }
        }
        catch (Exception ex2) {}
        try {
            this.a(this.resizeProperties).setBackgroundColor(0);
            this.a.mAudioVideoController.videoValidateWidth = this.resizeProperties.width;
            if (bundle != null) {
                this.a.setState(IMWebView$ViewState.RESIZED);
            }
            synchronized (this.a.mutex) {
                this.a.isMutexAquired.set(false);
                this.a.mutex.notifyAll();
                // monitorexit(this.a.mutex)
                this.a.requestLayout();
                this.a.invalidate();
                this.a.postInHandler(new Runnable() {
                    @Override
                    public void run() {
                        if (MRAIDResizeController.this.a.mListener != null) {
                            MRAIDResizeController.this.a.mListener.onResize(MRAIDResizeController.this.b);
                        }
                    }
                });
                this.a.doNotFireVisibilityChanged.set(false);
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in doresize ", ex);
            this.a.setState(IMWebView$ViewState.DEFAULT);
            synchronized (this.a.mutex) {
                this.a.isMutexAquired.set(false);
                this.a.mutex.notifyAll();
            }
        }
    }
    
    public void onOrientationChange() {
        if (this.a.getStateVariable() == IMWebView$ViewState.RESIZED && !this.resizeProperties.allowOffscreen) {
            this.doResize(null);
        }
    }
    
    public void reset() {
        this.resizeProperties = new JSController$ResizeProperties();
    }
}
