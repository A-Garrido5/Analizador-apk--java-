// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container.mraidimpl;

import com.inmobi.re.controller.util.AVPlayerListener;
import android.view.KeyEvent;
import android.view.View$OnKeyListener;
import android.view.ViewGroup;
import android.view.MotionEvent;
import android.view.View;
import android.view.View$OnTouchListener;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout$LayoutParams;
import com.inmobi.commons.internal.WrapperFunctions;
import android.widget.FrameLayout;
import android.os.Bundle;
import com.inmobi.commons.internal.Log;
import java.util.Iterator;
import java.util.Map;
import android.webkit.URLUtil;
import com.inmobi.re.controller.JSController$PlayerProperties;
import com.inmobi.re.controller.util.AVPlayer$playerState;
import android.content.Context;
import android.app.Activity;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import com.inmobi.re.controller.JSController$Dimensions;
import com.inmobi.re.controller.util.AVPlayer;
import java.util.Hashtable;
import com.inmobi.re.container.IMWebView;

public class MRAIDAudioVideoController
{
    private IMWebView a;
    public Hashtable audioPlayerList;
    public AVPlayer audioplayer;
    public AVPlayer videoPlayer;
    public Hashtable videoPlayerList;
    public int videoValidateWidth;
    
    public MRAIDAudioVideoController(final IMWebView a) {
        this.videoPlayerList = new Hashtable();
        this.audioPlayerList = new Hashtable();
        this.a = a;
    }
    
    private AVPlayer a(final String s) {
        if (!this.videoPlayerList.isEmpty()) {
            return this.videoPlayerList.get(s);
        }
        return null;
    }
    
    private void a(final AVPlayer avPlayer, final JSController$Dimensions jsController$Dimensions) {
        final int n = (int)(-99999.0f * this.a.getDensity());
        if (avPlayer.isInlineVideo()) {
            final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(jsController$Dimensions.width, jsController$Dimensions.height);
            final FrameLayout$LayoutParams frameLayout$LayoutParams = (FrameLayout$LayoutParams)avPlayer.getLayoutParams();
            if (jsController$Dimensions.x == n && jsController$Dimensions.y == n) {
                layoutParams.leftMargin = frameLayout$LayoutParams.leftMargin;
                layoutParams.topMargin = frameLayout$LayoutParams.topMargin;
            }
            else {
                layoutParams.leftMargin = jsController$Dimensions.x;
                layoutParams.topMargin = jsController$Dimensions.y;
            }
            layoutParams.gravity = 3;
            avPlayer.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        }
    }
    
    private boolean a(final String s, final String s2, final Activity activity) {
        if (!this.audioPlayerList.isEmpty()) {
            this.audioplayer = this.audioPlayerList.get(s);
            if (this.audioplayer == null) {
                if (this.audioPlayerList.size() > 4) {
                    this.a.raiseError("Too many audio players", "playAudio");
                    return false;
                }
                this.audioplayer = new AVPlayer((Context)activity, this.a);
            }
            else if (this.audioplayer.getMediaURL().equals(s2) || s2.length() == 0) {
                if (this.audioplayer.getState() == AVPlayer$playerState.PLAYING) {
                    return false;
                }
                if (this.audioplayer.getState() == AVPlayer$playerState.INIT) {
                    if (this.audioplayer.isPrepared()) {
                        this.audioplayer.start();
                    }
                    else {
                        this.audioplayer.setAutoPlay(true);
                    }
                    return false;
                }
                if (this.audioplayer.getState() == AVPlayer$playerState.PAUSED) {
                    this.audioplayer.start();
                    return false;
                }
                final JSController$PlayerProperties properties = this.audioplayer.getProperties();
                final String mediaURL = this.audioplayer.getMediaURL();
                this.audioplayer.releasePlayer(false);
                this.audioPlayerList.remove(s);
                (this.audioplayer = new AVPlayer((Context)activity, this.a)).setPlayData(properties, mediaURL);
            }
            else {
                this.audioplayer.releasePlayer(false);
                this.audioPlayerList.remove(s);
                this.audioplayer = new AVPlayer((Context)activity, this.a);
            }
        }
        else {
            this.audioplayer = new AVPlayer((Context)activity, this.a);
        }
        return true;
    }
    
    private boolean a(final String s, final String s2, final Activity activity, final JSController$Dimensions jsController$Dimensions) {
        if (this.videoPlayer == null || !s.equalsIgnoreCase(this.videoPlayer.getPropertyID())) {
            return this.b(s, s2, activity);
        }
        final AVPlayer$playerState state = this.videoPlayer.getState();
        if (s.equalsIgnoreCase(this.videoPlayer.getPropertyID())) {
            final String mediaURL = this.videoPlayer.getMediaURL();
            if (s2.length() == 0 || s2.equalsIgnoreCase(mediaURL)) {
                switch (MRAIDAudioVideoController$d.a[state.ordinal()]) {
                    default: {
                        return false;
                    }
                    case 1: {
                        this.videoPlayer.start();
                        break;
                    }
                    case 2: {
                        this.a(this.videoPlayer, jsController$Dimensions);
                        return false;
                    }
                    case 3: {
                        if (!this.videoPlayer.getProperties().doLoop()) {
                            this.videoPlayer.start();
                        }
                        this.a(this.videoPlayer, jsController$Dimensions);
                        return false;
                    }
                    case 4: {
                        if (this.videoPlayer.isPrepared()) {
                            this.videoPlayer.start();
                            break;
                        }
                        this.videoPlayer.setAutoPlay(true);
                        break;
                    }
                }
                this.a(this.videoPlayer, jsController$Dimensions);
                return false;
            }
            if (!URLUtil.isValidUrl(s2)) {
                this.a.raiseError("Request must specify a valid URL", "playVideo");
                return false;
            }
            this.videoPlayer.releasePlayer(false);
            this.videoPlayer = new AVPlayer((Context)activity, this.a);
        }
        return true;
    }
    
    private boolean a(final Hashtable hashtable, final AVPlayer avPlayer) {
        while (true) {
            for (final Map.Entry<String, V> entry : hashtable.entrySet()) {
                if (entry.getValue() == avPlayer) {
                    final String s = entry.getKey();
                    if (s != null) {
                        this.audioPlayerList.remove(s);
                        return true;
                    }
                    return false;
                }
            }
            final String s = null;
            continue;
        }
    }
    
    private boolean b(final String s, final String s2, final Activity activity) {
        if ((s2.length() != 0 && !URLUtil.isValidUrl(s2)) || (s2.length() == 0 && !this.videoPlayerList.containsKey(s))) {
            this.a.raiseError("Request must specify a valid URL", "playVideo");
            return false;
        }
        if (this.videoPlayer != null) {
            this.videoPlayer.hide();
            this.videoPlayerList.put(this.videoPlayer.getPropertyID(), this.videoPlayer);
        }
        final AVPlayer a = this.a(s);
        if (a == null) {
            this.videoPlayer = new AVPlayer((Context)activity, this.a);
        }
        else {
            this.videoPlayer = a;
        }
        if (s2.length() == 0) {
            this.videoPlayer.setPlayData(a.getProperties(), a.getMediaURL());
            this.videoPlayer.setPlayDimensions(a.getPlayDimensions());
        }
        this.videoPlayerList.remove(s);
        return true;
    }
    
    public AVPlayer getCurrentAudioPlayer(final String s) {
        synchronized (this) {
            AVPlayer audioplayer;
            if (this.audioplayer != null && this.audioplayer.getPropertyID().equalsIgnoreCase(s)) {
                audioplayer = this.audioplayer;
            }
            else {
                final boolean empty = this.audioPlayerList.isEmpty();
                audioplayer = null;
                if (!empty) {
                    final boolean containsKey = this.audioPlayerList.containsKey(s);
                    audioplayer = null;
                    if (containsKey) {
                        audioplayer = this.audioPlayerList.get(s);
                    }
                }
            }
            return audioplayer;
        }
    }
    
    public AVPlayer getVideoPlayer(final String s) {
        synchronized (this) {
            AVPlayer videoPlayer;
            if (this.videoPlayer != null && this.videoPlayer.getPropertyID().equalsIgnoreCase(s)) {
                videoPlayer = this.videoPlayer;
            }
            else {
                final boolean empty = this.videoPlayerList.isEmpty();
                videoPlayer = null;
                if (!empty) {
                    final boolean containsKey = this.videoPlayerList.containsKey(s);
                    videoPlayer = null;
                    if (containsKey) {
                        videoPlayer = this.videoPlayerList.get(s);
                    }
                }
            }
            return videoPlayer;
        }
    }
    
    public void hidePlayers() {
        Log.debug("[InMobi]-[RE]-4.4.3", "MRAIDAudioVideoController: hiding all players");
        if (this.videoPlayer != null && this.videoPlayer.getState() != AVPlayer$playerState.RELEASED) {
            this.videoPlayerList.put(this.videoPlayer.getPropertyID(), this.videoPlayer);
            this.videoPlayer.hide();
        }
        for (final Map.Entry<K, AVPlayer> entry : this.audioPlayerList.entrySet()) {
            final AVPlayer avPlayer = entry.getValue();
            switch (MRAIDAudioVideoController$d.a[avPlayer.getState().ordinal()]) {
                default: {
                    continue;
                }
                case 2: {
                    avPlayer.pause();
                    continue;
                }
                case 4: {
                    avPlayer.releasePlayer(false);
                    this.audioPlayerList.remove(entry.getKey());
                    continue;
                }
            }
        }
    }
    
    public void mediaPlayerReleased(final AVPlayer avPlayer) {
        if (avPlayer == this.audioplayer) {
            this.audioplayer = null;
        }
        if (avPlayer == this.videoPlayer) {
            this.videoPlayer = null;
        }
        if (this.a(this.audioPlayerList, avPlayer)) {
            return;
        }
        this.a(this.videoPlayerList, avPlayer);
    }
    
    public void playAudioImpl(final Bundle bundle, final Activity activity) {
        final JSController$PlayerProperties jsController$PlayerProperties = (JSController$PlayerProperties)bundle.getParcelable("player_properties");
        String string = bundle.getString("expand_url");
        if (string == null) {
            string = "";
        }
        if (this.a(jsController$PlayerProperties.id, string, activity)) {
            if ((string.length() != 0 && !URLUtil.isValidUrl(string)) || (string.length() == 0 && !this.audioPlayerList.containsKey(jsController$PlayerProperties.id))) {
                this.a.raiseError("Request must specify a valid URL", "playAudio");
                return;
            }
            if (this.audioplayer != null) {
                if (string.length() != 0) {
                    this.audioplayer.setPlayData(jsController$PlayerProperties, string);
                }
                this.audioPlayerList.put(jsController$PlayerProperties.id, this.audioplayer);
                final FrameLayout frameLayout = (FrameLayout)activity.findViewById(16908290);
                if (jsController$PlayerProperties.isFullScreen()) {
                    final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent());
                    layoutParams.addRule(13);
                    this.audioplayer.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                    final RelativeLayout backGroundLayout = new RelativeLayout((Context)activity);
                    backGroundLayout.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                        public boolean onTouch(final View view, final MotionEvent motionEvent) {
                            return true;
                        }
                    });
                    backGroundLayout.setBackgroundColor(-16777216);
                    frameLayout.addView((View)backGroundLayout, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent()));
                    backGroundLayout.addView((View)this.audioplayer);
                    this.audioplayer.setBackGroundLayout((ViewGroup)backGroundLayout);
                    this.audioplayer.requestFocus();
                    this.audioplayer.setOnKeyListener((View$OnKeyListener)new View$OnKeyListener() {
                        public boolean onKey(final View view, final int n, final KeyEvent keyEvent) {
                            if (4 == keyEvent.getKeyCode() && keyEvent.getAction() == 0) {
                                Log.debug("[InMobi]-[RE]-4.4.3", "Back button pressed while fullscreen audio was playing");
                                MRAIDAudioVideoController.this.audioplayer.releasePlayer(true);
                            }
                            return false;
                        }
                    });
                }
                else {
                    this.audioplayer.setLayoutParams(new ViewGroup$LayoutParams(1, 1));
                    frameLayout.addView((View)this.audioplayer);
                }
                this.audioplayer.setListener(new AVPlayerListener() {
                    @Override
                    public void onComplete(final AVPlayer avPlayer) {
                        try {
                            if (jsController$PlayerProperties.isFullScreen()) {
                                final ViewGroup viewGroup = (ViewGroup)avPlayer.getBackGroundLayout().getParent();
                                if (viewGroup != null) {
                                    viewGroup.removeView((View)avPlayer.getBackGroundLayout());
                                }
                            }
                            else {
                                final ViewGroup viewGroup2 = (ViewGroup)avPlayer.getParent();
                                if (viewGroup2 != null) {
                                    viewGroup2.removeView((View)avPlayer);
                                }
                            }
                        }
                        catch (Exception ex) {
                            Log.debug("[InMobi]-[RE]-4.4.3", "Problem removing the audio relativelayout", ex);
                        }
                    }
                    
                    @Override
                    public void onError(final AVPlayer avPlayer) {
                        this.onComplete(avPlayer);
                    }
                    
                    @Override
                    public void onPrepared(final AVPlayer avPlayer) {
                    }
                });
                this.audioplayer.play();
            }
        }
    }
    
    public void playVideoImpl(final Bundle bundle, final Activity activity) {
        final JSController$PlayerProperties jsController$PlayerProperties = (JSController$PlayerProperties)bundle.getParcelable("player_properties");
        JSController$Dimensions playDimensions = (JSController$Dimensions)bundle.getParcelable("expand_dimensions");
        Log.debug("[InMobi]-[RE]-4.4.3", "Final dimensions: " + playDimensions);
        final String string = bundle.getString("expand_url");
        if (!this.a(jsController$PlayerProperties.id, string, activity, playDimensions)) {
            return;
        }
        this.a.setBusy(true);
        JSController$PlayerProperties jsController$PlayerProperties2;
        if (string.length() == 0) {
            final JSController$PlayerProperties properties = this.videoPlayer.getProperties();
            playDimensions = this.videoPlayer.getPlayDimensions();
            this.videoPlayer.getMediaURL();
            jsController$PlayerProperties2 = properties;
        }
        else {
            this.videoPlayer.setPlayData(jsController$PlayerProperties, string);
            this.videoPlayer.setPlayDimensions(playDimensions);
            jsController$PlayerProperties2 = jsController$PlayerProperties;
        }
        if (this.videoPlayer.getState() == AVPlayer$playerState.HIDDEN) {
            this.videoPlayer.pseudoPause = true;
            this.videoPlayer.show();
            return;
        }
        final FrameLayout frameLayout = (FrameLayout)activity.findViewById(16908290);
        if (jsController$PlayerProperties2.isFullScreen()) {
            final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent());
            layoutParams.addRule(13);
            this.videoPlayer.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
            final RelativeLayout backGroundLayout = new RelativeLayout((Context)activity);
            backGroundLayout.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                public boolean onTouch(final View view, final MotionEvent motionEvent) {
                    return true;
                }
            });
            backGroundLayout.setBackgroundColor(-16777216);
            frameLayout.addView((View)backGroundLayout, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent()));
            backGroundLayout.addView((View)this.videoPlayer);
            this.videoPlayer.setBackGroundLayout((ViewGroup)backGroundLayout);
            this.videoPlayer.requestFocus();
            this.videoPlayer.setOnKeyListener((View$OnKeyListener)new View$OnKeyListener() {
                public boolean onKey(final View view, final int n, final KeyEvent keyEvent) {
                    if (4 == keyEvent.getKeyCode() && keyEvent.getAction() == 0) {
                        Log.debug("[InMobi]-[RE]-4.4.3", "Back pressed while fullscreen video is playing");
                        MRAIDAudioVideoController.this.videoPlayer.releasePlayer(true);
                        return true;
                    }
                    return false;
                }
            });
        }
        else {
            final FrameLayout$LayoutParams layoutParams2 = new FrameLayout$LayoutParams(playDimensions.width, playDimensions.height);
            final FrameLayout backGroundLayout2 = new FrameLayout((Context)activity);
            if (this.a.mExpandController.expandProperties == null) {
                layoutParams2.leftMargin = playDimensions.x;
                layoutParams2.topMargin = playDimensions.y;
            }
            else {
                layoutParams2.leftMargin = playDimensions.x + this.a.mExpandController.expandProperties.currentX;
                layoutParams2.topMargin = playDimensions.y + this.a.mExpandController.expandProperties.currentY;
            }
            layoutParams2.gravity = 3;
            this.videoPlayer.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
            frameLayout.addView((View)backGroundLayout2, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(WrapperFunctions.getParamFillParent(), WrapperFunctions.getParamFillParent()));
            this.videoPlayer.setBackGroundLayout((ViewGroup)backGroundLayout2);
            backGroundLayout2.addView((View)this.videoPlayer);
        }
        this.videoPlayer.setListener(new AVPlayerListener() {
            @Override
            public void onComplete(final AVPlayer p0) {
                // 
                // This method could not be decompiled.
                // 
                // Original Bytecode:
                // 
                //     0: aload_0        
                //     1: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController$f.a:Lcom/inmobi/re/container/mraidimpl/MRAIDAudioVideoController;
                //     4: invokestatic    com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController.a:(Lcom/inmobi/re/container/mraidimpl/MRAIDAudioVideoController;)Lcom/inmobi/re/container/IMWebView;
                //     7: iconst_0       
                //     8: invokevirtual   com/inmobi/re/container/IMWebView.setBusy:(Z)V
                //    11: aload_1        
                //    12: invokevirtual   com/inmobi/re/controller/util/AVPlayer.getBackGroundLayout:()Landroid/view/ViewGroup;
                //    15: astore          4
                //    17: aload           4
                //    19: ifnull          37
                //    22: aload           4
                //    24: invokevirtual   android/view/ViewGroup.getParent:()Landroid/view/ViewParent;
                //    27: checkcast       Landroid/view/ViewGroup;
                //    30: aload_1        
                //    31: invokevirtual   com/inmobi/re/controller/util/AVPlayer.getBackGroundLayout:()Landroid/view/ViewGroup;
                //    34: invokevirtual   android/view/ViewGroup.removeView:(Landroid/view/View;)V
                //    37: aload_1        
                //    38: aconst_null    
                //    39: invokevirtual   com/inmobi/re/controller/util/AVPlayer.setBackGroundLayout:(Landroid/view/ViewGroup;)V
                //    42: aload_0        
                //    43: monitorenter   
                //    44: aload_0        
                //    45: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController$f.a:Lcom/inmobi/re/container/mraidimpl/MRAIDAudioVideoController;
                //    48: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController.videoPlayer:Lcom/inmobi/re/controller/util/AVPlayer;
                //    51: ifnull          82
                //    54: aload_1        
                //    55: invokevirtual   com/inmobi/re/controller/util/AVPlayer.getPropertyID:()Ljava/lang/String;
                //    58: aload_0        
                //    59: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController$f.a:Lcom/inmobi/re/container/mraidimpl/MRAIDAudioVideoController;
                //    62: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController.videoPlayer:Lcom/inmobi/re/controller/util/AVPlayer;
                //    65: invokevirtual   com/inmobi/re/controller/util/AVPlayer.getPropertyID:()Ljava/lang/String;
                //    68: invokevirtual   java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
                //    71: ifeq            82
                //    74: aload_0        
                //    75: getfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController$f.a:Lcom/inmobi/re/container/mraidimpl/MRAIDAudioVideoController;
                //    78: aconst_null    
                //    79: putfield        com/inmobi/re/container/mraidimpl/MRAIDAudioVideoController.videoPlayer:Lcom/inmobi/re/controller/util/AVPlayer;
                //    82: aload_0        
                //    83: monitorexit    
                //    84: return         
                //    85: astore_2       
                //    86: ldc             "[InMobi]-[RE]-4.4.3"
                //    88: ldc             "Problem removing the video framelayout or relativelayout depending on video startstyle"
                //    90: aload_2        
                //    91: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //    94: goto            42
                //    97: astore_3       
                //    98: aload_0        
                //    99: monitorexit    
                //   100: aload_3        
                //   101: athrow         
                //    Exceptions:
                //  Try           Handler
                //  Start  End    Start  End    Type                 
                //  -----  -----  -----  -----  ---------------------
                //  11     17     85     97     Ljava/lang/Exception;
                //  22     37     85     97     Ljava/lang/Exception;
                //  37     42     85     97     Ljava/lang/Exception;
                //  44     82     97     102    Any
                //  82     84     97     102    Any
                // 
                // The error that occurred was:
                // 
                // java.lang.IllegalStateException: Expression is linked from several locations: Label_0082:
                //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
                //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformCall(AstMethodBodyBuilder.java:1163)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:1010)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformNode(AstMethodBodyBuilder.java:392)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformBlock(AstMethodBodyBuilder.java:333)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:294)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
                //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
                //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
                //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
                // 
                throw new IllegalStateException("An error occurred while decompiling this method.");
            }
            
            @Override
            public void onError(final AVPlayer avPlayer) {
                this.onComplete(avPlayer);
            }
            
            @Override
            public void onPrepared(final AVPlayer avPlayer) {
            }
        });
        this.videoPlayer.play();
    }
    
    public void releaseAllPlayers() {
        if (this.videoPlayer != null) {
            this.videoPlayerList.put(this.videoPlayer.getPropertyID(), this.videoPlayer);
        }
        try {
            final Object[] array = this.videoPlayerList.values().toArray();
            final int length = array.length;
            int i = 0;
            while (i < length) {
                final Object o = array[i];
                try {
                    ((AVPlayer)o).releasePlayer(IMWebView.userInitiatedClose);
                    ++i;
                }
                catch (Exception ex3) {
                    Log.internal("[InMobi]-[RE]-4.4.3", "Unable to release player");
                }
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMwebview release all players ", ex);
        }
        this.videoPlayerList.clear();
        this.videoPlayer = null;
        try {
            final Object[] array2 = this.audioPlayerList.values().toArray();
            final int length2 = array2.length;
            int j = 0;
            while (j < length2) {
                final Object o2 = array2[j];
                try {
                    ((AVPlayer)o2).releasePlayer(IMWebView.userInitiatedClose);
                    ++j;
                }
                catch (Exception ex4) {
                    Log.internal("[InMobi]-[RE]-4.4.3", "Unable to release player");
                }
            }
        }
        catch (Exception ex2) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMwebview release all players ", ex2);
        }
        IMWebView.userInitiatedClose = false;
        this.audioPlayerList.clear();
        this.audioplayer = null;
    }
    
    public void validateVideoDimensions(final JSController$Dimensions jsController$Dimensions) {
        jsController$Dimensions.width *= (int)this.a.getDensity();
        jsController$Dimensions.height *= (int)this.a.getDensity();
        jsController$Dimensions.x *= (int)this.a.getDensity();
        jsController$Dimensions.y *= (int)this.a.getDensity();
    }
}
