// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.container.mraidimpl;

import java.util.TimerTask;
import java.util.Iterator;
import com.inmobi.commons.internal.Log;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import android.media.AudioRecord;

public class AudioTriggerer
{
    static boolean a;
    public static AudioRecord audioRecorder;
    static boolean b;
    static Timer c;
    public static List callbacks;
    static long d;
    static long e;
    private static int[] f;
    
    static {
        AudioTriggerer.d = 0L;
        AudioTriggerer.e = 50L;
        AudioTriggerer.audioRecorder = null;
        AudioTriggerer.callbacks = new ArrayList();
        AudioTriggerer.f = new int[] { 8000, 11025, 22050, 44100 };
    }
    
    private static void a(final double n) {
        for (final AudioTriggerCallback audioTriggerCallback : AudioTriggerer.callbacks) {
            try {
                audioTriggerCallback.audioLevel(n);
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "AudioTriggerer: One of the mic listeners has a problem.");
            }
        }
    }
    
    public static void addEventListener(final AudioTriggerCallback audioTriggerCallback) {
        AudioTriggerer.callbacks.add(audioTriggerCallback);
        if (AudioTriggerer.callbacks.size() == 1) {
            b();
        }
    }
    
    private static void b() {
        AudioTriggerer.a = true;
        AudioTriggerer.audioRecorder = h();
        (AudioTriggerer.c = new Timer()).scheduleAtFixedRate(new TimerTask() {
            @Override
            public final void run() {
                d();
            }
        }, AudioTriggerer.d, AudioTriggerer.e);
    }
    
    private static void c() {
        AudioTriggerer.a = false;
        if (AudioTriggerer.audioRecorder == null) {
            return;
        }
        if (f()) {
            AudioTriggerer.b = false;
        }
        try {
            AudioTriggerer.audioRecorder.stop();
            AudioTriggerer.audioRecorder.release();
            AudioTriggerer.c.cancel();
            AudioTriggerer.c.purge();
        }
        catch (IllegalStateException ex) {
            ex.printStackTrace();
        }
        catch (RuntimeException ex2) {
            ex2.printStackTrace();
        }
    }
    
    private static void d() {
        if (AudioTriggerer.audioRecorder == null || AudioTriggerer.audioRecorder.getState() != 1) {
            return;
        }
        final short[] array = new short[512];
        final float[] array2 = new float[3];
        AudioTriggerer.b = true;
        try {
            AudioTriggerer.audioRecorder.startRecording();
            while (f()) {
                final int read = AudioTriggerer.audioRecorder.read(array, 0, array.length);
                int i = 0;
                float n = 0.0f;
                while (i < read) {
                    final short n2 = (short)(array[i] | array[i + 1]);
                    if (n2 != 0) {
                        n += Math.abs(n2) / read;
                    }
                    i += 2;
                }
                array2[0] = n;
                float n3 = 0.0f;
                for (int j = 0; j < 3; ++j) {
                    n3 += array2[j];
                }
                a(n3 / read / 32.0f);
            }
            e();
        }
        catch (Exception ex) {}
    }
    
    private static void e() {
        if (AudioTriggerer.audioRecorder == null) {
            return;
        }
        if (f()) {
            AudioTriggerer.b = false;
        }
        try {
            AudioTriggerer.audioRecorder.stop();
            AudioTriggerer.audioRecorder.release();
        }
        catch (IllegalStateException ex) {
            ex.printStackTrace();
        }
        catch (RuntimeException ex2) {
            ex2.printStackTrace();
        }
    }
    
    private static boolean f() {
        return AudioTriggerer.b;
    }
    
    private static void g() {
        AudioTriggerer.b = false;
    }
    
    private static AudioRecord h() {
        for (final int n : AudioTriggerer.f) {
            for (final short n2 : new short[] { 3, 2 }) {
                for (final short n3 : new short[] { 16, 12 }) {
                    try {
                        final int minBufferSize = AudioRecord.getMinBufferSize(n, (int)n3, (int)n2);
                        if (minBufferSize != -2) {
                            final AudioRecord audioRecord = new AudioRecord(0, n, (int)n3, (int)n2, minBufferSize);
                            if (audioRecord.getState() == 1) {
                                return audioRecord;
                            }
                        }
                    }
                    catch (Exception ex) {}
                }
            }
        }
        return null;
    }
    
    public static void removeEventListener(final AudioTriggerCallback audioTriggerCallback) {
        AudioTriggerer.callbacks.remove(audioTriggerCallback);
        if (AudioTriggerer.callbacks.size() == 0) {
            c();
        }
    }
}
