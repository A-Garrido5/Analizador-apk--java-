// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.controller.util;

import com.inmobi.commons.internal.WrapperFunctions;
import android.graphics.Bitmap$Config;
import android.view.MotionEvent;
import android.view.View$OnTouchListener;
import android.os.Build$VERSION;
import android.graphics.drawable.BitmapDrawable;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.TextView;
import com.inmobi.commons.internal.Log;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.widget.MediaController;
import com.inmobi.commons.uid.UIDHelper;
import android.content.Context;
import com.inmobi.re.controller.JSController$Dimensions;
import android.view.ViewGroup;
import android.media.MediaPlayer;
import android.graphics.Bitmap;
import com.inmobi.re.container.IMWebView;
import android.widget.RelativeLayout;
import com.inmobi.re.controller.JSController$PlayerProperties;
import android.media.MediaPlayer$OnPreparedListener;
import android.media.MediaPlayer$OnErrorListener;
import android.media.MediaPlayer$OnCompletionListener;
import android.widget.VideoView;

public class AVPlayer extends VideoView implements MediaPlayer$OnCompletionListener, MediaPlayer$OnErrorListener, MediaPlayer$OnPreparedListener
{
    public static final int MINIMAL_LAYOUT_PARAM = 1;
    private static String f;
    private static String g;
    private static String h;
    private static int i;
    private static int j;
    private static String k;
    private JSController$PlayerProperties a;
    private AVPlayerListener b;
    private String c;
    private int d;
    private RelativeLayout e;
    private boolean l;
    private boolean m;
    private IMWebView n;
    private Bitmap o;
    private int p;
    public boolean pseudoPause;
    private int q;
    private AVPlayer$playerState r;
    private MediaPlayer s;
    private boolean t;
    private ViewGroup u;
    private JSController$Dimensions v;
    private AVPlayer$b w;
    
    static {
        AVPlayer.f = "play";
        AVPlayer.g = "pause";
        AVPlayer.h = "ended";
        AVPlayer.i = -1;
        AVPlayer.j = 2;
        AVPlayer.k = "Loading. Please Wait..";
    }
    
    private AVPlayer(final Context context) {
        super(context);
        this.pseudoPause = false;
        this.d = 0;
        this.l = false;
        this.m = false;
        this.o = null;
        this.q = -1;
        this.w = new AVPlayer$b(this);
    }
    
    public AVPlayer(final Context context, final IMWebView n) {
        this(context);
        this.setZOrderOnTop(true);
        this.r = AVPlayer$playerState.INIT;
        this.setDrawingCacheEnabled(true);
        this.n = n;
        this.setFocusable(true);
        this.setFocusableInTouchMode(true);
        this.p = 100;
    }
    
    private static String a(final String s) {
        try {
            final byte[] bytes = s.getBytes();
            final StringBuffer sb = new StringBuffer();
            for (int i = 0; i < bytes.length; ++i) {
                if ((0x80 & bytes[i]) > 0) {
                    sb.append("%" + UIDHelper.byteToHex(bytes[i]));
                }
                else {
                    sb.append((char)bytes[i]);
                }
            }
            return new String(sb.toString().getBytes(), "ISO-8859-1");
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    private void a() {
        if (this.a.showControl()) {
            final MediaController mediaController = new MediaController(this.getContext());
            this.setMediaController(mediaController);
            mediaController.setAnchorView((View)this);
        }
    }
    
    private void a(final int n) {
        if (this.n != null) {
            this.n.injectJavaScript("window.mraidview.fireMediaErrorEvent('" + this.a.id + "'," + n + ");");
        }
    }
    
    private void a(final int n, final int n2) {
        if (this.n != null) {
            this.n.injectJavaScript("window.mraidview.fireMediaTimeUpdateEvent('" + this.a.id + "'," + n + "," + n2 + ");");
        }
    }
    
    private void a(final boolean b, final int n) {
        if (this.n != null) {
            this.n.injectJavaScript("window.mraidview.fireMediaCloseEvent('" + this.a.id + "'," + b + "," + n + ");");
            this.n.mediaPlayerReleased(this);
        }
    }
    
    private void b() {
        this.r = AVPlayer$playerState.INIT;
        this.e();
        this.setVideoPath(this.c);
        this.a();
        this.setOnCompletionListener((MediaPlayer$OnCompletionListener)this);
        this.setOnErrorListener((MediaPlayer$OnErrorListener)this);
        this.setOnPreparedListener((MediaPlayer$OnPreparedListener)this);
    }
    
    private void b(final int p) {
        if (this.s != null && this.t) {
            this.t = false;
        }
        this.p = p;
        final float n = 1.0f - (float)(Math.log(101 - p) / Math.log(101.0));
        while (true) {
            try {
                this.s.setVolume(n, n);
                this.g();
            }
            catch (Exception ex) {
                this.n.raiseError("Player has been released. Cannot set the volume.", "setVolume");
                continue;
            }
            break;
        }
    }
    
    private void b(final String s) {
        if (this.n != null) {
            this.n.injectJavaScript("window.mraidview.fireMediaTrackingEvent('" + s + "','" + this.a.id + "');");
        }
    }
    
    private void c() {
        if (this.r == AVPlayer$playerState.SHOWING) {
            AVPlayer$playerState r;
            if (this.m) {
                r = AVPlayer$playerState.COMPLETED;
            }
            else {
                r = AVPlayer$playerState.PAUSED;
            }
            this.r = r;
        }
        else if (this.a.isAutoPlay() && this.r == AVPlayer$playerState.INIT) {
            if (this.a.doMute()) {
                this.mute();
            }
            this.start();
        }
    }
    
    private void d() {
        try {
            final ViewGroup viewGroup = (ViewGroup)this.getParent();
            if (viewGroup != null) {
                viewGroup.removeView((View)this);
            }
            final ViewGroup viewGroup2 = (ViewGroup)this.u.getParent();
            if (viewGroup2 != null) {
                viewGroup2.removeView((View)this.u);
            }
            this.setBackgroundColor(0);
            this.setBackgroundDrawable((Drawable)null);
            this.setBackGroundLayout(null);
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: unable to remove view");
        }
    }
    
    private void e() {
        (this.e = new RelativeLayout(this.getContext())).setLayoutParams(this.getLayoutParams());
        this.e.setBackgroundColor(-16777216);
        final TextView textView = new TextView(this.getContext());
        textView.setText((CharSequence)AVPlayer.k);
        textView.setTextColor(-1);
        final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-2, -2);
        relativeLayout$LayoutParams.addRule(13);
        this.e.addView((View)textView, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
        ((ViewGroup)this.getParent()).addView((View)this.e);
    }
    
    private void f() {
        if (this.e != null) {
            ((ViewGroup)this.getParent()).removeView((View)this.e);
        }
    }
    
    private void g() {
        if (this.n != null) {
            this.n.injectJavaScript("window.mraidview.fireMediaVolumeChangeEvent('" + this.a.id + "'," + this.getVolume() + "," + this.isMediaMuted() + ");");
        }
    }
    
    private void h() {
        this.w.sendEmptyMessage(1001);
    }
    
    private void i() {
        this.w.removeMessages(1001);
    }
    
    private boolean j() {
        return this.r == AVPlayer$playerState.PAUSED || this.r == AVPlayer$playerState.HIDDEN;
    }
    
    private boolean k() {
        return this.r == AVPlayer$playerState.RELEASED;
    }
    
    private boolean l() {
        return this.r == AVPlayer$playerState.PLAYING;
    }
    
    private boolean m() {
        return this.getLayoutParams().width == 1 && this.getLayoutParams().height == 1;
    }
    
    public boolean getAutoPlay() {
        return this.a != null && this.a.autoPlay;
    }
    
    public ViewGroup getBackGroundLayout() {
        return this.u;
    }
    
    public String getMediaURL() {
        return this.c;
    }
    
    public JSController$Dimensions getPlayDimensions() {
        return this.v;
    }
    
    public JSController$PlayerProperties getPlayProperties() {
        return this.a;
    }
    
    public JSController$PlayerProperties getProperties() {
        return this.a;
    }
    
    public String getPropertyID() {
        return this.a.id;
    }
    
    public AVPlayer$playerState getState() {
        return this.r;
    }
    
    public int getVolume() {
        return this.p;
    }
    
    public void hide() {
        try {
            this.setVisibility(4);
            this.u.setVisibility(4);
            this.r = AVPlayer$playerState.HIDDEN;
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: unable to hide video");
        }
    }
    
    public boolean isInlineVideo() {
        return !this.a.isFullScreen();
    }
    
    public boolean isMediaMuted() {
        return this.t;
    }
    
    public boolean isPrepared() {
        return this.l;
    }
    
    public void mute() {
        if (this.s == null || this.t) {
            return;
        }
        this.t = true;
        while (true) {
            try {
                this.s.setVolume(0.0f, 0.0f);
                this.g();
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: unable to set volume (mute)");
                continue;
            }
            break;
        }
    }
    
    public void onCompletion(final MediaPlayer mediaPlayer) {
        while (true) {
            Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> onCompletion");
            this.r = AVPlayer$playerState.COMPLETED;
            this.m = true;
            this.b(AVPlayer.h);
            this.i();
            try {
                if (this.a.doLoop()) {
                    synchronized (this) {
                        if (!this.j()) {
                            this.d = 0;
                            this.start();
                        }
                        return;
                    }
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "IMAvplayer onCompletion exception ", ex);
                return;
            }
            if (this.a.exitOnComplete()) {
                break;
            }
            return;
        }
        this.releasePlayer(false);
    }
    
    public boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
        Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> Player error : " + n);
        this.f();
        this.releasePlayer(false);
        if (this.b != null) {
            this.b.onError(this);
        }
        int n3 = AVPlayer.i;
        if (n == 100) {
            n3 = AVPlayer.j;
        }
        this.a(n3);
        return false;
    }
    
    public void onIMVisibilityChanged(final boolean b) {
        Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> onIMVisibilityChanged: " + b);
        if (b && !this.pseudoPause) {
            this.setBackgroundDrawable((Drawable)new BitmapDrawable(this.o));
        }
        if (b && this.pseudoPause) {
            this.pseudoPause = false;
            this.play();
        }
        if (!b && this.r == AVPlayer$playerState.PLAYING) {
            this.pseudoPause = true;
            this.pause();
        }
    }
    
    public void onPrepared(final MediaPlayer s) {
        this.s = s;
        super.seekTo(1000 * this.d);
        while (true) {
            if (!this.t) {
                break Label_0033;
            }
            try {
                this.s.setVolume(0.0f, 0.0f);
                Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> onPrepared");
                this.f();
                if (this.b != null) {
                    this.b.onPrepared(this);
                }
                this.l = true;
                this.c();
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: unable to set volume");
                continue;
            }
            break;
        }
    }
    
    protected void onVisibilityChanged(final View view, final int n) {
        this.onIMVisibilityChanged(n == 0);
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        try {
            super.onWindowVisibilityChanged(n);
            if (Build$VERSION.SDK_INT < 8) {
                this.onIMVisibilityChanged(n == 0);
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: onWindowVisibilityChanged: Something went wrong");
        }
    }
    
    public void pause() {
        synchronized (this) {
            if (this.r == null || this.r != AVPlayer$playerState.PAUSED) {
                super.pause();
                this.r = AVPlayer$playerState.PAUSED;
                this.i();
                Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> pause");
                this.b(AVPlayer.g);
            }
        }
    }
    
    public void play() {
        this.b();
    }
    
    public void releasePlayer(final boolean b) {
        if (this.n != null) {
            this.n.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                public boolean onTouch(final View view, final MotionEvent motionEvent) {
                    return false;
                }
            });
        }
        while (true) {
            while (true) {
                Label_0107: {
                    synchronized (this) {
                        if (!this.k()) {
                            // monitorexit(this)
                            this.r = AVPlayer$playerState.RELEASED;
                            if (this.q == -1) {
                                break Label_0107;
                            }
                            final int n = this.q;
                            this.a(b, n);
                            this.i();
                            this.stopPlayback();
                            super.setMediaController((MediaController)null);
                            this.d();
                            if (this.b != null) {
                                this.b.onComplete(this);
                                this.b = null;
                            }
                        }
                        return;
                    }
                }
                final int n = Math.round(this.getCurrentPosition() / 1000);
                continue;
            }
        }
    }
    
    public void seekPlayer(final int n) {
        if (n <= this.getDuration()) {
            this.seekTo(n);
        }
    }
    
    public void setAutoPlay(final boolean autoPlay) {
        if (this.a != null) {
            this.a.autoPlay = autoPlay;
        }
    }
    
    public void setBackGroundLayout(final ViewGroup u) {
        this.u = u;
    }
    
    public void setListener(final AVPlayerListener b) {
        this.b = b;
    }
    
    public void setPlayData(final JSController$PlayerProperties a, final String c) {
        this.a = a;
        this.c = c;
        if (a.audioMuted) {
            this.t = true;
        }
        this.c = this.c.trim();
        this.c = a(this.c);
        if (this.o == null) {
            this.o = Bitmap.createBitmap(10, 10, Bitmap$Config.ARGB_8888);
            if (Build$VERSION.SDK_INT >= 8) {
                try {
                    this.o = WrapperFunctions.getVideoBitmap(this.c);
                }
                catch (Exception ex) {
                    Log.internal("[InMobi]-[RE]-4.4.3", "IMAVPlayer: unable to get video bitmap");
                }
            }
        }
    }
    
    public void setPlayDimensions(final JSController$Dimensions v) {
        this.v = v;
    }
    
    public void setVolume(final int n) {
        if (n != this.p && this.r != AVPlayer$playerState.RELEASED) {
            this.b(n);
        }
    }
    
    public void show() {
        this.r = AVPlayer$playerState.SHOWING;
        this.setVisibility(0);
    }
    
    public void start() {
        synchronized (this) {
            if (this.n != null && !this.m()) {
                this.n.setOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
                    public boolean onTouch(final View view, final MotionEvent motionEvent) {
                        return motionEvent.getAction() == 2;
                    }
                });
            }
            if (this.r == null || this.r != AVPlayer$playerState.PLAYING) {
                this.seekPlayer(1000 * this.d);
                super.start();
                this.r = AVPlayer$playerState.PLAYING;
                this.m = false;
                this.h();
                Log.debug("[InMobi]-[RE]-4.4.3", "AVPlayer-> start playing");
                if (this.l) {
                    this.b(AVPlayer.f);
                }
            }
        }
    }
    
    public void unMute() {
        if (this.s != null && this.t) {
            this.b(this.p);
        }
    }
}
