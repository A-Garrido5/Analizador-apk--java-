// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.controller.util;

import com.inmobi.re.configs.Initializer;
import java.io.IOException;
import com.inmobi.commons.internal.Log;
import android.graphics.Rect;
import java.io.InputStream;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory$Options;
import java.io.FileInputStream;
import com.inmobi.commons.thirdparty.Base64;
import java.io.OutputStream;
import android.graphics.Bitmap$CompressFormat;
import java.io.ByteArrayOutputStream;
import android.graphics.Bitmap;
import android.database.Cursor;
import android.content.Context;
import android.net.Uri;

public class ImageProcessing
{
    public static String convertMediaUriToPath(final Uri uri, final Context context) {
        final Cursor query = context.getContentResolver().query(uri, new String[] { "_data" }, (String)null, (String[])null, (String)null);
        final int columnIndexOrThrow = query.getColumnIndexOrThrow("_data");
        query.moveToFirst();
        final String string = query.getString(columnIndexOrThrow);
        query.close();
        return string;
    }
    
    public static String getBase64EncodedImage(final Bitmap bitmap, final Context context) {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap$CompressFormat.JPEG, getDefaultImgQuality(context), (OutputStream)byteArrayOutputStream);
        return Base64.encodeToString(byteArrayOutputStream.toByteArray(), 2);
    }
    
    public static Bitmap getCompressedBitmap(final String s, final Context context) {
        try {
            final int n = getDefaultImgWidth(context) * getDefaultImgHeight(context);
            final FileInputStream fileInputStream = new FileInputStream(s);
            final BitmapFactory$Options bitmapFactory$Options = new BitmapFactory$Options();
            bitmapFactory$Options.inJustDecodeBounds = true;
            BitmapFactory.decodeStream((InputStream)fileInputStream, (Rect)null, bitmapFactory$Options);
            fileInputStream.close();
            int n2;
            for (n2 = 1; bitmapFactory$Options.outWidth * bitmapFactory$Options.outHeight * (1.0 / Math.pow(n2, 2.0)) > n; ++n2) {}
            final FileInputStream fileInputStream2 = new FileInputStream(s);
            Bitmap bitmap;
            if (n2 > 1) {
                final int inSampleSize = n2 - 1;
                final BitmapFactory$Options bitmapFactory$Options2 = new BitmapFactory$Options();
                bitmapFactory$Options2.inSampleSize = inSampleSize;
                final Bitmap decodeStream = BitmapFactory.decodeStream((InputStream)fileInputStream2, (Rect)null, bitmapFactory$Options2);
                final int height = decodeStream.getHeight();
                final int width = decodeStream.getWidth();
                final double sqrt = Math.sqrt(n / (width / height));
                bitmap = Bitmap.createScaledBitmap(decodeStream, (int)(sqrt / height * width), (int)sqrt, true);
                decodeStream.recycle();
                System.gc();
            }
            else {
                bitmap = BitmapFactory.decodeStream((InputStream)fileInputStream2);
            }
            fileInputStream2.close();
            Log.debug("[InMobi]-[RE]-4.4.3", "bitmap size - width: " + bitmap.getWidth() + ", height: " + bitmap.getHeight());
            return bitmap;
        }
        catch (IOException ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", ex.getMessage(), ex);
            return null;
        }
    }
    
    public static int getDefaultImgHeight(final Context context) {
        return Initializer.getConfigParams().getPicHeight();
    }
    
    public static int getDefaultImgQuality(final Context context) {
        return Initializer.getConfigParams().getPicQuality();
    }
    
    public static int getDefaultImgWidth(final Context context) {
        return Initializer.getConfigParams().getPicWidth();
    }
}
