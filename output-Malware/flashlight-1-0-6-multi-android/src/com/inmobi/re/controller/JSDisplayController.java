// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.controller;

import org.json.JSONException;
import com.inmobi.re.container.mraidimpl.MRAIDExpandController;
import com.inmobi.re.container.IMWebView$ViewState;
import org.json.JSONObject;
import com.inmobi.commons.metric.EventType;
import com.inmobi.commons.metric.EventLog;
import com.inmobi.commons.internal.ApiStatCollector$ApiEventType;
import com.inmobi.commons.internal.ApiStatCollector;
import android.view.View;
import android.view.Display;
import com.inmobi.commons.internal.Log;
import com.inmobi.commons.internal.InternalSDKUtil;
import android.app.Activity;
import android.util.DisplayMetrics;
import android.content.Context;
import com.inmobi.re.container.IMWebView;
import android.view.WindowManager;

public class JSDisplayController extends JSController
{
    private WindowManager a;
    private float b;
    private JSController$OrientationProperties c;
    private JSController$ResizeProperties d;
    
    public JSDisplayController(final IMWebView imWebView, final Context context) {
        super(imWebView, context);
        this.c = null;
        this.d = null;
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        this.a = (WindowManager)context.getSystemService("window");
        this.a.getDefaultDisplay().getMetrics(displayMetrics);
        this.b = ((Activity)this.mContext).getResources().getDisplayMetrics().density;
    }
    
    private JSController$ExpandProperties a(final JSController$ExpandProperties jsController$ExpandProperties) {
        final Display defaultDisplay = this.a.getDefaultDisplay();
        final int widthPixels = ((Activity)this.mContext).getResources().getDisplayMetrics().widthPixels;
        final int heightPixels = ((Activity)this.mContext).getResources().getDisplayMetrics().heightPixels;
        final View viewById = ((Activity)this.mContext).getWindow().findViewById(16908290);
        jsController$ExpandProperties.topStuff = viewById.getTop();
        jsController$ExpandProperties.bottomStuff = heightPixels - viewById.getBottom();
        int displayRotation = InternalSDKUtil.getDisplayRotation(defaultDisplay);
        if (InternalSDKUtil.isDefOrientationLandscape(displayRotation, widthPixels, heightPixels)) {
            if (++displayRotation > 3) {
                displayRotation = 0;
            }
            if (InternalSDKUtil.isTablet(this.mContext)) {
                this.imWebView.isTablet = true;
            }
        }
        final int n = displayRotation;
        Log.debug("[InMobi]-[RE]-4.4.3", "Device current rotation: " + n);
        Log.debug("[InMobi]-[RE]-4.4.3", "Density of device: " + this.b);
        jsController$ExpandProperties.width *= (int)this.b;
        jsController$ExpandProperties.height *= (int)this.b;
        jsController$ExpandProperties.x *= (int)this.b;
        jsController$ExpandProperties.y *= (int)this.b;
        jsController$ExpandProperties.currentX = 0;
        jsController$ExpandProperties.currentY = 0;
        this.imWebView.publisherOrientation = ((Activity)this.imWebView.getContext()).getRequestedOrientation();
        if (n == 0 || n == 2) {
            jsController$ExpandProperties.rotationAtExpand = "portrait";
        }
        else {
            jsController$ExpandProperties.rotationAtExpand = "landscape";
        }
        if (jsController$ExpandProperties.height <= 0 || jsController$ExpandProperties.width <= 0) {
            jsController$ExpandProperties.height = heightPixels;
            jsController$ExpandProperties.width = widthPixels;
            jsController$ExpandProperties.zeroWidthHeight = true;
        }
        if (n == 0 || n == 2) {
            jsController$ExpandProperties.portraitWidthRequested = jsController$ExpandProperties.width;
            jsController$ExpandProperties.portraitHeightRequested = jsController$ExpandProperties.height;
        }
        else {
            jsController$ExpandProperties.portraitWidthRequested = jsController$ExpandProperties.height;
            jsController$ExpandProperties.portraitHeightRequested = jsController$ExpandProperties.width;
        }
        Log.debug("[InMobi]-[RE]-4.4.3", "Device Width: " + widthPixels + " Device height: " + heightPixels);
        final int height = heightPixels - jsController$ExpandProperties.topStuff;
        if (jsController$ExpandProperties.width > widthPixels) {
            jsController$ExpandProperties.width = widthPixels;
        }
        if (jsController$ExpandProperties.height > height) {
            jsController$ExpandProperties.height = height;
        }
        final int[] array = new int[2];
        this.imWebView.getLocationOnScreen(array);
        if (jsController$ExpandProperties.x < 0) {
            jsController$ExpandProperties.x = array[0];
        }
        if (jsController$ExpandProperties.y < 0) {
            jsController$ExpandProperties.y = array[1] - jsController$ExpandProperties.topStuff;
            Log.debug("[InMobi]-[RE]-4.4.3", "topStuff: " + jsController$ExpandProperties.topStuff + " ,bottomStuff: " + jsController$ExpandProperties.bottomStuff);
        }
        Log.debug("[InMobi]-[RE]-4.4.3", "loc 0: " + array[0] + " loc 1: " + array[1]);
        final int n2 = widthPixels - (jsController$ExpandProperties.x + jsController$ExpandProperties.width);
        if (n2 < 0) {
            jsController$ExpandProperties.x += n2;
            if (jsController$ExpandProperties.x < 0) {
                jsController$ExpandProperties.width += jsController$ExpandProperties.x;
                jsController$ExpandProperties.x = 0;
            }
        }
        final int n3 = height - (jsController$ExpandProperties.y + jsController$ExpandProperties.height);
        if (n3 < 0) {
            jsController$ExpandProperties.y += n3;
            if (jsController$ExpandProperties.y < 0) {
                jsController$ExpandProperties.height += jsController$ExpandProperties.y;
                jsController$ExpandProperties.y = 0;
            }
        }
        jsController$ExpandProperties.currentX = jsController$ExpandProperties.x;
        jsController$ExpandProperties.currentY = jsController$ExpandProperties.y;
        Log.debug("[InMobi]-[RE]-4.4.3", "final expanded width after density : " + jsController$ExpandProperties.width + "final expanded height after density " + jsController$ExpandProperties.height + "portrait width requested :" + jsController$ExpandProperties.portraitWidthRequested + "portrait height requested :" + jsController$ExpandProperties.portraitHeightRequested);
        return jsController$ExpandProperties;
    }
    
    private void a(final JSController$ExpandProperties jsController$ExpandProperties, final JSController$ExpandProperties jsController$ExpandProperties2) {
        jsController$ExpandProperties.width = jsController$ExpandProperties2.width;
        jsController$ExpandProperties.height = jsController$ExpandProperties2.height;
        jsController$ExpandProperties.x = jsController$ExpandProperties2.x;
        jsController$ExpandProperties.y = jsController$ExpandProperties2.y;
        jsController$ExpandProperties.actualWidthRequested = jsController$ExpandProperties2.actualWidthRequested;
        jsController$ExpandProperties.actualHeightRequested = jsController$ExpandProperties2.actualHeightRequested;
        jsController$ExpandProperties.lockOrientation = jsController$ExpandProperties2.lockOrientation;
        jsController$ExpandProperties.isModal = jsController$ExpandProperties2.isModal;
        jsController$ExpandProperties.useCustomClose = jsController$ExpandProperties2.useCustomClose;
        jsController$ExpandProperties.orientation = jsController$ExpandProperties2.orientation;
        jsController$ExpandProperties.topStuff = jsController$ExpandProperties2.topStuff;
        jsController$ExpandProperties.bottomStuff = jsController$ExpandProperties2.bottomStuff;
        jsController$ExpandProperties.portraitWidthRequested = jsController$ExpandProperties2.portraitWidthRequested;
        jsController$ExpandProperties.portraitHeightRequested = jsController$ExpandProperties2.portraitHeightRequested;
        jsController$ExpandProperties.zeroWidthHeight = jsController$ExpandProperties2.zeroWidthHeight;
        jsController$ExpandProperties.rotationAtExpand = jsController$ExpandProperties2.rotationAtExpand;
        jsController$ExpandProperties.currentX = jsController$ExpandProperties2.currentX;
        jsController$ExpandProperties.currentY = jsController$ExpandProperties2.currentY;
    }
    
    private void a(final JSController$ResizeProperties jsController$ResizeProperties, final JSController$ResizeProperties jsController$ResizeProperties2) {
        jsController$ResizeProperties.width = jsController$ResizeProperties2.width;
        jsController$ResizeProperties.height = jsController$ResizeProperties2.height;
        jsController$ResizeProperties.allowOffscreen = jsController$ResizeProperties2.allowOffscreen;
        jsController$ResizeProperties.customClosePosition = jsController$ResizeProperties2.customClosePosition;
        jsController$ResizeProperties.offsetX = jsController$ResizeProperties2.offsetX;
        jsController$ResizeProperties.offsetY = jsController$ResizeProperties2.offsetY;
    }
    
    public void close() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(13), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> close");
        if (this.imWebView.mOriginalWebviewForExpandUrl != null) {
            this.imWebView.mOriginalWebviewForExpandUrl.close();
        }
        final boolean expanded = this.imWebView.isExpanded();
        Activity expandedActivity = null;
        if (expanded) {
            expandedActivity = this.imWebView.getExpandedActivity();
        }
        this.imWebView.close();
        if (expandedActivity != null) {
            expandedActivity.finish();
        }
    }
    
    public void expand(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(11), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> expand: url: " + s);
        try {
            if (this.imWebView.getStateVariable() == IMWebView$ViewState.EXPANDED || this.imWebView.getStateVariable() == IMWebView$ViewState.EXPANDING) {
                Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> Already expanded state");
                return;
            }
            if (this.imWebView.getStateVariable() == IMWebView$ViewState.HIDDEN) {
                Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> Expand cannot be called in hidden state. Doing nothing.");
                return;
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception while expanding the ad. ", ex);
            return;
        }
        this.imWebView.mExpandController.useLockOrient = false;
        if (this.imWebView.getStateVariable() != IMWebView$ViewState.DEFAULT && this.imWebView.getStateVariable() != IMWebView$ViewState.RESIZED && this.imWebView.getStateVariable() != IMWebView$ViewState.RESIZING) {
            this.imWebView.raiseError("Current state is not default", "expand");
            return;
        }
        if (this.imWebView.getStateVariable() == IMWebView$ViewState.DEFAULT && this.imWebView.mIsInterstitialAd) {
            this.imWebView.raiseError("Expand cannot be called on interstitial ad", "expand");
            return;
        }
        this.a(this.temporaryexpProps, this.expProps);
        final JSController$ExpandProperties temporaryexpProps = this.temporaryexpProps;
        this.temporaryexpProps.height = 0;
        temporaryexpProps.width = 0;
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> At the time of expand the properties are: Expandable width: " + this.temporaryexpProps.width + " Expandable height: " + this.temporaryexpProps.height + " Expandable orientation: " + this.temporaryexpProps.orientation + " Expandable lock orientation: " + this.temporaryexpProps.lockOrientation + " Expandable Modality: " + this.temporaryexpProps.isModal + " Expandable Use custom close " + this.temporaryexpProps.useCustomClose);
        this.expProps = this.a(this.expProps);
        if (this.c != null) {
            this.imWebView.mExpandController.lockOrientationValueForExpand = this.c.allowOrientationChange;
            this.imWebView.mExpandController.orientationValueForExpand = this.c.forceOrientation;
        }
        else {
            final MRAIDExpandController mExpandController = this.imWebView.mExpandController;
            final boolean lockOrientation = this.temporaryexpProps.lockOrientation;
            boolean lockOrientationValueForExpand = false;
            if (!lockOrientation) {
                lockOrientationValueForExpand = true;
            }
            mExpandController.lockOrientationValueForExpand = lockOrientationValueForExpand;
            this.imWebView.mExpandController.orientationValueForExpand = this.temporaryexpProps.orientation;
        }
        this.imWebView.expand(s, this.a(this.temporaryexpProps));
    }
    
    public String getExpandProperties() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(4), null));
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("width", this.expProps.width);
            jsonObject.put("height", this.expProps.height);
            jsonObject.put("isModal", this.expProps.isModal);
            jsonObject.put("useCustomClose", this.expProps.useCustomClose);
            jsonObject.put("lockOrientation", this.expProps.lockOrientation);
            jsonObject.put("orientation", (Object)this.expProps.orientation);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Failed to get screen size");
            return jsonObject.toString();
        }
    }
    
    public String getOrientation() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(16), null));
        try {
            final String currentRotation = this.imWebView.getCurrentRotation(this.imWebView.getIntegerCurrentRotation());
            Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> getOrientation: " + currentRotation);
            return currentRotation;
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Error getOrientation: " + "-1", ex);
            return "-1";
        }
    }
    
    public String getOrientationProperties() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(5), null));
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("allowOrientationChange", this.c.allowOrientationChange);
            jsonObject.put("orientation", (Object)this.c.forceOrientation);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Failed to get screen size");
            return jsonObject.toString();
        }
    }
    
    public String getPlacementType() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(15), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> getPlacementType");
        return this.imWebView.getPlacementType();
    }
    
    public String getResizeProperties() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(6), null));
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("width", this.d.width);
            jsonObject.put("height", this.d.height);
            jsonObject.put("offsetX", this.d.offsetX);
            jsonObject.put("offsetY", this.d.offsetY);
            jsonObject.put("customClosePosition", (Object)this.d.customClosePosition);
            jsonObject.put("allowOffscreen", this.d.allowOffscreen);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Failed to get screen size");
            return jsonObject.toString();
        }
    }
    
    public String getState() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(3), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> getState");
        return this.imWebView.getState();
    }
    
    public boolean isViewable() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(14), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> isViewable");
        return this.imWebView.isViewable();
    }
    
    public void onOrientationChange() {
        this.imWebView.onOrientationEventChange();
    }
    
    public void open(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(1), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> open: url: " + s);
        this.imWebView.openURL(s);
    }
    
    public void reset() {
        if (this.expProps != null) {
            this.expProps.reinitializeExpandProperties();
        }
        if (this.d != null) {
            this.d.initializeResizeProperties();
        }
    }
    
    public void resize() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(12), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> resize");
        try {
            if (this.imWebView.getStateVariable() == IMWebView$ViewState.RESIZING) {
                Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> Already resize state");
                return;
            }
            if (this.imWebView.getStateVariable() == IMWebView$ViewState.HIDDEN) {
                Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> Resize cannot be called in hidden state. Doing nothing.");
                return;
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception while expanding the ad. ", ex);
            return;
        }
        if (this.imWebView.getStateVariable() != IMWebView$ViewState.DEFAULT && this.imWebView.getStateVariable() != IMWebView$ViewState.RESIZED) {
            this.imWebView.raiseError("Current state is neither default nor resized", "resize");
            return;
        }
        if (this.imWebView.mIsInterstitialAd) {
            this.imWebView.raiseError("Resize cannot be called on interstitial ad", "resize");
            return;
        }
        final JSController$ResizeProperties jsController$ResizeProperties = new JSController$ResizeProperties();
        this.a(jsController$ResizeProperties, this.d);
        jsController$ResizeProperties.width *= (int)this.imWebView.getDensity();
        jsController$ResizeProperties.height *= (int)this.imWebView.getDensity();
        jsController$ResizeProperties.offsetX *= (int)this.imWebView.getDensity();
        jsController$ResizeProperties.offsetY *= (int)this.imWebView.getDensity();
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> At the time of resize the properties are: Resize width: " + jsController$ResizeProperties.width + " Resize height: " + jsController$ResizeProperties.height + " Resize offsetX: " + jsController$ResizeProperties.offsetX + " Resize offsetY: " + jsController$ResizeProperties.offsetY + " customClosePosition: " + jsController$ResizeProperties.customClosePosition + " allowOffscreen: " + jsController$ResizeProperties.allowOffscreen);
        this.imWebView.resize(jsController$ResizeProperties);
    }
    
    public void setExpandProperties(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(7), null));
        try {
            this.expProps = (JSController$ExpandProperties)JSController.getFromJSON(new JSONObject(s), JSController$ExpandProperties.class);
            this.expProps.isModal = true;
            Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> ExpandProperties is set: Expandable Width: " + this.expProps.width + " Expandable height: " + this.expProps.height + " Expandable orientation: " + this.expProps.orientation + " Expandable lock orientation: " + this.expProps.lockOrientation + " Expandable Modality: " + this.expProps.isModal + " Expandable Use Custom close: " + this.expProps.useCustomClose);
            this.imWebView.setCustomClose(this.expProps.useCustomClose);
            if (this.d == null) {
                this.imWebView.setOrientationPropertiesForInterstitial(!this.expProps.lockOrientation, this.expProps.orientation);
            }
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception while setting the expand properties " + ex);
        }
    }
    
    public void setOrientationProperties(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(8), null));
        try {
            this.c = (JSController$OrientationProperties)JSController.getFromJSON(new JSONObject(s), JSController$OrientationProperties.class);
            Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> OrientationProperties is set: Expandable orientation: " + this.expProps.orientation + " Expandable lock orientation: " + this.expProps.lockOrientation);
            this.imWebView.setOrientationPropertiesForInterstitial(this.c.allowOrientationChange, this.c.forceOrientation);
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception while setting the expand properties " + ex);
        }
    }
    
    public void setResizeProperties(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(9), null));
        try {
            this.d = (JSController$ResizeProperties)JSController.getFromJSON(new JSONObject(s), JSController$ResizeProperties.class);
            Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> ResizeProperties is set: Resize Width: " + this.d.width + " Resize height: " + this.d.height + " Resize offsetX: " + this.d.offsetX + " Resize offsetY: " + this.d.offsetY + " customClosePosition: " + this.d.customClosePosition + " allowOffscreen: " + this.d.allowOffscreen);
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception while setting the expand properties " + ex);
        }
    }
    
    @Override
    public void stopAllListeners() {
    }
    
    public void useCustomClose(final boolean customClose) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(10), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSDisplayController-> useCustomClose" + customClose);
        this.imWebView.setCustomClose(customClose);
    }
}
