// 
// Decompiled by Procyon v0.5.30
// 

package com.inmobi.re.controller;

import com.inmobi.re.configs.Initializer;
import java.util.TimerTask;
import java.util.Timer;
import android.os.Parcelable;
import android.content.ContentValues;
import android.content.pm.ResolveInfo;
import android.os.Vibrator;
import android.provider.MediaStore$Images$Media;
import java.util.Random;
import java.io.File;
import com.inmobi.commons.internal.InternalSDKUtil;
import com.inmobi.re.container.mraidimpl.AudioTriggerer;
import android.annotation.SuppressLint;
import android.content.IntentFilter;
import android.app.DownloadManager$Query;
import android.content.BroadcastReceiver;
import java.util.Iterator;
import com.inmobi.commons.InMobi;
import android.view.WindowManager;
import android.util.DisplayMetrics;
import org.json.JSONException;
import android.graphics.Bitmap;
import com.inmobi.re.controller.util.ImageProcessing;
import com.inmobi.re.controller.util.StartActivityForResultCallback;
import android.content.Intent;
import com.inmobi.androidsdk.IMBrowserActivity;
import android.webkit.URLUtil;
import com.inmobi.commons.internal.Log;
import org.json.JSONObject;
import com.inmobi.commons.metric.EventType;
import com.inmobi.commons.metric.EventLog;
import com.inmobi.commons.internal.ApiStatCollector$ApiEventType;
import com.inmobi.commons.internal.ApiStatCollector;
import android.content.pm.PackageManager;
import android.os.Binder;
import java.util.Date;
import java.util.GregorianCalendar;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.text.TextUtils;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build$VERSION;
import java.util.HashMap;
import android.content.Context;
import com.inmobi.re.container.IMWebView;
import java.util.Locale;
import com.inmobi.re.container.mraidimpl.AudioTriggerCallback;
import java.util.Map;
import android.app.DownloadManager;
import java.text.SimpleDateFormat;

public class JSUtilityController extends JSController
{
    public static SimpleDateFormat[] calendarUntiFormats;
    public static SimpleDateFormat[] formats;
    DownloadManager a;
    Object b;
    int c;
    private JSDisplayController d;
    private boolean e;
    private Map f;
    private AudioTriggerCallback g;
    private boolean h;
    private boolean i;
    
    static {
        JSUtilityController.formats = new SimpleDateFormat[] { new SimpleDateFormat("yyyy-MM-dd'T'hh:mmZ", Locale.ENGLISH), new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", Locale.ENGLISH), new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz", Locale.ENGLISH), new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH), new SimpleDateFormat("yyyyMMddHHmmssZ", Locale.ENGLISH), new SimpleDateFormat("yyyyMMddHHmm", Locale.ENGLISH), new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH), new SimpleDateFormat("yyyyMM", Locale.ENGLISH), new SimpleDateFormat("yyyy", Locale.ENGLISH) };
        JSUtilityController.calendarUntiFormats = new SimpleDateFormat[] { new SimpleDateFormat("yyyyMMdd'T'HHmmssZ"), new SimpleDateFormat("yyyyMMdd'T'HHmm"), new SimpleDateFormat("yyyyMMdd") };
    }
    
    public JSUtilityController(final IMWebView imWebView, final Context context) {
        super(imWebView, context);
        this.a = null;
        this.e = false;
        this.c = 0;
        this.f = new HashMap();
        this.g = new d(this);
        this.h = false;
        this.i = false;
        imWebView.addJavascriptInterface((Object)(this.d = new JSDisplayController(imWebView, context)), "displayController");
    }
    
    private int a() {
        final String[] array = { "_id", "title" };
        Cursor cursor;
        if (Build$VERSION.SDK_INT >= 8) {
            cursor = this.imWebView.getActivity().getContentResolver().query(Uri.parse("content://com.android.calendar/events"), array, (String)null, (String[])null, (String)null);
        }
        else {
            cursor = this.imWebView.getActivity().getContentResolver().query(Uri.parse("content://calendar/events"), array, (String)null, (String[])null, (String)null);
        }
        if (cursor != null && cursor.moveToLast()) {
            final int columnIndex = cursor.getColumnIndex("title");
            final int columnIndex2 = cursor.getColumnIndex("_id");
            final String string = cursor.getString(columnIndex);
            final String string2 = cursor.getString(columnIndex2);
            if (string != null) {
                return Integer.parseInt(string2);
            }
        }
        return 0;
    }
    
    private int a(final String s, final int n) {
        try {
            return Integer.parseInt(s);
        }
        catch (NumberFormatException ex) {
            return n;
        }
    }
    
    private String b(String s) {
        if (TextUtils.isEmpty((CharSequence)s)) {
            s = null;
        }
        else if (!s.startsWith("tel:")) {
            final StringBuilder sb = new StringBuilder("tel:");
            sb.append(s);
            return sb.toString();
        }
        return s;
    }
    
    private int[] b() {
        final int[] array = new int[2];
        try {
            final FrameLayout frameLayout = (FrameLayout)((ViewGroup)this.imWebView.getOriginalParent()).getRootView().findViewById(16908290);
            array[0] = (int)(frameLayout.getWidth() / this.imWebView.getDensity());
            array[1] = (int)(frameLayout.getHeight() / this.imWebView.getDensity());
            return array;
        }
        catch (Exception ex) {
            array[array[1] = 0] = 0;
            return array;
        }
    }
    
    private void c() {
        if (this.i) {
            this.registerMicListener();
        }
    }
    
    private void c(final String s) {
        new Thread() {
            @Override
            public void run() {
                // 
                // This method could not be decompiled.
                // 
                // Original Bytecode:
                // 
                //     0: aconst_null    
                //     1: astore_1       
                //     2: aload_0        
                //     3: getfield        com/inmobi/re/controller/JSUtilityController$d.a:Ljava/lang/String;
                //     6: ldc             "%25"
                //     8: ldc             "%"
                //    10: invokevirtual   java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
                //    13: astore          4
                //    15: ldc             "[InMobi]-[RE]-4.4.3"
                //    17: new             Ljava/lang/StringBuilder;
                //    20: dup            
                //    21: ldc             "Pinging URL: "
                //    23: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //    26: aload           4
                //    28: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
                //    31: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //    34: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;)V
                //    37: new             Ljava/net/URL;
                //    40: dup            
                //    41: aload           4
                //    43: invokespecial   java/net/URL.<init>:(Ljava/lang/String;)V
                //    46: invokevirtual   java/net/URL.openConnection:()Ljava/net/URLConnection;
                //    49: checkcast       Ljava/net/HttpURLConnection;
                //    52: astore          5
                //    54: aload           5
                //    56: sipush          20000
                //    59: invokevirtual   java/net/HttpURLConnection.setConnectTimeout:(I)V
                //    62: aload           5
                //    64: ldc             "GET"
                //    66: invokevirtual   java/net/HttpURLConnection.setRequestMethod:(Ljava/lang/String;)V
                //    69: aload           5
                //    71: invokestatic    com/inmobi/commons/internal/InternalSDKUtil.addCommonPropertiesToConnection:(Ljava/net/HttpURLConnection;)V
                //    74: ldc             "[InMobi]-[RE]-4.4.3"
                //    76: new             Ljava/lang/StringBuilder;
                //    79: dup            
                //    80: ldc             "Async Ping Connection Response Code: "
                //    82: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
                //    85: aload           5
                //    87: invokevirtual   java/net/HttpURLConnection.getResponseCode:()I
                //    90: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
                //    93: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
                //    96: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;)V
                //    99: aload           5
                //   101: ifnull          109
                //   104: aload           5
                //   106: invokevirtual   java/net/HttpURLConnection.disconnect:()V
                //   109: return         
                //   110: astore_3       
                //   111: ldc             "[InMobi]-[RE]-4.4.3"
                //   113: ldc             "Error doing async Ping. "
                //   115: aload_3        
                //   116: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   119: aload_1        
                //   120: ifnull          109
                //   123: aload_1        
                //   124: invokevirtual   java/net/HttpURLConnection.disconnect:()V
                //   127: return         
                //   128: astore_2       
                //   129: aload_1        
                //   130: ifnull          137
                //   133: aload_1        
                //   134: invokevirtual   java/net/HttpURLConnection.disconnect:()V
                //   137: aload_2        
                //   138: athrow         
                //   139: astore          7
                //   141: aload           5
                //   143: astore_1       
                //   144: aload           7
                //   146: astore_2       
                //   147: goto            129
                //   150: astore          6
                //   152: aload           5
                //   154: astore_1       
                //   155: aload           6
                //   157: astore_3       
                //   158: goto            111
                //    Exceptions:
                //  Try           Handler
                //  Start  End    Start  End    Type                 
                //  -----  -----  -----  -----  ---------------------
                //  2      54     110    111    Ljava/lang/Exception;
                //  2      54     128    129    Any
                //  54     99     150    161    Ljava/lang/Exception;
                //  54     99     139    150    Any
                //  111    119    128    129    Any
                // 
                // The error that occurred was:
                // 
                // java.lang.IllegalStateException: Expression is linked from several locations: Label_0109:
                //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
                //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformCall(AstMethodBodyBuilder.java:1163)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:1010)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformNode(AstMethodBodyBuilder.java:392)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformBlock(AstMethodBodyBuilder.java:333)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:294)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
                //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
                //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
                //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
                // 
                throw new IllegalStateException("An error occurred while decompiling this method.");
            }
        }.start();
    }
    
    public static GregorianCalendar convertDateString(final String s) {
        final SimpleDateFormat[] formats = JSUtilityController.formats;
        final int length = formats.length;
        int i = 0;
        while (i < length) {
            final SimpleDateFormat simpleDateFormat = formats[i];
            try {
                final Date parse = simpleDateFormat.parse(s);
                final GregorianCalendar gregorianCalendar = new GregorianCalendar();
                gregorianCalendar.setTime(parse);
                return gregorianCalendar;
            }
            catch (Exception ex) {
                ++i;
                continue;
            }
            break;
        }
        return null;
    }
    
    private void d() {
        this.i = this.h;
        this.unRegisterMicListener();
    }
    
    boolean a(final String s) {
        final PackageManager packageManager = this.imWebView.getActivity().getPackageManager();
        return packageManager.checkPermission(s, packageManager.getNameForUid(Binder.getCallingUid())) == 0;
    }
    
    public void asyncPing(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(31), null));
        try {
            Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> asyncPing: url: " + s);
            if (!URLUtil.isValidUrl(s)) {
                this.imWebView.raiseError("Invalid url", "asyncPing");
                return;
            }
            this.c(s);
        }
        catch (Exception ex) {}
    }
    
    public void cancelSaveContent(final String s) {
        this.imWebView.cancelSaveContent(s);
    }
    
    public void closeVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(50), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> closeVideo: id :" + s);
        this.imWebView.closeVideo(s);
    }
    
    public void createCalendarEvent(final String s, final String s2, final String s3, final String s4, final String s5, final String s6, final String s7, final String s8, final String s9, final String s10) {
        GregorianCalendar convertDateString;
        GregorianCalendar convertDateString2;
        try {
            if (this.a("android.permission.READ_CALENDAR") && this.a("android.permission.WRITE_CALENDAR")) {
                this.c = this.a();
            }
            ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(30), null));
            Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> createEvent: date: " + s2 + " location: " + s4 + " body: " + s5);
            if (!this.supports("calendar")) {
                Log.internal("[InMobi]-[RE]-4.4.3", "createCalendarEvent called even if it is not supported");
                this.imWebView.raiseError("createCalendarEvent called even if it is not supported", "createCalendarEvent");
                return;
            }
            convertDateString = convertDateString(s2);
            convertDateString2 = convertDateString(s3);
            if (convertDateString == null || convertDateString2 == null) {
                Log.debug("[InMobi]-[RE]-4.4.3", "exception");
                this.imWebView.raiseError("Date format is incorrect", "createCalendarEvent");
                return;
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "Error creating reminder event", ex);
            return;
        }
        final Intent intent = new Intent((Context)this.imWebView.getActivity(), (Class)IMBrowserActivity.class);
        intent.putExtra("extra_browser_type", 100);
        intent.putExtra("id", IMBrowserActivity.generateId(new StartActivityForResultCallback() {
            @Override
            public void onActivityResult(final int p0, final Intent p1) {
                // 
                // This method could not be decompiled.
                // 
                // Original Bytecode:
                // 
                //     0: aload_0        
                //     1: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //     4: ldc             "android.permission.READ_CALENDAR"
                //     6: invokevirtual   com/inmobi/re/controller/JSUtilityController.a:(Ljava/lang/String;)Z
                //     9: ifeq            455
                //    12: aload_0        
                //    13: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //    16: ldc             "android.permission.WRITE_CALENDAR"
                //    18: invokevirtual   com/inmobi/re/controller/JSUtilityController.a:(Ljava/lang/String;)Z
                //    21: ifeq            455
                //    24: aload_0        
                //    25: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //    28: invokestatic    com/inmobi/re/controller/JSUtilityController.a:(Lcom/inmobi/re/controller/JSUtilityController;)I
                //    31: istore          4
                //    33: aload_0        
                //    34: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //    37: getfield        com/inmobi/re/controller/JSUtilityController.c:I
                //    40: iload           4
                //    42: if_icmpne       53
                //    45: ldc             "[InMobi]-[RE]-4.4.3"
                //    47: ldc             "User cancelled the create calendar event"
                //    49: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;)V
                //    52: return         
                //    53: getstatic       android/os/Build$VERSION.SDK_INT:I
                //    56: bipush          8
                //    58: if_icmplt       207
                //    61: ldc             "content://com.android.calendar/events"
                //    63: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
                //    66: astore          5
                //    68: aload_0        
                //    69: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //    72: getfield        com/inmobi/re/controller/JSUtilityController.imWebView:Lcom/inmobi/re/container/IMWebView;
                //    75: invokevirtual   com/inmobi/re/container/IMWebView.getActivity:()Landroid/app/Activity;
                //    78: invokevirtual   android/app/Activity.getContentResolver:()Landroid/content/ContentResolver;
                //    81: astore          6
                //    83: new             Landroid/content/ContentValues;
                //    86: dup            
                //    87: invokespecial   android/content/ContentValues.<init>:()V
                //    90: astore          7
                //    92: aload_0        
                //    93: getfield        com/inmobi/re/controller/JSUtilityController$e.a:Ljava/lang/String;
                //    96: ldc             "tentative"
                //    98: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
                //   101: ifeq            217
                //   104: aload           7
                //   106: ldc             "eventStatus"
                //   108: iconst_0       
                //   109: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   112: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   115: aload           6
                //   117: aload           5
                //   119: aload_0        
                //   120: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //   123: invokestatic    com/inmobi/re/controller/JSUtilityController.a:(Lcom/inmobi/re/controller/JSUtilityController;)I
                //   126: i2l            
                //   127: invokestatic    android/content/ContentUris.withAppendedId:(Landroid/net/Uri;J)Landroid/net/Uri;
                //   130: aload           7
                //   132: aconst_null    
                //   133: aconst_null    
                //   134: invokevirtual   android/content/ContentResolver.update:(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
                //   137: pop            
                //   138: aload_0        
                //   139: getfield        com/inmobi/re/controller/JSUtilityController$e.b:Ljava/lang/String;
                //   142: ifnull          455
                //   145: ldc             ""
                //   147: aload_0        
                //   148: getfield        com/inmobi/re/controller/JSUtilityController$e.b:Ljava/lang/String;
                //   151: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
                //   154: istore          9
                //   156: iload           9
                //   158: ifne            455
                //   161: aload_0        
                //   162: getfield        com/inmobi/re/controller/JSUtilityController$e.b:Ljava/lang/String;
                //   165: invokestatic    java/lang/Integer.parseInt:(Ljava/lang/String;)I
                //   168: ldc             60000
                //   170: idiv           
                //   171: istore          12
                //   173: iload           12
                //   175: ifle            318
                //   178: aload_0        
                //   179: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //   182: getfield        com/inmobi/re/controller/JSUtilityController.imWebView:Lcom/inmobi/re/container/IMWebView;
                //   185: ldc             "Reminder format is incorrect. Reminder can be set only before the event starts"
                //   187: ldc             "createCalendarEvent"
                //   189: invokevirtual   com/inmobi/re/container/IMWebView.raiseError:(Ljava/lang/String;Ljava/lang/String;)V
                //   192: return         
                //   193: astore_3       
                //   194: aload_3        
                //   195: invokevirtual   java/lang/Exception.printStackTrace:()V
                //   198: ldc             "[InMobi]-[RE]-4.4.3"
                //   200: ldc             "Exception adding reminder"
                //   202: aload_3        
                //   203: invokestatic    com/inmobi/commons/internal/Log.internal:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                //   206: return         
                //   207: ldc             "content://calendar/events"
                //   209: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
                //   212: astore          5
                //   214: goto            68
                //   217: aload_0        
                //   218: getfield        com/inmobi/re/controller/JSUtilityController$e.a:Ljava/lang/String;
                //   221: ldc             "confirmed"
                //   223: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
                //   226: ifeq            243
                //   229: aload           7
                //   231: ldc             "eventStatus"
                //   233: iconst_1       
                //   234: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   237: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   240: goto            115
                //   243: aload_0        
                //   244: getfield        com/inmobi/re/controller/JSUtilityController$e.a:Ljava/lang/String;
                //   247: ldc             "cancelled"
                //   249: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
                //   252: ifeq            115
                //   255: aload           7
                //   257: ldc             "eventStatus"
                //   259: iconst_2       
                //   260: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   263: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   266: goto            115
                //   269: astore          10
                //   271: aload_0        
                //   272: getfield        com/inmobi/re/controller/JSUtilityController$e.b:Ljava/lang/String;
                //   275: invokestatic    com/inmobi/re/controller/JSUtilityController.convertDateString:(Ljava/lang/String;)Ljava/util/GregorianCalendar;
                //   278: invokevirtual   java/util/GregorianCalendar.getTimeInMillis:()J
                //   281: aload_0        
                //   282: getfield        com/inmobi/re/controller/JSUtilityController$e.c:Ljava/lang/String;
                //   285: invokestatic    com/inmobi/re/controller/JSUtilityController.convertDateString:(Ljava/lang/String;)Ljava/util/GregorianCalendar;
                //   288: invokevirtual   java/util/GregorianCalendar.getTimeInMillis:()J
                //   291: lsub           
                //   292: l2i            
                //   293: ldc             60000
                //   295: idiv           
                //   296: istore          12
                //   298: goto            173
                //   301: astore          11
                //   303: aload_0        
                //   304: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //   307: getfield        com/inmobi/re/controller/JSUtilityController.imWebView:Lcom/inmobi/re/container/IMWebView;
                //   310: ldc             "Reminder format is incorrect. Invalid date"
                //   312: ldc             "createCalendarEvent"
                //   314: invokevirtual   com/inmobi/re/container/IMWebView.raiseError:(Ljava/lang/String;Ljava/lang/String;)V
                //   317: return         
                //   318: iload           12
                //   320: ineg           
                //   321: istore          13
                //   323: new             Landroid/content/ContentValues;
                //   326: dup            
                //   327: invokespecial   android/content/ContentValues.<init>:()V
                //   330: astore          14
                //   332: aload           14
                //   334: ldc             "hasAlarm"
                //   336: iconst_1       
                //   337: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   340: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   343: aload           6
                //   345: aload           5
                //   347: aload_0        
                //   348: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //   351: invokestatic    com/inmobi/re/controller/JSUtilityController.a:(Lcom/inmobi/re/controller/JSUtilityController;)I
                //   354: i2l            
                //   355: invokestatic    android/content/ContentUris.withAppendedId:(Landroid/net/Uri;J)Landroid/net/Uri;
                //   358: aload           14
                //   360: aconst_null    
                //   361: aconst_null    
                //   362: invokevirtual   android/content/ContentResolver.update:(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
                //   365: pop            
                //   366: getstatic       android/os/Build$VERSION.SDK_INT:I
                //   369: bipush          8
                //   371: if_icmplt       441
                //   374: ldc             "content://com.android.calendar/reminders"
                //   376: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
                //   379: astore          17
                //   381: new             Landroid/content/ContentValues;
                //   384: dup            
                //   385: invokespecial   android/content/ContentValues.<init>:()V
                //   388: astore          18
                //   390: aload           18
                //   392: ldc             "event_id"
                //   394: aload_0        
                //   395: getfield        com/inmobi/re/controller/JSUtilityController$e.d:Lcom/inmobi/re/controller/JSUtilityController;
                //   398: invokestatic    com/inmobi/re/controller/JSUtilityController.a:(Lcom/inmobi/re/controller/JSUtilityController;)I
                //   401: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   404: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   407: aload           18
                //   409: ldc             "method"
                //   411: iconst_1       
                //   412: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   415: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   418: aload           18
                //   420: ldc             "minutes"
                //   422: iload           13
                //   424: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
                //   427: invokevirtual   android/content/ContentValues.put:(Ljava/lang/String;Ljava/lang/Integer;)V
                //   430: aload           6
                //   432: aload           17
                //   434: aload           18
                //   436: invokevirtual   android/content/ContentResolver.insert:(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
                //   439: pop            
                //   440: return         
                //   441: ldc             "content://calendar/reminders"
                //   443: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
                //   446: astore          16
                //   448: aload           16
                //   450: astore          17
                //   452: goto            381
                //   455: return         
                //    Exceptions:
                //  Try           Handler
                //  Start  End    Start  End    Type                             
                //  -----  -----  -----  -----  ---------------------------------
                //  0      52     193    207    Ljava/lang/Exception;
                //  53     68     193    207    Ljava/lang/Exception;
                //  68     115    193    207    Ljava/lang/Exception;
                //  115    156    193    207    Ljava/lang/Exception;
                //  161    173    269    318    Ljava/lang/NumberFormatException;
                //  161    173    193    207    Ljava/lang/Exception;
                //  178    192    193    207    Ljava/lang/Exception;
                //  207    214    193    207    Ljava/lang/Exception;
                //  217    240    193    207    Ljava/lang/Exception;
                //  243    266    193    207    Ljava/lang/Exception;
                //  271    298    301    318    Ljava/lang/Exception;
                //  303    317    193    207    Ljava/lang/Exception;
                //  323    381    193    207    Ljava/lang/Exception;
                //  381    440    193    207    Ljava/lang/Exception;
                //  441    448    193    207    Ljava/lang/Exception;
                // 
                // The error that occurred was:
                // 
                // java.lang.IllegalStateException: Expression is linked from several locations: Label_0173:
                //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
                //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
                //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformCall(AstMethodBodyBuilder.java:1163)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:1010)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformByteCode(AstMethodBodyBuilder.java:554)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformExpression(AstMethodBodyBuilder.java:540)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformNode(AstMethodBodyBuilder.java:392)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.transformBlock(AstMethodBodyBuilder.java:333)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:294)
                //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
                //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
                //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
                //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
                //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
                //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
                // 
                throw new IllegalStateException("An error occurred while decompiling this method.");
            }
        }));
        intent.putExtra("eventId", s);
        intent.putExtra("action", "createCalendarEvent");
        intent.putExtra("description", s5);
        intent.putExtra("summary", s6);
        intent.putExtra("location", s4);
        intent.putExtra("start", convertDateString.getTimeInMillis());
        intent.putExtra("end", convertDateString2.getTimeInMillis());
        intent.putExtra("status", s7);
        intent.putExtra("transparency", s8);
        intent.putExtra("recurrence", s9);
        if (s10 != null && !"".equals(s10)) {
            intent.putExtra("hasAlarm", true);
        }
        this.imWebView.getActivity().startActivity(intent);
        if (this.imWebView.mListener != null) {
            this.imWebView.mListener.onLeaveApplication();
        }
    }
    
    public int getAudioVolume(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(37), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> getAudioVolume: ");
        return this.imWebView.getAudioVolume(s);
    }
    
    public String getCurrentPosition() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(18), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> getCurrentPosition");
        synchronized (this.imWebView.mutexcPos) {
            this.imWebView.sendToCPHandler();
            while (this.imWebView.acqMutexcPos.get()) {
                try {
                    this.imWebView.mutexcPos.wait();
                }
                catch (InterruptedException ex) {
                    Log.debug("[InMobi]-[RE]-4.4.3", "mutexcPos failed ", ex);
                }
            }
        }
        this.imWebView.acqMutexcPos.set(true);
        // monitorexit(o)
        return this.imWebView.curPosition.toString();
    }
    
    public String getDefaultPosition() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(19), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> getDefaultPosition");
        synchronized (this.imWebView.mutexdPos) {
            this.imWebView.sendToDPHandler();
            while (this.imWebView.acqMutexdPos.get()) {
                try {
                    this.imWebView.mutexdPos.wait();
                }
                catch (InterruptedException ex) {
                    Log.debug("[InMobi]-[RE]-4.4.3", "mutexdPos failed ", ex);
                }
            }
        }
        this.imWebView.acqMutexdPos.set(true);
        // monitorexit(o)
        Log.debug("[InMobi]-[RE]-4.4.3", "mutexdPassed" + this.imWebView.defPosition);
        return this.imWebView.defPosition.toString();
    }
    
    public String getGalleryImage() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(25), null));
        if (!this.supports("getGalleryImage")) {
            Log.internal("[InMobi]-[RE]-4.4.3", "getGalleryImage called even if it is not supported");
        }
        else {
            final Intent intent = new Intent((Context)this.imWebView.getActivity(), (Class)IMBrowserActivity.class);
            intent.putExtra("extra_browser_type", 100);
            intent.putExtra("id", IMBrowserActivity.generateId(new StartActivityForResultCallback() {
                @Override
                public void onActivityResult(final int n, final Intent intent) {
                    if (n == -1) {
                        final Bitmap compressedBitmap = ImageProcessing.getCompressedBitmap(ImageProcessing.convertMediaUriToPath(intent.getData(), JSUtilityController.this.mContext), JSUtilityController.this.mContext);
                        JSUtilityController.this.imWebView.raiseGalleryImageSelectedEvent(ImageProcessing.getBase64EncodedImage(compressedBitmap, JSUtilityController.this.mContext), compressedBitmap.getWidth(), compressedBitmap.getHeight());
                        return;
                    }
                    JSUtilityController.this.imWebView.raiseError("User did not select a picture", "getGalleryImage");
                }
            }));
            intent.putExtra("action", "getGalleryImage");
            this.imWebView.getActivity().startActivity(intent);
            if (this.imWebView.mListener != null) {
                this.imWebView.mListener.onLeaveApplication();
                return null;
            }
        }
        return null;
    }
    
    public String getMaxSize() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(20), null));
        final int[] b = this.b();
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("width", b[0]);
            jsonObject.put("height", b[1]);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            return jsonObject.toString();
        }
    }
    
    public double getMicIntensity() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(51), null));
        return this.imWebView.getLastGoodKnownMicValue();
    }
    
    public String getScreenSize() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(17), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> getScreenSize");
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)this.mContext.getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        final int n = (int)(displayMetrics.widthPixels / displayMetrics.density);
        final int n2 = (int)(displayMetrics.heightPixels / displayMetrics.density);
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("width", n);
            jsonObject.put("height", n2);
            return jsonObject.toString();
        }
        catch (JSONException ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Failed to get screen size");
            return jsonObject.toString();
        }
    }
    
    public String getSdkVersion() {
        return InMobi.getVersion();
    }
    
    public int getVideoVolume(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(45), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> getVideoVolume: ");
        return this.imWebView.getVideoVolume(s);
    }
    
    public void hideVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(48), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> hideVideo: id :" + s);
        this.imWebView.hideVideo(s);
    }
    
    public void incentCompleted(final String s) {
        try {
            final JSONObject jsonObject = new JSONObject(s);
            final HashMap<String, Object> hashMap = new HashMap<String, Object>();
            final Iterator keys = jsonObject.keys();
            while (keys.hasNext()) {
                final String s2 = keys.next();
                try {
                    hashMap.put(s2, jsonObject.get(s2));
                    continue;
                }
                catch (JSONException ex) {
                    this.imWebView.incentCompleted(null);
                    return;
                }
                break;
            }
            this.imWebView.incentCompleted(hashMap);
        }
        catch (JSONException ex2) {
            Log.internal("[InMobi]-[RE]-4.4.3", "JSON error");
            this.imWebView.incentCompleted(null);
        }
    }
    
    public boolean isAudioMuted(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(35), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> isAudioMuted: ");
        return this.imWebView.isAudioMuted(s);
    }
    
    public boolean isVideoMuted(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(43), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> isVideoMuted: ");
        return this.imWebView.isVideoMuted(s);
    }
    
    public void log(final String s) {
        Log.debug("[InMobi]-[RE]-4.4.3", "Ad Log Message: " + s);
    }
    
    public void makeCall(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(29), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> makeCall: number: " + s);
        try {
            final String b = this.b(s);
            if (b == null) {
                this.imWebView.raiseError("Bad Phone Number", "makeCall");
                return;
            }
            final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(b.toString()));
            intent.addFlags(268435456);
            this.imWebView.getActivity().startActivity(intent);
            this.imWebView.fireOnLeaveApplication();
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in making call ", ex);
            this.imWebView.raiseError("Exception in making call", "makeCall");
        }
    }
    
    public void muteAudio(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(33), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> muteAudio: ");
        this.imWebView.muteAudio(s);
    }
    
    public void muteVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(41), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> muteVideo: ");
        this.imWebView.muteVideo(s);
    }
    
    public void onUserInteraction(final String s) {
        try {
            final JSONObject jsonObject = new JSONObject(s);
            final HashMap<String, String> hashMap = new HashMap<String, String>();
            final Iterator keys = jsonObject.keys();
            while (keys.hasNext()) {
                final String s2 = keys.next();
                try {
                    hashMap.put(s2, jsonObject.getString(s2));
                }
                catch (JSONException ex) {}
            }
            this.imWebView.userInteraction(hashMap);
        }
        catch (Exception ex2) {}
    }
    
    public void openExternal(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(2), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> openExternal: url: " + s);
        this.imWebView.openExternal(s);
    }
    
    public void pauseAudio(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(39), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> pauseAudio: id :" + s);
        this.imWebView.pauseAudio(s);
    }
    
    public void pauseVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(47), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> pauseVideo: id :" + s);
        this.imWebView.pauseVideo(s);
    }
    
    public void playAudio(final String s, final boolean b, final boolean b2, final boolean b3, final String s2, final String s3, final String s4) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(32), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "playAudio: url: " + s + " autoPlay: " + b + " controls: " + b2 + " loop: " + b3 + " startStyle: " + s2 + " stopStyle: " + s3 + " id:" + s4);
        this.imWebView.playAudio(s, b, b2, b3, s2, s3, s4);
    }
    
    public void playVideo(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4, final String s2, final String s3, final String s4, final String s5, final String s6, final String s7, final String s8) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(40), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> playVideo: url: " + s + " audioMuted: " + b + " autoPlay: " + b2 + " controls: " + b3 + " loop: " + b4 + " x: " + s2 + " y: " + s3 + " width: " + s4 + " height: " + s5 + " startStyle: " + s6 + " stopStyle: " + s7 + " id:" + s8);
        final JSController$Dimensions jsController$Dimensions = new JSController$Dimensions();
        jsController$Dimensions.x = this.a(s2, -99999);
        jsController$Dimensions.y = this.a(s3, -99999);
        jsController$Dimensions.width = this.a(s4, -99999);
        jsController$Dimensions.height = this.a(s5, -99999);
        if (jsController$Dimensions.width == -99999 && jsController$Dimensions.height == -99999) {
            final int[] b5 = this.b();
            jsController$Dimensions.x = 0;
            jsController$Dimensions.y = 0;
            jsController$Dimensions.width = b5[0];
            jsController$Dimensions.height = b5[1];
        }
        this.imWebView.playVideo(s, b, b2, b3, b4, jsController$Dimensions, s6, s7, s8);
    }
    
    public void postToSocial(final int n, final String s, final String s2, String s3) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(21), null));
        if (!this.supports("postToSocial." + n)) {
            this.imWebView.raiseError("Social type " + n + " is not supported.", "postToSocial");
        }
        else {
            String s4;
            if (s == null) {
                s4 = "";
            }
            else {
                s4 = s;
            }
            if (s2 == null) {
                s4 = "";
            }
            if (s3 == null) {
                s3 = "";
            }
            final Intent intent = new Intent((Context)this.imWebView.getActivity(), (Class)IMBrowserActivity.class);
            final int generateId = IMBrowserActivity.generateId(new StartActivityForResultCallback() {
                @Override
                public void onActivityResult(final int n, final Intent intent) {
                }
            });
            intent.putExtra("extra_browser_type", 100);
            intent.putExtra("id", generateId);
            intent.putExtra("action", "postToSocial");
            intent.putExtra("socialType", n);
            intent.putExtra("text", s4);
            intent.putExtra("link", s2);
            intent.putExtra("image", s3);
            this.imWebView.getActivity().startActivity(intent);
            if (this.imWebView.mListener != null) {
                this.imWebView.mListener.onLeaveApplication();
            }
        }
    }
    
    @SuppressLint({ "NewApi" })
    public void registerBroadcastListener() {
        this.c();
        if (this.b == null && Build$VERSION.SDK_INT > 8) {
            try {
                if (this.a == null) {
                    this.a = (DownloadManager)this.imWebView.getActivity().getSystemService("download");
                }
                this.b = new BroadcastReceiver() {
                    public void onReceive(final Context context, final Intent intent) {
                        if ("android.intent.action.DOWNLOAD_COMPLETE".equals(intent.getAction())) {
                            final long longExtra = intent.getLongExtra("extra_download_id", 0L);
                            final DownloadManager$Query downloadManager$Query = new DownloadManager$Query();
                            downloadManager$Query.setFilterById(new long[] { longExtra });
                            final Cursor query = JSUtilityController.this.a.query(downloadManager$Query);
                            if (query.moveToFirst()) {
                                final int columnIndex = query.getColumnIndex("status");
                                if (16 != query.getInt(columnIndex)) {
                                    query.getInt(columnIndex);
                                    return;
                                }
                                JSUtilityController.this.imWebView.raiseError("download failed", "storePicture");
                            }
                        }
                    }
                };
                if (!this.e) {
                    this.imWebView.getActivity().registerReceiver((BroadcastReceiver)this.b, new IntentFilter("android.intent.action.DOWNLOAD_COMPLETE"));
                    return;
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "JSUtilityController-> registerBroadcastListener. Unable to register download listener", ex);
                return;
            }
            this.b = null;
        }
    }
    
    public void registerMicListener() {
        if (this.h) {
            return;
        }
        this.h = true;
        AudioTriggerer.addEventListener(this.g);
    }
    
    public void reset() {
        if (this.d != null) {
            this.d.reset();
        }
    }
    
    public void saveContent(final String s, final String s2) {
        final File file = new File(InternalSDKUtil.getContext().getExternalFilesDir((String)null) + "/im_cached_content/");
        if (file.exists()) {
            file.delete();
        }
        file.mkdir();
        final char[] charArray = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        final StringBuilder sb = new StringBuilder();
        final Random random = new Random();
        for (int i = 0; i < 20; ++i) {
            sb.append(charArray[random.nextInt(charArray.length)]);
        }
        this.imWebView.saveFile(new File(file, sb.toString()), s2, s);
    }
    
    public void seekAudio(final String s, final int n) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(38), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> seekAudio: ");
        this.imWebView.seekAudio(s, n);
    }
    
    public void seekVideo(final String s, final int n) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(46), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> seekVideo: ");
        this.imWebView.seekVideo(s, n);
    }
    
    public void sendMail(final String s, final String s2, final String s3) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(28), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> sendMail: recipient: " + s + " subject: " + s2 + " body: " + s3);
        try {
            final Intent intent = new Intent("android.intent.action.SEND");
            intent.setType("plain/text");
            intent.putExtra("android.intent.extra.EMAIL", new String[] { s });
            intent.putExtra("android.intent.extra.SUBJECT", s2);
            intent.putExtra("android.intent.extra.TEXT", s3);
            intent.addFlags(268435456);
            this.imWebView.getActivity().startActivity(Intent.createChooser(intent, (CharSequence)"Choose the Email Client."));
            this.imWebView.fireOnLeaveApplication();
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in sending mail ", ex);
            this.imWebView.raiseError("Exception in sending mail", "sendMail");
        }
    }
    
    public void sendSMS(final String s, final String s2) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(27), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> sendSMS: recipient: " + s + " body: " + s2);
        try {
            final Intent intent = new Intent("android.intent.action.SENDTO", Uri.parse("smsto:" + Uri.encode(s)));
            intent.putExtra("sms_body", s2);
            intent.addFlags(268435456);
            this.imWebView.getActivity().startActivity(intent);
            this.imWebView.fireOnLeaveApplication();
        }
        catch (Exception ex) {
            Log.debug("[InMobi]-[RE]-4.4.3", "Exception in sending SMS ", ex);
            this.imWebView.raiseError("Exception in sending SMS", "sendSMS");
        }
    }
    
    public void setAudioVolume(final String s, final int n) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(36), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> setAudioVolume: " + s + " " + n);
        this.imWebView.setAudioVolume(s, n);
    }
    
    public void setVideoVolume(final String s, final int n) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(44), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> setVideoVolume: ");
        this.imWebView.setVideoVolume(s, n);
    }
    
    public void setWebViewClosed(final boolean e) {
        this.e = e;
    }
    
    public void showAlert(final String s) {
        Log.debug("[InMobi]-[RE]-4.4.3", s);
    }
    
    public void showVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(49), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> showVideo: id :" + s);
        this.imWebView.showVideo(s);
    }
    
    @Override
    public void stopAllListeners() {
        try {
            this.d.stopAllListeners();
        }
        catch (Exception ex) {}
    }
    
    @SuppressLint({ "NewApi" })
    public void storePicture(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: invokestatic    com/inmobi/commons/internal/ApiStatCollector.getLogger:()Lcom/inmobi/commons/metric/Logger;
        //     3: new             Lcom/inmobi/commons/metric/EventLog;
        //     6: dup            
        //     7: new             Lcom/inmobi/commons/internal/ApiStatCollector$ApiEventType;
        //    10: dup            
        //    11: bipush          23
        //    13: invokespecial   com/inmobi/commons/internal/ApiStatCollector$ApiEventType.<init>:(I)V
        //    16: aconst_null    
        //    17: invokespecial   com/inmobi/commons/metric/EventLog.<init>:(Lcom/inmobi/commons/metric/EventType;Lorg/json/JSONObject;)V
        //    20: invokevirtual   com/inmobi/commons/metric/Logger.logEvent:(Lcom/inmobi/commons/metric/EventLog;)V
        //    23: ldc_w           "[InMobi]-[RE]-4.4.3"
        //    26: new             Ljava/lang/StringBuilder;
        //    29: dup            
        //    30: ldc_w           "Store picture called on URL: "
        //    33: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    36: aload_1        
        //    37: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    40: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    43: invokestatic    com/inmobi/commons/internal/Log.debug:(Ljava/lang/String;Ljava/lang/String;)V
        //    46: aload_1        
        //    47: invokestatic    com/inmobi/commons/internal/InternalSDKUtil.getFinalRedirectedUrl:(Ljava/lang/String;)Ljava/lang/String;
        //    50: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
        //    53: astore_3       
        //    54: aload_0        
        //    55: ldc_w           "storePicture"
        //    58: invokevirtual   com/inmobi/re/controller/JSUtilityController.supports:(Ljava/lang/String;)Z
        //    61: ifeq            97
        //    64: new             Landroid/app/DownloadManager$Request;
        //    67: dup            
        //    68: aload_3        
        //    69: invokespecial   android/app/DownloadManager$Request.<init>:(Landroid/net/Uri;)V
        //    72: astore          4
        //    74: aload           4
        //    76: getstatic       android/os/Environment.DIRECTORY_DOWNLOADS:Ljava/lang/String;
        //    79: aload_3        
        //    80: invokevirtual   android/net/Uri.getLastPathSegment:()Ljava/lang/String;
        //    83: invokevirtual   android/app/DownloadManager$Request.setDestinationInExternalPublicDir:(Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;
        //    86: pop            
        //    87: aload_0        
        //    88: getfield        com/inmobi/re/controller/JSUtilityController.a:Landroid/app/DownloadManager;
        //    91: aload           4
        //    93: invokevirtual   android/app/DownloadManager.enqueue:(Landroid/app/DownloadManager$Request;)J
        //    96: pop2           
        //    97: return         
        //    98: astore_2       
        //    99: aload_0        
        //   100: getfield        com/inmobi/re/controller/JSUtilityController.imWebView:Lcom/inmobi/re/container/IMWebView;
        //   103: ldc_w           "Invalid URL."
        //   106: ldc_w           "storePicture"
        //   109: invokevirtual   com/inmobi/re/container/IMWebView.raiseError:(Ljava/lang/String;Ljava/lang/String;)V
        //   112: return         
        //   113: astore          5
        //   115: aload_0        
        //   116: getfield        com/inmobi/re/controller/JSUtilityController.imWebView:Lcom/inmobi/re/container/IMWebView;
        //   119: ldc_w           "Unable to store."
        //   122: ldc_w           "storePicture"
        //   125: invokevirtual   com/inmobi/re/container/IMWebView.raiseError:(Ljava/lang/String;Ljava/lang/String;)V
        //   128: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  46     54     98     113    Ljava/lang/Exception;
        //  64     97     113    129    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0097:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @SuppressLint({ "NewApi" })
    public boolean supports(final String s) {
        boolean b = true;
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(22), null));
        if (s.equals("html5video") || s.equals("inlineVideo")) {
            Boolean b2;
            if (Build$VERSION.SDK_INT >= 11) {
                b2 = (this.imWebView.isHardwareAccelerated() && this.imWebView.isEnabledHardwareAcceleration() && b);
            }
            else {
                b2 = b;
            }
            this.f.put(s, b2);
            return b2;
        }
        final Boolean b3 = this.f.get(s);
        if (b3 != null) {
            return b3;
        }
        final PackageManager packageManager = this.imWebView.getActivity().getPackageManager();
        if (s.equals("tel")) {
            this.f.put(s, b);
            return b;
        }
        if (s.equals("sms")) {
            final Intent intent = new Intent("android.intent.action.VIEW");
            intent.setType("vnd.android-dir/mms-sms");
            Boolean b4;
            if (this.imWebView.getActivity().getPackageManager().resolveActivity(intent, 65536) == null) {
                b4 = false;
            }
            else {
                b4 = b;
            }
            this.f.put(s, b4);
            return b4;
        }
        if (s.equals("calendar")) {
            final Intent intent2 = new Intent("android.intent.action.VIEW");
            intent2.setType("vnd.android.cursor.item/event");
            Boolean b5;
            if (this.imWebView.getActivity().getPackageManager().resolveActivity(intent2, 65536) == null) {
                b5 = false;
            }
            else {
                b5 = b;
            }
            this.f.put(s, b5);
            return b5;
        }
        if (s.equals("microphone")) {
            if (packageManager.checkPermission("android.permission.RECORD_AUDIO", packageManager.getNameForUid(Binder.getCallingUid())) != 0) {
                b = false;
            }
            final Boolean value = b;
            this.f.put(s, value);
            return value;
        }
        if (s.equals("storePicture")) {
            if (Build$VERSION.SDK_INT <= 8 || packageManager.checkPermission("android.permission.WRITE_EXTERNAL_STORAGE", packageManager.getNameForUid(Binder.getCallingUid())) != 0) {
                b = false;
            }
            final Boolean value2 = b;
            this.f.put(s, value2);
            return value2;
        }
        if (s.equals("postToSocial.2") || s.equals("postToSocial.3")) {
            final Boolean value3 = b;
            this.f.put(s, value3);
            return value3;
        }
        if (s.equals("takeCameraPicture")) {
            final ResolveInfo resolveActivity = this.imWebView.getActivity().getPackageManager().resolveActivity(new Intent("android.media.action.IMAGE_CAPTURE"), 65536);
            final boolean b6 = packageManager.checkPermission("android.permission.WRITE_EXTERNAL_STORAGE", packageManager.getNameForUid(Binder.getCallingUid())) == 0 && b;
            if (resolveActivity == null || !b6) {
                b = false;
            }
            final Boolean value4 = b;
            this.f.put(s, value4);
            return value4;
        }
        if (s.equals("getGalleryImage")) {
            Boolean b7;
            if (this.imWebView.getActivity().getPackageManager().resolveActivity(new Intent("android.intent.action.PICK", MediaStore$Images$Media.EXTERNAL_CONTENT_URI), 65536) == null) {
                b7 = false;
            }
            else {
                b7 = b;
            }
            this.f.put(s, b7);
            return b7;
        }
        if (s.equals("vibrate")) {
            final Boolean value5 = packageManager.checkPermission("android.permission.VIBRATE", packageManager.getNameForUid(Binder.getCallingUid())) == 0 && b;
            final Vibrator vibrator = (Vibrator)this.d.imWebView.getActivity().getSystemService("vibrator");
            while (true) {
                Label_0831: {
                    if (vibrator == null) {
                        break Label_0831;
                    }
                    Boolean value6 = null;
                    Label_0806: {
                        if (Build$VERSION.SDK_INT < 11) {
                            value6 = value5;
                            break Label_0806;
                        }
                        if (!value5 || !vibrator.hasVibrator()) {
                            break Label_0831;
                        }
                        value6 = b;
                    }
                    this.f.put(s, value6);
                    return value6;
                }
                b = false;
                continue;
            }
        }
        return false;
    }
    
    public String supportsFeature(final String s) {
        return String.valueOf(this.supports(s));
    }
    
    public String takeCameraPicture() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(24), null));
        if (!this.supports("takeCameraPicture")) {
            Log.internal("[InMobi]-[RE]-4.4.3", "takeCameraPicture called even if it is not supported");
        }
        else {
            final Intent intent = new Intent((Context)this.imWebView.getActivity(), (Class)IMBrowserActivity.class);
            intent.putExtra("extra_browser_type", 100);
            final Uri insert = this.mContext.getContentResolver().insert(MediaStore$Images$Media.EXTERNAL_CONTENT_URI, new ContentValues());
            intent.putExtra("id", IMBrowserActivity.generateId(new StartActivityForResultCallback() {
                @Override
                public void onActivityResult(final int n, final Intent intent) {
                    if (n == -1) {
                        String s;
                        if (intent == null) {
                            s = ImageProcessing.convertMediaUriToPath(insert, JSUtilityController.this.mContext);
                        }
                        else {
                            s = ImageProcessing.convertMediaUriToPath(intent.getData(), JSUtilityController.this.mContext);
                        }
                        final Bitmap compressedBitmap = ImageProcessing.getCompressedBitmap(s, JSUtilityController.this.mContext);
                        JSUtilityController.this.imWebView.raiseCameraPictureCapturedEvent(ImageProcessing.getBase64EncodedImage(compressedBitmap, JSUtilityController.this.mContext), compressedBitmap.getWidth(), compressedBitmap.getHeight());
                        return;
                    }
                    JSUtilityController.this.imWebView.raiseError("User did not take a picture", "takeCameraPicture");
                }
            }));
            intent.putExtra("URI", (Parcelable)insert);
            intent.putExtra("action", "takeCameraPicture");
            this.imWebView.getActivity().startActivity(intent);
            if (this.imWebView.mListener != null) {
                this.imWebView.mListener.onLeaveApplication();
                return null;
            }
        }
        return null;
    }
    
    public void unMuteAudio(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(34), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> unMuteAudio: ");
        this.imWebView.unMuteAudio(s);
    }
    
    public void unMuteVideo(final String s) {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(42), null));
        Log.debug("[InMobi]-[RE]-4.4.3", "JSUtilityController-> unMuteVideo: ");
        this.imWebView.unMuteVideo(s);
    }
    
    @SuppressLint({ "NewApi" })
    public void unRegisterBroadcastListener() {
        try {
            this.d();
            if (Build$VERSION.SDK_INT > 8) {
                this.imWebView.getActivity().unregisterReceiver((BroadcastReceiver)this.b);
                this.b = null;
            }
        }
        catch (Exception ex) {
            Log.internal("[InMobi]-[RE]-4.4.3", "JSUtilityController-> unregisterBroadcastListener. Unable to unregister download listener");
        }
    }
    
    public void unRegisterMicListener() {
        if (!this.h) {
            return;
        }
        this.h = false;
        AudioTriggerer.removeEventListener(this.g);
    }
    
    public void vibrate() {
        ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(26), null));
        if (!this.imWebView.isViewable()) {
            this.imWebView.raiseError("Creative not visible. Will not vibrate.", "vibrate");
            return;
        }
        if (this.supports("vibrate")) {
            ((Vibrator)this.imWebView.getActivity().getSystemService("vibrator")).vibrate(2000L);
            new Timer().schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        JSUtilityController.this.imWebView.raiseVibrateCompleteEvent();
                    }
                    catch (Exception ex) {
                        Log.internal("[InMobi]-[RE]-4.4.3", "Vibrate callback execption", ex);
                    }
                }
            }, 2000L);
            return;
        }
        Log.internal("[InMobi]-[RE]-4.4.3", "vibrate called even if it is not supported");
    }
    
    public void vibrate(final String s, final int n) {
        Label_0349: {
            Vibrator vibrator;
            String replaceAll;
            try {
                ApiStatCollector.getLogger().logEvent(new EventLog(new ApiStatCollector$ApiEventType(26), null));
                if (!this.imWebView.isViewable()) {
                    this.imWebView.raiseError("Creative not visible. Will not vibrate.", "vibrate");
                    return;
                }
                if (!this.supports("vibrate")) {
                    break Label_0349;
                }
                vibrator = (Vibrator)this.imWebView.getActivity().getSystemService("vibrator");
                replaceAll = s.replaceAll("\\[", "").replaceAll("\\]", "");
                if (replaceAll == null || "".equals(replaceAll.trim())) {
                    vibrator.cancel();
                    return;
                }
            }
            catch (Exception ex) {
                Log.internal("[InMobi]-[RE]-4.4.3", "vibrate exception", ex);
                return;
            }
            final String[] split = replaceAll.split(",");
            final int length = split.length;
            int maxVibPatternLength;
            if (length > Initializer.getConfigParams().getMaxVibPatternLength()) {
                Log.internal("[InMobi]-[RE]-4.4.3", "vibration pattern exceeds max length. Will be truncated to max " + Initializer.getConfigParams().getMaxVibPatternLength() + "ms");
                maxVibPatternLength = Initializer.getConfigParams().getMaxVibPatternLength();
            }
            else {
                maxVibPatternLength = length;
            }
            final long[] array = new long[maxVibPatternLength];
            for (int i = 0; i < maxVibPatternLength; ++i) {
                try {
                    array[i] = Long.parseLong(split[i]);
                    if (array[i] > Initializer.getConfigParams().getMaxVibDuration()) {
                        Log.internal("[InMobi]-[RE]-4.4.3", "vibration duration exceeds max. Will only vibrate for max " + Initializer.getConfigParams().getMaxVibDuration() + "ms");
                        array[i] = Initializer.getConfigParams().getMaxVibDuration();
                    }
                    if (array[i] < 0L) {
                        this.imWebView.raiseError("Negative duration not allowed in vibration .", "vibrate");
                    }
                    continue;
                }
                catch (NumberFormatException ex2) {
                    this.imWebView.raiseError("Invalid values of pattern in vibration .", "vibrate");
                    return;
                }
                break;
            }
            if (array.length != 0) {
                vibrator.vibrate(array, n);
                return;
            }
            return;
        }
        this.imWebView.raiseError("Vibrate called even if it is not supported.", "vibrate");
        Log.internal("[InMobi]-[RE]-4.4.3", "vibrate called even if it is not supported");
    }
}
