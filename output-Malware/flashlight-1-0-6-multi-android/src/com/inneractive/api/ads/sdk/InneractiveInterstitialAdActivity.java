// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import android.view.View$OnClickListener;
import android.os.Bundle;
import android.widget.ImageView;
import android.view.View;
import android.content.ActivityNotFoundException;
import java.io.Serializable;
import android.content.Intent;
import android.content.Context;

public class InneractiveInterstitialAdActivity extends IAbaseInterstitialAdActivity
{
    static IAadConfig adConfiguration;
    static boolean isTrackingPixelSent;
    static boolean isVastCompleted;
    static b$a mAdInterfaceListener;
    static IAmraidWebView temporaryMraidView;
    private IAmraidWebView mMraidView;
    
    private static Intent createIntent(final Context context, final String s, final IAadConfig aadConfig) {
        final Intent intent = new Intent(context, (Class)InneractiveInterstitialAdActivity.class);
        intent.putExtra(IAdefines$AdParams.a.c, s);
        intent.putExtra(IAdefines$AdParams.b.c, (Serializable)aadConfig);
        intent.addFlags(268435456);
        return intent;
    }
    
    static void displayAhead(final Context context, final b$a mAdInterfaceListener, final String s, final IAadConfig adConfiguration) {
        InneractiveInterstitialAdActivity.mAdInterfaceListener = mAdInterfaceListener;
        InneractiveInterstitialAdActivity.adConfiguration = adConfiguration;
        InneractiveInterstitialAdActivity.isTrackingPixelSent = false;
        InneractiveInterstitialAdActivity.isVastCompleted = false;
        (InneractiveInterstitialAdActivity.temporaryMraidView = ao.createInstance(context, null, IAmraidWebView$ExpandMode.DISABLED, IAmraidWebView$NativeCloseButtonMode.ALWAYS_VISIBLE, IAmraidWebView$MraidPlacementType.INTERSTITIAL)).enablePlugins(false);
        InneractiveInterstitialAdActivity.temporaryMraidView.clearCache(true);
        InneractiveInterstitialAdActivity.temporaryMraidView.clearHistory();
        InneractiveInterstitialAdActivity.temporaryMraidView.setVisibility(8);
        InneractiveInterstitialAdActivity.temporaryMraidView.setListener(new aG());
        final IAmraidWebView temporaryMraidView = InneractiveInterstitialAdActivity.temporaryMraidView;
        final IAadConfig adConfiguration2 = InneractiveInterstitialAdActivity.adConfiguration;
        String g = null;
        if (adConfiguration2 != null) {
            g = InneractiveInterstitialAdActivity.adConfiguration.g();
        }
        temporaryMraidView.loadHtmlData(g, s);
    }
    
    static void onInvalidate() {
        if (InneractiveInterstitialAdActivity.temporaryMraidView != null) {
            InneractiveInterstitialAdActivity.temporaryMraidView.destroy();
            InneractiveInterstitialAdActivity.temporaryMraidView = null;
        }
    }
    
    public static void start(final Context context, final String s, final IAadConfig aadConfig) {
        final Intent intent = createIntent(context, s, aadConfig);
        try {
            context.startActivity(intent);
        }
        catch (ActivityNotFoundException ex) {
            InneractiveAdView$Log.i("Inneractive_info", "InneractiveInterstitialAdActivity.class not found. Did you declare InneractiveInterstitialAdActivity in your manifest?");
        }
    }
    
    void addCloseActivityJavascriptInterface() {
        if (this.mMraidView != null) {
            this.mMraidView.addJavascriptInterface((Object)new aH(this), "InneractiveCloseVastAdActivityInterface");
        }
    }
    
    @Override
    public View getAdView() {
        (this.mMraidView = ao.createInstance((Context)this, this.getAdConfig(), IAmraidWebView$ExpandMode.DISABLED, IAmraidWebView$NativeCloseButtonMode.AD_CONTROLLED, IAmraidWebView$MraidPlacementType.INTERSTITIAL)).setListener(new aI(this));
        this.mMraidView.setOnCloseButtonStateChange(new aJ(this));
        final String stringExtra = this.getIntent().getStringExtra(IAdefines$AdParams.a.c);
        this.addCloseActivityJavascriptInterface();
        final IAmraidWebView mMraidView = this.mMraidView;
        String g;
        if (InneractiveInterstitialAdActivity.adConfiguration != null) {
            g = InneractiveInterstitialAdActivity.adConfiguration.g();
        }
        else {
            g = null;
        }
        mMraidView.loadHtmlData(g, stringExtra);
        return (View)this.mMraidView;
    }
    
    public void onBackPressed() {
        this.finish();
        if (InneractiveInterstitialAdActivity.mAdInterfaceListener != null) {
            InneractiveInterstitialAdActivity.mAdInterfaceListener.e();
        }
    }
    
    @Override
    protected void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.c)) {
            this.getWindow().setFlags(16777216, 16777216);
        }
        this.getCloseButton().setOnClickListener((View$OnClickListener)new aK(this));
    }
    
    @Override
    protected void onDestroy() {
        if (this.mMraidView != null) {
            this.mMraidView.destroy();
            this.mMraidView = null;
        }
        if (InneractiveInterstitialAdActivity.temporaryMraidView != null) {
            InneractiveInterstitialAdActivity.temporaryMraidView.destroy();
            InneractiveInterstitialAdActivity.temporaryMraidView = null;
        }
        super.onDestroy();
    }
    
    protected void onPause() {
        super.onPause();
        if (this.mMraidView != null) {
            this.mMraidView.onPause();
        }
    }
    
    protected void onResume() {
        super.onResume();
        if (this.mMraidView != null) {
            this.mMraidView.onResume();
        }
    }
    
    protected void onStart() {
        InneractiveAdView$Log.d("Inneractive_debug", this.getClass().getSimpleName() + ".onStart(), " + this);
        if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.c) && !InneractiveInterstitialAdActivity.isVastCompleted) {
            this.onResume();
            if (InneractiveInterstitialAdActivity.adConfiguration != null && InneractiveInterstitialAdActivity.adConfiguration.u() == 9) {
                this.mMraidView.loadUrl("javascript:(function() {    if (typeof iaVideoPlayer !== 'undefined' && typeof iaVideoPlayer.getState === 'function') { \n   \tvar playerstate = iaVideoPlayer.getState(); \n   \twindow.console.log('PLAYERSTATE = ' + playerstate); \n   \tif(playerstate === 'PAUSED' || playerstate === 'IDLE'){ \n       \twindow.console.log('IDLE or PAUSED case. need to setPlay.'); \n           iaVideoPlayer.setPlay(); \n    \t}\n\t}\n})();");
            }
        }
        super.onStart();
    }
    
    protected void onStop() {
        InneractiveAdView$Log.d("Inneractive_debug", this.getClass().getSimpleName() + ".onStop(), " + this);
        if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.c)) {
            this.onPause();
            if (InneractiveInterstitialAdActivity.adConfiguration != null && InneractiveInterstitialAdActivity.adConfiguration.u() == 9) {
                this.mMraidView.loadUrl("javascript:(function() {    if (typeof iaVideoPlayer !== 'undefined' && typeof iaVideoPlayer.getState === 'function') { \n   \tvar playerstate = iaVideoPlayer.getState(); \n   \twindow.console.log('PLAYERSTATE = ' + playerstate); \n   \tif(playerstate === 'PLAYING'){ \n       \twindow.console.log('PLAYING case. need to setPause.'); \n           iaVideoPlayer.setPause(); \n    \t}\n\t}\n})();");
            }
        }
        super.onStop();
    }
}
