// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import org.apache.http.HttpEntity;
import android.net.Uri;
import java.util.zip.GZIPInputStream;
import android.view.Display;
import android.graphics.Point;
import android.os.Environment;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;
import android.telephony.TelephonyManager;
import android.content.Intent;
import android.view.Window;
import android.content.pm.PackageManager$NameNotFoundException;
import android.app.Activity;
import java.io.OutputStream;
import java.io.IOException;
import java.io.Closeable;
import android.view.ViewGroup;
import android.view.View;
import org.apache.http.Header;
import java.io.Writer;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.InputStream;
import java.io.FileInputStream;
import android.location.Location;
import android.view.WindowManager;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.content.Context;
import org.apache.http.HttpResponse;

class d$a
{
    private final HttpResponse a;
    private String b;
    private String c;
    private String d;
    private String e;
    private String f;
    private String g;
    private String h;
    private String i;
    private String j;
    
    d$a(final HttpResponse a, final d$b d$b) {
        this.a = a;
    }
    
    static int a(final float n, final Context context) {
        return (int)(0.5f + TypedValue.applyDimension(1, n, context.getResources().getDisplayMetrics()));
    }
    
    static int a(final Context context, final int n) {
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        return (int)(0.5f + n / displayMetrics.density);
    }
    
    static int a(final String s) {
        return Math.min(3, s.length());
    }
    
    static Location a(Location location, final Location location2) {
        if (location == null && location2 == null) {
            location = null;
        }
        else if (location != null && location2 != null) {
            if (location.getTime() <= location2.getTime()) {
                return location2;
            }
        }
        else if (location == null) {
            return location2;
        }
        return location;
    }
    
    static String a(final Context p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokestatic    com/inneractive/api/ads/sdk/d$a.c:(Landroid/content/Context;)Z
        //     4: ifeq            114
        //     7: new             Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    10: dup            
        //    11: new             Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    14: dup            
        //    15: ldc             "com.google.android.gms.ads.identifier.AdvertisingIdClient"
        //    17: invokestatic    java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
        //    20: invokevirtual   java/lang/Class.newInstance:()Ljava/lang/Object;
        //    23: ldc             "getAdvertisingIdInfo"
        //    25: invokespecial   com/inneractive/api/ads/sdk/IAreflectionHandler$a.<init>:(Ljava/lang/Object;Ljava/lang/String;)V
        //    28: ldc             Landroid/content/Context;.class
        //    30: aload_0        
        //    31: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:(Ljava/lang/Class;Ljava/lang/Object;)Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    34: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:()Ljava/lang/Object;
        //    37: ldc             "getId"
        //    39: invokespecial   com/inneractive/api/ads/sdk/IAreflectionHandler$a.<init>:(Ljava/lang/Object;Ljava/lang/String;)V
        //    42: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:()Ljava/lang/Object;
        //    45: checkcast       Ljava/lang/String;
        //    48: astore_1       
        //    49: ldc             "Inneractive_verbose"
        //    51: new             Ljava/lang/StringBuilder;
        //    54: dup            
        //    55: ldc             "advertising id: "
        //    57: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    60: aload_1        
        //    61: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    64: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    67: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    70: aload_0        
        //    71: ldc             "AdvertisingIdFile"
        //    73: aload_1        
        //    74: invokestatic    com/inneractive/api/ads/sdk/d$a.a:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
        //    77: aload_1        
        //    78: areturn        
        //    79: astore_2       
        //    80: aconst_null    
        //    81: astore_1       
        //    82: aload_2        
        //    83: astore_3       
        //    84: ldc             "Inneractive_verbose"
        //    86: ldc             "Handled Exception:"
        //    88: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    91: ldc             "Inneractive_verbose"
        //    93: aload_3        
        //    94: invokestatic    com/inneractive/api/ads/sdk/d$a.a:(Ljava/lang/Exception;)Ljava/lang/String;
        //    97: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //   100: ldc             "Inneractive_debug"
        //   102: ldc             "Advertising ID is not available. Please add Google Play Services library (v 4.0+) to improve your ad targeting. (relevant for devices running Android API 2.3 and above)"
        //   104: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   107: goto            70
        //   110: astore_3       
        //   111: goto            84
        //   114: aconst_null    
        //   115: astore_1       
        //   116: goto            70
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  7      49     79     84     Ljava/lang/Exception;
        //  49     70     110    114    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0070:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static String a(final Context context, final String s) {
        try {
            final FileInputStream openFileInput = context.openFileInput(s);
            final byte[] array = new byte[openFileInput.available()];
            if (openFileInput.read(array) > 0) {
                return new String(array);
            }
        }
        catch (Exception ex) {
            InneractiveAdView$Log.d("Inneractive_debug", "failed to get the param from memory - " + s);
        }
        return null;
    }
    
    static String a(final InputStream inputStream) {
        final StringBuffer sb = new StringBuffer();
        final byte[] array = new byte[4096];
        for (int i = 0; i != -1; i = inputStream.read(array)) {
            sb.append(new String(array, 0, i));
        }
        inputStream.close();
        return sb.toString();
    }
    
    static String a(final Exception ex) {
        try {
            final StringWriter stringWriter = new StringWriter();
            ex.printStackTrace(new PrintWriter(stringWriter));
            return "------\r\n" + stringWriter.toString() + "------\r\n";
        }
        catch (Exception ex2) {
            return "bad stackToString";
        }
    }
    
    static String a(final HttpResponse httpResponse, final IAdefines$HeaderParamsResponse adefines$HeaderParamsResponse) {
        final Header firstHeader = httpResponse.getFirstHeader(adefines$HeaderParamsResponse.j);
        if (firstHeader != null) {
            return firstHeader.getValue();
        }
        return null;
    }
    
    static void a(final Context context, final String s, final String s2) {
        if (context == null || s2 == null) {
            return;
        }
        try {
            if (context.getFileStreamPath(s).exists()) {
                context.deleteFile(s);
            }
            InneractiveAdView$Log.v("Inneractive_verbose", "storing: " + s2 + " to: " + s);
            context.openFileOutput(s, 0).write(s2.getBytes());
        }
        catch (Exception ex) {
            InneractiveAdView$Log.v("Inneractive_verbose", "failed to store: " + s2 + " to: " + s);
        }
    }
    
    static void a(final View view) {
        if (view != null && view.getParent() != null && view.getParent() instanceof ViewGroup) {
            ((ViewGroup)view.getParent()).removeView(view);
        }
    }
    
    static void a(final Closeable closeable) {
        if (closeable == null) {
            return;
        }
        try {
            closeable.close();
        }
        catch (IOException ex) {}
    }
    
    static void a(final InputStream inputStream, final OutputStream outputStream) {
        if (inputStream == null || outputStream == null) {
            throw new IOException("Unable to copy from or to a null stream.");
        }
        final byte[] array = new byte[65536];
        while (true) {
            final int read = inputStream.read(array);
            if (read == -1) {
                break;
            }
            outputStream.write(array, 0, read);
        }
    }
    
    static boolean a(final Activity activity) {
        try {
            if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.c)) {
                final Window window = activity.getWindow();
                if (window == null || (window.getAttributes().flags & 0x1000000) == 0x0) {
                    try {
                        if ((activity.getPackageManager().getActivityInfo(activity.getComponentName(), 0).flags & 0x200) == 0x0) {
                            return false;
                        }
                        return true;
                    }
                    catch (PackageManager$NameNotFoundException ex) {
                        InneractiveAdView$Log.v("Inneractive_verbose", "getActivityInfo(self) should not fail");
                    }
                }
                return true;
            }
        }
        catch (Exception ex2) {
            InneractiveAdView$Log.v("Inneractive_verbose", "hasHardwareAcceleration failed to getWindow. returning false");
        }
        return false;
    }
    
    static boolean a(final Context context, final Intent intent) {
        final int size = context.getPackageManager().queryIntentActivities(intent, 0).size();
        boolean b = false;
        if (size > 0) {
            b = true;
        }
        return b;
    }
    
    static int b(final Context context, final int n) {
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        return (int)(0.5f + n * displayMetrics.density);
    }
    
    static boolean b(final Context p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokestatic    com/inneractive/api/ads/sdk/d$a.c:(Landroid/content/Context;)Z
        //     4: ifeq            128
        //     7: new             Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    10: dup            
        //    11: new             Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    14: dup            
        //    15: ldc             "com.google.android.gms.ads.identifier.AdvertisingIdClient"
        //    17: invokestatic    java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
        //    20: invokevirtual   java/lang/Class.newInstance:()Ljava/lang/Object;
        //    23: ldc             "getAdvertisingIdInfo"
        //    25: invokespecial   com/inneractive/api/ads/sdk/IAreflectionHandler$a.<init>:(Ljava/lang/Object;Ljava/lang/String;)V
        //    28: ldc             Landroid/content/Context;.class
        //    30: aload_0        
        //    31: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:(Ljava/lang/Class;Ljava/lang/Object;)Lcom/inneractive/api/ads/sdk/IAreflectionHandler$a;
        //    34: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:()Ljava/lang/Object;
        //    37: ldc_w           "isLimitAdTrackingEnabled"
        //    40: invokespecial   com/inneractive/api/ads/sdk/IAreflectionHandler$a.<init>:(Ljava/lang/Object;Ljava/lang/String;)V
        //    43: invokevirtual   com/inneractive/api/ads/sdk/IAreflectionHandler$a.a:()Ljava/lang/Object;
        //    46: checkcast       Ljava/lang/Boolean;
        //    49: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //    52: istore          4
        //    54: iload           4
        //    56: istore_1       
        //    57: ldc             "Inneractive_verbose"
        //    59: new             Ljava/lang/StringBuilder;
        //    62: dup            
        //    63: ldc_w           "limit ad tracking: "
        //    66: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    69: iload_1        
        //    70: invokevirtual   java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
        //    73: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    76: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //    79: aload_0        
        //    80: ldc_w           "LimitAdTrackingFile"
        //    83: iload_1        
        //    84: invokestatic    java/lang/Boolean.toString:(Z)Ljava/lang/String;
        //    87: invokestatic    com/inneractive/api/ads/sdk/d$a.a:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
        //    90: iload_1        
        //    91: ireturn        
        //    92: astore_2       
        //    93: iconst_0       
        //    94: istore_1       
        //    95: aload_2        
        //    96: astore_3       
        //    97: ldc             "Inneractive_verbose"
        //    99: ldc             "Handled Exception:"
        //   101: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //   104: ldc             "Inneractive_verbose"
        //   106: aload_3        
        //   107: invokestatic    com/inneractive/api/ads/sdk/d$a.a:(Ljava/lang/Exception;)Ljava/lang/String;
        //   110: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.v:(Ljava/lang/String;Ljava/lang/String;)V
        //   113: ldc             "Inneractive_debug"
        //   115: ldc_w           "Limit Ad Tracking Info is not available. Please add Google Play Services library (v 4.0+) to improve your ad targeting. (relevant for devices running Android API 2.3 and above)"
        //   118: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   121: goto            79
        //   124: astore_3       
        //   125: goto            97
        //   128: iconst_0       
        //   129: istore_1       
        //   130: goto            79
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  7      54     92     97     Ljava/lang/Exception;
        //  57     79     124    128    Ljava/lang/Exception;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0079:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static boolean b(final Context context, final String s) {
        final boolean equals = s.equals("MM");
        boolean a = false;
        if (!equals) {
            return a;
        }
        while (true) {
            try {
                final Intent intent = new Intent(context, (Class)Class.forName("com.millennialmedia.android.MMActivity"));
                a = false;
                if (intent != null) {
                    InneractiveAdView$Log.d("Inneractive_debug", "MMActivity was found in the Manifest? " + a(context, intent));
                    a = a(context, intent);
                }
                return a;
            }
            catch (ClassNotFoundException ex) {
                InneractiveAdView$Log.d("Inneractive_debug", "exception when trying to check if millennial available");
                final Intent intent = null;
                continue;
            }
            break;
        }
    }
    
    static boolean b(final String s) {
        return s == null || "null".equals(s) || s.length() == 0;
    }
    
    static String c(final String s) {
        if (s != null) {
            return s.replace(" ", "");
        }
        return null;
    }
    
    static boolean c(final Context context) {
        try {
            final Object a = new IAreflectionHandler$a(null, "isGooglePlayServicesAvailable").a(Class.forName(IAdefines.n)).a(Context.class, context).a();
            final boolean b = a != null && (int)a == 0;
            InneractiveAdView$Log.d("Inneractive_debug", "isGooglePlayServicesAvailable = " + b);
            return b;
        }
        catch (Exception ex) {
            InneractiveAdView$Log.v("Inneractive_verbose", "Handled Exception:");
            InneractiveAdView$Log.v("Inneractive_verbose", a(ex));
            InneractiveAdView$Log.d("Inneractive_debug", "isGooglePlayServicesAvailable = FALSE! :( ");
            return false;
        }
    }
    
    static boolean c(final Context context, final int n) {
        return context.getResources().getDisplayMetrics().widthPixels >= (int)TypedValue.applyDimension(1, (float)n, context.getResources().getDisplayMetrics());
    }
    
    static String d(final Context context) {
        String networkOperator;
        try {
            final TelephonyManager telephonyManager = (TelephonyManager)context.getSystemService("phone");
            networkOperator = telephonyManager.getNetworkOperator();
            if (telephonyManager.getPhoneType() == 2) {
                final TelephonyManager telephonyManager2 = (TelephonyManager)context.getSystemService("phone");
                int n;
                if (telephonyManager2 != null && telephonyManager2.getSimState() == 5) {
                    n = 1;
                }
                else {
                    n = 0;
                }
                if (n != 0) {
                    return telephonyManager.getSimOperator();
                }
            }
        }
        catch (Exception ex) {
            return null;
        }
        return networkOperator;
    }
    
    static String d(final String s) {
        try {
            final MessageDigest instance = MessageDigest.getInstance("SHA-1");
            instance.update(s.getBytes());
            final byte[] digest = instance.digest();
            final StringBuffer sb = new StringBuffer();
            for (int i = 0; i < digest.length; ++i) {
                sb.append(Integer.toHexString(0x100 | (0xFF & digest[i])).substring(1));
            }
            return sb.toString();
        }
        catch (NoSuchAlgorithmException ex) {
            return "";
        }
        catch (NullPointerException ex2) {
            return "";
        }
    }
    
    static Location e(final Context p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: ldc_w           "location"
        //     4: invokevirtual   android/content/Context.getSystemService:(Ljava/lang/String;)Ljava/lang/Object;
        //     7: checkcast       Landroid/location/LocationManager;
        //    10: astore_1       
        //    11: aload_1        
        //    12: ldc_w           "gps"
        //    15: invokevirtual   android/location/LocationManager.getLastKnownLocation:(Ljava/lang/String;)Landroid/location/Location;
        //    18: astore          9
        //    20: aload           9
        //    22: astore_3       
        //    23: aload_1        
        //    24: ldc_w           "network"
        //    27: invokevirtual   android/location/LocationManager.getLastKnownLocation:(Ljava/lang/String;)Landroid/location/Location;
        //    30: astore          7
        //    32: aload           7
        //    34: astore          5
        //    36: aload_3        
        //    37: ifnonnull       108
        //    40: aload           5
        //    42: ifnonnull       108
        //    45: aconst_null    
        //    46: areturn        
        //    47: astore          8
        //    49: ldc             "Inneractive_debug"
        //    51: ldc_w           "Error retrieved when trying to get the GPS location - access appears to be disabled."
        //    54: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    57: aconst_null    
        //    58: astore_3       
        //    59: goto            23
        //    62: astore_2       
        //    63: ldc             "Inneractive_debug"
        //    65: ldc_w           "Error retrieved when trying to get the GPS location - device has no GPS provider."
        //    68: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    71: aconst_null    
        //    72: astore_3       
        //    73: goto            23
        //    76: astore          6
        //    78: ldc             "Inneractive_debug"
        //    80: ldc_w           "Error retrieved when trying to get the network location - access appears to be disabled."
        //    83: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //    86: aconst_null    
        //    87: astore          5
        //    89: goto            36
        //    92: astore          4
        //    94: ldc             "Inneractive_debug"
        //    96: ldc_w           "Error retrieved when trying to get the network location - device has no network provider."
        //    99: invokestatic    com/inneractive/api/ads/sdk/InneractiveAdView$Log.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   102: aconst_null    
        //   103: astore          5
        //   105: goto            36
        //   108: aload_3        
        //   109: ifnull          138
        //   112: aload           5
        //   114: ifnull          138
        //   117: aload_3        
        //   118: invokevirtual   android/location/Location.getTime:()J
        //   121: aload           5
        //   123: invokevirtual   android/location/Location.getTime:()J
        //   126: lcmp           
        //   127: ifle            132
        //   130: aload_3        
        //   131: areturn        
        //   132: aload           5
        //   134: astore_3       
        //   135: goto            130
        //   138: aload_3        
        //   139: ifnonnull       130
        //   142: aload           5
        //   144: astore_3       
        //   145: goto            130
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  11     20     47     62     Ljava/lang/SecurityException;
        //  11     20     62     76     Ljava/lang/IllegalArgumentException;
        //  23     32     76     92     Ljava/lang/SecurityException;
        //  23     32     92     108    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0023:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    static String e(final String s) {
        try {
            final MessageDigest instance = MessageDigest.getInstance("MD5");
            instance.update(s.getBytes());
            final byte[] digest = instance.digest();
            final StringBuffer sb = new StringBuffer();
            for (int i = 0; i < digest.length; ++i) {
                sb.append(Integer.toHexString(0x100 | (0xFF & digest[i])).substring(1));
            }
            return sb.toString();
        }
        catch (NoSuchAlgorithmException ex) {
            return "";
        }
    }
    
    static String f(final Context context) {
        try {
            final TelephonyManager telephonyManager = (TelephonyManager)context.getSystemService("phone");
            InneractiveAdView$Log.v("Inneractive_verbose", "device ID =  " + telephonyManager.getDeviceId());
            return telephonyManager.getDeviceId();
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    static String g(final Context context) {
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    static String h(final Context context) {
        try {
            return ((TelephonyManager)context.getSystemService("phone")).getNetworkCountryIso();
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    static String i(final Context context) {
        try {
            return ((TelephonyManager)context.getSystemService("phone")).getNetworkOperatorName();
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    static boolean j(final Context context) {
        return "mounted".equals(Environment.getExternalStorageState()) && context.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0;
    }
    
    static boolean k(final Context context) {
        final Intent setType = new Intent("android.intent.action.INSERT").setType("vnd.android.cursor.item/event");
        return IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.e) && a(context, setType);
    }
    
    static boolean l(final Context context) {
        final boolean b = (0xF & context.getResources().getConfiguration().screenLayout) == 0x4;
        InneractiveAdView$Log.v("Inneractive_debug", "This device has a tablet resolution? " + b);
        return b;
    }
    
    static boolean m(final Context context) {
        final boolean b = (0xF & context.getResources().getConfiguration().screenLayout) == 0x3;
        InneractiveAdView$Log.d("Inneractive_debug", "This device has a mini tablet resolution? " + b);
        return b;
    }
    
    static int n(final Context context) {
        boolean b = true;
        final int orientation = context.getResources().getConfiguration().orientation;
        final StringBuilder sb = new StringBuilder("The device orientation: ");
        if (orientation != (b ? 1 : 0)) {
            b = false;
        }
        String s;
        if (sb.append(b).toString() != null) {
            s = "portait";
        }
        else {
            s = "landscape";
        }
        InneractiveAdView$Log.d("Inneractive_debug", s);
        return orientation;
    }
    
    static int o(final Context context) {
        final Display defaultDisplay = ((WindowManager)context.getSystemService("window")).getDefaultDisplay();
        if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.d)) {
            final Point point = new Point();
            try {
                new IAreflectionHandler$a(defaultDisplay, "getSize").a(Point.class, point).a();
                return point.y;
            }
            catch (Exception ex) {
                InneractiveAdView$Log.d("Inneractive_debug", "Failed to get display size");
                return point.y;
            }
        }
        return defaultDisplay.getHeight();
    }
    
    static int p(final Context context) {
        final Display defaultDisplay = ((WindowManager)context.getSystemService("window")).getDefaultDisplay();
        if (IAdefines$ApiLevel.a().a(IAdefines$ApiLevel.d)) {
            final Point point = new Point();
            try {
                new IAreflectionHandler$a(defaultDisplay, "getSize").a(Point.class, point).a();
                return point.x;
            }
            catch (Exception ex) {
                InneractiveAdView$Log.d("Inneractive_debug", "Failed to get display size");
                return point.x;
            }
        }
        return defaultDisplay.getWidth();
    }
    
    final d a() {
        while (true) {
            this.i = a(this.a, IAdefines$HeaderParamsResponse.h);
            InneractiveAdView$Log.v("Inneractive_verbose", "SDK Adapter name extracted is: " + this.i);
            this.b = a(this.a, IAdefines$HeaderParamsResponse.a);
            InneractiveAdView$Log.v("Inneractive_verbose", "internal returned Ad type extracted from response header: " + this.b);
            this.c = a(this.a, IAdefines$HeaderParamsResponse.e);
            InneractiveAdView$Log.v("Inneractive_verbose", "internal Error code extracted from response header: " + this.c);
            this.d = a(this.a, IAdefines$HeaderParamsResponse.f);
            InneractiveAdView$Log.v("Inneractive_verbose", "internal Session id extracted from response header: " + this.d);
            this.e = a(this.a, IAdefines$HeaderParamsResponse.g);
            InneractiveAdView$Log.v("Inneractive_verbose", "internal integrated Sdks Site Ids extracted from response header: " + this.e);
            this.f = a(this.a, IAdefines$HeaderParamsResponse.c);
            InneractiveAdView$Log.v("Inneractive_verbose", "ad width extracted from response header: " + this.f);
            this.g = a(this.a, IAdefines$HeaderParamsResponse.b);
            InneractiveAdView$Log.v("Inneractive_verbose", "ad height extracted from response header: " + this.g);
            this.h = a(this.a, IAdefines$HeaderParamsResponse.d);
            InneractiveAdView$Log.v("Inneractive_verbose", "ad network extracted from response header: " + this.h);
            this.j = a(this.a, IAdefines$HeaderParamsResponse.i);
            InneractiveAdView$Log.v("Inneractive_verbose", "SDK Adapter data extracted from response header: " + this.j);
            final HttpEntity entity = this.a.getEntity();
        Label_0436_Outer:
            while (true) {
                InputStream content = null;
                Label_0583: {
                    while (true) {
                        Label_0557: {
                            try {
                                content = entity.getContent();
                                if (content == null) {
                                    break Label_0583;
                                }
                                final Header contentEncoding = entity.getContentEncoding();
                                if (contentEncoding == null) {
                                    break Label_0583;
                                }
                                final String value = contentEncoding.getValue();
                                if (value == null || !value.contains("gzip")) {
                                    break Label_0583;
                                }
                                final InputStream inputStream = new GZIPInputStream(content);
                                if (inputStream == null) {
                                    break Label_0557;
                                }
                                if (entity != null) {
                                    final String s = a(inputStream);
                                    final IAresponseData aresponseData = new IAresponseData();
                                    aresponseData.a = Uri.encode(s);
                                    aresponseData.b = this.d;
                                    aresponseData.c = this.e;
                                    aresponseData.d = this.f;
                                    aresponseData.e = this.g;
                                    aresponseData.f = this.c;
                                    aresponseData.g = this.b;
                                    this.i = "inneractive_mraid";
                                    aresponseData.h = this.i;
                                    return new d$c(aresponseData);
                                }
                            }
                            catch (Exception ex) {
                                InneractiveAdView$Log.d("Inneractive_debug", "failed to get the unzipped content.");
                                final InputStream inputStream = null;
                                continue Label_0436_Outer;
                            }
                            final String s = "";
                            continue;
                        }
                        if (entity != null) {
                            final String s = a(entity.getContent());
                            continue;
                        }
                        final String s = "";
                        continue;
                    }
                }
                final InputStream inputStream = content;
                continue;
            }
        }
    }
}
