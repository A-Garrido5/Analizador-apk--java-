// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.apache.http.NameValuePair;
import java.util.HashMap;
import org.apache.http.client.utils.URLEncodedUtils;
import java.net.URI;
import android.webkit.WebViewClient;
import android.view.View$OnTouchListener;
import java.util.ArrayList;
import android.view.View;
import android.content.Context;
import android.os.Handler;

final class IAmraidWebView extends IAbaseWebView implements InneractiveInternalBrowserActivity$a
{
    private IAadConfig mAdConfig;
    boolean mClicked;
    private z mGestDetector;
    private Handler mHandler;
    private boolean mHasFiredReadyEvent;
    private InneractiveInternalBrowserActivity mInternalBrowserActivity;
    private boolean mIsVisible;
    private IAmraidWebView$a mListenerInfo;
    private IAmraidWebViewController mMraidController;
    private final IAmraidWebView$MraidPlacementType mPlacementType;
    private ax mWebViewClient;
    
    IAmraidWebView(final Context context, final IAadConfig mAdConfig, final IAmraidWebView$MraidPlacementType mPlacementType) {
        super(context);
        this.mHasFiredReadyEvent = false;
        this.mPlacementType = mPlacementType;
        this.mHandler = new Handler();
        this.mAdConfig = mAdConfig;
        (this.mGestDetector = new z(context, (View)this, mAdConfig)).a(this);
        final int visibility = this.getVisibility();
        boolean mIsVisible = false;
        if (visibility == 0) {
            mIsVisible = true;
        }
        this.mIsVisible = mIsVisible;
        this.addCloseHTML5VideoInterface();
        this.addUriJavascriptInterface();
    }
    
    private void postHandlerRunnable(final Runnable runnable) {
        this.mHandler.post(runnable);
    }
    
    final void addCloseHTML5VideoInterface() {
        this.addJavascriptInterface((Object)new af(this), "InneractiveCloseHTML5VideoInterface");
    }
    
    final void addUriJavascriptInterface() {
        this.addJavascriptInterface((Object)new ad(this), "UriJavascriptInterface");
    }
    
    final void closeHTML5VideoFullScreenViaJS() {
        this.loadUrl("javascript:(function() { \n\twindow.console.log('Exiting HTML5 video full-screen!'); \n\tvar videos = document.getElementsByTagName('video'); \n\tvar removeListreners = function(video) { \n\t\tvideo.removeEventListener('ended'); \n\t}; \n\t \n\tif (videos.length > 0) { \n\t\tvar video = videos[0]; \n\t\tif (video != null) { \n\t\t\twindow.console.log('Got <video> instance! Pausing.'); \n\t\t\tvideo.pause(); \n\t\t} else { \n\t\t\twindow.console.log('video reference is null!'); \n\t\t} \n\t} \n\tif (typeof InneractiveCloseHTML5VideoInterface !== 'undefined') {InneractiveCloseHTML5VideoInterface.closeHTML5Video();console.log('closing HTML 5 video natively');} \n})();");
    }
    
    @Override
    public final void destroy() {
        this.mMraidController.destroy();
        super.destroy();
    }
    
    protected final void fireChangeEventForAsset(final V v) {
        final String string = "{" + v.toString() + "}";
        this.injectJavaScript("window.mraidbridge.fireChangeEvent(" + string + ");");
        InneractiveAdView$Log.v("Inneractive_verbose", "Fire changes: " + string);
    }
    
    protected final void fireChangeEventForAssets(final ArrayList list) {
        final String string = list.toString();
        if (string.length() < 2) {
            return;
        }
        final String string2 = "{" + string.substring(1, -1 + string.length()) + "}";
        this.injectJavaScript("window.mraidbridge.fireChangeEvent(" + string2 + ");");
        InneractiveAdView$Log.v("Inneractive_verbose", "Fire changes: " + string2);
    }
    
    protected final void fireErrorEvent(final IAmraidActionFactory$MraidJavascriptCommand amraidActionFactory$MraidJavascriptCommand, final String s) {
        this.injectJavaScript("window.mraidbridge.fireErrorEvent('" + amraidActionFactory$MraidJavascriptCommand.a() + "', '" + s + "');");
    }
    
    protected final void fireNativeCommandCompleteEvent(final String s) {
        this.injectJavaScript("window.mraidbridge.nativeCallComplete('" + s + "');");
    }
    
    protected final void fireReadyEvent() {
        this.injectJavaScript("window.mraidbridge.fireReadyEvent();");
    }
    
    final IAadConfig getAdConfig() {
        return this.mAdConfig;
    }
    
    protected final InneractiveInternalBrowserActivity getBrowserController() {
        return this.mInternalBrowserActivity;
    }
    
    final boolean getIsVisible() {
        return this.mIsVisible;
    }
    
    @Override
    public final ay getListener() {
        return this.mListenerInfo.mMraidListener;
    }
    
    protected final IAmraidWebViewController getMraidWebViewController() {
        return this.mMraidController;
    }
    
    final IAmraidWebView$b getOnCloseButtonStateChangeListener() {
        return this.mListenerInfo.mOnCloseButtonListener;
    }
    
    final ax getmWebViewClient() {
        return this.mWebViewClient;
    }
    
    final void initialize(final IAmraidWebView$ExpandMode amraidWebView$ExpandMode, final IAmraidWebView$NativeCloseButtonMode amraidWebView$NativeCloseButtonMode) {
        this.setScrollContainer(false);
        this.setOnTouchListener((View$OnTouchListener)new ac(this));
        this.mInternalBrowserActivity = new InneractiveInternalBrowserActivity();
        InneractiveInternalBrowserActivity.a(this);
        this.mMraidController = new IAmraidWebViewController(this, amraidWebView$ExpandMode, amraidWebView$NativeCloseButtonMode);
        this.mListenerInfo = new IAmraidWebView$a();
        this.setWebViewClient((WebViewClient)(this.mWebViewClient = new ax(this)));
    }
    
    protected final void injectJavaScript(final String s) {
        if (s != null) {
            super.loadUrl("javascript:" + s);
        }
    }
    
    @Override
    final void onAdReadyDOM() {
        this.mIsVisible = (this.getVisibility() == 0);
        this.fireChangeEventForAsset(ab.a(this.mIsVisible));
    }
    
    @Override
    final void onAdReadyWindowOnLoad() {
        this.mIsVisible = (this.getVisibility() == 0);
        this.fireChangeEventForAsset(ab.a(this.mIsVisible));
        if (!this.mHasFiredReadyEvent) {
            this.mMraidController.initializeJavaScriptState();
            this.fireChangeEventForAsset(new X(this.mPlacementType));
            this.injectJavaScript("window.mraidbridge.fireReadyEvent();");
            if (this.getListener() != null) {
                this.getListener().onReady(this);
            }
        }
        this.mHasFiredReadyEvent = true;
    }
    
    @Override
    public final void onApplicationInBackground() {
        if (this.getListener() != null) {
            this.getListener().onAdWillOpenExternalApp();
        }
    }
    
    @Override
    public final void onInternalBrowserDismissed() {
        if (this.getListener() != null) {
            this.getListener().onInternalBrowserDismissed();
        }
    }
    
    protected final void onVisibilityChanged(final View view, final int n) {
        super.onVisibilityChanged(view, n);
        final boolean mIsVisible = n == 0;
        if (mIsVisible != this.mIsVisible) {
            this.mIsVisible = mIsVisible;
            if (this.mHasFiredReadyEvent) {
                this.fireChangeEventForAsset(ab.a(this.mIsVisible));
            }
        }
    }
    
    @Override
    public final void setListener(final ay ay) {
        this.mListenerInfo.mMraidListener = ay;
    }
    
    final void setOnCloseButtonStateChange(final IAmraidWebView$b amraidWebView$b) {
        this.mListenerInfo.mOnCloseButtonListener = amraidWebView$b;
    }
    
    @Override
    final boolean tryCommand(final URI uri) {
        final String host = uri.getHost();
        final List parse = URLEncodedUtils.parse(uri, "UTF-8");
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        for (final NameValuePair nameValuePair : parse) {
            hashMap.put(nameValuePair.getName(), nameValuePair.getValue());
        }
        final E a = IAmraidActionFactory.a(host, hashMap, this);
        if (a == null) {
            this.fireNativeCommandCompleteEvent(host);
            return false;
        }
        if (a.a(this.mPlacementType) && !this.wasClicked()) {
            return false;
        }
        a.a();
        this.fireNativeCommandCompleteEvent(host);
        return true;
    }
}
