// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import android.content.IntentFilter;
import android.os.PowerManager;
import android.view.View;
import android.app.Activity;
import android.webkit.WebViewDatabase;
import android.util.AttributeSet;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.widget.FrameLayout;

public class InneractiveAdView extends FrameLayout
{
    protected IAadViewController a;
    boolean b;
    boolean c;
    private m d;
    private Context e;
    private BroadcastReceiver f;
    private boolean g;
    private boolean h;
    private InneractiveAdView$InneractiveBannerAdListener i;
    private boolean j;
    private boolean k;
    
    public InneractiveAdView(final Context e, final AttributeSet set) {
        super(e, set);
        this.h = true;
        this.b = true;
        this.j = false;
        this.c = false;
        this.k = true;
        this.e = e;
        this.a = l.a(e, this);
        if (set != null) {
            final String string = "http://schemas.android.com/apk/res/" + e.getPackageName();
            this.a.b(set.getAttributeValue(string, "appId"));
            this.a.a(set.getAttributeValue(string, "keywords"));
            this.a.c(set.getAttributeValue(string, "zipCode"));
            this.a.b(set.getAttributeIntValue(string, "age", -1));
            this.a.c(set.getAttributeIntValue(string, "refreshInterval", -1));
            final int attributeIntValue = set.getAttributeIntValue(string, "adType", -1);
            if (attributeIntValue >= 0 && attributeIntValue <= 1) {
                this.a.a(InneractiveAdView$InternalAdType.values()[attributeIntValue]);
            }
            final int attributeIntValue2 = set.getAttributeIntValue(string, "mediationName", -1);
            if (attributeIntValue2 >= 0 && attributeIntValue2 <= 2) {
                this.a.a(InneractiveAdView$MediationName.values()[attributeIntValue2]);
            }
            final int attributeIntValue3 = set.getAttributeIntValue(string, "gender", -1);
            if (attributeIntValue3 >= 0 && attributeIntValue3 <= 1) {
                this.a.a(InneractiveAdView$Gender.values()[attributeIntValue3]);
            }
        }
        this.setHorizontalScrollBarEnabled(false);
        this.setVerticalScrollBarEnabled(false);
        if (WebViewDatabase.getInstance(e) == null) {
            InneractiveAdView$Log.v("Inneractive_verbose", "Could not proceed :-(. http://code.google.com/p/android/issues/detail?id=10789");
        }
    }
    
    public InneractiveAdView(final Context context, final String s, final InneractiveAdView$AdType inneractiveAdView$AdType) {
        this(context, s, inneractiveAdView$AdType.a);
    }
    
    InneractiveAdView(final Context context, final String s, final InneractiveAdView$InternalAdType inneractiveAdView$InternalAdType) {
        this(context, null);
        this.a.b(s);
        this.a.a(inneractiveAdView$InternalAdType);
        if (IAdefines$ApiLevel.a().equals(IAdefines$ApiLevel.a) || IAdefines$ApiLevel.a().equals(IAdefines$ApiLevel.b)) {
            IAadConfig.b(true);
        }
        else {
            final Activity activity = (Activity)context;
            if (activity != null) {
                IAadConfig.b(d$a.a(activity));
            }
        }
    }
    
    void a() {
        if (this.a != null) {
            this.a.a();
        }
    }
    
    final void a(final View view) {
        if (this.a != null) {
            this.a.a(view);
        }
    }
    
    protected final void a(final IAdefines$IAIntegratedSdksTrackingAction adefines$IAIntegratedSdksTrackingAction) {
        InneractiveAdView$Log.v("Inneractive_verbose", "Tracking native action. ");
        if (this.a != null) {
            new Thread(new j(this.a, adefines$IAIntegratedSdksTrackingAction)).start();
        }
    }
    
    void a(final IAresponseData aresponseData) {
        if (this.a == null) {
            return;
        }
        if (aresponseData == null) {
            InneractiveAdView$Log.d("Inneractive_debug", "Couldn't load ad because the server did not specify one.");
            this.b(InneractiveAdView$InneractiveErrorCode.SDK_INTERNAL_ERROR);
            return;
        }
        if (this.d != null) {
            this.d.j();
        }
        (this.d = q.a(this, aresponseData)).i();
    }
    
    protected final void a(final InneractiveAdView$InneractiveErrorCode inneractiveAdView$InneractiveErrorCode) {
        InneractiveAdView$Log.v("Inneractive_verbose", "Error Code: " + inneractiveAdView$InneractiveErrorCode);
        if (InneractiveAdView$InneractiveErrorCode.NO_FILL.equals(inneractiveAdView$InneractiveErrorCode)) {
            if (this.a != null) {
                this.a.l().h = "inneractive_mraid";
                this.a(this.a.l());
            }
            return;
        }
        this.b(inneractiveAdView$InneractiveErrorCode);
    }
    
    final void a(final boolean b) {
        if (this.a != null) {
            this.a.a(false);
        }
    }
    
    Integer b() {
        if (this.a != null) {
            return this.a.o();
        }
        return null;
    }
    
    protected void b(final InneractiveAdView$InneractiveErrorCode inneractiveAdView$InneractiveErrorCode) {
        InneractiveAdView$Log.v("Inneractive_verbose", "adFailed");
        this.c = false;
        if (this.i != null) {
            this.i.inneractiveBannerFailed(this, inneractiveAdView$InneractiveErrorCode);
        }
        if (InneractiveAdView$InneractiveErrorCode.INVALID_INPUT.equals(inneractiveAdView$InneractiveErrorCode) || InneractiveAdView$InneractiveErrorCode.UNKNOWN_APP_ID.equals(inneractiveAdView$InneractiveErrorCode)) {
            this.a.a(false);
            return;
        }
        this.a.a(15000);
    }
    
    protected final void c() {
        if (this.a != null) {
            new Thread(new i(this.a)).start();
        }
    }
    
    protected void d() {
        InneractiveAdView$Log.v("Inneractive_verbose", "adLoaded");
        this.c = false;
        if (this.a != null && this.a.m() != null) {
            final String a = this.a.m().A();
            if (a != null && !"".equals(a)) {
                this.a(IAdefines$IAIntegratedSdksTrackingAction.a);
            }
        }
        if (this.i != null) {
            this.i.inneractiveBannerLoaded(this);
        }
        this.a.a(1000 * this.a.g());
    }
    
    public void destroy() {
        while (true) {
            try {
                this.e.unregisterReceiver(this.f);
                this.removeAllViews();
                if (this.a != null) {
                    this.a.n();
                    this.a = null;
                }
                if (this.d != null) {
                    this.d.j();
                    this.d = null;
                }
            }
            catch (Exception ex) {
                InneractiveAdView$Log.v("Inneractive_verbose", "Broadcast receiver was not registered and therfore won't be released.");
                continue;
            }
            break;
        }
    }
    
    protected void e() {
        InneractiveAdView$Log.v("Inneractive_verbose", "defaultAdLoaded");
        this.c = false;
        if (this.a != null && this.a.m() != null) {
            final String a = this.a.m().A();
            if (a != null && !"".equals(a)) {
                this.a(IAdefines$IAIntegratedSdksTrackingAction.a);
            }
        }
        if (this.i != null) {
            this.i.inneractiveDefaultBannerLoaded(this);
        }
        this.a.a(1000 * this.a.g());
    }
    
    protected final void f() {
        InneractiveAdView$Log.v("Inneractive_verbose", "adExpanded");
        this.j = true;
        this.c = false;
        if (this.i != null) {
            this.i.inneractiveBannerExpanded(this);
        }
        this.a.a(false);
    }
    
    public void forceRefresh() {
        if (this instanceof InneractiveInterstitialView) {
            InneractiveAdView$Log.i("Inneractive_info", "The option to set the refresh interval for is available ONLY for banner/rectangle!");
        }
        else {
            if (this.d != null) {
                this.d.j();
                this.d = null;
            }
            if (this.a != null) {
                this.a.b();
            }
        }
    }
    
    protected final void g() {
        InneractiveAdView$Log.v("Inneractive_verbose", "adCollapsed");
        this.j = false;
        this.c = false;
        if (this.i != null) {
            this.i.inneractiveBannerCollapsed(this);
        }
        final boolean screenOn = ((PowerManager)this.e.getSystemService("power")).isScreenOn();
        if (this.isShown() && screenOn) {
            this.a.a(true);
            return;
        }
        this.a.a(1000);
    }
    
    public int getAdHeight() {
        if (this.a != null) {
            return this.a.j();
        }
        return 0;
    }
    
    public int getAdWidth() {
        if (this.a != null) {
            return this.a.i();
        }
        return 0;
    }
    
    public int getAge() {
        Integer value;
        if (this.a != null) {
            value = this.a.f();
        }
        else {
            value = null;
        }
        return value;
    }
    
    public InneractiveAdView$InneractiveBannerAdListener getBannerAdListener() {
        return this.i;
    }
    
    public String getGender() {
        if (this.a != null) {
            return this.a.e();
        }
        return null;
    }
    
    public String getKeywords() {
        if (this.a != null) {
            return this.a.d();
        }
        return null;
    }
    
    public int getRefreshInterval() {
        Integer value;
        if (this.a != null) {
            value = this.a.g();
        }
        else {
            value = null;
        }
        return value;
    }
    
    public String getSDKversion() {
        return "5.0.1";
    }
    
    public String getZipCode() {
        if (this.a != null) {
            return this.a.h();
        }
        return null;
    }
    
    protected final void h() {
        InneractiveAdView$Log.v("Inneractive_verbose", "adResized");
        this.c = false;
        if (this.i != null) {
            this.i.inneractiveBannerResized(this);
        }
    }
    
    protected void i() {
        InneractiveAdView$Log.v("Inneractive_verbose", "adClicked");
        this.c = true;
        if (this.a != null && this.a.m() != null) {
            final String b = this.a.m().B();
            if (b != null && !"".equals(b) && !"IA".equals(b)) {
                this.a(IAdefines$IAIntegratedSdksTrackingAction.b);
            }
        }
        if (this.i != null) {
            this.i.inneractiveBannerClicked(this);
        }
    }
    
    protected void j() {
        InneractiveAdView$Log.v("Inneractive_verbose", "applicationInTheBackground");
        if (this.i != null) {
            this.i.inneractiveAdWillOpenExternalApp(this);
        }
    }
    
    protected void k() {
        InneractiveAdView$Log.v("Inneractive_verbose", "intenalBrowserDissmissed");
        if (this.i != null) {
            this.i.inneractiveInternalBrowserDismissed(this);
        }
    }
    
    final Activity l() {
        return (Activity)this.e;
    }
    
    public void loadAd() {
        this.b = true;
        if (!(this instanceof InneractiveInterstitialView)) {
            InneractiveAdView$Log.v("Inneractive_verbose", "register to screen state broadcast receiver");
            if (this.a != null && !(this instanceof InneractiveInterstitialView)) {
                this.f = new az(this);
                final IntentFilter intentFilter = new IntentFilter("android.intent.action.SCREEN_OFF");
                intentFilter.addAction("android.intent.action.SCREEN_ON");
                intentFilter.addAction("android.intent.action.USER_PRESENT");
                this.e.registerReceiver(this.f, intentFilter);
            }
        }
        this.a();
    }
    
    final boolean m() {
        if (this.a != null) {
            return this.a.k();
        }
        InneractiveAdView$Log.v("Inneractive_verbose", "Can't get auto refresh status");
        return false;
    }
    
    final IAadViewController n() {
        return this.a;
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        InneractiveAdView$Log.v("Inneractive_verbose", "onWindowVisibilityChanged");
        if (this.a == null || this instanceof InneractiveInterstitialView) {
            return;
        }
        if (n == 0 && !this.j && !this.k) {
            InneractiveAdView$Log.v("Inneractive_verbose", "Enable Refresh (ad is visible).");
            this.g = true;
            this.a.a(true);
            return;
        }
        if (n == 0 && !this.j && this.k) {
            this.g = true;
            this.k = false;
            return;
        }
        InneractiveAdView$Log.v("Inneractive_verbose", "Refresh Disabled (ad is invisible).");
        if (!this.c) {
            this.g = false;
        }
        this.a.a(false);
    }
    
    public void setAge(final int n) {
        if (this.a != null) {
            this.a.b(n);
        }
    }
    
    public void setBannerAdListener(final InneractiveAdView$InneractiveBannerAdListener i) {
        this.i = i;
    }
    
    public void setGender(final InneractiveAdView$Gender inneractiveAdView$Gender) {
        if (this.a != null) {
            this.a.a(inneractiveAdView$Gender);
        }
    }
    
    public void setKeywords(final String s) {
        if (this.a != null) {
            this.a.a(s);
        }
    }
    
    public void setMediationName(final InneractiveAdView$MediationName inneractiveAdView$MediationName) {
        if (this.a != null && inneractiveAdView$MediationName != null) {
            this.a.a(inneractiveAdView$MediationName);
            InneractiveAdView$Log.i("Inneractive_info", "Setting the mediation Name to: " + inneractiveAdView$MediationName + " as the refresh interval should be turned off for mediation, the refresh interval will be set to 0 and autoRefresh will be turned off");
            this.a.a(false);
            this.a.c(0);
        }
    }
    
    public void setRefreshInterval(final int n) {
        if (this instanceof InneractiveInterstitialView) {
            InneractiveAdView$Log.i("Inneractive_info", "The option to set the refresh interval for is available ONLY for banner/rectangle!");
        }
        else if (this.a != null) {
            this.a.c(n);
        }
    }
    
    public void setZipCode(final String s) {
        if (this.a != null) {
            this.a.c(s);
        }
    }
    
    public void testEnvironmentConfigurationName(final String s) {
        if (this.a != null) {
            this.a.d(s);
        }
    }
    
    public void testEnvironmentConfigurationNumber(final String s) {
        if (this.a != null) {
            this.a.e(s);
        }
    }
}
