// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.view.View$OnClickListener;
import android.widget.ImageButton;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.widget.FrameLayout$LayoutParams;
import android.net.Uri;
import java.util.ArrayList;
import android.webkit.URLUtil;
import java.util.Iterator;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import java.util.HashMap;
import android.view.ViewGroup;
import java.util.Map;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import android.view.Window;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.os.Environment;
import org.apache.http.Header;
import android.view.WindowManager;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.view.View$OnTouchListener;
import java.io.File;
import android.content.DialogInterface$OnClickListener;
import android.app.AlertDialog$Builder;
import org.apache.http.HttpResponse;
import java.net.URI;
import android.content.Context;
import android.app.Activity;
import android.view.View;
import android.os.Handler;
import android.widget.RelativeLayout;
import android.widget.ImageView;
import android.widget.FrameLayout;

final class IAmraidWebViewController
{
    private static final int CLOSE_BUTTON_SIZE_DP = 50;
    private static final String[] DATE_FORMATS;
    private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
    protected IAmraidWebViewController$ForceOrientationType forceOrientation;
    private FrameLayout mAdContainerLayout;
    protected int mAdHeight;
    private boolean mAdWantsCustomCloseButton;
    protected int mAdWidth;
    private ImageView mCloseButton;
    protected float mDensity;
    private RelativeLayout mExpandLayout;
    private final IAmraidWebView$ExpandMode mExpandMode;
    private Handler mHandler;
    protected int mMaxHeight;
    protected int mMaxWidth;
    IAmraidWebView mMraidView;
    private final IAmraidWebView$NativeCloseButtonMode mNativeCloseButtonMode;
    private IAmraidWebViewController$b mOrientationBroadcastReceiver;
    private final int mOriginalRequestedOrientation;
    private FrameLayout mPlaceholderView;
    private FrameLayout mRootView;
    protected int mScreenHeight;
    protected int mScreenWidth;
    private IAmraidWebView mSecondExpandView;
    private int mViewIndexInParent;
    private IAbaseWebView$IAviewState mViewState;
    View resizedContentView;
    
    static {
        DATE_FORMATS = new String[] { "yyyy-MM-dd'T'HH:mm:ssZZZZZ", "yyyy-MM-dd'T'HH:mmZZZZZ" };
    }
    
    IAmraidWebViewController(final IAmraidWebView mMraidView, final IAmraidWebView$ExpandMode mExpandMode, final IAmraidWebView$NativeCloseButtonMode mNativeCloseButtonMode) {
        this.mViewState = IAbaseWebView$IAviewState.e;
        this.mHandler = new Handler();
        this.mOrientationBroadcastReceiver = new IAmraidWebViewController$b(this);
        this.mScreenWidth = -1;
        this.mScreenHeight = -1;
        this.mMaxWidth = -1;
        this.mMaxHeight = -1;
        this.mAdWidth = -1;
        this.mAdHeight = -1;
        this.forceOrientation = IAmraidWebViewController$ForceOrientationType.NONE;
        this.mMraidView = mMraidView;
        this.mExpandMode = mExpandMode;
        this.mNativeCloseButtonMode = mNativeCloseButtonMode;
        final Context context = this.getContext();
        int requestedOrientation;
        if (context instanceof Activity) {
            requestedOrientation = ((Activity)context).getRequestedOrientation();
        }
        else {
            requestedOrientation = -1;
        }
        this.mOriginalRequestedOrientation = requestedOrientation;
        this.mAdContainerLayout = this.generateAdContainerLayout();
        this.mExpandLayout = this.generateExpandLayout();
        this.mPlaceholderView = this.generatePlaceholderView();
        this.initialize();
    }
    
    private String dayNumberToDayOfMonthString(final int n) {
        if (n != 0 && n >= -31 && n <= 31) {
            return new StringBuilder().append(n).toString();
        }
        throw new IllegalArgumentException("invalid day of month " + n);
    }
    
    private String dayNumberToDayOfWeekString(final int n) {
        switch (n) {
            default: {
                throw new IllegalArgumentException("invalid day of week " + n);
            }
            case 0: {
                return "SU";
            }
            case 1: {
                return "MO";
            }
            case 2: {
                return "TU";
            }
            case 3: {
                return "WE";
            }
            case 4: {
                return "TH";
            }
            case 5: {
                return "FR";
            }
            case 6: {
                return "SA";
            }
        }
    }
    
    private void displayDialog(final String s) {
        new AlertDialog$Builder(this.getContext()).setTitle((CharSequence)"Save Image").setMessage((CharSequence)"Download image to Picture gallery?").setNegativeButton((CharSequence)"Cancel", (DialogInterface$OnClickListener)null).setPositiveButton((CharSequence)"Okay", (DialogInterface$OnClickListener)new al(this, s)).setCancelable(true).show();
    }
    
    private void displayToast(final String s) {
        this.mHandler.post((Runnable)new ai(this, s));
    }
    
    private void downloadImage(final String s) {
        final File pictureStoragePath = this.getPictureStoragePath();
        pictureStoragePath.mkdirs();
        new Thread(new aj(this, s, pictureStoragePath)).start();
    }
    
    private void expandLayouts(final View view, int n, int n2) {
        final int n3 = (int)(0.5f + 50.0f * this.mDensity);
        if (n < n3) {
            n = n3;
        }
        if (n2 < n3) {
            n2 = n3;
        }
        final View view2 = new View(this.getContext());
        view2.setBackgroundColor(0);
        view2.setOnTouchListener((View$OnTouchListener)new am(this));
        this.mExpandLayout.addView(view2, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
        d$a.a(view);
        this.mAdContainerLayout.addView(view, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
        d$a.a((View)this.mAdContainerLayout);
        final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(n, n2);
        relativeLayout$LayoutParams.addRule(13);
        this.mExpandLayout.addView((View)this.mAdContainerLayout, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
    }
    
    private Context getContext() {
        return this.getView().getContext();
    }
    
    private int getDisplayOrientation() {
        return ((WindowManager)this.getContext().getSystemService("window")).getDefaultDisplay().getOrientation();
    }
    
    private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse httpResponse) {
        final String path = uri.getPath();
        String name;
        if (path == null) {
            name = null;
        }
        else {
            name = new File(path).getName();
            final Header firstHeader = httpResponse.getFirstHeader("text/html");
            if (firstHeader != null) {
                final String[] split = firstHeader.getValue().split(";");
                final int length = split.length;
                int i = 0;
                while (i < length) {
                    final String s = split[i];
                    if (s.contains("image/")) {
                        final String string = "." + s.split("/")[1];
                        if (!name.endsWith(string)) {
                            return name + string;
                        }
                        break;
                    }
                    else {
                        ++i;
                    }
                }
            }
        }
        return name;
    }
    
    private File getPictureStoragePath() {
        return new File(Environment.getExternalStorageDirectory(), "Pictures");
    }
    
    private void initialize() {
        this.mViewState = IAbaseWebView$IAviewState.a;
        this.initializeScreenMetrics();
        this.mOrientationBroadcastReceiver.register(this.getContext());
    }
    
    private void initializeScreenMetrics() {
        final Context context = this.getContext();
        final DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager)context.getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.mDensity = displayMetrics.density;
        int top;
        int n;
        if (context instanceof Activity) {
            final Window window = ((Activity)context).getWindow();
            final Rect rect = new Rect();
            window.getDecorView().getWindowVisibleDisplayFrame(rect);
            top = rect.top;
            n = window.findViewById(16908290).getTop() - top;
        }
        else {
            n = 0;
            top = 0;
        }
        final int widthPixels = displayMetrics.widthPixels;
        final int heightPixels = displayMetrics.heightPixels;
        this.mScreenWidth = (int)(widthPixels * (160.0 / displayMetrics.densityDpi));
        this.mScreenHeight = (int)(heightPixels * (160.0 / displayMetrics.densityDpi));
        final int n2 = displayMetrics.heightPixels - top - n;
        this.mMaxWidth = (int)(widthPixels * (160.0 / displayMetrics.densityDpi));
        this.mMaxHeight = (int)(n2 * (160.0 / displayMetrics.densityDpi));
    }
    
    private void onOrientationChanged(final int n) {
        this.initializeScreenMetrics();
        this.getView().fireChangeEventForAsset(Y.a(this.mScreenWidth, this.mScreenHeight));
        this.getView().fireChangeEventForAsset(W.a(this.mMaxWidth, this.mMaxHeight));
        if (this.mAdWidth != -1 && this.mAdHeight != -1) {
            this.getView().fireChangeEventForAsset(U.a(this.mAdWidth, this.mAdHeight));
        }
    }
    
    private Date parseDate(final String s) {
        Date parse = null;
        int n = 0;
        while (true) {
            if (n >= IAmraidWebViewController.DATE_FORMATS.length) {
                return parse;
            }
            try {
                parse = new SimpleDateFormat(IAmraidWebViewController.DATE_FORMATS[n]).parse(s);
                if (parse != null) {
                    return parse;
                }
            }
            catch (ParseException ex) {}
            ++n;
        }
    }
    
    private String parseRecurrenceRule(final Map map) {
        final StringBuilder sb = new StringBuilder();
        if (map.containsKey("frequency")) {
            final String s = map.get("frequency");
            int int1;
            if (map.containsKey("interval")) {
                int1 = Integer.parseInt(map.get("interval"));
            }
            else {
                int1 = -1;
            }
            if ("daily".equals(s)) {
                sb.append("FREQ=DAILY;");
                if (int1 != -1) {
                    sb.append("INTERVAL=" + int1 + ";");
                }
            }
            else if ("weekly".equals(s)) {
                sb.append("FREQ=WEEKLY;");
                if (int1 != -1) {
                    sb.append("INTERVAL=" + int1 + ";");
                }
                if (map.containsKey("daysInWeek")) {
                    final String translateWeekIntegersToDays = this.translateWeekIntegersToDays(map.get("daysInWeek"));
                    if (translateWeekIntegersToDays == null) {
                        throw new IllegalArgumentException("invalid ");
                    }
                    sb.append("BYDAY=" + translateWeekIntegersToDays + ";");
                }
            }
            else {
                if (!"monthly".equals(s)) {
                    throw new IllegalArgumentException("frequency is only supported for daily, weekly, and monthly.");
                }
                sb.append("FREQ=MONTHLY;");
                if (int1 != -1) {
                    sb.append("INTERVAL=" + int1 + ";");
                }
                if (map.containsKey("daysInMonth")) {
                    final String translateMonthIntegersToDays = this.translateMonthIntegersToDays(map.get("daysInMonth"));
                    if (translateMonthIntegersToDays == null) {
                        throw new IllegalArgumentException();
                    }
                    sb.append("BYMONTHDAY=" + translateMonthIntegersToDays + ";");
                }
            }
        }
        return sb.toString();
    }
    
    private void resetToDefaultState() {
        this.setNativeCloseButtonEnabled(false);
        this.mAdContainerLayout.removeAllViewsInLayout();
        this.mExpandLayout.removeAllViewsInLayout();
        if (this.mRootView != null) {
            this.mRootView.removeView((View)this.mExpandLayout);
        }
        if (this.resizedContentView != null) {
            final Context context = this.getContext();
            if (d$a.l(context)) {
                d$a.a(IAdefines$IAbannerDefaultHeight.d.e, context);
            }
            else if (d$a.m(context)) {
                float n;
                if (d$a.n(context) == 1) {
                    n = IAdefines$IAbannerDefaultHeight.b.e;
                }
                else {
                    n = IAdefines$IAbannerDefaultHeight.c.e;
                }
                d$a.a(n, context);
            }
            else {
                d$a.a(IAdefines$IAbannerDefaultHeight.a.e, context);
            }
            this.resizedContentView.setLayoutParams((ViewGroup$LayoutParams)this.getView().getAdConfig().a((View)this.getView(), this.getContext()));
        }
        this.getView().requestLayout();
        final ViewGroup viewGroup = (ViewGroup)this.mPlaceholderView.getParent();
        if (viewGroup != null) {
            viewGroup.addView((View)this.getView(), this.mViewIndexInParent, (ViewGroup$LayoutParams)this.getView().getAdConfig().a((View)this.getView(), this.getContext()));
            viewGroup.removeView((View)this.mPlaceholderView);
            viewGroup.invalidate();
        }
    }
    
    private void setOrientationLock(final IAmraidWebViewController$ForceOrientationType amraidWebViewController$ForceOrientationType) {
        final IAbaseWebView$IAviewState mViewState = this.mViewState;
        final IAbaseWebView$IAviewState c = IAbaseWebView$IAviewState.c;
    }
    
    private void setOrientationLockEnabled(final boolean b) {
        final Context context = this.getContext();
        try {
            final Activity activity = (Activity)context;
            int requestedOrientation;
            if (b) {
                requestedOrientation = activity.getResources().getConfiguration().orientation;
            }
            else {
                requestedOrientation = this.mOriginalRequestedOrientation;
            }
            activity.setRequestedOrientation(requestedOrientation);
        }
        catch (ClassCastException ex) {
            InneractiveAdView$Log.d("Inneractive_debug", "Failed to modify the device orientation.");
        }
    }
    
    private void swapViewWithPlaceholderView() {
        final ViewGroup viewGroup = (ViewGroup)this.getView().getParent();
        if (viewGroup == null) {
            return;
        }
        int childCount;
        int mViewIndexInParent;
        for (childCount = viewGroup.getChildCount(), mViewIndexInParent = 0; mViewIndexInParent < childCount && viewGroup.getChildAt(mViewIndexInParent) != this.getView(); ++mViewIndexInParent) {}
        this.mViewIndexInParent = mViewIndexInParent;
        d$a.a((View)this.mPlaceholderView);
        viewGroup.addView((View)this.mPlaceholderView, mViewIndexInParent, new ViewGroup$LayoutParams(this.getView().getWidth(), this.getView().getHeight()));
        viewGroup.removeView((View)this.getView());
    }
    
    private Map translateJSParamsToAndroidCalendarEventMapping(final Map map) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        if (!map.containsKey("description") || !map.containsKey("start")) {
            throw new IllegalArgumentException("Missing start and description fields");
        }
        hashMap.put("title", map.get("description"));
        if (!map.containsKey("start") || map.get("start") == null) {
            throw new IllegalArgumentException("Invalid calendar event: start is null.");
        }
        final Date date = this.parseDate(map.get("start"));
        if (date != null) {
            hashMap.put("beginTime", (String)date.getTime());
            if (map.containsKey("end") && map.get("end") != null) {
                final Date date2 = this.parseDate(map.get("end"));
                if (date2 == null) {
                    throw new IllegalArgumentException("Invalid calendar event: end time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
                }
                hashMap.put("endTime", (String)date2.getTime());
            }
            if (map.containsKey("location")) {
                hashMap.put("eventLocation", map.get("location"));
            }
            if (map.containsKey("summary")) {
                hashMap.put("description", map.get("summary"));
            }
            if (map.containsKey("transparency")) {
                int n;
                if ("transparent".equals(map.get("transparency"))) {
                    n = 1;
                }
                else {
                    n = 0;
                }
                hashMap.put("availability", (String)n);
            }
            hashMap.put("rrule", this.parseRecurrenceRule(map));
            return hashMap;
        }
        throw new IllegalArgumentException("Invalid calendar event: start time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
    }
    
    private String translateMonthIntegersToDays(final String s) {
        final StringBuilder sb = new StringBuilder();
        final boolean[] array = new boolean[63];
        final String[] split = s.split(",");
        for (int i = 0; i < split.length; ++i) {
            final int int1 = Integer.parseInt(split[i]);
            if (!array[int1 + 31]) {
                sb.append(this.dayNumberToDayOfMonthString(int1) + ",");
                array[int1 + 31] = true;
            }
        }
        if (split.length == 0) {
            throw new IllegalArgumentException("must have at least 1 day of the month if specifying repeating weekly");
        }
        sb.deleteCharAt(-1 + sb.length());
        return sb.toString();
    }
    
    private String translateWeekIntegersToDays(final String s) {
        final StringBuilder sb = new StringBuilder();
        final boolean[] array = new boolean[7];
        final String[] split = s.split(",");
        for (int i = 0; i < split.length; ++i) {
            int int1 = Integer.parseInt(split[i]);
            if (int1 == 7) {
                int1 = 0;
            }
            if (!array[int1]) {
                sb.append(this.dayNumberToDayOfWeekString(int1) + ",");
                array[int1] = true;
            }
        }
        if (split.length == 0) {
            throw new IllegalArgumentException("must have at least 1 day of the week if specifying repeating weekly");
        }
        sb.deleteCharAt(-1 + sb.length());
        return sb.toString();
    }
    
    protected final void close() {
        if (this.mViewState == IAbaseWebView$IAviewState.c || this.mViewState == IAbaseWebView$IAviewState.d) {
            this.resetToDefaultState();
            this.setOrientationLockEnabled(false);
            this.mViewState = IAbaseWebView$IAviewState.b;
            this.getView().fireChangeEventForAsset(Z.a(this.mViewState));
        }
        else if (this.mViewState == IAbaseWebView$IAviewState.b) {
            this.getView().setVisibility(4);
            this.mViewState = IAbaseWebView$IAviewState.e;
            this.getView().fireChangeEventForAsset(Z.a(this.mViewState));
        }
        if (this.getView().getListener() != null) {
            this.getView().getListener().onClose(this.getView(), this.mViewState);
        }
    }
    
    protected final void createCalendarEvent(final Map map) {
        final Context context = this.getView().getContext();
        if (d$a.k(context)) {
            Intent setType;
            try {
                final Map translateJSParamsToAndroidCalendarEventMapping = this.translateJSParamsToAndroidCalendarEventMapping(map);
                setType = new Intent("android.intent.action.INSERT").setType("vnd.android.cursor.item/event");
                for (final String s : translateJSParamsToAndroidCalendarEventMapping.keySet()) {
                    final V value = translateJSParamsToAndroidCalendarEventMapping.get(s);
                    if (!(value instanceof Long)) {
                        goto Label_0139;
                    }
                    setType.putExtra(s, (long)value);
                }
            }
            catch (ActivityNotFoundException ex2) {
                InneractiveAdView$Log.d("Inneractive_debug", "There is no calendar app installed!");
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.o, "Action is unsupported on this device - no calendar app installed");
                return;
            }
            catch (IllegalArgumentException ex) {
                InneractiveAdView$Log.d("Inneractive_debug", "invalid parameters for create calendar " + ex.getMessage());
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.o, ex.getMessage());
                return;
            }
            catch (Exception ex3) {
                InneractiveAdView$Log.d("Inneractive_debug", "Failed to create calendar event.");
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.o, "could not create calendar event");
                return;
            }
            setType.setFlags(268435456);
            context.startActivity(setType);
            return;
        }
        InneractiveAdView$Log.d("Inneractive_debug", "createCalendarEvent supported for devices post-ICS");
        this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.o, "Action is unsupported on this device (need Android version Ice Cream Sandwich or above)");
    }
    
    public final void destroy() {
        try {
            this.mOrientationBroadcastReceiver.unregister();
        }
        catch (IllegalArgumentException ex) {
            if (!ex.getMessage().contains("Receiver not registered")) {
                throw ex;
            }
        }
    }
    
    protected final void displayDownloadImageAlert(final String s) {
        final Context context = this.getContext();
        if (!d$a.j(context)) {
            this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.j, "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
            InneractiveAdView$Log.d("Inneractive_debug", "Error downloading file. Please check if the Android permission is not granted, or maybe the device does not have an SD card mounted? ");
            return;
        }
        if (context instanceof Activity) {
            this.displayDialog(s);
            return;
        }
        this.displayToast("Downloading image to Picture gallery...");
        this.downloadImage(s);
    }
    
    protected final void displayVideo(final String s) {
        InneractiveRichMediaVideoPlayerActivity.a(this.getContext(), s);
    }
    
    protected final void expand(final String s, final int mAdWidth, final int mAdHeight, final boolean b, final boolean orientationLockEnabled) {
        if (this.mExpandMode != IAmraidWebView$ExpandMode.DISABLED && this.mViewState == IAbaseWebView$IAviewState.b) {
            if (s != null && !URLUtil.isValidUrl(s)) {
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.b, "URL passed to expand() was invalid.");
                return;
            }
            this.mRootView = (FrameLayout)this.getView().getRootView().findViewById(16908290);
            this.useCustomClose(b);
            this.setOrientationLockEnabled(orientationLockEnabled);
            this.swapViewWithPlaceholderView();
            this.mAdHeight = mAdHeight;
            this.mAdWidth = mAdWidth;
            IAmraidWebView amraidWebView = this.getView();
            if (s != null) {
                (this.mSecondExpandView = ao.createInstance(this.getContext(), this.getView().getAdConfig(), IAmraidWebView$ExpandMode.DISABLED, IAmraidWebView$NativeCloseButtonMode.AD_CONTROLLED, IAmraidWebView$MraidPlacementType.INLINE)).setListener(new ah(this));
                this.mSecondExpandView.loadUrl(s);
                amraidWebView = this.mSecondExpandView;
            }
            this.expandLayouts((View)amraidWebView, (int)(mAdWidth * this.mDensity), (int)(mAdHeight * this.mDensity));
            d$a.a((View)this.mExpandLayout);
            this.mRootView.addView((View)this.mExpandLayout, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-2, -2));
            if (this.mNativeCloseButtonMode == IAmraidWebView$NativeCloseButtonMode.ALWAYS_VISIBLE || (!this.mAdWantsCustomCloseButton && this.mNativeCloseButtonMode != IAmraidWebView$NativeCloseButtonMode.ALWAYS_HIDDEN)) {
                this.setNativeCloseButtonEnabled(true);
            }
            this.mViewState = IAbaseWebView$IAviewState.c;
            this.getView().fireChangeEventForAsset(Z.a(this.mViewState));
            if (this.mAdWidth != -1 && this.mAdHeight != -1) {
                this.getView().fireChangeEventForAsset(U.a(this.mAdWidth, this.mAdHeight));
            }
            if (this.getView().getListener() != null) {
                this.getView().getListener().onExpand(this.getView());
            }
        }
    }
    
    final FrameLayout generateAdContainerLayout() {
        return new FrameLayout(this.getContext());
    }
    
    final RelativeLayout generateExpandLayout() {
        return new RelativeLayout(this.getContext());
    }
    
    final FrameLayout generatePlaceholderView() {
        return new FrameLayout(this.getContext());
    }
    
    protected final void getCurrentPosition() {
        this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.k, "Unsupported action getCurrentPosition");
    }
    
    protected final void getDefaultPosition() {
        this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.l, "Unsupported action getDefaultPosition");
    }
    
    protected final void getMaxSize() {
        this.getView().fireChangeEventForAsset(W.a(this.mMaxWidth, this.mMaxHeight));
    }
    
    protected final void getResizeProperties() {
    }
    
    protected final void getScreenSize() {
        this.getView().fireChangeEventForAsset(Y.a(this.mScreenWidth, this.mScreenHeight));
    }
    
    public final IAmraidWebView getView() {
        return this.mMraidView;
    }
    
    protected final void initializeJavaScriptState() {
        final ArrayList<Y> list = new ArrayList<Y>();
        list.add(Y.a(this.mScreenWidth, this.mScreenHeight));
        list.add((Y)W.a(this.mMaxWidth, this.mMaxHeight));
        this.getView().fireChangeEventForAssets(list);
        this.mViewState = IAbaseWebView$IAviewState.b;
        this.getView().fireChangeEventForAsset(Z.a(this.mViewState));
        this.initializeSupportedFunctionsAssets();
    }
    
    protected final void initializeSupportedFunctionsAssets() {
        final Context context = this.getContext();
        final IAmraidWebView view = this.getView();
        final aa aa = new aa();
        final Intent intent = new Intent("android.intent.action.DIAL");
        intent.setData(Uri.parse("tel:"));
        final aa b = aa.b(d$a.a(context, intent));
        final Intent intent2 = new Intent("android.intent.action.VIEW");
        intent2.setData(Uri.parse("sms:"));
        view.fireChangeEventForAsset(b.a(d$a.a(context, intent2)).c(d$a.k(context)).e(d$a.a(context, new Intent(context, (Class)InneractiveRichMediaVideoPlayerActivity.class))).d(d$a.j(context)));
    }
    
    protected final boolean isExpanded() {
        return this.mViewState == IAbaseWebView$IAviewState.c;
    }
    
    protected final void resize(final int mAdWidth, final int mAdHeight, final int n, int n2, final boolean b, final String s) {
        this.mRootView = (FrameLayout)this.getView().getRootView().findViewById(16908290);
        if (this.mExpandMode != IAmraidWebView$ExpandMode.DISABLED) {
            if (this.mViewState != IAbaseWebView$IAviewState.b && this.mViewState != IAbaseWebView$IAviewState.d) {
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.e, "Ad can be resized only if it's state is default or resized.");
                return;
            }
            if (mAdWidth < 0 && mAdHeight < 0) {
                this.getView().fireErrorEvent(IAmraidActionFactory$MraidJavascriptCommand.e, "Creative size passed to resize() was invalid.");
                return;
            }
            this.useCustomClose(false);
            if (this.mNativeCloseButtonMode == IAmraidWebView$NativeCloseButtonMode.ALWAYS_VISIBLE || (!this.mAdWantsCustomCloseButton && this.mNativeCloseButtonMode != IAmraidWebView$NativeCloseButtonMode.ALWAYS_HIDDEN)) {
                this.setNativeCloseButtonEnabled(true);
            }
            this.setOrientationLockEnabled(false);
            this.mAdHeight = mAdHeight;
            this.mAdWidth = mAdWidth;
            this.resizedContentView = (View)this.getView();
            int leftMargin;
            int topMargin;
            if (!b) {
                final int n3 = n + mAdWidth - this.mScreenWidth;
                if (n3 > 0) {
                    leftMargin = n - n3;
                }
                else {
                    leftMargin = n;
                }
                if (leftMargin < 0) {
                    leftMargin = 0;
                }
                final int n4 = n2 + mAdHeight - this.mScreenHeight;
                if (n4 > 0) {
                    n2 -= n4;
                }
                topMargin = 0;
                if (n2 >= 0) {
                    topMargin = n2;
                }
            }
            else {
                topMargin = n2;
                leftMargin = n;
            }
            final FrameLayout$LayoutParams layoutParams = new FrameLayout$LayoutParams(d$a.b(this.getContext(), mAdWidth), d$a.b(this.getContext(), mAdHeight));
            layoutParams.leftMargin = leftMargin;
            layoutParams.topMargin = topMargin;
            if (leftMargin == 0 && topMargin == 0) {
                layoutParams.gravity = 17;
            }
            this.resizedContentView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
            if (this.mViewState != IAbaseWebView$IAviewState.d) {
                this.mViewState = IAbaseWebView$IAviewState.d;
                this.getView().fireChangeEventForAsset(Z.a(this.mViewState));
                if (this.mAdWidth != -1 && this.mAdHeight != -1) {
                    this.getView().fireChangeEventForAsset(U.a(this.mAdWidth, this.mAdHeight));
                }
            }
            if (this.getView().getListener() != null) {
                this.getView().getListener().onResize(this.getView());
            }
        }
    }
    
    protected final void setNativeCloseButtonEnabled(final boolean b) {
        if (this.mRootView != null) {
            if (b) {
                if (this.mCloseButton == null) {
                    final StateListDrawable imageDrawable = new StateListDrawable();
                    imageDrawable.addState(new int[] { -16842919 }, (Drawable)IAdefines$IAresources.h.a(this.mRootView.getContext()));
                    imageDrawable.addState(new int[] { 16842919 }, (Drawable)IAdefines$IAresources.i.a(this.mRootView.getContext()));
                    (this.mCloseButton = (ImageView)new ImageButton(this.getContext())).setImageDrawable((Drawable)imageDrawable);
                    this.mCloseButton.setBackgroundDrawable((Drawable)null);
                    this.mCloseButton.setOnClickListener((View$OnClickListener)new an(this));
                }
                final int n = (int)(0.5f + 50.0f * this.mDensity);
                final FrameLayout$LayoutParams frameLayout$LayoutParams = new FrameLayout$LayoutParams(n, n, 5);
                d$a.a((View)this.mCloseButton);
                this.mAdContainerLayout.addView((View)this.mCloseButton, (ViewGroup$LayoutParams)frameLayout$LayoutParams);
            }
            else {
                this.mAdContainerLayout.removeView((View)this.mCloseButton);
            }
            final IAmraidWebView view = this.getView();
            if (view.getOnCloseButtonStateChangeListener() != null) {
                view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, b);
            }
        }
    }
    
    protected final void setOrientationProperties(final boolean orientationLockEnabled, final String s) {
        this.setOrientationLockEnabled(orientationLockEnabled);
        if ("protrait".equals(s)) {
            this.forceOrientation = IAmraidWebViewController$ForceOrientationType.PORTRAIT;
        }
        else if ("landscape".equals(s)) {
            this.forceOrientation = IAmraidWebViewController$ForceOrientationType.LANDSCAPE;
        }
        else {
            this.forceOrientation = IAmraidWebViewController$ForceOrientationType.NONE;
        }
        this.setOrientationLock(this.forceOrientation);
    }
    
    protected final void setResizeProperties() {
    }
    
    protected final void useCustomClose(final boolean mAdWantsCustomCloseButton) {
        this.mAdWantsCustomCloseButton = mAdWantsCustomCloseButton;
        final IAmraidWebView view = this.getView();
        final boolean b = !mAdWantsCustomCloseButton;
        if (view.getOnCloseButtonStateChangeListener() != null) {
            view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, b);
        }
    }
}
