// 
// Decompiled by Procyon v0.5.30
// 

package com.inneractive.api.ads.sdk;

import android.view.View;
import android.net.Uri;
import android.content.Context;

class IAelementaryBanner extends b
{
    IAmraidWebView a;
    b$a b;
    String c;
    
    IAelementaryBanner() {
        this.c = "OK";
    }
    
    @Override
    final void a() {
    }
    
    @Override
    final void a(final Context context, final b$a b, final IAresponseData aresponseData) {
        this.b = b;
        int n;
        if (!d$a.b(aresponseData.a)) {
            n = 1;
        }
        else {
            n = 0;
        }
        if (n != 0) {
            final String decode = Uri.decode(aresponseData.a);
            final IAadConfig a = IAadConfig.a(aresponseData);
            if (a != null) {
                this.c = a.v();
            }
            (this.a = ao.createInstance(context, a)).setListener(new y(this));
            IAadConfig.a((View)this.a);
            final IAmraidWebView a2 = this.a;
            String g;
            if (a != null) {
                g = a.g();
            }
            else {
                g = null;
            }
            a2.loadHtmlData(g, "<script>(function() {\n\tif (window.iaPreCachedAd) {\n\t\tvar wasIaLoadFinishedNotified = false;\n\t\tvar IA_AD_FINISHED_LOADING_EVENT = 'iaadfinishedloading';\n\t\tvar NOTIFY_LOADING_FINISHED_TIMEOUT_IN_MS = 5000; \t\t/* Notifiying after 10 sec., Even if onload was not called yet. */\n\n\t\tvar iaNotifyLoadFinished = function() {\n\t\t\tif (!wasIaLoadFinishedNotified) {\n\t\t\t\twasIaLoadFinishedNotified = true;\n\t\t\t\t/*if (typeof UriJavascriptInterface !== 'undefined' && UriJavascriptInterface.fireFinishLoad()) return;\n*/\t\t\t\twindow.location.href = IA_AD_FINISHED_LOADING_EVENT + '://';\n\t\t\t}\n \t\t}\n\n\t\t/* Notifiying loadFinished after window.onload */\n\t\tvar prevOnload = window.onload;\n\t\twindow.onload = function() {\n\t\t\tif (typeof prevOnload === 'function') {\n\t\t\t\tprevOnload.apply();\n\t\t\t}\n\t\t\tiaNotifyLoadFinished.apply();\n\t\t};\n\t\tsetTimeout(function() {iaNotifyLoadFinished.apply();}, NOTIFY_LOADING_FINISHED_TIMEOUT_IN_MS);\n\t\t/* Overriding previous startAutoplay function... */\n\t\twindow.prevStartProjekktorVideoAutoplay = window.startProjekktorVideoAutoplay;\n\t\tstartProjekktorVideoAutoplay = function() {};\n\n\t\t/* Overriding previous skip/close button visibility changing function... */\n\t\tvar previaStartSkipButtonVisibleCountdown = window.iaStartSkipButtonVisibleCountdown;\n\t\twindow.iaStartSkipButtonVisibleCountdown = function() {};\n\n\t\t/* Send tracking pixels and run video JS. Triggered by the native SDKs. */\n\t\twindow.showInterstitial = function() {\n\t\t\tif (window.iaPreCachedAd) {\n\n\t\t\t\t/* Add impression tracking pixels */\n\t\t\t\tiaAddImpressionTrackingPixels()\n\n\t\t\t\t/* Starting video autoplay from JS on interstitial display */\n\t\t\t\tif (typeof prevStartProjekktorVideoAutoplay === 'function' && typeof iaAutoplaySupported !== 'undefined' && iaAutoplaySupported) {\n\t\t\t\t\twindow.prevStartProjekktorVideoAutoplay.apply();\n\t\t\t\t}\n\n\t\t\t\t/* Showing video skip button after timeout. */\n\t\t\t\tif (typeof previaStartSkipButtonVisibleCountdown === 'function') {\n\t\t\t\t\tpreviaStartSkipButtonVisibleCountdown.apply();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n})();</script>" + decode);
            return;
        }
        this.b.a(InneractiveAdView$InneractiveErrorCode.SERVER_INVALID_RESPONSE);
    }
    
    @Override
    final void b() {
        if (this.a != null) {
            this.a.setListener(null);
            this.a.destroy();
        }
    }
}
