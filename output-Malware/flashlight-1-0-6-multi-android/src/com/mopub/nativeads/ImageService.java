// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import java.util.Iterator;
import java.util.ArrayList;
import com.mopub.common.util.MoPubLog;
import java.util.Map;
import java.util.HashMap;
import com.mopub.common.CacheService;
import java.util.List;
import android.content.Context;
import android.graphics.BitmapFactory;
import java.io.Closeable;
import com.mopub.common.util.Streams;
import java.io.OutputStream;
import android.graphics.Bitmap$CompressFormat;
import java.io.ByteArrayOutputStream;
import android.graphics.Bitmap;

class ImageService
{
    private static int COMPRESSION_QUALITY;
    
    static {
        ImageService.COMPRESSION_QUALITY = 25;
    }
    
    static byte[] bitmapToByteArray(final Bitmap bitmap) {
        ByteArrayOutputStream byteArrayOutputStream;
        try {
            byteArrayOutputStream = new ByteArrayOutputStream();
            final Bitmap bitmap2 = bitmap;
            final Bitmap$CompressFormat bitmap$CompressFormat = Bitmap$CompressFormat.JPEG;
            final int n = ImageService.COMPRESSION_QUALITY;
            final ByteArrayOutputStream byteArrayOutputStream2 = byteArrayOutputStream;
            bitmap2.compress(bitmap$CompressFormat, n, (OutputStream)byteArrayOutputStream2);
            final ByteArrayOutputStream byteArrayOutputStream3 = byteArrayOutputStream;
            final byte[] array = byteArrayOutputStream3.toByteArray();
            final ByteArrayOutputStream byteArrayOutputStream4 = byteArrayOutputStream;
            Streams.closeStream(byteArrayOutputStream4);
            return array;
        }
        finally {
            final Object o2;
            final Object o = o2;
            byteArrayOutputStream = null;
        }
        while (true) {
            try {
                final Bitmap bitmap2 = bitmap;
                final Bitmap$CompressFormat bitmap$CompressFormat = Bitmap$CompressFormat.JPEG;
                final int n = ImageService.COMPRESSION_QUALITY;
                final ByteArrayOutputStream byteArrayOutputStream2 = byteArrayOutputStream;
                bitmap2.compress(bitmap$CompressFormat, n, (OutputStream)byteArrayOutputStream2);
                final ByteArrayOutputStream byteArrayOutputStream3 = byteArrayOutputStream;
                final byte[] array = byteArrayOutputStream3.toByteArray();
                final ByteArrayOutputStream byteArrayOutputStream4 = byteArrayOutputStream;
                Streams.closeStream(byteArrayOutputStream4);
                return array;
                Streams.closeStream(byteArrayOutputStream);
                throw;
            }
            finally {
                continue;
            }
            break;
        }
    }
    
    static Bitmap byteArrayToBitmap(final byte[] array) {
        return BitmapFactory.decodeByteArray(array, 0, array.length);
    }
    
    static void get(final Context context, final List list, final ImageService$ImageServiceListener imageService$ImageServiceListener) {
        CacheService.initializeCaches(context);
        get(list, imageService$ImageServiceListener);
    }
    
    static void get(final List list, final ImageService$ImageServiceListener imageService$ImageServiceListener) {
        final HashMap hashMap = new HashMap(list.size());
        final List bitmapsFromMemoryCache = getBitmapsFromMemoryCache(list, hashMap);
        if (bitmapsFromMemoryCache.isEmpty()) {
            imageService$ImageServiceListener.onSuccess(hashMap);
            return;
        }
        try {
            new ImageDiskTaskManager(bitmapsFromMemoryCache, new ImageService$ImageDiskTaskManagerListener(imageService$ImageServiceListener, hashMap)).execute();
        }
        catch (IllegalArgumentException ex) {
            MoPubLog.d("Unable to initialize ImageDiskTaskManager", ex);
            imageService$ImageServiceListener.onFail();
        }
    }
    
    @Deprecated
    static Bitmap getBitmapFromDiskCache(final String s) {
        final byte[] fromDiskCache = CacheService.getFromDiskCache(s);
        Bitmap byteArrayToBitmap = null;
        if (fromDiskCache != null) {
            byteArrayToBitmap = byteArrayToBitmap(fromDiskCache);
        }
        return byteArrayToBitmap;
    }
    
    static Bitmap getBitmapFromMemoryCache(final String s) {
        final byte[] fromMemoryCache = CacheService.getFromMemoryCache(s);
        Bitmap byteArrayToBitmap = null;
        if (fromMemoryCache != null) {
            byteArrayToBitmap = byteArrayToBitmap(fromMemoryCache);
        }
        return byteArrayToBitmap;
    }
    
    static List getBitmapsFromMemoryCache(final List list, final Map map) {
        final ArrayList<String> list2 = new ArrayList<String>();
        for (final String s : list) {
            final Bitmap bitmapFromMemoryCache = getBitmapFromMemoryCache(s);
            if (bitmapFromMemoryCache != null) {
                map.put(s, bitmapFromMemoryCache);
            }
            else {
                list2.add(s);
            }
        }
        return list2;
    }
    
    static void putBitmapInCache(final String s, final Bitmap bitmap) {
        CacheService.put(s, bitmapToByteArray(bitmap));
    }
    
    static void putBitmapsInCache(final Map map) {
        for (final Map.Entry<String, V> entry : map.entrySet()) {
            MoPubLog.d("Caching bitmap: " + entry.getKey());
            putBitmapInCache(entry.getKey(), (Bitmap)entry.getValue());
        }
    }
}
