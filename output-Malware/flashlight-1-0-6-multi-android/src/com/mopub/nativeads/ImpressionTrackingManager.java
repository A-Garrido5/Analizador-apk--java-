// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver$OnPreDrawListener;
import java.util.Map;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.lang.ref.WeakReference;
import android.view.View;
import java.util.WeakHashMap;
import android.os.Handler;

final class ImpressionTrackingManager
{
    private static final int PERIOD = 250;
    private static final Handler pollHandler;
    private static final ImpressionTrackingManager$PollingRunnable pollingRunnable;
    private static final WeakHashMap sPollingViews;
    private static final WeakHashMap sWaitingViews;
    private static final Handler startHandler;
    private static final ImpressionTrackingManager$VisibilityChecker visibilityChecker;
    
    static {
        sWaitingViews = new WeakHashMap(10);
        sPollingViews = new WeakHashMap(10);
        startHandler = new Handler();
        pollHandler = new Handler();
        pollingRunnable = new ImpressionTrackingManager$PollingRunnable();
        visibilityChecker = new ImpressionTrackingManager$VisibilityChecker();
    }
    
    static void addView(final View view, final NativeResponse nativeResponse) {
        if (view == null || nativeResponse == null || isViewTracked(view)) {
            return;
        }
        ImpressionTrackingManager.startHandler.post((Runnable)new Runnable() {
            private final /* synthetic */ WeakReference val$viewReference = new WeakReference((T)view);
            
            @Override
            public void run() {
                final View view = (View)this.val$viewReference.get();
                if (view == null) {
                    return;
                }
                if (ImpressionTrackingManager$VisibilityChecker.isMostlyVisible(view, nativeResponse.getImpressionMinPercentageViewed())) {
                    ImpressionTrackingManager.pollVisibleView(view, nativeResponse);
                    return;
                }
                ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
            }
        });
    }
    
    static void clearTracking() {
        final Iterator<View> iterator = new ArrayList<View>(ImpressionTrackingManager.sWaitingViews.keySet()).iterator();
        while (iterator.hasNext()) {
            removeWaitingView(iterator.next());
        }
        ImpressionTrackingManager.sPollingViews.clear();
        ImpressionTrackingManager.pollHandler.removeMessages(0);
        ImpressionTrackingManager.startHandler.removeMessages(0);
    }
    
    @Deprecated
    static Map getPollingViews() {
        return ImpressionTrackingManager.sPollingViews;
    }
    
    @Deprecated
    static Handler getStartHandler() {
        return ImpressionTrackingManager.startHandler;
    }
    
    @Deprecated
    static Map getWaitingViews() {
        return ImpressionTrackingManager.sWaitingViews;
    }
    
    static boolean isViewTracked(final View view) {
        return ImpressionTrackingManager.sPollingViews.containsKey(view) || ImpressionTrackingManager.sWaitingViews.containsKey(view);
    }
    
    static void pollVisibleView(final View view, final NativeResponse nativeResponse) {
        removeWaitingView(view);
        ImpressionTrackingManager.sPollingViews.put(view, new ImpressionTrackingManager$NativeResponseWrapper(nativeResponse));
        scheduleNextPoll();
    }
    
    static void removePollingView(final View view) {
        ImpressionTrackingManager.sPollingViews.remove(view);
    }
    
    static void removeView(final View view) {
        removeWaitingView(view);
        removePollingView(view);
    }
    
    static void removeWaitingView(final View view) {
        final ViewTreeObserver$OnPreDrawListener viewTreeObserver$OnPreDrawListener = ImpressionTrackingManager.sWaitingViews.remove(view);
        if (viewTreeObserver$OnPreDrawListener != null) {
            final ViewTreeObserver viewTreeObserver = view.getViewTreeObserver();
            if (viewTreeObserver.isAlive()) {
                viewTreeObserver.removeOnPreDrawListener(viewTreeObserver$OnPreDrawListener);
            }
        }
    }
    
    static void scheduleNextPoll() {
        if (ImpressionTrackingManager.pollHandler.hasMessages(0)) {
            return;
        }
        ImpressionTrackingManager.pollHandler.postDelayed((Runnable)ImpressionTrackingManager.pollingRunnable, 250L);
    }
    
    static void waitForVisibility(final View view, final NativeResponse nativeResponse) {
        removePollingView(view);
        final ViewTreeObserver$OnPreDrawListener viewTreeObserver$OnPreDrawListener = (ViewTreeObserver$OnPreDrawListener)new ViewTreeObserver$OnPreDrawListener() {
            private final /* synthetic */ WeakReference val$viewReference = new WeakReference((T)view);
            
            public boolean onPreDraw() {
                final View view = (View)this.val$viewReference.get();
                if (view != null && ImpressionTrackingManager$VisibilityChecker.isMostlyVisible(view, nativeResponse.getImpressionMinPercentageViewed())) {
                    ImpressionTrackingManager.pollVisibleView(view, nativeResponse);
                    return true;
                }
                return true;
            }
        };
        final ViewTreeObserver viewTreeObserver = view.getViewTreeObserver();
        if (viewTreeObserver.isAlive()) {
            viewTreeObserver.addOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)viewTreeObserver$OnPreDrawListener);
            ImpressionTrackingManager.sWaitingViews.put(view, viewTreeObserver$OnPreDrawListener);
        }
    }
}
