// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import com.mopub.common.util.Views;
import android.view.View;
import com.mopub.common.util.Dips;
import android.view.ViewGroup$LayoutParams;
import android.widget.LinearLayout$LayoutParams;
import android.content.Context;
import android.widget.ProgressBar;
import android.view.ViewGroup;

class SpinningProgressView extends ViewGroup
{
    private final ProgressBar mProgressBar;
    private int mProgressIndicatorRadius;
    
    SpinningProgressView(final Context context) {
        super(context);
        final LinearLayout$LayoutParams layoutParams = new LinearLayout$LayoutParams(-1, -1);
        layoutParams.gravity = 17;
        this.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        this.setVisibility(8);
        this.setBackgroundColor(-16777216);
        this.getBackground().setAlpha(180);
        this.mProgressBar = new ProgressBar(context);
        this.mProgressIndicatorRadius = Dips.asIntPixels(25.0f, this.getContext());
        this.mProgressBar.setIndeterminate(true);
        this.addView((View)this.mProgressBar);
    }
    
    boolean addToRoot(final View view) {
        if (view == null) {
            return false;
        }
        final View rootView = view.getRootView();
        if (rootView != null && rootView instanceof ViewGroup) {
            final ViewGroup viewGroup = (ViewGroup)rootView;
            this.setVisibility(0);
            this.setMeasuredDimension(rootView.getWidth(), rootView.getHeight());
            viewGroup.addView((View)this);
            this.forceLayout();
            return true;
        }
        return false;
    }
    
    protected void onLayout(final boolean b, final int n, final int n2, final int n3, final int n4) {
        if (b) {
            final int n5 = (n + n3) / 2;
            final int n6 = (n2 + n4) / 2;
            this.mProgressBar.layout(n5 - this.mProgressIndicatorRadius, n6 - this.mProgressIndicatorRadius, n5 + this.mProgressIndicatorRadius, n6 + this.mProgressIndicatorRadius);
        }
    }
    
    boolean removeFromRoot() {
        Views.removeFromParent((View)this);
        this.setVisibility(8);
        return true;
    }
}
