// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import java.util.HashMap;
import com.mopub.common.HttpClient;
import com.mopub.common.GpsHelper$GpsHelperListener;
import com.mopub.common.util.DeviceUtils;
import com.mopub.common.util.MoPubLog;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import com.mopub.common.DownloadTask;
import com.mopub.common.util.ResponseHeader;
import com.mopub.common.DownloadResponse;
import com.mopub.common.DownloadTask$DownloadTaskListener;
import org.apache.http.client.methods.HttpUriRequest;
import com.mopub.common.GpsHelper;
import com.mopub.common.util.ManifestUtils;
import android.content.Context;
import java.util.Map;
import java.lang.ref.WeakReference;

public final class MoPubNative
{
    private final String mAdUnitId;
    private final WeakReference mContext;
    private Map mLocalExtras;
    private MoPubNative$MoPubNativeListener mMoPubNativeListener;
    
    public MoPubNative(final Context context, final String mAdUnitId, final MoPubNative$MoPubNativeListener mMoPubNativeListener) {
        if (context == null) {
            throw new IllegalArgumentException("Context may not be null.");
        }
        if (mAdUnitId == null) {
            throw new IllegalArgumentException("AdUnitId may not be null.");
        }
        if (mMoPubNativeListener == null) {
            throw new IllegalArgumentException("MoPubNativeListener may not be null.");
        }
        ManifestUtils.checkNativeActivitiesDeclared(context);
        this.mContext = new WeakReference((T)context);
        this.mAdUnitId = mAdUnitId;
        this.mMoPubNativeListener = mMoPubNativeListener;
        GpsHelper.asyncFetchAdvertisingInfo(context);
    }
    
    private void downloadJson(final HttpUriRequest httpUriRequest) {
        final DownloadTask downloadTask = new DownloadTask(new DownloadTask$DownloadTaskListener() {
            @Override
            public void onComplete(final String s, final DownloadResponse downloadResponse) {
                if (downloadResponse == null) {
                    MoPubNative.this.mMoPubNativeListener.onNativeFail(NativeErrorCode.UNSPECIFIED);
                }
                else {
                    if (downloadResponse.getStatusCode() >= 500 && downloadResponse.getStatusCode() < 600) {
                        MoPubNative.this.mMoPubNativeListener.onNativeFail(NativeErrorCode.SERVER_ERROR_RESPONSE_CODE);
                        return;
                    }
                    if (downloadResponse.getStatusCode() != 200) {
                        MoPubNative.this.mMoPubNativeListener.onNativeFail(NativeErrorCode.UNEXPECTED_RESPONSE_CODE);
                        return;
                    }
                    if (downloadResponse.getContentLength() == 0L) {
                        MoPubNative.this.mMoPubNativeListener.onNativeFail(NativeErrorCode.EMPTY_AD_RESPONSE);
                        return;
                    }
                    final CustomEventNative$CustomEventNativeListener customEventNative$CustomEventNativeListener = new CustomEventNative$CustomEventNativeListener() {
                        @Override
                        public void onNativeAdFailed(final NativeErrorCode nativeErrorCode) {
                            MoPubNative.this.requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
                        }
                        
                        @Override
                        public void onNativeAdLoaded(final NativeAdInterface nativeAdInterface) {
                            final Context contextOrDestroy = MoPubNative.this.getContextOrDestroy();
                            if (contextOrDestroy == null) {
                                return;
                            }
                            MoPubNative.this.mMoPubNativeListener.onNativeLoad(new NativeResponse(contextOrDestroy, downloadResponse, nativeAdInterface, MoPubNative.this.mMoPubNativeListener));
                        }
                    };
                    final Context contextOrDestroy = MoPubNative.this.getContextOrDestroy();
                    if (contextOrDestroy != null) {
                        CustomEventNativeAdapter.loadNativeAd(contextOrDestroy, MoPubNative.this.mLocalExtras, downloadResponse, customEventNative$CustomEventNativeListener);
                    }
                }
            }
        });
        try {
            AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
        }
        catch (Exception ex) {
            MoPubLog.d("Failed to download json", ex);
            this.mMoPubNativeListener.onNativeFail(NativeErrorCode.UNSPECIFIED);
        }
    }
    
    public final void destroy() {
        this.mContext.clear();
        this.mMoPubNativeListener = MoPubNative$MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
    }
    
    final Context getContextOrDestroy() {
        final Context context = (Context)this.mContext.get();
        if (context == null) {
            this.destroy();
            MoPubLog.d("Weak reference to Activity Context in MoPubNative became null. This instance of MoPubNative is destroyed and No more requests will be processed.");
        }
        return context;
    }
    
    @Deprecated
    final MoPubNative$MoPubNativeListener getMoPubNativeListener() {
        return this.mMoPubNativeListener;
    }
    
    final void loadNativeAd(final RequestParameters requestParameters) {
        final Context contextOrDestroy = this.getContextOrDestroy();
        if (contextOrDestroy == null) {
            return;
        }
        final String generateUrlString = new NativeUrlGenerator(contextOrDestroy).withAdUnitId(this.mAdUnitId).withRequest(requestParameters).generateUrlString("ads.mopub.com");
        if (generateUrlString != null) {
            MoPubLog.d("Loading ad from: " + generateUrlString);
        }
        this.requestNativeAd(generateUrlString);
    }
    
    public final void makeRequest() {
        this.makeRequest((RequestParameters)null);
    }
    
    final void makeRequest(final MoPubNative$NativeGpsHelperListener moPubNative$NativeGpsHelperListener) {
        final Context contextOrDestroy = this.getContextOrDestroy();
        if (contextOrDestroy == null) {
            return;
        }
        if (!DeviceUtils.isNetworkAvailable(contextOrDestroy)) {
            this.mMoPubNativeListener.onNativeFail(NativeErrorCode.CONNECTION_ERROR);
            return;
        }
        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(contextOrDestroy, moPubNative$NativeGpsHelperListener);
    }
    
    public final void makeRequest(final RequestParameters requestParameters) {
        this.makeRequest(new MoPubNative$NativeGpsHelperListener(this, requestParameters));
    }
    
    final void requestNativeAd(final String s) {
        final Context contextOrDestroy = this.getContextOrDestroy();
        if (contextOrDestroy == null) {
            return;
        }
        if (s == null) {
            this.mMoPubNativeListener.onNativeFail(NativeErrorCode.INVALID_REQUEST_URL);
            return;
        }
        try {
            this.downloadJson((HttpUriRequest)HttpClient.initializeHttpGet(s, contextOrDestroy));
        }
        catch (IllegalArgumentException ex) {
            this.mMoPubNativeListener.onNativeFail(NativeErrorCode.INVALID_REQUEST_URL);
        }
    }
    
    public final void setLocalExtras(final Map map) {
        this.mLocalExtras = new HashMap(map);
    }
}
