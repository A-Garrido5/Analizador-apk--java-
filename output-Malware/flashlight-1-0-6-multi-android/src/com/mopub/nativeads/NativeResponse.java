// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import com.mopub.common.HttpClient;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import java.util.Arrays;
import android.view.View;
import android.widget.ImageView;
import com.mopub.common.util.ResponseHeader;
import java.util.HashSet;
import com.mopub.common.DownloadResponse;
import java.util.Set;
import android.content.Context;

public final class NativeResponse
{
    final Context mContext;
    boolean mIsClicked;
    boolean mIsDestroyed;
    final String mMoPubClickTracker;
    final Set mMoPubImpressionTrackers;
    MoPubNative$MoPubNativeListener mMoPubNativeListener;
    final NativeAdInterface mNativeAd;
    boolean mRecordedImpression;
    
    public NativeResponse(final Context context, final DownloadResponse downloadResponse, final NativeAdInterface mNativeAd, final MoPubNative$MoPubNativeListener mMoPubNativeListener) {
        this.mContext = context.getApplicationContext();
        this.mMoPubNativeListener = mMoPubNativeListener;
        this.mNativeAd = mNativeAd;
        (this.mMoPubImpressionTrackers = new HashSet()).add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
        this.mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL);
    }
    
    private void loadImageView(final String s, final ImageView imageView) {
        ImageViewService.loadImageView(s, imageView);
    }
    
    private void openClickDestinationUrl(final View view) {
        if (this.getClickDestinationUrl() == null) {
            return;
        }
        SpinningProgressView spinningProgressView = null;
        if (view != null) {
            spinningProgressView = new SpinningProgressView(this.mContext);
            spinningProgressView.addToRoot(view);
        }
        final Iterator<String> iterator = Arrays.asList(this.getClickDestinationUrl()).iterator();
        UrlResolutionTask.getResolvedUrl(iterator.next(), new NativeResponse$ClickDestinationUrlResolutionListener(this.mContext, iterator, spinningProgressView));
    }
    
    public final void destroy() {
        if (this.isDestroyed()) {
            return;
        }
        this.mMoPubNativeListener = MoPubNative$MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
        this.mNativeAd.destroy();
        this.mIsDestroyed = true;
    }
    
    public final String getCallToAction() {
        return this.mNativeAd.getCallToAction();
    }
    
    public final String getClickDestinationUrl() {
        return this.mNativeAd.getClickDestinationUrl();
    }
    
    public final String getClickTracker() {
        return this.mMoPubClickTracker;
    }
    
    public final Object getExtra(final String s) {
        return this.mNativeAd.getExtra(s);
    }
    
    public final Map getExtras() {
        return this.mNativeAd.getExtras();
    }
    
    public final String getIconImageUrl() {
        return this.mNativeAd.getIconImageUrl();
    }
    
    public final int getImpressionMinPercentageViewed() {
        return this.mNativeAd.getImpressionMinPercentageViewed();
    }
    
    public final int getImpressionMinTimeViewed() {
        return this.mNativeAd.getImpressionMinTimeViewed();
    }
    
    public final List getImpressionTrackers() {
        final HashSet set = new HashSet<Object>();
        set.addAll(this.mMoPubImpressionTrackers);
        set.addAll(this.mNativeAd.getImpressionTrackers());
        return new ArrayList(set);
    }
    
    public final String getMainImageUrl() {
        return this.mNativeAd.getMainImageUrl();
    }
    
    @Deprecated
    final MoPubNative$MoPubNativeListener getMoPubNativeListener() {
        return this.mMoPubNativeListener;
    }
    
    public final boolean getRecordedImpression() {
        return this.mRecordedImpression;
    }
    
    public final Double getStarRating() {
        return this.mNativeAd.getStarRating();
    }
    
    @Deprecated
    public final String getSubtitle() {
        return this.mNativeAd.getText();
    }
    
    public final String getText() {
        return this.mNativeAd.getText();
    }
    
    public final String getTitle() {
        return this.mNativeAd.getTitle();
    }
    
    public final void handleClick(final View view) {
        if (this.isDestroyed()) {
            return;
        }
        if (!this.isClicked()) {
            HttpClient.makeTrackingHttpRequest(this.mMoPubClickTracker, this.mContext);
        }
        this.openClickDestinationUrl(view);
        this.mNativeAd.handleClick(view);
        this.mIsClicked = true;
        this.mMoPubNativeListener.onNativeClick(view);
    }
    
    public final boolean isClicked() {
        return this.mIsClicked;
    }
    
    public final boolean isDestroyed() {
        return this.mIsDestroyed;
    }
    
    public final void loadExtrasImage(final String s, final ImageView imageView) {
        final Object extra = this.getExtra(s);
        if (extra != null && extra instanceof String) {
            ImageViewService.loadImageView((String)extra, imageView);
        }
    }
    
    public final void loadIconImage(final ImageView imageView) {
        ImageViewService.loadImageView(this.getIconImageUrl(), imageView);
    }
    
    public final void loadMainImage(final ImageView imageView) {
        ImageViewService.loadImageView(this.getMainImageUrl(), imageView);
    }
    
    public final void prepareImpression(final View view) {
        if (this.getRecordedImpression() || this.isDestroyed()) {
            return;
        }
        ImpressionTrackingManager.addView(view, this);
        this.mNativeAd.prepareImpression(view);
    }
    
    public final void recordImpression(final View view) {
        if (this.getRecordedImpression() || this.isDestroyed()) {
            return;
        }
        final Iterator<String> iterator = this.getImpressionTrackers().iterator();
        while (iterator.hasNext()) {
            HttpClient.makeTrackingHttpRequest(iterator.next(), this.mContext);
        }
        this.mNativeAd.recordImpression();
        this.mRecordedImpression = true;
        this.mMoPubNativeListener.onNativeImpression(view);
    }
    
    @Deprecated
    final void setRecordedImpression(final boolean mRecordedImpression) {
        this.mRecordedImpression = mRecordedImpression;
    }
    
    @Override
    public final String toString() {
        final StringBuilder sb = new StringBuilder("\n");
        sb.append(NativeResponse$Parameter.TITLE.name).append(":").append(this.getTitle()).append("\n");
        sb.append(NativeResponse$Parameter.TEXT.name).append(":").append(this.getText()).append("\n");
        sb.append(NativeResponse$Parameter.ICON_IMAGE.name).append(":").append(this.getIconImageUrl()).append("\n");
        sb.append(NativeResponse$Parameter.MAIN_IMAGE.name).append(":").append(this.getMainImageUrl()).append("\n");
        sb.append(NativeResponse$Parameter.STAR_RATING.name).append(":").append(this.getStarRating()).append("\n");
        sb.append(NativeResponse$Parameter.IMPRESSION_TRACKER.name).append(":").append(this.getImpressionTrackers()).append("\n");
        sb.append(NativeResponse$Parameter.CLICK_TRACKER.name).append(":").append(this.mMoPubClickTracker).append("\n");
        sb.append(NativeResponse$Parameter.CLICK_DESTINATION.name).append(":").append(this.getClickDestinationUrl()).append("\n");
        sb.append(NativeResponse$Parameter.CALL_TO_ACTION.name).append(":").append(this.getCallToAction()).append("\n");
        sb.append("recordedImpression:").append(this.mRecordedImpression).append("\n");
        sb.append("extras:").append(this.getExtras());
        return sb.toString();
    }
}
