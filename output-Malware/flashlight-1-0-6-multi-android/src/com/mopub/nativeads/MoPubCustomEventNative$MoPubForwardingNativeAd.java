// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.HashSet;
import com.mopub.common.util.Numbers;
import org.json.JSONException;
import com.mopub.common.util.MoPubLog;
import org.json.JSONArray;
import java.util.Iterator;
import org.json.JSONObject;
import org.json.JSONTokener;

class MoPubCustomEventNative$MoPubForwardingNativeAd extends BaseForwardingNativeAd
{
    static /* synthetic */ int[] $SWITCH_TABLE$com$mopub$nativeads$NativeResponse$Parameter() {
        final int[] $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter = MoPubCustomEventNative$MoPubForwardingNativeAd.$SWITCH_TABLE$com$mopub$nativeads$NativeResponse$Parameter;
        if ($switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter != null) {
            return $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter;
        }
        final int[] $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2 = new int[NativeResponse$Parameter.values().length];
        while (true) {
            try {
                $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.CALL_TO_ACTION.ordinal()] = 9;
                try {
                    $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.CLICK_DESTINATION.ordinal()] = 7;
                    try {
                        $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.CLICK_TRACKER.ordinal()] = 2;
                        try {
                            $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.FALLBACK.ordinal()] = 8;
                            try {
                                $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.ICON_IMAGE.ordinal()] = 6;
                                try {
                                    $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.IMPRESSION_TRACKER.ordinal()] = 1;
                                    try {
                                        $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.MAIN_IMAGE.ordinal()] = 5;
                                        try {
                                            $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.STAR_RATING.ordinal()] = 10;
                                            try {
                                                $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.TEXT.ordinal()] = 4;
                                                try {
                                                    $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2[NativeResponse$Parameter.TITLE.ordinal()] = 3;
                                                    return MoPubCustomEventNative$MoPubForwardingNativeAd.$SWITCH_TABLE$com$mopub$nativeads$NativeResponse$Parameter = $switch_TABLE$com$mopub$nativeads$NativeResponse$Parameter2;
                                                }
                                                catch (NoSuchFieldError noSuchFieldError) {}
                                            }
                                            catch (NoSuchFieldError noSuchFieldError2) {}
                                        }
                                        catch (NoSuchFieldError noSuchFieldError3) {}
                                    }
                                    catch (NoSuchFieldError noSuchFieldError4) {}
                                }
                                catch (NoSuchFieldError noSuchFieldError5) {}
                            }
                            catch (NoSuchFieldError noSuchFieldError6) {}
                        }
                        catch (NoSuchFieldError noSuchFieldError7) {}
                    }
                    catch (NoSuchFieldError noSuchFieldError8) {}
                }
                catch (NoSuchFieldError noSuchFieldError9) {}
            }
            catch (NoSuchFieldError noSuchFieldError10) {
                continue;
            }
            break;
        }
    }
    
    MoPubCustomEventNative$MoPubForwardingNativeAd(final String s) {
        if (s == null) {
            throw new IllegalArgumentException("Json String cannot be null");
        }
        final JSONObject jsonObject = new JSONObject(new JSONTokener(s));
        if (!this.containsRequiredKeys(jsonObject)) {
            throw new IllegalArgumentException("JSONObject did not contain required keys.");
        }
        final Iterator keys = jsonObject.keys();
        while (keys.hasNext()) {
            final String s2 = keys.next();
            final NativeResponse$Parameter from = NativeResponse$Parameter.from(s2);
            if (from != null) {
                try {
                    this.addInstanceVariable(from, jsonObject.opt(s2));
                    continue;
                }
                catch (ClassCastException ex) {
                    throw new IllegalArgumentException("JSONObject key (" + s2 + ") contained unexpected value.");
                }
            }
            this.addExtra(s2, jsonObject.opt(s2));
        }
    }
    
    private void addImpressionTrackers(final Object o) {
        if (!(o instanceof JSONArray)) {
            throw new ClassCastException("Expected impression trackers of type JSONArray.");
        }
        final JSONArray jsonArray = (JSONArray)o;
        int i = 0;
        while (i < jsonArray.length()) {
            while (true) {
                try {
                    this.addImpressionTracker(jsonArray.getString(i));
                    ++i;
                }
                catch (JSONException ex) {
                    MoPubLog.d("Unable to parse impression trackers.");
                    continue;
                }
                break;
            }
        }
    }
    
    private void addInstanceVariable(final NativeResponse$Parameter nativeResponse$Parameter, final Object o) {
        Label_0180: {
            Label_0171: {
                Label_0162: {
                    Label_0153: {
                        Label_0144: {
                            Label_0138: {
                                try {
                                    switch ($SWITCH_TABLE$com$mopub$nativeads$NativeResponse$Parameter()[nativeResponse$Parameter.ordinal()]) {
                                        default: {
                                            MoPubLog.d("Unable to add JSON key to internal mapping: " + nativeResponse$Parameter.name);
                                            return;
                                        }
                                        case 5: {
                                            this.setMainImageUrl((String)o);
                                            return;
                                        }
                                        case 6: {
                                            break;
                                        }
                                        case 1: {
                                            break Label_0138;
                                        }
                                        case 7: {
                                            break Label_0144;
                                        }
                                        case 9: {
                                            break Label_0153;
                                        }
                                        case 3: {
                                            break Label_0162;
                                        }
                                        case 4: {
                                            break Label_0171;
                                        }
                                        case 10: {
                                            break Label_0180;
                                        }
                                        case 2: {
                                            return;
                                        }
                                    }
                                }
                                catch (ClassCastException ex) {
                                    if (!nativeResponse$Parameter.required) {
                                        MoPubLog.d("Ignoring class cast exception for optional key: " + nativeResponse$Parameter.name);
                                        return;
                                    }
                                    throw ex;
                                }
                                this.setIconImageUrl((String)o);
                                return;
                            }
                            this.addImpressionTrackers(o);
                            return;
                        }
                        this.setClickDestinationUrl((String)o);
                        return;
                    }
                    this.setCallToAction((String)o);
                    return;
                }
                this.setTitle((String)o);
                return;
            }
            this.setText((String)o);
            return;
        }
        this.setStarRating(Numbers.parseDouble(o));
    }
    
    private boolean containsRequiredKeys(final JSONObject jsonObject) {
        final HashSet<String> set = new HashSet<String>();
        final Iterator keys = jsonObject.keys();
        while (keys.hasNext()) {
            set.add(keys.next());
        }
        return set.containsAll(NativeResponse$Parameter.requiredKeys);
    }
    
    private boolean isImageKey(final String s) {
        return s != null && s.toLowerCase().endsWith("image");
    }
    
    List getAllImageUrls() {
        final ArrayList<String> list = new ArrayList<String>();
        if (this.getMainImageUrl() != null) {
            list.add(this.getMainImageUrl());
        }
        if (this.getIconImageUrl() != null) {
            list.add(this.getIconImageUrl());
        }
        list.addAll((Collection<?>)this.getExtrasImageUrls());
        return list;
    }
    
    List getExtrasImageUrls() {
        final ArrayList<String> list = new ArrayList<String>(this.getExtras().size());
        for (final Map.Entry<String, V> entry : this.getExtras().entrySet()) {
            if (this.isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
                list.add((String)entry.getValue());
            }
        }
        return list;
    }
}
