// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.nativeads;

import com.mopub.common.util.MoPubLog;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import org.apache.http.client.methods.HttpUriRequest;
import java.util.Iterator;
import com.mopub.common.DownloadTask$DownloadTaskListener;
import com.mopub.common.DownloadTask;
import org.apache.http.client.methods.HttpGet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class ImageDownloadTaskManager extends ImageTaskManager
{
    private final Map mDownloadTasks;
    
    ImageDownloadTaskManager(final List list, final ImageTaskManager$ImageTaskManagerListener imageTaskManager$ImageTaskManagerListener) {
        super(list, imageTaskManager$ImageTaskManagerListener);
        final ImageDownloadTaskManager$ImageDownloadTaskListener imageDownloadTaskManager$ImageDownloadTaskListener = new ImageDownloadTaskManager$ImageDownloadTaskListener(this, null);
        this.mDownloadTasks = new HashMap(list.size());
        final Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()) {
            this.mDownloadTasks.put(new HttpGet((String)iterator.next()), new DownloadTask(imageDownloadTaskManager$ImageDownloadTaskListener));
        }
    }
    
    @Override
    void execute() {
        if (this.mDownloadTasks.isEmpty()) {
            this.mImageTaskManagerListener.onSuccess(this.mImages);
        }
        for (final Map.Entry<HttpUriRequest, V> entry : this.mDownloadTasks.entrySet()) {
            final HttpUriRequest httpUriRequest = entry.getKey();
            final DownloadTask downloadTask = (DownloadTask)entry.getValue();
            try {
                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
            }
            catch (Exception ex) {
                MoPubLog.d("Failed to download image", ex);
                this.mImageTaskManagerListener.onFail();
            }
        }
    }
    
    void failAllTasks() {
        if (this.mFailed.compareAndSet(false, true)) {
            final Iterator<DownloadTask> iterator = this.mDownloadTasks.values().iterator();
            while (iterator.hasNext()) {
                iterator.next().cancel(true);
            }
            this.mImageTaskManagerListener.onFail();
        }
    }
}
