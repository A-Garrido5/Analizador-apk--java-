// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import com.mopub.common.util.IntentUtils;
import android.graphics.Bitmap;
import android.webkit.WebView;
import com.mopub.mobileads.util.Utils;
import com.mopub.common.MoPubBrowser;
import android.util.Log;
import android.content.Intent;
import android.net.Uri;
import android.content.Context;
import android.webkit.WebViewClient;

class HtmlWebViewClient extends WebViewClient
{
    static final String MOPUB_FAIL_LOAD = "mopub://failLoad";
    static final String MOPUB_FINISH_LOAD = "mopub://finishLoad";
    private final String mClickthroughUrl;
    private final Context mContext;
    private BaseHtmlWebView mHtmlWebView;
    private HtmlWebViewListener mHtmlWebViewListener;
    private final String mRedirectUrl;
    
    HtmlWebViewClient(final HtmlWebViewListener mHtmlWebViewListener, final BaseHtmlWebView mHtmlWebView, final String mClickthroughUrl, final String mRedirectUrl) {
        this.mHtmlWebViewListener = mHtmlWebViewListener;
        this.mHtmlWebView = mHtmlWebView;
        this.mClickthroughUrl = mClickthroughUrl;
        this.mRedirectUrl = mRedirectUrl;
        this.mContext = mHtmlWebView.getContext();
    }
    
    private void handleCustomIntentFromUri(final Uri uri) {
        try {
            final String queryParameter = uri.getQueryParameter("fnc");
            final String queryParameter2 = uri.getQueryParameter("data");
            final Intent intent = new Intent(queryParameter);
            intent.addFlags(268435456);
            intent.putExtra("com.mopub.intent.extra.AD_CLICK_DATA", queryParameter2);
            this.launchIntentForUserClick(this.mContext, intent, "Could not handle custom intent: " + queryParameter + ". Is your intent spelled correctly?");
        }
        catch (UnsupportedOperationException ex) {
            Log.w("MoPub", "Could not handle custom intent with uri: " + uri);
        }
    }
    
    private boolean handleNativeBrowserScheme(final String s) {
        if (this.isNativeBrowserScheme(s)) {
            final Uri parse = Uri.parse(s);
            try {
                final String queryParameter = parse.getQueryParameter("url");
                if ("navigate".equals(parse.getHost()) && queryParameter != null) {
                    final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(queryParameter));
                    intent.setFlags(268435456);
                    this.launchIntentForUserClick(this.mContext, intent, "Could not handle intent with URI: " + s + ". Is this intent supported on your phone?");
                    return true;
                }
            }
            catch (UnsupportedOperationException ex) {
                Log.w("MoPub", "Could not handle url: " + s);
                return false;
            }
        }
        return false;
    }
    
    private boolean handlePhoneScheme(final String s) {
        if (!this.isPhoneScheme(s)) {
            return false;
        }
        final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
        intent.addFlags(268435456);
        this.launchIntentForUserClick(this.mContext, intent, "Could not handle intent with URI: " + s + ". Is this intent supported on your phone?");
        return true;
    }
    
    private boolean handleSpecialMoPubScheme(final String s) {
        if (!this.isSpecialMoPubScheme(s)) {
            return false;
        }
        final Uri parse = Uri.parse(s);
        final String host = parse.getHost();
        if ("finishLoad".equals(host)) {
            this.mHtmlWebViewListener.onLoaded(this.mHtmlWebView);
        }
        else if ("close".equals(host)) {
            this.mHtmlWebViewListener.onCollapsed();
        }
        else if ("failLoad".equals(host)) {
            this.mHtmlWebViewListener.onFailed(MoPubErrorCode.UNSPECIFIED);
        }
        else if ("custom".equals(host)) {
            this.handleCustomIntentFromUri(parse);
        }
        return true;
    }
    
    private boolean isNativeBrowserScheme(final String s) {
        return s.startsWith("mopubnativebrowser://");
    }
    
    private boolean isPhoneScheme(final String s) {
        return s.startsWith("tel:") || s.startsWith("voicemail:") || s.startsWith("sms:") || s.startsWith("mailto:") || s.startsWith("geo:") || s.startsWith("google.streetview:");
    }
    
    private boolean isSpecialMoPubScheme(final String s) {
        return s.startsWith("mopub://");
    }
    
    private boolean isWebSiteUrl(final String s) {
        return s.startsWith("http://") || s.startsWith("https://");
    }
    
    private boolean launchApplicationUrl(final String s) {
        final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
        intent.addFlags(268435456);
        return this.launchIntentForUserClick(this.mContext, intent, "Unable to open intent.");
    }
    
    private void showMoPubBrowserForUrl(String s) {
        if (s == null || s.equals("")) {
            s = "about:blank";
        }
        Log.d("MoPub", "Final URI to show in browser: " + s);
        final Intent intent = new Intent(this.mContext, (Class)MoPubBrowser.class);
        intent.putExtra("URL", s);
        intent.addFlags(268435456);
        if (!this.launchIntentForUserClick(this.mContext, intent, "Could not handle intent action. . Perhaps you forgot to declare com.mopub.common.MoPubBrowser in your Android manifest file.")) {
            final Intent intent2 = new Intent("android.intent.action.VIEW", Uri.parse("about:blank"));
            intent2.setFlags(268435456);
            this.launchIntentForUserClick(this.mContext, intent2, null);
        }
    }
    
    boolean launchIntentForUserClick(final Context context, final Intent intent, final String s) {
        boolean executeIntent;
        if (!this.mHtmlWebView.wasClicked()) {
            executeIntent = false;
        }
        else {
            executeIntent = Utils.executeIntent(context, intent, s);
            if (executeIntent) {
                this.mHtmlWebViewListener.onClicked();
                this.mHtmlWebView.onResetUserClick();
                return executeIntent;
            }
        }
        return executeIntent;
    }
    
    public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
        if (this.mRedirectUrl != null && s.startsWith(this.mRedirectUrl)) {
            webView.stopLoading();
            this.showMoPubBrowserForUrl(s);
        }
    }
    
    public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
        if (!this.handleSpecialMoPubScheme(s) && !this.handlePhoneScheme(s) && !this.handleNativeBrowserScheme(s)) {
            Log.d("MoPub", "Ad clicked. Click URL: " + s);
            if (this.isWebSiteUrl(s) || !IntentUtils.canHandleApplicationUrl(this.mContext, s) || !this.launchApplicationUrl(s)) {
                this.showMoPubBrowserForUrl(s);
                return true;
            }
        }
        return true;
    }
}
