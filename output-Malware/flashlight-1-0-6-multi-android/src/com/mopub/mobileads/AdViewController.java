// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import android.view.ViewGroup$LayoutParams;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.HttpGet;
import com.mopub.mobileads.factories.HttpClientFactory;
import com.mopub.common.LocationService;
import org.apache.http.HttpResponse;
import android.util.Log;
import com.mopub.common.util.MoPubLog;
import android.net.NetworkInfo;
import android.net.ConnectivityManager;
import com.mopub.common.util.Dips;
import android.view.View;
import com.mopub.common.GpsHelper;
import com.mopub.mobileads.factories.AdFetcherFactory;
import java.util.HashMap;
import com.mopub.common.LocationService$LocationAwareness;
import android.location.Location;
import java.util.Map;
import android.os.Handler;
import com.mopub.common.GpsHelper$GpsHelperListener;
import android.content.Context;
import java.util.WeakHashMap;
import android.widget.FrameLayout$LayoutParams;

public class AdViewController
{
    static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;
    static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
    private static final FrameLayout$LayoutParams WRAP_AND_CENTER_LAYOUT_PARAMS;
    private static WeakHashMap sViewShouldHonorServerDimensions;
    private AdConfiguration mAdConfiguration;
    private AdFetcher mAdFetcher;
    private boolean mAdWasLoaded;
    private boolean mAutoRefreshEnabled;
    private final Context mContext;
    private GpsHelper$GpsHelperListener mGpsHelperListener;
    private Handler mHandler;
    private boolean mIsDestroyed;
    private boolean mIsFacebookSupported;
    private boolean mIsLoading;
    private boolean mIsTesting;
    private String mKeywords;
    private Map mLocalExtras;
    private Location mLocation;
    private LocationService$LocationAwareness mLocationAwareness;
    private int mLocationPrecision;
    private MoPubView mMoPubView;
    private boolean mPreviousAutoRefreshSetting;
    private final Runnable mRefreshRunnable;
    private String mUrl;
    private final WebViewAdUrlGenerator mUrlGenerator;
    
    static {
        WRAP_AND_CENTER_LAYOUT_PARAMS = new FrameLayout$LayoutParams(-2, -2, 17);
        AdViewController.sViewShouldHonorServerDimensions = new WeakHashMap();
    }
    
    public AdViewController(final Context mContext, final MoPubView mMoPubView) {
        this.mLocalExtras = new HashMap();
        this.mAutoRefreshEnabled = true;
        this.mPreviousAutoRefreshSetting = true;
        this.mLocationAwareness = LocationService$LocationAwareness.NORMAL;
        this.mLocationPrecision = 6;
        this.mIsFacebookSupported = true;
        this.mContext = mContext;
        this.mMoPubView = mMoPubView;
        this.mUrlGenerator = new WebViewAdUrlGenerator(mContext);
        this.mAdConfiguration = new AdConfiguration(this.mContext);
        this.mAdFetcher = AdFetcherFactory.create(this, this.mAdConfiguration.getUserAgent());
        this.mGpsHelperListener = new AdViewController$AdViewControllerGpsHelperListener(this);
        GpsHelper.asyncFetchAdvertisingInfo(this.mContext);
        this.mRefreshRunnable = new Runnable() {
            @Override
            public void run() {
                AdViewController.this.loadAd();
            }
        };
        this.mHandler = new Handler();
    }
    
    private void cancelRefreshTimer() {
        this.mHandler.removeCallbacks(this.mRefreshRunnable);
    }
    
    private FrameLayout$LayoutParams getAdLayoutParams(final View view) {
        final int width = this.mAdConfiguration.getWidth();
        final int height = this.mAdConfiguration.getHeight();
        if (getShouldHonorServerDimensions(view) && width > 0 && height > 0) {
            return new FrameLayout$LayoutParams(Dips.asIntPixels(width, this.mContext), Dips.asIntPixels(height, this.mContext), 17);
        }
        return AdViewController.WRAP_AND_CENTER_LAYOUT_PARAMS;
    }
    
    private String getServerHostname() {
        if (this.mIsTesting) {
            return "testing.ads.mopub.com";
        }
        return "ads.mopub.com";
    }
    
    private static boolean getShouldHonorServerDimensions(final View view) {
        return AdViewController.sViewShouldHonorServerDimensions.get(view) != null;
    }
    
    private boolean isNetworkAvailable() {
        if (this.mContext.checkCallingPermission("android.permission.ACCESS_NETWORK_STATE") == -1) {
            return true;
        }
        final NetworkInfo activeNetworkInfo = ((ConnectivityManager)this.mContext.getSystemService("connectivity")).getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }
    
    private void setAutorefreshEnabled(final boolean mAutoRefreshEnabled) {
        int n;
        if (this.mAdWasLoaded && this.mAutoRefreshEnabled != mAutoRefreshEnabled) {
            n = 1;
        }
        else {
            n = 0;
        }
        if (n != 0) {
            String s;
            if (mAutoRefreshEnabled) {
                s = "enabled";
            }
            else {
                s = "disabled";
            }
            String adUnitId;
            if (this.mAdConfiguration != null) {
                adUnitId = this.mAdConfiguration.getAdUnitId();
            }
            else {
                adUnitId = null;
            }
            MoPubLog.d("Refresh " + s + " for ad unit (" + adUnitId + ").");
        }
        this.mAutoRefreshEnabled = mAutoRefreshEnabled;
        if (this.mAdWasLoaded && this.mAutoRefreshEnabled) {
            this.scheduleRefreshTimerIfEnabled();
        }
        else if (!this.mAutoRefreshEnabled) {
            this.cancelRefreshTimer();
        }
    }
    
    protected static void setShouldHonorServerDimensions(final View view) {
        AdViewController.sViewShouldHonorServerDimensions.put(view, true);
    }
    
    void adDidFail(final MoPubErrorCode moPubErrorCode) {
        Log.i("MoPub", "Ad failed to load.");
        this.setNotLoading();
        this.scheduleRefreshTimerIfEnabled();
        this.getMoPubView().adFailed(moPubErrorCode);
    }
    
    void cleanup() {
        if (this.mIsDestroyed) {
            return;
        }
        this.setAutorefreshEnabled(false);
        this.cancelRefreshTimer();
        this.mAdFetcher.cleanup();
        this.mAdFetcher = null;
        this.mAdConfiguration.cleanup();
        this.mMoPubView = null;
        this.mIsDestroyed = true;
    }
    
    void configureUsingHttpResponse(final HttpResponse httpResponse) {
        this.mAdConfiguration.addHttpResponse(httpResponse);
    }
    
    @Deprecated
    public void customEventActionWillBegin() {
        this.registerClick();
    }
    
    @Deprecated
    public void customEventDidFailToLoadAd() {
        this.loadFailUrl(MoPubErrorCode.UNSPECIFIED);
    }
    
    @Deprecated
    public void customEventDidLoadAd() {
        this.setNotLoading();
        this.trackImpression();
        this.scheduleRefreshTimerIfEnabled();
    }
    
    void fetchAd(final String s) {
        if (this.mAdFetcher != null) {
            this.mAdFetcher.fetchAdForUrl(s);
        }
    }
    
    void forceRefresh() {
        this.setNotLoading();
        this.loadAd();
    }
    
    void forceSetAutorefreshEnabled(final boolean mPreviousAutoRefreshSetting) {
        this.setAutorefreshEnabled(this.mPreviousAutoRefreshSetting = mPreviousAutoRefreshSetting);
    }
    
    String generateAdUrl() {
        return this.mUrlGenerator.withAdUnitId(this.mAdConfiguration.getAdUnitId()).withKeywords(this.mKeywords).withFacebookSupported(this.mIsFacebookSupported).withLocation(this.mLocation).generateUrlString(this.getServerHostname());
    }
    
    AdConfiguration getAdConfiguration() {
        return this.mAdConfiguration;
    }
    
    public int getAdHeight() {
        return this.mAdConfiguration.getHeight();
    }
    
    Integer getAdTimeoutDelay() {
        return this.mAdConfiguration.getAdTimeoutDelay();
    }
    
    public String getAdUnitId() {
        return this.mAdConfiguration.getAdUnitId();
    }
    
    public int getAdWidth() {
        return this.mAdConfiguration.getWidth();
    }
    
    public boolean getAutorefreshEnabled() {
        return this.mAutoRefreshEnabled;
    }
    
    public String getClickthroughUrl() {
        return this.mAdConfiguration.getClickthroughUrl();
    }
    
    public String getKeywords() {
        return this.mKeywords;
    }
    
    Map getLocalExtras() {
        if (this.mLocalExtras != null) {
            return new HashMap(this.mLocalExtras);
        }
        return new HashMap();
    }
    
    public Location getLocation() {
        return this.mLocation;
    }
    
    int getLocationPrecision() {
        return this.mLocationPrecision;
    }
    
    public MoPubView getMoPubView() {
        return this.mMoPubView;
    }
    
    public String getRedirectUrl() {
        return this.mAdConfiguration.getRedirectUrl();
    }
    
    int getRefreshTimeMilliseconds() {
        return this.mAdConfiguration.getRefreshTimeMilliseconds();
    }
    
    public String getResponseString() {
        return this.mAdConfiguration.getResponseString();
    }
    
    public boolean getTesting() {
        return this.mIsTesting;
    }
    
    boolean isDestroyed() {
        return this.mIsDestroyed;
    }
    
    public boolean isFacebookSupported() {
        return this.mIsFacebookSupported;
    }
    
    public void loadAd() {
        this.mAdWasLoaded = true;
        if (this.mAdConfiguration.getAdUnitId() == null) {
            Log.d("MoPub", "Can't load an ad in this ad view because the ad unit ID is null. Did you forget to call setAdUnitId()?");
            return;
        }
        if (!this.isNetworkAvailable()) {
            Log.d("MoPub", "Can't load an ad because there is no network connectivity.");
            this.scheduleRefreshTimerIfEnabled();
            return;
        }
        if (this.mLocation == null) {
            this.mLocation = LocationService.getLastKnownLocation(this.mContext, this.mLocationPrecision, this.mLocationAwareness);
        }
        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(this.mContext, this.mGpsHelperListener);
    }
    
    void loadFailUrl(final MoPubErrorCode moPubErrorCode) {
        this.mIsLoading = false;
        final StringBuilder sb = new StringBuilder("MoPubErrorCode: ");
        String string;
        if (moPubErrorCode == null) {
            string = "";
        }
        else {
            string = moPubErrorCode.toString();
        }
        Log.v("MoPub", sb.append(string).toString());
        if (this.mAdConfiguration.getFailUrl() != null) {
            Log.d("MoPub", "Loading failover url: " + this.mAdConfiguration.getFailUrl());
            this.loadNonJavascript(this.mAdConfiguration.getFailUrl());
            return;
        }
        this.adDidFail(MoPubErrorCode.NO_FILL);
    }
    
    void loadNonJavascript(final String mUrl) {
        if (mUrl != null) {
            Log.d("MoPub", "Loading url: " + mUrl);
            if (!this.mIsLoading) {
                this.mUrl = mUrl;
                this.mAdConfiguration.setFailUrl(null);
                this.mIsLoading = true;
                this.fetchAd(this.mUrl);
                return;
            }
            if (this.mAdConfiguration.getAdUnitId() != null) {
                Log.i("MoPub", "Already loading an ad for " + this.mAdConfiguration.getAdUnitId() + ", wait to finish.");
            }
        }
    }
    
    void pauseRefresh() {
        this.mPreviousAutoRefreshSetting = this.mAutoRefreshEnabled;
        this.setAutorefreshEnabled(false);
    }
    
    void registerClick() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (AdViewController.this.mAdConfiguration.getClickthroughUrl() == null) {
                    return;
                }
                final DefaultHttpClient create = HttpClientFactory.create();
                try {
                    Log.d("MoPub", "Tracking click for: " + AdViewController.this.mAdConfiguration.getClickthroughUrl());
                    final HttpGet httpGet = new HttpGet(AdViewController.this.mAdConfiguration.getClickthroughUrl());
                    httpGet.addHeader("User-Agent", AdViewController.this.mAdConfiguration.getUserAgent());
                    create.execute((HttpUriRequest)httpGet);
                }
                catch (Exception ex) {
                    Log.d("MoPub", "Click tracking failed: " + AdViewController.this.mAdConfiguration.getClickthroughUrl(), (Throwable)ex);
                }
                finally {
                    create.getConnectionManager().shutdown();
                }
            }
        }).start();
    }
    
    public void reload() {
        Log.d("MoPub", "Reload ad: " + this.mUrl);
        this.loadNonJavascript(this.mUrl);
    }
    
    void scheduleRefreshTimerIfEnabled() {
        this.cancelRefreshTimer();
        if (this.mAutoRefreshEnabled && this.mAdConfiguration.getRefreshTimeMilliseconds() > 0) {
            this.mHandler.postDelayed(this.mRefreshRunnable, (long)this.mAdConfiguration.getRefreshTimeMilliseconds());
        }
    }
    
    void setAdContentView(final View view) {
        this.mHandler.post((Runnable)new Runnable() {
            @Override
            public void run() {
                final MoPubView moPubView = AdViewController.this.getMoPubView();
                if (moPubView == null) {
                    return;
                }
                moPubView.removeAllViews();
                moPubView.addView(view, (ViewGroup$LayoutParams)AdViewController.this.getAdLayoutParams(view));
            }
        });
    }
    
    public void setAdUnitId(final String adUnitId) {
        this.mAdConfiguration.setAdUnitId(adUnitId);
    }
    
    @Deprecated
    public void setClickthroughUrl(final String clickthroughUrl) {
        this.mAdConfiguration.setClickthroughUrl(clickthroughUrl);
    }
    
    public void setFacebookSupported(final boolean mIsFacebookSupported) {
        this.mIsFacebookSupported = mIsFacebookSupported;
    }
    
    void setFailUrl(final String failUrl) {
        this.mAdConfiguration.setFailUrl(failUrl);
    }
    
    @Deprecated
    void setGpsHelperListener(final GpsHelper$GpsHelperListener mGpsHelperListener) {
        this.mGpsHelperListener = mGpsHelperListener;
    }
    
    public void setKeywords(final String mKeywords) {
        this.mKeywords = mKeywords;
    }
    
    void setLocalExtras(final Map map) {
        HashMap mLocalExtras;
        if (map != null) {
            mLocalExtras = new HashMap(map);
        }
        else {
            mLocalExtras = new HashMap();
        }
        this.mLocalExtras = mLocalExtras;
    }
    
    public void setLocation(final Location mLocation) {
        this.mLocation = mLocation;
    }
    
    void setLocationPrecision(final int n) {
        this.mLocationPrecision = Math.max(0, n);
    }
    
    void setNotLoading() {
        this.mIsLoading = false;
    }
    
    @Deprecated
    void setRefreshTimeMilliseconds(final int refreshTimeMilliseconds) {
        this.mAdConfiguration.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
    }
    
    public void setTesting(final boolean mIsTesting) {
        this.mIsTesting = mIsTesting;
    }
    
    public void setTimeout(final int timeout) {
        if (this.mAdFetcher != null) {
            this.mAdFetcher.setTimeout(timeout);
        }
    }
    
    void trackImpression() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (AdViewController.this.mAdConfiguration.getImpressionUrl() == null) {
                    return;
                }
                final DefaultHttpClient create = HttpClientFactory.create();
                try {
                    final HttpGet httpGet = new HttpGet(AdViewController.this.mAdConfiguration.getImpressionUrl());
                    httpGet.addHeader("User-Agent", AdViewController.this.mAdConfiguration.getUserAgent());
                    create.execute((HttpUriRequest)httpGet);
                }
                catch (Exception ex) {
                    Log.d("MoPub", "Impression tracking failed : " + AdViewController.this.mAdConfiguration.getImpressionUrl(), (Throwable)ex);
                }
                finally {
                    create.getConnectionManager().shutdown();
                }
            }
        }).start();
    }
    
    void unpauseRefresh() {
        this.setAutorefreshEnabled(this.mPreviousAutoRefreshSetting);
    }
}
