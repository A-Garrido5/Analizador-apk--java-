// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import android.view.View;
import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
import com.mopub.common.util.ResponseHeader;
import android.location.Location;
import java.util.Collections;
import java.util.Map;
import android.app.Activity;
import android.content.IntentFilter;
import android.content.Intent;
import com.mopub.mobileads.factories.AdViewControllerFactory;
import android.util.Log;
import android.webkit.WebViewDatabase;
import com.mopub.common.util.ManifestUtils;
import android.util.AttributeSet;
import android.content.BroadcastReceiver;
import com.mopub.common.LocationService$LocationAwareness;
import android.content.Context;
import android.widget.FrameLayout;

public class MoPubView extends FrameLayout
{
    public static final String AD_HANDLER = "/m/ad";
    public static final int DEFAULT_LOCATION_PRECISION = 6;
    public static final String HOST = "ads.mopub.com";
    public static final String HOST_FOR_TESTING = "testing.ads.mopub.com";
    protected AdViewController mAdViewController;
    private MoPubView$BannerAdListener mBannerAdListener;
    private Context mContext;
    protected CustomEventBannerAdapter mCustomEventBannerAdapter;
    private boolean mIsInForeground;
    private LocationService$LocationAwareness mLocationAwareness;
    private MoPubView$OnAdClickedListener mOnAdClickedListener;
    private MoPubView$OnAdClosedListener mOnAdClosedListener;
    private MoPubView$OnAdFailedListener mOnAdFailedListener;
    private MoPubView$OnAdLoadedListener mOnAdLoadedListener;
    private MoPubView$OnAdPresentedOverlayListener mOnAdPresentedOverlayListener;
    private MoPubView$OnAdWillLoadListener mOnAdWillLoadListener;
    private BroadcastReceiver mScreenStateReceiver;
    
    public MoPubView(final Context context) {
        this(context, null);
    }
    
    public MoPubView(final Context mContext, final AttributeSet set) {
        super(mContext, set);
        ManifestUtils.checkWebViewActivitiesDeclared(mContext);
        this.mContext = mContext;
        this.mIsInForeground = (this.getVisibility() == 0);
        this.mLocationAwareness = LocationService$LocationAwareness.NORMAL;
        this.setHorizontalScrollBarEnabled(false);
        this.setVerticalScrollBarEnabled(false);
        if (WebViewDatabase.getInstance(mContext) == null) {
            Log.e("MoPub", "Disabling MoPub. Local cache file is inaccessible so MoPub will fail if we try to create a WebView. Details of this Android bug found at:http://code.google.com/p/android/issues/detail?id=10789");
            return;
        }
        this.mAdViewController = AdViewControllerFactory.create(mContext, this);
        this.registerScreenStateBroadcastReceiver();
    }
    
    private void registerScreenStateBroadcastReceiver() {
        this.mScreenStateReceiver = new BroadcastReceiver() {
            public void onReceive(final Context context, final Intent intent) {
                if (MoPubView.this.mIsInForeground && intent != null) {
                    final String action = intent.getAction();
                    if ("android.intent.action.USER_PRESENT".equals(action)) {
                        MoPubView.this.setAdVisibility(true);
                        return;
                    }
                    if ("android.intent.action.SCREEN_OFF".equals(action)) {
                        MoPubView.this.setAdVisibility(false);
                    }
                }
            }
        };
        final IntentFilter intentFilter = new IntentFilter("android.intent.action.SCREEN_OFF");
        intentFilter.addAction("android.intent.action.USER_PRESENT");
        this.mContext.registerReceiver(this.mScreenStateReceiver, intentFilter);
    }
    
    private void setAdVisibility(final boolean b) {
        if (this.mAdViewController == null) {
            return;
        }
        if (b) {
            this.mAdViewController.unpauseRefresh();
            return;
        }
        this.mAdViewController.pauseRefresh();
    }
    
    private void unregisterScreenStateBroadcastReceiver() {
        try {
            this.mContext.unregisterReceiver(this.mScreenStateReceiver);
        }
        catch (Exception ex) {
            Log.d("MoPub", "Failed to unregister screen state broadcast receiver (never registered).");
        }
    }
    
    protected void adClicked() {
        if (this.mBannerAdListener != null) {
            this.mBannerAdListener.onBannerClicked(this);
        }
        else if (this.mOnAdClickedListener != null) {
            this.mOnAdClickedListener.OnAdClicked(this);
        }
    }
    
    protected void adClosed() {
        if (this.mBannerAdListener != null) {
            this.mBannerAdListener.onBannerCollapsed(this);
        }
        else if (this.mOnAdClosedListener != null) {
            this.mOnAdClosedListener.OnAdClosed(this);
        }
    }
    
    protected void adFailed(final MoPubErrorCode moPubErrorCode) {
        if (this.mBannerAdListener != null) {
            this.mBannerAdListener.onBannerFailed(this, moPubErrorCode);
        }
        else if (this.mOnAdFailedListener != null) {
            this.mOnAdFailedListener.OnAdFailed(this);
        }
    }
    
    protected void adLoaded() {
        Log.d("MoPub", "adLoaded");
        if (this.mBannerAdListener != null) {
            this.mBannerAdListener.onBannerLoaded(this);
        }
        else if (this.mOnAdLoadedListener != null) {
            this.mOnAdLoadedListener.OnAdLoaded(this);
        }
    }
    
    protected void adPresentedOverlay() {
        if (this.mBannerAdListener != null) {
            this.mBannerAdListener.onBannerExpanded(this);
        }
        else if (this.mOnAdPresentedOverlayListener != null) {
            this.mOnAdPresentedOverlayListener.OnAdPresentedOverlay(this);
        }
    }
    
    @Deprecated
    protected void adWillLoad(final String s) {
        Log.d("MoPub", "adWillLoad: " + s);
        if (this.mOnAdWillLoadListener != null) {
            this.mOnAdWillLoadListener.OnAdWillLoad(this, s);
        }
    }
    
    @Deprecated
    public void customEventActionWillBegin() {
        if (this.mAdViewController != null) {
            this.mAdViewController.customEventActionWillBegin();
        }
    }
    
    @Deprecated
    public void customEventDidFailToLoadAd() {
        if (this.mAdViewController != null) {
            this.mAdViewController.customEventDidFailToLoadAd();
        }
    }
    
    @Deprecated
    public void customEventDidLoadAd() {
        if (this.mAdViewController != null) {
            this.mAdViewController.customEventDidLoadAd();
        }
    }
    
    public void destroy() {
        this.unregisterScreenStateBroadcastReceiver();
        this.removeAllViews();
        if (this.mAdViewController != null) {
            this.mAdViewController.cleanup();
            this.mAdViewController = null;
        }
        if (this.mCustomEventBannerAdapter != null) {
            this.mCustomEventBannerAdapter.invalidate();
            this.mCustomEventBannerAdapter = null;
        }
    }
    
    public void forceRefresh() {
        if (this.mCustomEventBannerAdapter != null) {
            this.mCustomEventBannerAdapter.invalidate();
            this.mCustomEventBannerAdapter = null;
        }
        if (this.mAdViewController != null) {
            this.mAdViewController.forceRefresh();
        }
    }
    
    public Activity getActivity() {
        return (Activity)this.mContext;
    }
    
    public int getAdHeight() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getAdHeight();
        }
        return 0;
    }
    
    Integer getAdTimeoutDelay() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getAdTimeoutDelay();
        }
        return null;
    }
    
    public String getAdUnitId() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getAdUnitId();
        }
        return null;
    }
    
    AdViewController getAdViewController() {
        return this.mAdViewController;
    }
    
    public int getAdWidth() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getAdWidth();
        }
        return 0;
    }
    
    public boolean getAutorefreshEnabled() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getAutorefreshEnabled();
        }
        Log.d("MoPub", "Can't get autorefresh status for destroyed MoPubView. Returning false.");
        return false;
    }
    
    public MoPubView$BannerAdListener getBannerAdListener() {
        return this.mBannerAdListener;
    }
    
    public String getClickthroughUrl() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getClickthroughUrl();
        }
        return null;
    }
    
    public String getKeywords() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getKeywords();
        }
        return null;
    }
    
    public Map getLocalExtras() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getLocalExtras();
        }
        return Collections.emptyMap();
    }
    
    public Location getLocation() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getLocation();
        }
        return null;
    }
    
    public LocationService$LocationAwareness getLocationAwareness() {
        return this.mLocationAwareness;
    }
    
    public int getLocationPrecision() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getLocationPrecision();
        }
        return 0;
    }
    
    public String getResponseString() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getResponseString();
        }
        return null;
    }
    
    public boolean getTesting() {
        if (this.mAdViewController != null) {
            return this.mAdViewController.getTesting();
        }
        Log.d("MoPub", "Can't get testing status for destroyed MoPubView. Returning false.");
        return false;
    }
    
    public boolean isFacebookSupported() {
        return this.mAdViewController != null && this.mAdViewController.isFacebookSupported();
    }
    
    public void loadAd() {
        if (this.mAdViewController != null) {
            this.mAdViewController.loadAd();
        }
    }
    
    protected void loadCustomEvent(final Map map) {
        if (map == null) {
            Log.d("MoPub", "Couldn't invoke custom event because the server did not specify one.");
            this.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
            return;
        }
        if (this.mCustomEventBannerAdapter != null) {
            this.mCustomEventBannerAdapter.invalidate();
        }
        Log.d("MoPub", "Loading custom event adapter.");
        (this.mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(this, map.get(ResponseHeader.CUSTOM_EVENT_NAME.getKey()), map.get(ResponseHeader.CUSTOM_EVENT_DATA.getKey()))).loadAd();
    }
    
    protected void loadFailUrl(final MoPubErrorCode moPubErrorCode) {
        if (this.mAdViewController != null) {
            this.mAdViewController.loadFailUrl(moPubErrorCode);
        }
    }
    
    protected void nativeAdLoaded() {
        if (this.mAdViewController != null) {
            this.mAdViewController.scheduleRefreshTimerIfEnabled();
        }
        this.adLoaded();
    }
    
    protected void onWindowVisibilityChanged(final int n) {
        this.setAdVisibility(this.mIsInForeground = (n == 0));
    }
    
    protected void registerClick() {
        if (this.mAdViewController != null) {
            this.mAdViewController.registerClick();
            this.adClicked();
        }
    }
    
    public void setAdContentView(final View adContentView) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setAdContentView(adContentView);
        }
    }
    
    public void setAdUnitId(final String adUnitId) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setAdUnitId(adUnitId);
        }
    }
    
    public void setAutorefreshEnabled(final boolean b) {
        if (this.mAdViewController != null) {
            this.mAdViewController.forceSetAutorefreshEnabled(b);
        }
    }
    
    public void setBannerAdListener(final MoPubView$BannerAdListener mBannerAdListener) {
        this.mBannerAdListener = mBannerAdListener;
    }
    
    public void setClickthroughUrl(final String clickthroughUrl) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setClickthroughUrl(clickthroughUrl);
        }
    }
    
    public void setFacebookSupported(final boolean facebookSupported) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setFacebookSupported(facebookSupported);
        }
    }
    
    public void setKeywords(final String keywords) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setKeywords(keywords);
        }
    }
    
    public void setLocalExtras(final Map localExtras) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setLocalExtras(localExtras);
        }
    }
    
    public void setLocation(final Location location) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setLocation(location);
        }
    }
    
    public void setLocationAwareness(final LocationService$LocationAwareness mLocationAwareness) {
        this.mLocationAwareness = mLocationAwareness;
    }
    
    public void setLocationPrecision(final int locationPrecision) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setLocationPrecision(locationPrecision);
        }
    }
    
    @Deprecated
    public void setOnAdClickedListener(final MoPubView$OnAdClickedListener mOnAdClickedListener) {
        this.mOnAdClickedListener = mOnAdClickedListener;
    }
    
    @Deprecated
    public void setOnAdClosedListener(final MoPubView$OnAdClosedListener mOnAdClosedListener) {
        this.mOnAdClosedListener = mOnAdClosedListener;
    }
    
    @Deprecated
    public void setOnAdFailedListener(final MoPubView$OnAdFailedListener mOnAdFailedListener) {
        this.mOnAdFailedListener = mOnAdFailedListener;
    }
    
    @Deprecated
    public void setOnAdLoadedListener(final MoPubView$OnAdLoadedListener mOnAdLoadedListener) {
        this.mOnAdLoadedListener = mOnAdLoadedListener;
    }
    
    @Deprecated
    public void setOnAdPresentedOverlayListener(final MoPubView$OnAdPresentedOverlayListener mOnAdPresentedOverlayListener) {
        this.mOnAdPresentedOverlayListener = mOnAdPresentedOverlayListener;
    }
    
    @Deprecated
    public void setOnAdWillLoadListener(final MoPubView$OnAdWillLoadListener mOnAdWillLoadListener) {
        this.mOnAdWillLoadListener = mOnAdWillLoadListener;
    }
    
    public void setTesting(final boolean testing) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setTesting(testing);
        }
    }
    
    public void setTimeout(final int timeout) {
        if (this.mAdViewController != null) {
            this.mAdViewController.setTimeout(timeout);
        }
    }
    
    protected void trackNativeImpression() {
        Log.d("MoPub", "Tracking impression for native adapter.");
        if (this.mAdViewController != null) {
            this.mAdViewController.trackImpression();
        }
    }
}
