// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import org.apache.http.HttpResponse;
import android.net.http.AndroidHttpClient;
import java.io.InputStream;
import com.mopub.common.CacheService;
import java.io.BufferedInputStream;
import com.mopub.common.util.MoPubLog;
import java.io.IOException;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.HttpGet;
import com.mopub.common.HttpClient;
import android.os.AsyncTask;

public class VastVideoDownloadTask extends AsyncTask
{
    private static final int MAX_VIDEO_SIZE = 26214400;
    private final VastVideoDownloadTask$VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
    
    public VastVideoDownloadTask(final VastVideoDownloadTask$VastVideoDownloadTaskListener mVastVideoDownloadTaskListener) {
        this.mVastVideoDownloadTaskListener = mVastVideoDownloadTaskListener;
    }
    
    protected Boolean doInBackground(final String... array) {
        Boolean b;
        if (array == null || array[0] == null) {
            b = false;
        }
        else {
            final String s = array[0];
            AndroidHttpClient httpClient = null;
            HttpResponse execute = null;
            Label_0130: {
                try {
                    httpClient = HttpClient.getHttpClient();
                    execute = httpClient.execute((HttpUriRequest)new HttpGet(s));
                    if (execute == null || execute.getEntity() == null) {
                        throw new IOException("Obtained null response from video url: " + s);
                    }
                    break Label_0130;
                }
                catch (Exception ex) {
                    try {
                        MoPubLog.d("Failed to download video: " + ex.getMessage());
                        b = false;
                        return b;
                    }
                    // iftrue(Label_0174:, execute.getEntity().getContentLength() <= 26214400L)
                    finally {
                        if (httpClient != null) {
                            httpClient.close();
                        }
                    }
                }
            }
            final BufferedInputStream bufferedInputStream;
            Label_0174: {
                bufferedInputStream = new BufferedInputStream(execute.getEntity().getContent());
            }
            final boolean putToDiskCache = CacheService.putToDiskCache(s, bufferedInputStream);
            bufferedInputStream.close();
            b = putToDiskCache;
            if (httpClient != null) {
                httpClient.close();
                return b;
            }
        }
        return b;
    }
    
    protected void onCancelled() {
        this.onPostExecute(false);
    }
    
    protected void onPostExecute(final Boolean b) {
        if (this.mVastVideoDownloadTaskListener != null) {
            this.mVastVideoDownloadTaskListener.onComplete(b);
        }
    }
}
