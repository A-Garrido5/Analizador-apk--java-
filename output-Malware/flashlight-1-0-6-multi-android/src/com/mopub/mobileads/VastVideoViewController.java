// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import java.io.FileDescriptor;
import java.io.Closeable;
import com.mopub.common.util.Streams;
import java.io.FileInputStream;
import java.io.File;
import com.mopub.common.util.VersionCode;
import android.graphics.Bitmap;
import android.view.View$OnClickListener;
import com.mopub.common.util.Dips;
import com.mopub.common.HttpResponses;
import com.mopub.common.DownloadResponse;
import android.content.Intent;
import com.mopub.common.MoPubBrowser;
import com.mopub.common.util.MoPubLog;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import org.apache.http.client.methods.HttpUriRequest;
import com.mopub.common.DownloadTask;
import android.media.MediaPlayer$OnErrorListener;
import android.media.MediaPlayer$OnCompletionListener;
import android.media.MediaPlayer;
import android.media.MediaPlayer$OnPreparedListener;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable$Orientation;
import com.mopub.common.util.Drawables;
import android.graphics.drawable.Drawable;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.RelativeLayout;
import java.util.List;
import java.io.Serializable;
import com.mopub.common.HttpClient;
import android.view.MotionEvent;
import android.view.View;
import android.os.Bundle;
import android.content.Context;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import android.widget.VideoView;
import com.mopub.mobileads.util.vast.VastVideoConfiguration;
import com.mopub.mobileads.util.vast.VastCompanionAd;
import android.os.Handler;
import android.widget.ImageView;
import android.view.View$OnTouchListener;
import java.util.concurrent.ThreadPoolExecutor;
import com.mopub.common.DownloadTask$DownloadTaskListener;

public class VastVideoViewController extends BaseVideoViewController implements DownloadTask$DownloadTaskListener
{
    static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5000;
    private static final float FIRST_QUARTER_MARKER = 0.25f;
    static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16000;
    private static final int MAX_VIDEO_RETRIES = 1;
    private static final float MID_POINT_MARKER = 0.5f;
    private static final int MOPUB_BROWSER_REQUEST_CODE = 1;
    private static final float THIRD_QUARTER_MARKER = 0.75f;
    static final String VAST_VIDEO_CONFIGURATION = "vast_video_configuration";
    private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50L;
    private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
    private static final ThreadPoolExecutor sThreadPoolExecutor;
    private final View$OnTouchListener mClickThroughListener;
    private final ImageView mCompanionAdImageView;
    private final Handler mHandler;
    private boolean mIsFirstMarkHit;
    private boolean mIsSecondMarkHit;
    private boolean mIsStartMarkHit;
    private boolean mIsThirdMarkHit;
    private boolean mIsVideoFinishedPlaying;
    private boolean mIsVideoProgressShouldBeChecked;
    private int mSeekerPositionOnPause;
    private int mShowCloseButtonDelay;
    private boolean mShowCloseButtonEventFired;
    private final VastCompanionAd mVastCompanionAd;
    private final VastVideoConfiguration mVastVideoConfiguration;
    private final VastVideoToolbar mVastVideoToolbar;
    private final Runnable mVideoProgressCheckerRunnable;
    private int mVideoRetries;
    private final VideoView mVideoView;
    
    static {
        sThreadPoolExecutor = new ThreadPoolExecutor(10, 50, 1L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
    }
    
    VastVideoViewController(final Context context, final Bundle bundle, final long n, final BaseVideoViewController$BaseVideoViewControllerListener baseVideoViewController$BaseVideoViewControllerListener) {
        super(context, n, baseVideoViewController$BaseVideoViewControllerListener);
        this.mShowCloseButtonDelay = 5000;
        this.mHandler = new Handler();
        this.mIsVideoProgressShouldBeChecked = false;
        this.mSeekerPositionOnPause = -1;
        this.mVideoRetries = 0;
        final Serializable serializable = bundle.getSerializable("vast_video_configuration");
        if (serializable == null || !(serializable instanceof VastVideoConfiguration)) {
            throw new IllegalStateException("VastVideoConfiguration is invalid");
        }
        this.mVastVideoConfiguration = (VastVideoConfiguration)serializable;
        if (this.mVastVideoConfiguration.getDiskMediaFileUrl() == null) {
            throw new IllegalStateException("VastVideoConfiguration does not have a video disk path");
        }
        this.mVastCompanionAd = this.mVastVideoConfiguration.getVastCompanionAd();
        this.mClickThroughListener = (View$OnTouchListener)new View$OnTouchListener() {
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                if (motionEvent.getAction() == 1 && VastVideoViewController.this.shouldAllowClickThrough()) {
                    VastVideoViewController.this.handleClick(VastVideoViewController.this.mVastVideoConfiguration.getClickTrackers(), VastVideoViewController.this.mVastVideoConfiguration.getClickThroughUrl());
                }
                return true;
            }
        };
        this.createVideoBackground(context);
        (this.mVideoView = this.createVideoView(context)).requestFocus();
        this.mVastVideoToolbar = this.createVastVideoToolBar(context);
        this.getLayout().addView((View)this.mVastVideoToolbar);
        this.mCompanionAdImageView = this.createCompanionAdImageView(context);
        HttpClient.makeTrackingHttpRequest(this.mVastVideoConfiguration.getImpressionTrackers(), context);
        this.mVideoProgressCheckerRunnable = this.createVideoProgressCheckerRunnable();
    }
    
    static /* synthetic */ void access$10(final VastVideoViewController vastVideoViewController, final boolean mIsSecondMarkHit) {
        vastVideoViewController.mIsSecondMarkHit = mIsSecondMarkHit;
    }
    
    static /* synthetic */ void access$12(final VastVideoViewController vastVideoViewController, final boolean mIsThirdMarkHit) {
        vastVideoViewController.mIsThirdMarkHit = mIsThirdMarkHit;
    }
    
    static /* synthetic */ void access$21(final VastVideoViewController vastVideoViewController, final int mShowCloseButtonDelay) {
        vastVideoViewController.mShowCloseButtonDelay = mShowCloseButtonDelay;
    }
    
    static /* synthetic */ void access$23(final VastVideoViewController vastVideoViewController, final boolean mIsVideoFinishedPlaying) {
        vastVideoViewController.mIsVideoFinishedPlaying = mIsVideoFinishedPlaying;
    }
    
    static /* synthetic */ void access$6(final VastVideoViewController vastVideoViewController, final boolean mIsStartMarkHit) {
        vastVideoViewController.mIsStartMarkHit = mIsStartMarkHit;
    }
    
    static /* synthetic */ void access$8(final VastVideoViewController vastVideoViewController, final boolean mIsFirstMarkHit) {
        vastVideoViewController.mIsFirstMarkHit = mIsFirstMarkHit;
    }
    
    private ImageView createCompanionAdImageView(final Context context) {
        final RelativeLayout relativeLayout = new RelativeLayout(context);
        relativeLayout.setGravity(17);
        final RelativeLayout$LayoutParams relativeLayout$LayoutParams = new RelativeLayout$LayoutParams(-1, -1);
        relativeLayout$LayoutParams.addRule(3, this.mVastVideoToolbar.getId());
        this.getLayout().addView((View)relativeLayout, (ViewGroup$LayoutParams)relativeLayout$LayoutParams);
        final ImageView imageView = new ImageView(context);
        imageView.setVisibility(4);
        relativeLayout.addView((View)imageView, (ViewGroup$LayoutParams)new RelativeLayout$LayoutParams(-1, -1));
        return imageView;
    }
    
    private VastVideoToolbar createVastVideoToolBar(final Context context) {
        final VastVideoToolbar vastVideoToolbar = new VastVideoToolbar(context);
        vastVideoToolbar.setCloseButtonOnTouchListener((View$OnTouchListener)new View$OnTouchListener() {
            public boolean onTouch(final View view, final MotionEvent motionEvent) {
                if (motionEvent.getAction() == 1) {
                    VastVideoViewController.this.getBaseVideoViewControllerListener().onFinish();
                }
                return true;
            }
        });
        vastVideoToolbar.setLearnMoreButtonOnTouchListener(this.mClickThroughListener);
        return vastVideoToolbar;
    }
    
    private void createVideoBackground(final Context context) {
        this.getLayout().setBackgroundDrawable((Drawable)new LayerDrawable(new Drawable[] { Drawables.THATCHED_BACKGROUND.decodeImage(context), new GradientDrawable(GradientDrawable$Orientation.TOP_BOTTOM, new int[] { Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0) }) }));
    }
    
    private Runnable createVideoProgressCheckerRunnable() {
        return new Runnable() {
            @Override
            public void run() {
                final float n = VastVideoViewController.this.mVideoView.getDuration();
                final float n2 = VastVideoViewController.this.mVideoView.getCurrentPosition();
                if (n > 0.0f) {
                    final float n3 = n2 / n;
                    if (!VastVideoViewController.this.mIsStartMarkHit && n2 >= 1000.0f) {
                        VastVideoViewController.access$6(VastVideoViewController.this, true);
                        HttpClient.makeTrackingHttpRequest(VastVideoViewController.this.mVastVideoConfiguration.getStartTrackers(), VastVideoViewController.this.getContext());
                    }
                    if (!VastVideoViewController.this.mIsFirstMarkHit && n3 > 0.25f) {
                        VastVideoViewController.access$8(VastVideoViewController.this, true);
                        HttpClient.makeTrackingHttpRequest(VastVideoViewController.this.mVastVideoConfiguration.getFirstQuartileTrackers(), VastVideoViewController.this.getContext());
                    }
                    if (!VastVideoViewController.this.mIsSecondMarkHit && n3 > 0.5f) {
                        VastVideoViewController.access$10(VastVideoViewController.this, true);
                        HttpClient.makeTrackingHttpRequest(VastVideoViewController.this.mVastVideoConfiguration.getMidpointTrackers(), VastVideoViewController.this.getContext());
                    }
                    if (!VastVideoViewController.this.mIsThirdMarkHit && n3 > 0.75f) {
                        VastVideoViewController.access$12(VastVideoViewController.this, true);
                        HttpClient.makeTrackingHttpRequest(VastVideoViewController.this.mVastVideoConfiguration.getThirdQuartileTrackers(), VastVideoViewController.this.getContext());
                    }
                    if (VastVideoViewController.this.isLongVideo(VastVideoViewController.this.mVideoView.getDuration())) {
                        VastVideoViewController.this.mVastVideoToolbar.updateCountdownWidget(VastVideoViewController.this.mShowCloseButtonDelay - VastVideoViewController.this.mVideoView.getCurrentPosition());
                    }
                    if (VastVideoViewController.this.shouldBeInteractable()) {
                        VastVideoViewController.this.makeVideoInteractable();
                    }
                }
                VastVideoViewController.this.mVastVideoToolbar.updateDurationWidget(VastVideoViewController.this.mVideoView.getDuration() - VastVideoViewController.this.mVideoView.getCurrentPosition());
                if (VastVideoViewController.this.mIsVideoProgressShouldBeChecked) {
                    VastVideoViewController.this.mHandler.postDelayed(VastVideoViewController.this.mVideoProgressCheckerRunnable, 50L);
                }
            }
        };
    }
    
    private VideoView createVideoView(final Context context) {
        final VideoView videoView = new VideoView(context);
        videoView.setOnPreparedListener((MediaPlayer$OnPreparedListener)new MediaPlayer$OnPreparedListener() {
            public void onPrepared(final MediaPlayer mediaPlayer) {
                if (VastVideoViewController.this.mVideoView.getDuration() < 16000) {
                    VastVideoViewController.access$21(VastVideoViewController.this, VastVideoViewController.this.mVideoView.getDuration());
                }
            }
        });
        videoView.setOnTouchListener(this.mClickThroughListener);
        videoView.setOnCompletionListener((MediaPlayer$OnCompletionListener)new MediaPlayer$OnCompletionListener() {
            public void onCompletion(final MediaPlayer mediaPlayer) {
                VastVideoViewController.this.stopProgressChecker();
                VastVideoViewController.this.makeVideoInteractable();
                VastVideoViewController.this.videoCompleted(false);
                HttpClient.makeTrackingHttpRequest(VastVideoViewController.this.mVastVideoConfiguration.getCompleteTrackers(), context);
                VastVideoViewController.access$23(VastVideoViewController.this, true);
                videoView.setVisibility(8);
                if (VastVideoViewController.this.mCompanionAdImageView.getDrawable() != null) {
                    VastVideoViewController.this.mCompanionAdImageView.setVisibility(0);
                }
            }
        });
        videoView.setOnErrorListener((MediaPlayer$OnErrorListener)new MediaPlayer$OnErrorListener() {
            public boolean onError(final MediaPlayer mediaPlayer, final int n, final int n2) {
                if (VastVideoViewController.this.retryMediaPlayer(mediaPlayer, n, n2)) {
                    return true;
                }
                VastVideoViewController.this.stopProgressChecker();
                VastVideoViewController.this.makeVideoInteractable();
                VastVideoViewController.this.videoError(false);
                return false;
            }
        });
        videoView.setVideoPath(this.mVastVideoConfiguration.getDiskMediaFileUrl());
        return videoView;
    }
    
    private void downloadCompanionAd() {
        if (this.mVastCompanionAd == null) {
            return;
        }
        try {
            AsyncTasks.safeExecuteOnExecutor(new DownloadTask(this), HttpClient.initializeHttpGet(this.mVastCompanionAd.getImageUrl(), this.getContext()));
        }
        catch (Exception ex) {
            MoPubLog.d("Failed to download companion ad", ex);
        }
    }
    
    private void handleClick(final List list, final String s) {
        HttpClient.makeTrackingHttpRequest(list, this.getContext());
        this.videoClicked();
        final Bundle bundle = new Bundle();
        bundle.putString("URL", s);
        this.getBaseVideoViewControllerListener().onStartActivityForResult(MoPubBrowser.class, 1, bundle);
    }
    
    private boolean isLongVideo(final int n) {
        return n >= 16000;
    }
    
    private void makeVideoInteractable() {
        this.mShowCloseButtonEventFired = true;
        this.mVastVideoToolbar.makeInteractable();
    }
    
    private boolean shouldAllowClickThrough() {
        return this.mShowCloseButtonEventFired;
    }
    
    private boolean shouldBeInteractable() {
        return !this.mShowCloseButtonEventFired && this.mVideoView.getCurrentPosition() > this.mShowCloseButtonDelay;
    }
    
    private void startProgressChecker() {
        if (!this.mIsVideoProgressShouldBeChecked) {
            this.mIsVideoProgressShouldBeChecked = true;
            this.mHandler.post(this.mVideoProgressCheckerRunnable);
        }
    }
    
    private void stopProgressChecker() {
        if (this.mIsVideoProgressShouldBeChecked) {
            this.mIsVideoProgressShouldBeChecked = false;
            this.mHandler.removeCallbacks(this.mVideoProgressCheckerRunnable);
        }
    }
    
    @Override
    boolean backButtonEnabled() {
        return this.mShowCloseButtonEventFired;
    }
    
    @Deprecated
    ImageView getCompanionAdImageView() {
        return this.mCompanionAdImageView;
    }
    
    @Deprecated
    boolean getIsVideoProgressShouldBeChecked() {
        return this.mIsVideoProgressShouldBeChecked;
    }
    
    @Deprecated
    int getShowCloseButtonDelay() {
        return this.mShowCloseButtonDelay;
    }
    
    @Deprecated
    Runnable getVideoProgressCheckerRunnable() {
        return this.mVideoProgressCheckerRunnable;
    }
    
    @Deprecated
    int getVideoRetries() {
        return this.mVideoRetries;
    }
    
    @Override
    VideoView getVideoView() {
        return this.mVideoView;
    }
    
    @Deprecated
    boolean isShowCloseButtonEventFired() {
        return this.mShowCloseButtonEventFired;
    }
    
    @Deprecated
    boolean isVideoFinishedPlaying() {
        return this.mIsVideoFinishedPlaying;
    }
    
    @Override
    void onActivityResult(final int n, final int n2, final Intent intent) {
        if (n == 1 && n2 == -1) {
            this.getBaseVideoViewControllerListener().onFinish();
        }
    }
    
    @Override
    public void onComplete(final String s, final DownloadResponse downloadResponse) {
        if (downloadResponse != null && downloadResponse.getStatusCode() == 200) {
            final Bitmap bitmap = HttpResponses.asBitmap(downloadResponse);
            if (bitmap != null) {
                final int dipsToIntPixels = Dips.dipsToIntPixels(bitmap.getWidth(), this.getContext());
                final int dipsToIntPixels2 = Dips.dipsToIntPixels(bitmap.getHeight(), this.getContext());
                final int measuredWidth = this.mCompanionAdImageView.getMeasuredWidth();
                final int measuredHeight = this.mCompanionAdImageView.getMeasuredHeight();
                if (dipsToIntPixels < measuredWidth && dipsToIntPixels2 < measuredHeight) {
                    this.mCompanionAdImageView.getLayoutParams().width = dipsToIntPixels;
                    this.mCompanionAdImageView.getLayoutParams().height = dipsToIntPixels2;
                }
                this.mCompanionAdImageView.setImageBitmap(bitmap);
                this.mCompanionAdImageView.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
                    public void onClick(final View view) {
                        if (VastVideoViewController.this.mVastCompanionAd != null) {
                            VastVideoViewController.this.handleClick(VastVideoViewController.this.mVastCompanionAd.getClickTrackers(), VastVideoViewController.this.mVastCompanionAd.getClickThroughUrl());
                        }
                    }
                });
            }
        }
    }
    
    @Override
    void onCreate() {
        super.onCreate();
        this.getBaseVideoViewControllerListener().onSetRequestedOrientation(0);
        this.broadcastAction("com.mopub.action.interstitial.show");
        this.downloadCompanionAd();
    }
    
    @Override
    void onDestroy() {
        this.stopProgressChecker();
        this.broadcastAction("com.mopub.action.interstitial.dismiss");
    }
    
    @Override
    void onPause() {
        this.stopProgressChecker();
        this.mSeekerPositionOnPause = this.mVideoView.getCurrentPosition();
        this.mVideoView.pause();
    }
    
    @Override
    void onResume() {
        this.mVideoRetries = 0;
        this.startProgressChecker();
        this.mVideoView.seekTo(this.mSeekerPositionOnPause);
        if (!this.mIsVideoFinishedPlaying) {
            this.mVideoView.start();
        }
    }
    
    boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int n, final int n2) {
        if (!VersionCode.currentApiLevel().isBelow(VersionCode.JELLY_BEAN) || n != 1 || n2 != Integer.MIN_VALUE || this.mVideoRetries > 0) {
            return false;
        }
        Closeable closeable = null;
        FileInputStream fileInputStream;
        try {
            mediaPlayer.reset();
            fileInputStream = new FileInputStream(new File(this.mVastVideoConfiguration.getDiskMediaFileUrl()));
            final MediaPlayer mediaPlayer2 = mediaPlayer;
            final FileInputStream fileInputStream2 = fileInputStream;
            final FileDescriptor fileDescriptor = fileInputStream2.getFD();
            mediaPlayer2.setDataSource(fileDescriptor);
            final MediaPlayer mediaPlayer3 = mediaPlayer;
            mediaPlayer3.prepareAsync();
            final VastVideoViewController vastVideoViewController = this;
            final VideoView videoView = vastVideoViewController.mVideoView;
            videoView.start();
            final FileInputStream fileInputStream3 = fileInputStream;
            Streams.closeStream(fileInputStream3);
            final VastVideoViewController vastVideoViewController2 = this;
            final int n3 = 1;
            final VastVideoViewController vastVideoViewController3 = this;
            final int n4 = vastVideoViewController3.mVideoRetries;
            final int n5 = n3 + n4;
            vastVideoViewController2.mVideoRetries = n5;
            return true;
        }
        catch (Exception ex) {
            Streams.closeStream(null);
            ++this.mVideoRetries;
            return false;
        }
        finally {
            final Object o2;
            final Object o = o2;
        }
        while (true) {
            try {
                final MediaPlayer mediaPlayer2 = mediaPlayer;
                final FileInputStream fileInputStream2 = fileInputStream;
                final FileDescriptor fileDescriptor = fileInputStream2.getFD();
                mediaPlayer2.setDataSource(fileDescriptor);
                final MediaPlayer mediaPlayer3 = mediaPlayer;
                mediaPlayer3.prepareAsync();
                final VastVideoViewController vastVideoViewController = this;
                final VideoView videoView = vastVideoViewController.mVideoView;
                videoView.start();
                final FileInputStream fileInputStream3 = fileInputStream;
                Streams.closeStream(fileInputStream3);
                final VastVideoViewController vastVideoViewController2 = this;
                final int n3 = 1;
                final VastVideoViewController vastVideoViewController3 = this;
                final int n4 = vastVideoViewController3.mVideoRetries;
                final int n5 = n3 + n4;
                vastVideoViewController2.mVideoRetries = n5;
                return true;
                Streams.closeStream(closeable);
                ++this.mVideoRetries;
                throw;
            }
            catch (Exception ex2) {}
            finally {
                closeable = fileInputStream;
                continue;
            }
            break;
        }
    }
    
    @Deprecated
    void setCloseButtonVisible(final boolean mShowCloseButtonEventFired) {
        this.mShowCloseButtonEventFired = mShowCloseButtonEventFired;
    }
}
