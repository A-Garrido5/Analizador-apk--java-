// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads.util;

class Base64$Encoder extends Base64$Coder
{
    private static final byte[] ENCODE;
    private static final byte[] ENCODE_WEBSAFE;
    public static final int LINE_GROUPS = 19;
    private final byte[] alphabet;
    private int count;
    public final boolean do_cr;
    public final boolean do_newline;
    public final boolean do_padding;
    private final byte[] tail;
    int tailLen;
    
    static {
        ENCODE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
        ENCODE_WEBSAFE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };
    }
    
    public Base64$Encoder(final int n, final byte[] output) {
        boolean do_cr = true;
        this.output = output;
        this.do_padding = ((n & 0x1) == 0x0 && do_cr);
        this.do_newline = ((n & 0x2) == 0x0 && do_cr);
        if ((n & 0x4) == 0x0) {
            do_cr = false;
        }
        this.do_cr = do_cr;
        byte[] alphabet;
        if ((n & 0x8) == 0x0) {
            alphabet = Base64$Encoder.ENCODE;
        }
        else {
            alphabet = Base64$Encoder.ENCODE_WEBSAFE;
        }
        this.alphabet = alphabet;
        this.tail = new byte[2];
        this.tailLen = 0;
        int count;
        if (this.do_newline) {
            count = 19;
        }
        else {
            count = -1;
        }
        this.count = count;
    }
    
    @Override
    public int maxOutputSize(final int n) {
        return 10 + n * 8 / 5;
    }
    
    @Override
    public boolean process(final byte[] array, final int n, final int n2, final boolean b) {
        final byte[] alphabet = this.alphabet;
        final byte[] output = this.output;
        final int count = this.count;
        final int n3 = n2 + n;
        int n4 = 0;
        int n5 = 0;
        Label_0058: {
            switch (this.tailLen) {
                case 0: {
                    n4 = -1;
                    n5 = n;
                    break Label_0058;
                }
                case 1: {
                    if (n + 2 <= n3) {
                        final int n6 = (0xFF & this.tail[0]) << 16;
                        final int n7 = n + 1;
                        final int n8 = n6 | (0xFF & array[n]) << 8;
                        final int n9 = n7 + 1;
                        final int n10 = n8 | (0xFF & array[n7]);
                        this.tailLen = 0;
                        n4 = n10;
                        n5 = n9;
                        break Label_0058;
                    }
                    break;
                }
                case 2: {
                    if (n + 1 <= n3) {
                        final int n11 = (0xFF & this.tail[0]) << 16 | (0xFF & this.tail[1]) << 8;
                        n5 = n + 1;
                        final int n12 = n11 | (0xFF & array[n]);
                        this.tailLen = 0;
                        n4 = n12;
                        break Label_0058;
                    }
                    break;
                }
            }
            n4 = -1;
            n5 = n;
        }
        int op;
        int count2;
        if (n4 != -1) {
            output[0] = alphabet[0x3F & n4 >> 18];
            output[1] = alphabet[0x3F & n4 >> 12];
            output[2] = alphabet[0x3F & n4 >> 6];
            int n13 = 4;
            output[3] = alphabet[n4 & 0x3F];
            final int n14 = count - 1;
            if (n14 == 0) {
                if (this.do_cr) {
                    n13 = 5;
                    output[4] = 13;
                }
                op = n13 + 1;
                output[n13] = 10;
                count2 = 19;
            }
            else {
                count2 = n14;
                op = n13;
            }
        }
        else {
            count2 = count;
            op = 0;
        }
        while (n5 + 3 <= n3) {
            final int n15 = (0xFF & array[n5]) << 16 | (0xFF & array[n5 + 1]) << 8 | (0xFF & array[n5 + 2]);
            output[op] = alphabet[0x3F & n15 >> 18];
            output[op + 1] = alphabet[0x3F & n15 >> 12];
            output[op + 2] = alphabet[0x3F & n15 >> 6];
            output[op + 3] = alphabet[n15 & 0x3F];
            final int n16 = n5 + 3;
            final int n17 = op + 4;
            final int n18 = count2 - 1;
            if (n18 == 0) {
                int n19;
                if (this.do_cr) {
                    n19 = n17 + 1;
                    output[n17] = 13;
                }
                else {
                    n19 = n17;
                }
                op = n19 + 1;
                output[n19] = 10;
                n5 = n16;
                count2 = 19;
            }
            else {
                count2 = n18;
                op = n17;
                n5 = n16;
            }
        }
        Label_1112: {
            if (b) {
                while (true) {
                    int n24 = 0;
                    Label_1205: {
                        if (n5 - this.tailLen == n3 - 1) {
                            int n20;
                            byte b2;
                            if (this.tailLen > 0) {
                                final byte[] tail = this.tail;
                                n20 = 1;
                                b2 = tail[0];
                            }
                            else {
                                final int n21 = n5 + 1;
                                b2 = array[n5];
                                n5 = n21;
                                n20 = 0;
                            }
                            final int n22 = (b2 & 0xFF) << 4;
                            this.tailLen -= n20;
                            final int n23 = op + 1;
                            output[op] = alphabet[0x3F & n22 >> 6];
                            n24 = n23 + 1;
                            output[n23] = alphabet[n22 & 0x3F];
                            if (this.do_padding) {
                                final int n25 = n24 + 1;
                                output[n24] = 61;
                                n24 = n25 + 1;
                                output[n25] = 61;
                            }
                            if (!this.do_newline) {
                                break Label_1205;
                            }
                            if (this.do_cr) {
                                final int n26 = n24 + 1;
                                output[n24] = 13;
                                n24 = n26;
                            }
                            op = n24 + 1;
                            output[n24] = 10;
                        }
                        else if (n5 - this.tailLen == n3 - 2) {
                            int n27;
                            byte b3;
                            if (this.tailLen > 1) {
                                final byte[] tail2 = this.tail;
                                n27 = 1;
                                b3 = tail2[0];
                            }
                            else {
                                final int n28 = n5 + 1;
                                b3 = array[n5];
                                n5 = n28;
                                n27 = 0;
                            }
                            final int n29 = (b3 & 0xFF) << 10;
                            byte b4;
                            if (this.tailLen > 0) {
                                final byte[] tail3 = this.tail;
                                final int n30 = n27 + 1;
                                b4 = tail3[n27];
                                n27 = n30;
                            }
                            else {
                                final int n31 = n5 + 1;
                                b4 = array[n5];
                                n5 = n31;
                            }
                            final int n32 = n29 | (b4 & 0xFF) << 2;
                            this.tailLen -= n27;
                            final int n33 = op + 1;
                            output[op] = alphabet[0x3F & n32 >> 12];
                            final int n34 = n33 + 1;
                            output[n33] = alphabet[0x3F & n32 >> 6];
                            final int n35 = n34 + 1;
                            output[n34] = alphabet[n32 & 0x3F];
                            if (this.do_padding) {
                                n24 = n35 + 1;
                                output[n35] = 61;
                            }
                            else {
                                n24 = n35;
                            }
                            if (!this.do_newline) {
                                break Label_1205;
                            }
                            if (this.do_cr) {
                                final int n36 = n24 + 1;
                                output[n24] = 13;
                                n24 = n36;
                            }
                            op = n24 + 1;
                            output[n24] = 10;
                        }
                        else if (this.do_newline && op > 0 && count2 != 19) {
                            int n37;
                            if (this.do_cr) {
                                n37 = op + 1;
                                output[op] = 13;
                            }
                            else {
                                n37 = op;
                            }
                            op = n37 + 1;
                            output[n37] = 10;
                        }
                        assert this.tailLen == 0;
                        assert n5 == n3;
                        break Label_1112;
                    }
                    op = n24;
                    continue;
                }
            }
            if (n5 == n3 - 1) {
                this.tail[this.tailLen++] = array[n5];
            }
            else if (n5 == n3 - 2) {
                this.tail[this.tailLen++] = array[n5];
                this.tail[this.tailLen++] = array[n5 + 1];
            }
        }
        this.op = op;
        this.count = count2;
        return true;
    }
}
