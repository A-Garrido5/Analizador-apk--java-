// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads.util.vast;

import com.mopub.common.util.MoPubLog;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import com.mopub.mobileads.VastVideoDownloadTask;
import com.mopub.mobileads.VastVideoDownloadTask$VastVideoDownloadTaskListener;
import com.mopub.common.CacheService;
import android.view.Display;
import android.view.WindowManager;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import android.content.Context;
import java.util.Arrays;
import java.util.List;

public class VastManager implements VastXmlManagerAggregator$VastXmlManagerAggregatorListener
{
    private static final double AREA_WEIGHT = 60.0;
    private static final double ASPECT_RATIO_WEIGHT = 40.0;
    private static final List COMPANION_IMAGE_MIME_TYPES;
    private static final List VIDEO_MIME_TYPES;
    private int mScreenArea;
    private double mScreenAspectRatio;
    private VastManager$VastManagerListener mVastManagerListener;
    private VastXmlManagerAggregator mVastXmlManagerAggregator;
    
    static {
        VIDEO_MIME_TYPES = Arrays.asList("video/mp4", "video/3gpp");
        COMPANION_IMAGE_MIME_TYPES = Arrays.asList("image/jpeg", "image/png", "image/bmp", "image/gif");
    }
    
    public VastManager(final Context context) {
        this.initializeScreenDimensions(context);
    }
    
    private double calculateFitness(final int n, final int n2) {
        return 40.0 * Math.abs(Math.log(n / n2 / this.mScreenAspectRatio)) + 60.0 * Math.abs(Math.log(n * n2 / this.mScreenArea));
    }
    
    private VastVideoConfiguration createVastVideoConfigurationFromXml(final List list) {
        final VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
        final ArrayList list2 = new ArrayList();
        final ArrayList list3 = new ArrayList();
        for (final VastXmlManager vastXmlManager : list) {
            vastVideoConfiguration.addImpressionTrackers(vastXmlManager.getImpressionTrackers());
            vastVideoConfiguration.addStartTrackers(vastXmlManager.getVideoStartTrackers());
            vastVideoConfiguration.addFirstQuartileTrackers(vastXmlManager.getVideoFirstQuartileTrackers());
            vastVideoConfiguration.addMidpointTrackers(vastXmlManager.getVideoMidpointTrackers());
            vastVideoConfiguration.addThirdQuartileTrackers(vastXmlManager.getVideoThirdQuartileTrackers());
            vastVideoConfiguration.addCompleteTrackers(vastXmlManager.getVideoCompleteTrackers());
            vastVideoConfiguration.addClickTrackers(vastXmlManager.getClickTrackers());
            if (vastVideoConfiguration.getClickThroughUrl() == null) {
                vastVideoConfiguration.setClickThroughUrl(vastXmlManager.getClickThroughUrl());
            }
            list2.addAll(vastXmlManager.getMediaXmlManagers());
            list3.addAll(vastXmlManager.getCompanionAdXmlManagers());
        }
        vastVideoConfiguration.setNetworkMediaFileUrl(this.getBestMediaFileUrl(list2));
        vastVideoConfiguration.setVastCompanionAd(this.getBestCompanionAd(list3));
        return vastVideoConfiguration;
    }
    
    private void initializeScreenDimensions(final Context context) {
        final Display defaultDisplay = ((WindowManager)context.getSystemService("window")).getDefaultDisplay();
        final int width = defaultDisplay.getWidth();
        final int height = defaultDisplay.getHeight();
        final int max = Math.max(width, height);
        final int min = Math.min(width, height);
        this.mScreenAspectRatio = max / min;
        this.mScreenArea = min * max;
    }
    
    private boolean updateDiskMediaFileUrl(final VastVideoConfiguration vastVideoConfiguration) {
        final String networkMediaFileUrl = vastVideoConfiguration.getNetworkMediaFileUrl();
        if (CacheService.containsKeyDiskCache(networkMediaFileUrl)) {
            vastVideoConfiguration.setDiskMediaFileUrl(CacheService.getFilePathDiskCache(networkMediaFileUrl));
            return true;
        }
        return false;
    }
    
    public void cancel() {
        if (this.mVastXmlManagerAggregator != null) {
            this.mVastXmlManagerAggregator.cancel(true);
            this.mVastXmlManagerAggregator = null;
        }
    }
    
    VastCompanionAd getBestCompanionAd(final List list) {
        final ArrayList<VastXmlManager$ImageCompanionAdXmlManager> list2 = new ArrayList<VastXmlManager$ImageCompanionAdXmlManager>(list);
        final Iterator<Object> iterator = list2.iterator();
        VastXmlManager$ImageCompanionAdXmlManager vastXmlManager$ImageCompanionAdXmlManager = null;
        double n = Double.POSITIVE_INFINITY;
        while (iterator.hasNext()) {
            final VastXmlManager$ImageCompanionAdXmlManager vastXmlManager$ImageCompanionAdXmlManager2 = iterator.next();
            final String type = vastXmlManager$ImageCompanionAdXmlManager2.getType();
            final String imageUrl = vastXmlManager$ImageCompanionAdXmlManager2.getImageUrl();
            if (!VastManager.COMPANION_IMAGE_MIME_TYPES.contains(type) || imageUrl == null) {
                iterator.remove();
            }
            else {
                final Integer width = vastXmlManager$ImageCompanionAdXmlManager2.getWidth();
                final Integer height = vastXmlManager$ImageCompanionAdXmlManager2.getHeight();
                if (width == null || width <= 0 || height == null || height <= 0) {
                    continue;
                }
                final double calculateFitness = this.calculateFitness(width, height);
                if (calculateFitness >= n) {
                    continue;
                }
                n = calculateFitness;
                vastXmlManager$ImageCompanionAdXmlManager = vastXmlManager$ImageCompanionAdXmlManager2;
            }
        }
        VastXmlManager$ImageCompanionAdXmlManager vastXmlManager$ImageCompanionAdXmlManager3;
        if (vastXmlManager$ImageCompanionAdXmlManager == null && !list2.isEmpty()) {
            vastXmlManager$ImageCompanionAdXmlManager3 = list2.get(0);
        }
        else {
            vastXmlManager$ImageCompanionAdXmlManager3 = vastXmlManager$ImageCompanionAdXmlManager;
        }
        if (vastXmlManager$ImageCompanionAdXmlManager3 != null) {
            return new VastCompanionAd(vastXmlManager$ImageCompanionAdXmlManager3.getWidth(), vastXmlManager$ImageCompanionAdXmlManager3.getHeight(), vastXmlManager$ImageCompanionAdXmlManager3.getImageUrl(), vastXmlManager$ImageCompanionAdXmlManager3.getClickThroughUrl(), new ArrayList(vastXmlManager$ImageCompanionAdXmlManager3.getClickTrackers()));
        }
        return null;
    }
    
    String getBestMediaFileUrl(final List list) {
        final ArrayList<VastXmlManager$MediaXmlManager> list2 = new ArrayList<VastXmlManager$MediaXmlManager>(list);
        final Iterator<Object> iterator = list2.iterator();
        String mediaUrl = null;
        double n = Double.POSITIVE_INFINITY;
        while (iterator.hasNext()) {
            final VastXmlManager$MediaXmlManager vastXmlManager$MediaXmlManager = iterator.next();
            final String type = vastXmlManager$MediaXmlManager.getType();
            final String mediaUrl2 = vastXmlManager$MediaXmlManager.getMediaUrl();
            if (!VastManager.VIDEO_MIME_TYPES.contains(type) || mediaUrl2 == null) {
                iterator.remove();
            }
            else {
                final Integer width = vastXmlManager$MediaXmlManager.getWidth();
                final Integer height = vastXmlManager$MediaXmlManager.getHeight();
                if (width == null || width <= 0 || height == null || height <= 0) {
                    continue;
                }
                final double calculateFitness = this.calculateFitness(width, height);
                if (calculateFitness >= n) {
                    continue;
                }
                n = calculateFitness;
                mediaUrl = mediaUrl2;
            }
        }
        if (mediaUrl == null && !list2.isEmpty()) {
            mediaUrl = list2.get(0).getMediaUrl();
        }
        return mediaUrl;
    }
    
    @Deprecated
    int getScreenArea() {
        return this.mScreenArea;
    }
    
    @Deprecated
    double getScreenAspectRatio() {
        return this.mScreenAspectRatio;
    }
    
    @Override
    public void onAggregationComplete(final List list) {
        this.mVastXmlManagerAggregator = null;
        if (list == null) {
            if (this.mVastManagerListener != null) {
                this.mVastManagerListener.onVastVideoConfigurationPrepared(null);
            }
        }
        else {
            final VastVideoConfiguration vastVideoConfigurationFromXml = this.createVastVideoConfigurationFromXml(list);
            if (this.updateDiskMediaFileUrl(vastVideoConfigurationFromXml)) {
                if (this.mVastManagerListener != null) {
                    this.mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfigurationFromXml);
                }
            }
            else {
                final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(new VastVideoDownloadTask$VastVideoDownloadTaskListener() {
                    @Override
                    public void onComplete(final boolean b) {
                        if (b && VastManager.this.updateDiskMediaFileUrl(vastVideoConfigurationFromXml)) {
                            if (VastManager.this.mVastManagerListener != null) {
                                VastManager.this.mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfigurationFromXml);
                            }
                        }
                        else if (VastManager.this.mVastManagerListener != null) {
                            VastManager.this.mVastManagerListener.onVastVideoConfigurationPrepared(null);
                        }
                    }
                });
                try {
                    AsyncTasks.safeExecuteOnExecutor(vastVideoDownloadTask, vastVideoConfigurationFromXml.getNetworkMediaFileUrl());
                }
                catch (Exception ex) {
                    MoPubLog.d("Failed to download vast video", ex);
                    if (this.mVastManagerListener != null) {
                        this.mVastManagerListener.onVastVideoConfigurationPrepared(null);
                    }
                }
            }
        }
    }
    
    public void prepareVastVideoConfiguration(final String s, final VastManager$VastManagerListener mVastManagerListener) {
        if (this.mVastXmlManagerAggregator != null) {
            return;
        }
        this.mVastManagerListener = mVastManagerListener;
        this.mVastXmlManagerAggregator = new VastXmlManagerAggregator(this);
        try {
            AsyncTasks.safeExecuteOnExecutor(this.mVastXmlManagerAggregator, s);
        }
        catch (Exception ex) {
            MoPubLog.d("Failed to aggregate vast xml", ex);
            if (this.mVastManagerListener != null) {
                this.mVastManagerListener.onVastVideoConfigurationPrepared(null);
            }
        }
    }
}
