// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads.util.vast;

import org.w3c.dom.NamedNodeMap;
import java.util.Arrays;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import java.util.ArrayList;
import java.util.List;
import org.w3c.dom.Node;

class XmlUtils
{
    static String getAttributeValue(final Node node, final String s) {
        if (node != null && s != null) {
            final Node namedItem = node.getAttributes().getNamedItem(s);
            if (namedItem != null) {
                return namedItem.getNodeValue();
            }
        }
        return null;
    }
    
    static Integer getAttributeValueAsInt(final Node node, final String s) {
        if (node == null || s == null) {
            return null;
        }
        try {
            return Integer.parseInt(getAttributeValue(node, s));
        }
        catch (NumberFormatException ex) {
            return null;
        }
    }
    
    static Node getFirstMatchingChildNode(final Node node, final String s) {
        return getFirstMatchingChildNode(node, s, null, null);
    }
    
    static Node getFirstMatchingChildNode(final Node node, final String s, final String s2, final List list) {
        if (node != null && s != null) {
            final List matchingChildNodes = getMatchingChildNodes(node, s, s2, list);
            if (matchingChildNodes != null && !matchingChildNodes.isEmpty()) {
                return matchingChildNodes.get(0);
            }
        }
        return null;
    }
    
    static List getMatchingChildNodes(final Node node, final String s, final String s2, final List list) {
        if (node == null || s == null) {
            return null;
        }
        final ArrayList<Node> list2 = new ArrayList<Node>();
        final NodeList childNodes = node.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); ++i) {
            final Node item = childNodes.item(i);
            if (item.getNodeName().equals(s) && nodeMatchesAttributeFilter(item, s2, list)) {
                list2.add(item);
            }
        }
        return list2;
    }
    
    static String getNodeValue(final Node node) {
        if (node != null && node.getFirstChild() != null && node.getFirstChild().getNodeValue() != null) {
            return node.getFirstChild().getNodeValue().trim();
        }
        return null;
    }
    
    static List getStringDataAsList(final Document document, final String s) {
        return getStringDataAsList(document, s, null, null);
    }
    
    static List getStringDataAsList(final Document document, final String s, final String s2, final String s3) {
        final ArrayList<String> list = new ArrayList<String>();
        if (document == null) {
            return list;
        }
        final NodeList elementsByTagName = document.getElementsByTagName(s);
        if (elementsByTagName == null) {
            return list;
        }
        for (int i = 0; i < elementsByTagName.getLength(); ++i) {
            final Node item = elementsByTagName.item(i);
            if (item != null && nodeMatchesAttributeFilter(item, s2, Arrays.asList(s3))) {
                final String nodeValue = getNodeValue(item);
                if (nodeValue != null) {
                    list.add(nodeValue);
                }
            }
        }
        return list;
    }
    
    static boolean nodeMatchesAttributeFilter(final Node node, final String s, final List list) {
        if (s != null && list != null) {
            final NamedNodeMap attributes = node.getAttributes();
            if (attributes != null) {
                final Node namedItem = attributes.getNamedItem(s);
                if (namedItem != null && list.contains(namedItem.getNodeValue())) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }
}
