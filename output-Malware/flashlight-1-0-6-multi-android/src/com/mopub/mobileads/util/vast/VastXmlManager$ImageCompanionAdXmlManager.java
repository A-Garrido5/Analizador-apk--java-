// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads.util.vast;

import java.util.Iterator;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.w3c.dom.Node;

class VastXmlManager$ImageCompanionAdXmlManager
{
    private static final String COMPANION_CLICK_THROUGH = "CompanionClickThrough";
    private static final String COMPANION_STATIC_RESOURCE = "StaticResource";
    private static final String CREATIVE_TYPE = "creativeType";
    private static final String CREATIVE_VIEW = "creativeView";
    private static final String TRACKING_EVENTS = "TrackingEvents";
    private final Node mCompanionNode;
    final /* synthetic */ VastXmlManager this$0;
    
    VastXmlManager$ImageCompanionAdXmlManager(final VastXmlManager this$0, final Node mCompanionNode) {
        this.this$0 = this$0;
        if (mCompanionNode == null) {
            throw new IllegalArgumentException("Companion node cannot be null");
        }
        this.mCompanionNode = mCompanionNode;
    }
    
    String getClickThroughUrl() {
        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(this.mCompanionNode, "CompanionClickThrough"));
    }
    
    List getClickTrackers() {
        final ArrayList<String> list = new ArrayList<String>();
        final Node firstMatchingChildNode = XmlUtils.getFirstMatchingChildNode(this.mCompanionNode, "TrackingEvents");
        if (firstMatchingChildNode == null) {
            return list;
        }
        for (final Node node : XmlUtils.getMatchingChildNodes(firstMatchingChildNode, "Tracking", "event", Arrays.asList("creativeView"))) {
            if (node.getFirstChild() != null) {
                list.add(node.getFirstChild().getNodeValue().trim());
            }
        }
        return list;
    }
    
    Integer getHeight() {
        return XmlUtils.getAttributeValueAsInt(this.mCompanionNode, "height");
    }
    
    String getImageUrl() {
        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(this.mCompanionNode, "StaticResource"));
    }
    
    String getType() {
        return XmlUtils.getAttributeValue(XmlUtils.getFirstMatchingChildNode(this.mCompanionNode, "StaticResource"), "creativeType");
    }
    
    Integer getWidth() {
        return XmlUtils.getAttributeValueAsInt(this.mCompanionNode, "width");
    }
}
