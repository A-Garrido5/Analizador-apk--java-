// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.mobileads;

import java.util.Date;
import com.mopub.mobileads.util.Base64;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import android.util.Log;
import java.io.Closeable;
import com.mopub.common.util.Streams;
import android.net.Uri;
import java.io.File;
import android.graphics.Bitmap$CompressFormat;
import android.graphics.Bitmap;
import com.mopub.common.util.DateAndTime;
import java.text.SimpleDateFormat;
import android.view.View;
import android.content.Intent;
import java.util.ArrayList;
import android.content.Context;

public class AdAlertReporter
{
    private static final String BODY_SEPARATOR = "\n=================\n";
    private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
    private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
    private static final String EMAIL_SCHEME = "mailto:";
    private static final int IMAGE_QUALITY = 25;
    private static final String MARKUP_FILENAME = "mp_adalert_markup.html";
    private static final String PARAMETERS_FILENAME = "mp_adalert_parameters.txt";
    private static final String SCREEN_SHOT_FILENAME = "mp_adalert_screenshot.png";
    private final AdConfiguration mAdConfiguration;
    private final Context mContext;
    private final String mDateString;
    private ArrayList mEmailAttachments;
    private Intent mEmailIntent;
    private String mParameters;
    private String mResponse;
    private final View mView;
    
    public AdAlertReporter(final Context mContext, final View mView, final AdConfiguration mAdConfiguration) {
        this.mView = mView;
        this.mContext = mContext;
        this.mAdConfiguration = mAdConfiguration;
        this.mEmailAttachments = new ArrayList();
        this.mDateString = new SimpleDateFormat("M/d/yy hh:mm:ss a z").format(DateAndTime.now());
        this.initEmailIntent();
        final Bitmap takeScreenShot = this.takeScreenShot();
        final String convertBitmapInWEBPToBase64EncodedString = this.convertBitmapInWEBPToBase64EncodedString(takeScreenShot);
        this.mParameters = this.formParameters();
        this.mResponse = this.getResponseString();
        this.addEmailSubject();
        this.addEmailBody(this.mParameters, this.mResponse, convertBitmapInWEBPToBase64EncodedString);
        this.addTextAttachment("mp_adalert_parameters.txt", this.mParameters);
        this.addTextAttachment("mp_adalert_markup.html", this.mResponse);
        this.addImageAttachment("mp_adalert_screenshot.png", takeScreenShot);
    }
    
    private void addEmailBody(final String... array) {
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < array.length; ++i) {
            sb.append(array[i]);
            if (i != -1 + array.length) {
                sb.append("\n=================\n");
            }
        }
        this.mEmailIntent.putExtra("android.intent.extra.TEXT", sb.toString());
    }
    
    private void addEmailSubject() {
        this.mEmailIntent.putExtra("android.intent.extra.SUBJECT", "New creative violation report - " + this.mDateString);
    }
    
    private void addImageAttachment(final String s, final Bitmap bitmap) {
        OutputStream openFileOutput = null;
        if (s == null || bitmap == null) {
            return;
        }
        try {
            openFileOutput = this.mContext.openFileOutput(s, 1);
            final Bitmap bitmap2 = bitmap;
            final Bitmap$CompressFormat bitmap$CompressFormat = Bitmap$CompressFormat.PNG;
            final int n = 25;
            final OutputStream outputStream = openFileOutput;
            bitmap2.compress(bitmap$CompressFormat, n, outputStream);
            final StringBuilder sb = new StringBuilder();
            final AdAlertReporter adAlertReporter = this;
            final Context context = adAlertReporter.mContext;
            final File file = context.getFilesDir();
            final StringBuilder sb2 = sb.append(file);
            final String s2 = File.separator;
            final StringBuilder sb3 = sb2.append(s2);
            final String s3 = s;
            final StringBuilder sb4 = sb3.append(s3);
            final String s4 = sb4.toString();
            final File file2 = new File(s4);
            final Uri uri = Uri.fromFile(file2);
            final AdAlertReporter adAlertReporter2 = this;
            final ArrayList list = adAlertReporter2.mEmailAttachments;
            final Uri uri2 = uri;
            list.add(uri2);
            final OutputStream outputStream2 = openFileOutput;
            Streams.closeStream(outputStream2);
            return;
        }
        catch (Exception ex) {
            Log.d("MoPub", "Unable to write text attachment to file: " + s);
            Streams.closeStream(openFileOutput);
            return;
        }
        finally {
            final Object o2;
            final Object o = o2;
            final Closeable closeable = null;
            final Object o3 = o;
        }
        while (true) {
            try {
                final Bitmap bitmap2 = bitmap;
                final Bitmap$CompressFormat bitmap$CompressFormat = Bitmap$CompressFormat.PNG;
                final int n = 25;
                final OutputStream outputStream = openFileOutput;
                bitmap2.compress(bitmap$CompressFormat, n, outputStream);
                final StringBuilder sb = new StringBuilder();
                final AdAlertReporter adAlertReporter = this;
                final Context context = adAlertReporter.mContext;
                final File file = context.getFilesDir();
                final StringBuilder sb2 = sb.append(file);
                final String s2 = File.separator;
                final StringBuilder sb3 = sb2.append(s2);
                final String s3 = s;
                final StringBuilder sb4 = sb3.append(s3);
                final String s4 = sb4.toString();
                final File file2 = new File(s4);
                final Uri uri = Uri.fromFile(file2);
                final AdAlertReporter adAlertReporter2 = this;
                final ArrayList list = adAlertReporter2.mEmailAttachments;
                final Uri uri2 = uri;
                list.add(uri2);
                final OutputStream outputStream2 = openFileOutput;
                Streams.closeStream(outputStream2);
                return;
                final Closeable closeable;
                Streams.closeStream(closeable);
                throw;
            }
            finally {
                final Closeable closeable = openFileOutput;
                final Throwable t;
                final Object o3 = t;
                continue;
            }
            break;
        }
    }
    
    private void addTextAttachment(final String s, final String s2) {
        FileOutputStream fileOutputStream = null;
        if (s == null || s2 == null) {
            return;
        }
        try {
            final FileOutputStream openFileOutput;
            fileOutputStream = (openFileOutput = this.mContext.openFileOutput(s, 1));
            final String s3 = s2;
            final byte[] array = s3.getBytes();
            openFileOutput.write(array);
            final StringBuilder sb = new StringBuilder();
            final AdAlertReporter adAlertReporter = this;
            final Context context = adAlertReporter.mContext;
            final File file = context.getFilesDir();
            final StringBuilder sb2 = sb.append(file);
            final String s4 = File.separator;
            final StringBuilder sb3 = sb2.append(s4);
            final String s5 = s;
            final StringBuilder sb4 = sb3.append(s5);
            final String s6 = sb4.toString();
            final File file2 = new File(s6);
            final Uri uri = Uri.fromFile(file2);
            final AdAlertReporter adAlertReporter2 = this;
            final ArrayList list = adAlertReporter2.mEmailAttachments;
            final Uri uri2 = uri;
            list.add(uri2);
            final FileOutputStream fileOutputStream2 = fileOutputStream;
            Streams.closeStream(fileOutputStream2);
            return;
        }
        catch (Exception ex) {
            Log.d("MoPub", "Unable to write text attachment to file: " + s);
            Streams.closeStream(fileOutputStream);
            return;
        }
        finally {
            final Object o2;
            final Object o = o2;
            final Closeable closeable = null;
            final Object o3 = o;
        }
        while (true) {
            try {
                final FileOutputStream openFileOutput = fileOutputStream;
                final String s3 = s2;
                final byte[] array = s3.getBytes();
                openFileOutput.write(array);
                final StringBuilder sb = new StringBuilder();
                final AdAlertReporter adAlertReporter = this;
                final Context context = adAlertReporter.mContext;
                final File file = context.getFilesDir();
                final StringBuilder sb2 = sb.append(file);
                final String s4 = File.separator;
                final StringBuilder sb3 = sb2.append(s4);
                final String s5 = s;
                final StringBuilder sb4 = sb3.append(s5);
                final String s6 = sb4.toString();
                final File file2 = new File(s6);
                final Uri uri = Uri.fromFile(file2);
                final AdAlertReporter adAlertReporter2 = this;
                final ArrayList list = adAlertReporter2.mEmailAttachments;
                final Uri uri2 = uri;
                list.add(uri2);
                final FileOutputStream fileOutputStream2 = fileOutputStream;
                Streams.closeStream(fileOutputStream2);
                return;
                final Closeable closeable;
                Streams.closeStream(closeable);
                throw;
            }
            finally {
                final Closeable closeable = fileOutputStream;
                final Throwable t;
                final Object o3 = t;
                continue;
            }
            break;
        }
    }
    
    private void appendKeyValue(final StringBuilder sb, final String s, final String s2) {
        sb.append(s);
        sb.append(" : ");
        sb.append(s2);
        sb.append("\n");
    }
    
    private String convertBitmapInWEBPToBase64EncodedString(final Bitmap bitmap) {
        String encodeToString = null;
        if (bitmap == null) {
            return encodeToString;
        }
        try {
            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap$CompressFormat.JPEG, 25, (OutputStream)byteArrayOutputStream);
            encodeToString = Base64.encodeToString(byteArrayOutputStream.toByteArray(), 0);
            return encodeToString;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    private String formParameters() {
        final StringBuilder sb = new StringBuilder();
        if (this.mAdConfiguration != null) {
            this.appendKeyValue(sb, "sdk_version", this.mAdConfiguration.getSdkVersion());
            this.appendKeyValue(sb, "creative_id", this.mAdConfiguration.getDspCreativeId());
            this.appendKeyValue(sb, "platform_version", Integer.toString(this.mAdConfiguration.getPlatformVersion()));
            this.appendKeyValue(sb, "device_model", this.mAdConfiguration.getDeviceModel());
            this.appendKeyValue(sb, "ad_unit_id", this.mAdConfiguration.getAdUnitId());
            this.appendKeyValue(sb, "device_locale", this.mAdConfiguration.getDeviceLocale());
            this.appendKeyValue(sb, "device_id", this.mAdConfiguration.getHashedUdid());
            this.appendKeyValue(sb, "network_type", this.mAdConfiguration.getNetworkType());
            this.appendKeyValue(sb, "platform", this.mAdConfiguration.getPlatform());
            this.appendKeyValue(sb, "timestamp", this.getFormattedTimeStamp(this.mAdConfiguration.getTimeStamp()));
            this.appendKeyValue(sb, "ad_type", this.mAdConfiguration.getAdType());
            this.appendKeyValue(sb, "ad_size", "{" + this.mAdConfiguration.getWidth() + ", " + this.mAdConfiguration.getHeight() + "}");
        }
        return sb.toString();
    }
    
    private String getFormattedTimeStamp(final long n) {
        if (n != -1L) {
            return new SimpleDateFormat("M/d/yy hh:mm:ss a z").format(new Date(n));
        }
        return null;
    }
    
    private String getResponseString() {
        if (this.mAdConfiguration != null) {
            return this.mAdConfiguration.getResponseString();
        }
        return "";
    }
    
    private void initEmailIntent() {
        (this.mEmailIntent = new Intent("android.intent.action.SEND_MULTIPLE", Uri.parse("mailto:"))).setType("plain/text");
        this.mEmailIntent.putExtra("android.intent.extra.EMAIL", new String[] { "creative-review@mopub.com" });
    }
    
    private Bitmap takeScreenShot() {
        if (this.mView != null && this.mView.getRootView() != null) {
            final View rootView = this.mView.getRootView();
            final boolean drawingCacheEnabled = rootView.isDrawingCacheEnabled();
            rootView.setDrawingCacheEnabled(true);
            final Bitmap drawingCache = rootView.getDrawingCache();
            if (drawingCache != null) {
                final Bitmap bitmap = Bitmap.createBitmap(drawingCache);
                rootView.setDrawingCacheEnabled(drawingCacheEnabled);
                return bitmap;
            }
        }
        return null;
    }
    
    @Deprecated
    ArrayList getEmailAttachments() {
        return this.mEmailAttachments;
    }
    
    @Deprecated
    Intent getEmailIntent() {
        return this.mEmailIntent;
    }
    
    @Deprecated
    String getParameters() {
        return this.mParameters;
    }
    
    @Deprecated
    String getResponse() {
        return this.mResponse;
    }
    
    public void send() {
        this.mEmailIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", this.mEmailAttachments);
        final Intent chooser = Intent.createChooser(this.mEmailIntent, (CharSequence)"Send Email...");
        chooser.addFlags(268435456);
        this.mContext.startActivity(chooser);
    }
}
