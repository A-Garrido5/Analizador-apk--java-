// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import java.util.ArrayList;
import java.util.Map;
import java.io.EOFException;
import java.io.FileInputStream;
import java.util.Iterator;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.LinkedHashMap;
import java.io.Writer;
import java.util.concurrent.ThreadPoolExecutor;
import java.io.File;
import java.util.concurrent.Callable;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.io.InputStream;
import java.io.Closeable;

public final class DiskLruCache$Snapshot implements Closeable
{
    private final InputStream[] ins;
    private final String key;
    private final long[] lengths;
    private final long sequenceNumber;
    final /* synthetic */ DiskLruCache this$0;
    
    private DiskLruCache$Snapshot(final DiskLruCache this$0, final String key, final long sequenceNumber, final InputStream[] ins, final long[] lengths) {
        this.this$0 = this$0;
        this.key = key;
        this.sequenceNumber = sequenceNumber;
        this.ins = ins;
        this.lengths = lengths;
    }
    
    @Override
    public final void close() {
        final InputStream[] ins = this.ins;
        for (int length = ins.length, i = 0; i < length; ++i) {
            DiskLruCacheUtil.closeQuietly(ins[i]);
        }
    }
    
    public final DiskLruCache$Editor edit() {
        return this.this$0.edit(this.key, this.sequenceNumber);
    }
    
    public final InputStream getInputStream(final int n) {
        return this.ins[n];
    }
    
    public final long getLength(final int n) {
        return this.lengths[n];
    }
    
    public final String getString(final int n) {
        return inputStreamToString(this.getInputStream(n));
    }
}
