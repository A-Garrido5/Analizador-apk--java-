// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import com.mopub.common.util.ResponseHeader;
import org.apache.http.StatusLine;
import java.io.Closeable;
import java.io.OutputStream;
import java.io.InputStream;
import com.mopub.common.util.Streams;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import org.apache.http.HttpResponse;
import org.apache.http.Header;

public class DownloadResponse
{
    private byte[] mBytes;
    private final long mContentLength;
    private final Header[] mHeaders;
    private final int mStatusCode;
    
    public DownloadResponse(final HttpResponse httpResponse) {
        this.mBytes = new byte[0];
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        BufferedInputStream bufferedInputStream;
        try {
            final BufferedInputStream bufferedInputStream2;
            bufferedInputStream = (bufferedInputStream2 = new BufferedInputStream(httpResponse.getEntity().getContent()));
            final ByteArrayOutputStream byteArrayOutputStream2 = byteArrayOutputStream;
            Streams.copyContent(bufferedInputStream2, byteArrayOutputStream2);
            final DownloadResponse downloadResponse = this;
            final ByteArrayOutputStream byteArrayOutputStream3 = byteArrayOutputStream;
            final byte[] array = byteArrayOutputStream3.toByteArray();
            downloadResponse.mBytes = array;
            final BufferedInputStream bufferedInputStream3 = bufferedInputStream;
            Streams.closeStream(bufferedInputStream3);
            final ByteArrayOutputStream byteArrayOutputStream4 = byteArrayOutputStream;
            Streams.closeStream(byteArrayOutputStream4);
            final DownloadResponse downloadResponse2 = this;
            final HttpResponse httpResponse2 = httpResponse;
            final StatusLine statusLine = httpResponse2.getStatusLine();
            final int n = statusLine.getStatusCode();
            downloadResponse2.mStatusCode = n;
            final DownloadResponse downloadResponse3 = this;
            final DownloadResponse downloadResponse4 = this;
            final byte[] array2 = downloadResponse4.mBytes;
            final int n2 = array2.length;
            final long n3 = n2;
            downloadResponse3.mContentLength = n3;
            final DownloadResponse downloadResponse5 = this;
            final HttpResponse httpResponse3 = httpResponse;
            final Header[] array3 = httpResponse3.getAllHeaders();
            downloadResponse5.mHeaders = array3;
            return;
        }
        finally {
            final Object o2;
            final Object o = o2;
            bufferedInputStream = null;
        }
        while (true) {
            try {
                final BufferedInputStream bufferedInputStream2 = bufferedInputStream;
                final ByteArrayOutputStream byteArrayOutputStream2 = byteArrayOutputStream;
                Streams.copyContent(bufferedInputStream2, byteArrayOutputStream2);
                final DownloadResponse downloadResponse = this;
                final ByteArrayOutputStream byteArrayOutputStream3 = byteArrayOutputStream;
                final byte[] array = byteArrayOutputStream3.toByteArray();
                downloadResponse.mBytes = array;
                final BufferedInputStream bufferedInputStream3 = bufferedInputStream;
                Streams.closeStream(bufferedInputStream3);
                final ByteArrayOutputStream byteArrayOutputStream4 = byteArrayOutputStream;
                Streams.closeStream(byteArrayOutputStream4);
                final DownloadResponse downloadResponse2 = this;
                final HttpResponse httpResponse2 = httpResponse;
                final StatusLine statusLine = httpResponse2.getStatusLine();
                final int n = statusLine.getStatusCode();
                downloadResponse2.mStatusCode = n;
                final DownloadResponse downloadResponse3 = this;
                final DownloadResponse downloadResponse4 = this;
                final byte[] array2 = downloadResponse4.mBytes;
                final int n2 = array2.length;
                final long n3 = n2;
                downloadResponse3.mContentLength = n3;
                final DownloadResponse downloadResponse5 = this;
                final HttpResponse httpResponse3 = httpResponse;
                final Header[] array3 = httpResponse3.getAllHeaders();
                downloadResponse5.mHeaders = array3;
                return;
                Streams.closeStream(bufferedInputStream);
                Streams.closeStream(byteArrayOutputStream);
                throw;
            }
            finally {
                continue;
            }
            break;
        }
    }
    
    public byte[] getByteArray() {
        return this.mBytes;
    }
    
    public long getContentLength() {
        return this.mContentLength;
    }
    
    public String getFirstHeader(final ResponseHeader responseHeader) {
        for (final Header header : this.mHeaders) {
            if (header.getName().equals(responseHeader.getKey())) {
                return header.getValue();
            }
        }
        return null;
    }
    
    public int getStatusCode() {
        return this.mStatusCode;
    }
}
