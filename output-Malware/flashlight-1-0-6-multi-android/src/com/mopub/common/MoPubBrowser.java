// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import android.os.Bundle;
import com.mopub.common.util.MoPubLog;
import android.webkit.WebSettings;
import android.webkit.WebChromeClient;
import com.mopub.common.util.IntentUtils;
import android.content.Intent;
import android.net.Uri;
import android.widget.Toast;
import android.graphics.Bitmap;
import android.webkit.WebViewClient;
import android.view.View$OnClickListener;
import com.mopub.common.util.Drawables;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.RelativeLayout;
import android.widget.LinearLayout;
import android.view.View;
import android.view.ViewGroup$LayoutParams;
import android.widget.LinearLayout$LayoutParams;
import android.graphics.drawable.Drawable;
import android.content.Context;
import android.webkit.CookieSyncManager;
import android.webkit.WebView;
import android.widget.ImageButton;
import android.app.Activity;

public class MoPubBrowser extends Activity
{
    public static final String DESTINATION_URL_KEY = "URL";
    private static final int INNER_LAYOUT_ID = 1;
    private ImageButton mBackButton;
    private ImageButton mCloseButton;
    private ImageButton mForwardButton;
    private ImageButton mRefreshButton;
    private WebView mWebView;
    
    private void enableCookies() {
        CookieSyncManager.createInstance((Context)this);
        CookieSyncManager.getInstance().startSync();
    }
    
    private ImageButton getButton(final Drawable imageDrawable) {
        final ImageButton imageButton = new ImageButton((Context)this);
        final LinearLayout$LayoutParams layoutParams = new LinearLayout$LayoutParams(-2, -2, 1.0f);
        layoutParams.gravity = 16;
        imageButton.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        imageButton.setImageDrawable(imageDrawable);
        return imageButton;
    }
    
    private View getMoPubBrowserView() {
        final LinearLayout linearLayout = new LinearLayout((Context)this);
        linearLayout.setLayoutParams((ViewGroup$LayoutParams)new LinearLayout$LayoutParams(-1, -1));
        linearLayout.setOrientation(1);
        final RelativeLayout relativeLayout = new RelativeLayout((Context)this);
        relativeLayout.setLayoutParams((ViewGroup$LayoutParams)new LinearLayout$LayoutParams(-1, -2));
        linearLayout.addView((View)relativeLayout);
        final LinearLayout linearLayout2 = new LinearLayout((Context)this);
        linearLayout2.setId(1);
        final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-1, -2);
        layoutParams.addRule(12);
        linearLayout2.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
        linearLayout2.setBackgroundDrawable(Drawables.BACKGROUND.decodeImage((Context)this));
        relativeLayout.addView((View)linearLayout2);
        this.mBackButton = this.getButton(Drawables.LEFT_ARROW.decodeImage((Context)this));
        this.mForwardButton = this.getButton(Drawables.RIGHT_ARROW.decodeImage((Context)this));
        this.mRefreshButton = this.getButton(Drawables.REFRESH.decodeImage((Context)this));
        this.mCloseButton = this.getButton(Drawables.CLOSE.decodeImage((Context)this));
        linearLayout2.addView((View)this.mBackButton);
        linearLayout2.addView((View)this.mForwardButton);
        linearLayout2.addView((View)this.mRefreshButton);
        linearLayout2.addView((View)this.mCloseButton);
        this.mWebView = new WebView((Context)this);
        final RelativeLayout$LayoutParams layoutParams2 = new RelativeLayout$LayoutParams(-1, -1);
        layoutParams2.addRule(2, 1);
        this.mWebView.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
        relativeLayout.addView((View)this.mWebView);
        return (View)linearLayout;
    }
    
    private void initializeButtons() {
        this.mBackButton.setBackgroundColor(0);
        this.mBackButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                if (MoPubBrowser.this.mWebView.canGoBack()) {
                    MoPubBrowser.this.mWebView.goBack();
                }
            }
        });
        this.mForwardButton.setBackgroundColor(0);
        this.mForwardButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                if (MoPubBrowser.this.mWebView.canGoForward()) {
                    MoPubBrowser.this.mWebView.goForward();
                }
            }
        });
        this.mRefreshButton.setBackgroundColor(0);
        this.mRefreshButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                MoPubBrowser.this.mWebView.reload();
            }
        });
        this.mCloseButton.setBackgroundColor(0);
        this.mCloseButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
            public void onClick(final View view) {
                MoPubBrowser.this.finish();
            }
        });
    }
    
    private void initializeWebView() {
        final WebSettings settings = this.mWebView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setSupportZoom(true);
        settings.setBuiltInZoomControls(true);
        settings.setUseWideViewPort(true);
        this.mWebView.loadUrl(this.getIntent().getStringExtra("URL"));
        this.mWebView.setWebViewClient((WebViewClient)new WebViewClient() {
            public void onPageFinished(final WebView webView, final String s) {
                super.onPageFinished(webView, s);
                Drawable imageDrawable;
                if (webView.canGoBack()) {
                    imageDrawable = Drawables.LEFT_ARROW.decodeImage((Context)MoPubBrowser.this);
                }
                else {
                    imageDrawable = Drawables.UNLEFT_ARROW.decodeImage((Context)MoPubBrowser.this);
                }
                MoPubBrowser.this.mBackButton.setImageDrawable(imageDrawable);
                Drawable imageDrawable2;
                if (webView.canGoForward()) {
                    imageDrawable2 = Drawables.RIGHT_ARROW.decodeImage((Context)MoPubBrowser.this);
                }
                else {
                    imageDrawable2 = Drawables.UNRIGHT_ARROW.decodeImage((Context)MoPubBrowser.this);
                }
                MoPubBrowser.this.mForwardButton.setImageDrawable(imageDrawable2);
            }
            
            public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
                super.onPageStarted(webView, s, bitmap);
                MoPubBrowser.this.mForwardButton.setImageDrawable(Drawables.UNRIGHT_ARROW.decodeImage((Context)MoPubBrowser.this));
            }
            
            public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
                Toast.makeText((Context)MoPubBrowser.this, (CharSequence)("MoPubBrowser error: " + s), 0).show();
            }
            
            public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
                if (s != null) {
                    final Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(s));
                    if (IntentUtils.isDeepLink(s) && IntentUtils.deviceCanHandleIntent((Context)MoPubBrowser.this, intent)) {
                        MoPubBrowser.this.startActivity(intent);
                        MoPubBrowser.this.finish();
                        return true;
                    }
                }
                return false;
            }
        });
        this.mWebView.setWebChromeClient((WebChromeClient)new WebChromeClient() {
            public void onProgressChanged(final WebView webView, final int n) {
                MoPubBrowser.this.setTitle((CharSequence)"Loading...");
                MoPubBrowser.this.setProgress(n * 100);
                if (n == 100) {
                    MoPubBrowser.this.setTitle((CharSequence)webView.getUrl());
                }
            }
        });
    }
    
    public static void open(final Context context, final String s) {
        MoPubLog.d("Opening url in MoPubBrowser: " + s);
        final Intent intent = new Intent(context, (Class)MoPubBrowser.class);
        intent.putExtra("URL", s);
        intent.addFlags(268435456);
        context.startActivity(intent);
    }
    
    public void onCreate(final Bundle bundle) {
        super.onCreate(bundle);
        this.setResult(-1);
        this.getWindow().requestFeature(2);
        this.getWindow().setFeatureInt(2, -1);
        this.setContentView(this.getMoPubBrowserView());
        this.initializeWebView();
        this.initializeButtons();
        this.enableCookies();
    }
    
    protected void onPause() {
        super.onPause();
        CookieSyncManager.getInstance().stopSync();
    }
    
    protected void onResume() {
        super.onResume();
        CookieSyncManager.getInstance().startSync();
    }
}
