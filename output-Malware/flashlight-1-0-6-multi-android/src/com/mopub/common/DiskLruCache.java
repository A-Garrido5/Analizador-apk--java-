// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import java.util.Arrays;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Map;
import java.io.EOFException;
import java.io.FileInputStream;
import java.util.Iterator;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.LinkedHashMap;
import java.io.Writer;
import java.util.concurrent.ThreadPoolExecutor;
import java.io.File;
import java.util.concurrent.Callable;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.io.Closeable;

public final class DiskLruCache implements Closeable
{
    static final long ANY_SEQUENCE_NUMBER = -1L;
    private static final String CLEAN = "CLEAN";
    private static final String DIRTY = "DIRTY";
    static final String JOURNAL_FILE = "journal";
    static final String JOURNAL_FILE_BACKUP = "journal.bkp";
    static final String JOURNAL_FILE_TEMP = "journal.tmp";
    static final Pattern LEGAL_KEY_PATTERN;
    static final String MAGIC = "libcore.io.DiskLruCache";
    private static final OutputStream NULL_OUTPUT_STREAM;
    private static final String READ = "READ";
    private static final String REMOVE = "REMOVE";
    static final String VERSION_1 = "1";
    private final int appVersion;
    private final Callable cleanupCallable;
    private final File directory;
    final ThreadPoolExecutor executorService;
    private final File journalFile;
    private final File journalFileBackup;
    private final File journalFileTmp;
    private Writer journalWriter;
    private final LinkedHashMap lruEntries;
    private long maxSize;
    private long nextSequenceNumber;
    private int redundantOpCount;
    private long size;
    private final int valueCount;
    
    static {
        LEGAL_KEY_PATTERN = Pattern.compile("[a-z0-9_-]{1,64}");
        NULL_OUTPUT_STREAM = new OutputStream() {
            @Override
            public void write(final int n) {
            }
        };
    }
    
    private DiskLruCache(final File directory, final int appVersion, final int valueCount, final long maxSize) {
        this.size = 0L;
        this.lruEntries = new LinkedHashMap(0, 0.75f, true);
        this.nextSequenceNumber = 0L;
        this.executorService = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
        this.cleanupCallable = new Callable() {
            @Override
            public Void call() {
                synchronized (DiskLruCache.this) {
                    if (DiskLruCache.this.journalWriter == null) {
                        return null;
                    }
                    DiskLruCache.this.trimToSize();
                    if (DiskLruCache.this.journalRebuildRequired()) {
                        DiskLruCache.this.rebuildJournal();
                        DiskLruCache.access$4(DiskLruCache.this, 0);
                    }
                    return null;
                }
            }
        };
        this.directory = directory;
        this.appVersion = appVersion;
        this.journalFile = new File(directory, "journal");
        this.journalFileTmp = new File(directory, "journal.tmp");
        this.journalFileBackup = new File(directory, "journal.bkp");
        this.valueCount = valueCount;
        this.maxSize = maxSize;
    }
    
    static /* synthetic */ void access$4(final DiskLruCache diskLruCache, final int redundantOpCount) {
        diskLruCache.redundantOpCount = redundantOpCount;
    }
    
    private void checkNotClosed() {
        if (this.journalWriter == null) {
            throw new IllegalStateException("cache is closed");
        }
    }
    
    private void completeEdit(final DiskLruCache$Editor diskLruCache$Editor, final boolean b) {
        final DiskLruCache$Entry access$2;
        synchronized (this) {
            access$2 = diskLruCache$Editor.entry;
            if (access$2.currentEditor != diskLruCache$Editor) {
                throw new IllegalStateException();
            }
        }
        int i = 0;
        Label_0215: {
            Label_0071: {
                if (b) {
                    final boolean access$3 = access$2.readable;
                    i = 0;
                    if (!access$3) {
                        int n = 0;
                        Block_9: {
                            while (true) {
                                final int valueCount = this.valueCount;
                                i = 0;
                                if (n >= valueCount) {
                                    break Label_0071;
                                }
                                if (!diskLruCache$Editor.written[n]) {
                                    break;
                                }
                                if (!access$2.getDirtyFile(n).exists()) {
                                    break Block_9;
                                }
                                ++n;
                            }
                            diskLruCache$Editor.abort();
                            throw new IllegalStateException("Newly created entry didn't create value for index " + n);
                        }
                        diskLruCache$Editor.abort();
                        break Label_0215;
                    }
                }
            }
            while (i < this.valueCount) {
                final File dirtyFile = access$2.getDirtyFile(i);
                if (b) {
                    if (dirtyFile.exists()) {
                        final File cleanFile = access$2.getCleanFile(i);
                        dirtyFile.renameTo(cleanFile);
                        final long n2 = access$2.lengths[i];
                        final long length = cleanFile.length();
                        access$2.lengths[i] = length;
                        this.size = length + (this.size - n2);
                    }
                }
                else {
                    deleteIfExists(dirtyFile);
                }
                ++i;
            }
            ++this.redundantOpCount;
            DiskLruCache$Entry.access$5(access$2, null);
            if (b | access$2.readable) {
                DiskLruCache$Entry.access$4(access$2, true);
                this.journalWriter.write("CLEAN " + access$2.key + access$2.getLengths() + '\n');
                if (b) {
                    final long nextSequenceNumber = this.nextSequenceNumber;
                    this.nextSequenceNumber = 1L + nextSequenceNumber;
                    DiskLruCache$Entry.access$9(access$2, nextSequenceNumber);
                }
            }
            else {
                this.lruEntries.remove(access$2.key);
                this.journalWriter.write("REMOVE " + access$2.key + '\n');
            }
            this.journalWriter.flush();
            if (this.size > this.maxSize || this.journalRebuildRequired()) {
                this.executorService.submit((Callable<Object>)this.cleanupCallable);
            }
        }
    }
    // monitorexit(this)
    
    private static void deleteIfExists(final File file) {
        if (file.exists() && !file.delete()) {
            throw new IOException();
        }
    }
    
    private DiskLruCache$Editor edit(final String s, final long n) {
        while (true) {
            while (true) {
                final DiskLruCache$Entry diskLruCache$Entry;
                Label_0157: {
                    synchronized (this) {
                        this.checkNotClosed();
                        this.validateKey(s);
                        diskLruCache$Entry = this.lruEntries.get(s);
                        DiskLruCache$Editor diskLruCache$Editor;
                        if (n != -1L && (diskLruCache$Entry == null || diskLruCache$Entry.sequenceNumber != n)) {
                            diskLruCache$Editor = null;
                        }
                        else {
                            if (diskLruCache$Entry != null) {
                                break Label_0157;
                            }
                            final DiskLruCache$Entry diskLruCache$Entry2 = new DiskLruCache$Entry(this, s, null);
                            this.lruEntries.put(s, diskLruCache$Entry2);
                            final DiskLruCache$Entry diskLruCache$Entry3 = diskLruCache$Entry2;
                            diskLruCache$Editor = new DiskLruCache$Editor(this, diskLruCache$Entry3, null);
                            DiskLruCache$Entry.access$5(diskLruCache$Entry3, diskLruCache$Editor);
                            this.journalWriter.write("DIRTY " + s + '\n');
                            this.journalWriter.flush();
                        }
                        return diskLruCache$Editor;
                    }
                }
                if (diskLruCache$Entry.currentEditor != null) {
                    return null;
                }
                final DiskLruCache$Entry diskLruCache$Entry3 = diskLruCache$Entry;
                continue;
            }
        }
    }
    
    private static String inputStreamToString(final InputStream inputStream) {
        return DiskLruCacheUtil.readFully(new InputStreamReader(inputStream, DiskLruCacheUtil.UTF_8));
    }
    
    private boolean journalRebuildRequired() {
        return this.redundantOpCount >= 2000 && this.redundantOpCount >= this.lruEntries.size();
    }
    
    public static DiskLruCache open(final File file, final int n, final int n2, final long n3) {
        if (n3 <= 0L) {
            throw new IllegalArgumentException("maxSize <= 0");
        }
        if (n2 <= 0) {
            throw new IllegalArgumentException("valueCount <= 0");
        }
        final File file2 = new File(file, "journal.bkp");
        Label_0150: {
            if (file2.exists()) {
                final File file3 = new File(file, "journal");
                if (!file3.exists()) {
                    break Label_0150;
                }
                file2.delete();
            }
            while (true) {
                final DiskLruCache diskLruCache = new DiskLruCache(file, n, n2, n3);
                if (!diskLruCache.journalFile.exists()) {
                    break Label_0150;
                }
                try {
                    diskLruCache.readJournal();
                    diskLruCache.processJournal();
                    diskLruCache.journalWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(diskLruCache.journalFile, true), DiskLruCacheUtil.US_ASCII));
                    return diskLruCache;
                    final File file3;
                    renameTo(file2, file3, false);
                    continue;
                }
                catch (IOException ex) {
                    System.out.println("DiskLruCache " + file + " is corrupt: " + ex.getMessage() + ", removing");
                    diskLruCache.delete();
                }
                break;
            }
        }
        file.mkdirs();
        final DiskLruCache diskLruCache2 = new DiskLruCache(file, n, n2, n3);
        diskLruCache2.rebuildJournal();
        return diskLruCache2;
    }
    
    private void processJournal() {
        deleteIfExists(this.journalFileTmp);
        final Iterator<DiskLruCache$Entry> iterator = this.lruEntries.values().iterator();
        while (iterator.hasNext()) {
            final DiskLruCache$Entry diskLruCache$Entry = iterator.next();
            if (diskLruCache$Entry.currentEditor == null) {
                for (int i = 0; i < this.valueCount; ++i) {
                    this.size += diskLruCache$Entry.lengths[i];
                }
            }
            else {
                DiskLruCache$Entry.access$5(diskLruCache$Entry, null);
                for (int j = 0; j < this.valueCount; ++j) {
                    deleteIfExists(diskLruCache$Entry.getCleanFile(j));
                    deleteIfExists(diskLruCache$Entry.getDirtyFile(j));
                }
                iterator.remove();
            }
        }
    }
    
    private void readJournal() {
        final DiskLruCacheStrictLineReader diskLruCacheStrictLineReader = new DiskLruCacheStrictLineReader(new FileInputStream(this.journalFile), DiskLruCacheUtil.US_ASCII);
        try {
            final String line = diskLruCacheStrictLineReader.readLine();
            final String line2 = diskLruCacheStrictLineReader.readLine();
            final String line3 = diskLruCacheStrictLineReader.readLine();
            final String line4 = diskLruCacheStrictLineReader.readLine();
            final String line5 = diskLruCacheStrictLineReader.readLine();
            if (!"libcore.io.DiskLruCache".equals(line) || !"1".equals(line2) || !Integer.toString(this.appVersion).equals(line3) || !Integer.toString(this.valueCount).equals(line4) || !"".equals(line5)) {
                throw new IOException("unexpected journal header: [" + line + ", " + line2 + ", " + line4 + ", " + line5 + "]");
            }
        }
        finally {
            DiskLruCacheUtil.closeQuietly(diskLruCacheStrictLineReader);
        }
        int n = 0;
        try {
            while (true) {
                this.readJournalLine(diskLruCacheStrictLineReader.readLine());
                ++n;
            }
        }
        catch (EOFException ex) {
            this.redundantOpCount = n - this.lruEntries.size();
            DiskLruCacheUtil.closeQuietly(diskLruCacheStrictLineReader);
        }
    }
    
    private void readJournalLine(final String s) {
        final int index = s.indexOf(32);
        if (index == -1) {
            throw new IOException("unexpected journal line: " + s);
        }
        final int n = index + 1;
        final int index2 = s.indexOf(32, n);
        String substring = null;
        Label_0098: {
            if (index2 != -1) {
                substring = s.substring(n, index2);
                break Label_0098;
            }
            final String substring2 = s.substring(n);
            if (index != 6 || !s.startsWith("REMOVE")) {
                substring = substring2;
                break Label_0098;
            }
            this.lruEntries.remove(substring2);
            return;
        }
        DiskLruCache$Entry diskLruCache$Entry = this.lruEntries.get(substring);
        if (diskLruCache$Entry == null) {
            diskLruCache$Entry = new DiskLruCache$Entry(this, substring, null);
            this.lruEntries.put(substring, diskLruCache$Entry);
        }
        if (index2 != -1 && index == 5 && s.startsWith("CLEAN")) {
            final String[] split = s.substring(index2 + 1).split(" ");
            DiskLruCache$Entry.access$4(diskLruCache$Entry, true);
            DiskLruCache$Entry.access$5(diskLruCache$Entry, null);
            diskLruCache$Entry.setLengths(split);
            return;
        }
        if (index2 == -1 && index == 5 && s.startsWith("DIRTY")) {
            DiskLruCache$Entry.access$5(diskLruCache$Entry, new DiskLruCache$Editor(this, diskLruCache$Entry, null));
            return;
        }
        if (index2 != -1 || index != 4 || !s.startsWith("READ")) {
            throw new IOException("unexpected journal line: " + s);
        }
    }
    
    private void rebuildJournal() {
        while (true) {
            while (true) {
                final BufferedWriter bufferedWriter;
                DiskLruCache$Entry diskLruCache$Entry = null;
                Label_0289: {
                    synchronized (this) {
                        if (this.journalWriter != null) {
                            this.journalWriter.close();
                        }
                        bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.journalFileTmp), DiskLruCacheUtil.US_ASCII));
                        try {
                            bufferedWriter.write("libcore.io.DiskLruCache");
                            bufferedWriter.write("\n");
                            bufferedWriter.write("1");
                            bufferedWriter.write("\n");
                            bufferedWriter.write(Integer.toString(this.appVersion));
                            bufferedWriter.write("\n");
                            bufferedWriter.write(Integer.toString(this.valueCount));
                            bufferedWriter.write("\n");
                            bufferedWriter.write("\n");
                            final Iterator<DiskLruCache$Entry> iterator = this.lruEntries.values().iterator();
                            while (iterator.hasNext()) {
                                diskLruCache$Entry = iterator.next();
                                if (diskLruCache$Entry.currentEditor == null) {
                                    break Label_0289;
                                }
                                bufferedWriter.write("DIRTY " + diskLruCache$Entry.key + '\n');
                            }
                            bufferedWriter.close();
                            if (this.journalFile.exists()) {
                                renameTo(this.journalFile, this.journalFileBackup, true);
                            }
                            renameTo(this.journalFileTmp, this.journalFile, false);
                            this.journalFileBackup.delete();
                            this.journalWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.journalFile, true), DiskLruCacheUtil.US_ASCII));
                            return;
                        }
                        finally {
                            bufferedWriter.close();
                        }
                    }
                }
                bufferedWriter.write("CLEAN " + diskLruCache$Entry.key + diskLruCache$Entry.getLengths() + '\n');
                continue;
            }
        }
    }
    
    private static void renameTo(final File file, final File file2, final boolean b) {
        if (b) {
            deleteIfExists(file2);
        }
        if (!file.renameTo(file2)) {
            throw new IOException();
        }
    }
    
    private void trimToSize() {
        while (this.size > this.maxSize) {
            this.remove(this.lruEntries.entrySet().iterator().next().getKey());
        }
    }
    
    private void validateKey(final String s) {
        if (!DiskLruCache.LEGAL_KEY_PATTERN.matcher(s).matches()) {
            throw new IllegalArgumentException("keys must match regex [a-z0-9_-]{1,64}: \"" + s + "\"");
        }
    }
    
    @Override
    public final void close() {
        while (true) {
            while (true) {
                final Iterator<DiskLruCache$Entry> iterator;
                Label_0065: {
                    synchronized (this) {
                        if (this.journalWriter != null) {
                            iterator = new ArrayList<DiskLruCache$Entry>(this.lruEntries.values()).iterator();
                            if (iterator.hasNext()) {
                                break Label_0065;
                            }
                            this.trimToSize();
                            this.journalWriter.close();
                            this.journalWriter = null;
                        }
                        return;
                    }
                }
                final DiskLruCache$Entry diskLruCache$Entry = iterator.next();
                if (diskLruCache$Entry.currentEditor != null) {
                    diskLruCache$Entry.currentEditor.abort();
                    continue;
                }
                continue;
            }
        }
    }
    
    public final void delete() {
        this.close();
        DiskLruCacheUtil.deleteContents(this.directory);
    }
    
    public final DiskLruCache$Editor edit(final String s) {
        return this.edit(s, -1L);
    }
    
    public final void flush() {
        synchronized (this) {
            this.checkNotClosed();
            this.trimToSize();
            this.journalWriter.flush();
        }
    }
    
    public final DiskLruCache$Snapshot get(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: monitorenter   
        //     2: aload_0        
        //     3: invokespecial   com/mopub/common/DiskLruCache.checkNotClosed:()V
        //     6: aload_0        
        //     7: aload_1        
        //     8: invokespecial   com/mopub/common/DiskLruCache.validateKey:(Ljava/lang/String;)V
        //    11: aload_0        
        //    12: getfield        com/mopub/common/DiskLruCache.lruEntries:Ljava/util/LinkedHashMap;
        //    15: aload_1        
        //    16: invokevirtual   java/util/LinkedHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    19: checkcast       Lcom/mopub/common/DiskLruCache$Entry;
        //    22: astore_3       
        //    23: aload_3        
        //    24: ifnonnull       35
        //    27: aconst_null    
        //    28: astore          4
        //    30: aload_0        
        //    31: monitorexit    
        //    32: aload           4
        //    34: areturn        
        //    35: aload_3        
        //    36: invokestatic    com/mopub/common/DiskLruCache$Entry.access$0:(Lcom/mopub/common/DiskLruCache$Entry;)Z
        //    39: ifne            48
        //    42: aconst_null    
        //    43: astore          4
        //    45: goto            30
        //    48: aload_0        
        //    49: getfield        com/mopub/common/DiskLruCache.valueCount:I
        //    52: anewarray       Ljava/io/InputStream;
        //    55: astore          5
        //    57: iconst_0       
        //    58: istore          6
        //    60: aload_0        
        //    61: getfield        com/mopub/common/DiskLruCache.valueCount:I
        //    64: istore          9
        //    66: iload           6
        //    68: iload           9
        //    70: if_icmplt       162
        //    73: aload_0        
        //    74: iconst_1       
        //    75: aload_0        
        //    76: getfield        com/mopub/common/DiskLruCache.redundantOpCount:I
        //    79: iadd           
        //    80: putfield        com/mopub/common/DiskLruCache.redundantOpCount:I
        //    83: aload_0        
        //    84: getfield        com/mopub/common/DiskLruCache.journalWriter:Ljava/io/Writer;
        //    87: new             Ljava/lang/StringBuilder;
        //    90: dup            
        //    91: ldc_w           "READ "
        //    94: invokespecial   java/lang/StringBuilder.<init>:(Ljava/lang/String;)V
        //    97: aload_1        
        //    98: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   101: bipush          10
        //   103: invokevirtual   java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        //   106: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   109: invokevirtual   java/io/Writer.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
        //   112: pop            
        //   113: aload_0        
        //   114: invokespecial   com/mopub/common/DiskLruCache.journalRebuildRequired:()Z
        //   117: ifeq            132
        //   120: aload_0        
        //   121: getfield        com/mopub/common/DiskLruCache.executorService:Ljava/util/concurrent/ThreadPoolExecutor;
        //   124: aload_0        
        //   125: getfield        com/mopub/common/DiskLruCache.cleanupCallable:Ljava/util/concurrent/Callable;
        //   128: invokevirtual   java/util/concurrent/ThreadPoolExecutor.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
        //   131: pop            
        //   132: new             Lcom/mopub/common/DiskLruCache$Snapshot;
        //   135: dup            
        //   136: aload_0        
        //   137: aload_1        
        //   138: aload_3        
        //   139: invokestatic    com/mopub/common/DiskLruCache$Entry.access$8:(Lcom/mopub/common/DiskLruCache$Entry;)J
        //   142: aload           5
        //   144: aload_3        
        //   145: invokestatic    com/mopub/common/DiskLruCache$Entry.access$7:(Lcom/mopub/common/DiskLruCache$Entry;)[J
        //   148: aconst_null    
        //   149: invokespecial   com/mopub/common/DiskLruCache$Snapshot.<init>:(Lcom/mopub/common/DiskLruCache;Ljava/lang/String;J[Ljava/io/InputStream;[JLcom/mopub/common/DiskLruCache$Snapshot;)V
        //   152: astore          4
        //   154: goto            30
        //   157: astore_2       
        //   158: aload_0        
        //   159: monitorexit    
        //   160: aload_2        
        //   161: athrow         
        //   162: aload           5
        //   164: iload           6
        //   166: new             Ljava/io/FileInputStream;
        //   169: dup            
        //   170: aload_3        
        //   171: iload           6
        //   173: invokevirtual   com/mopub/common/DiskLruCache$Entry.getCleanFile:(I)Ljava/io/File;
        //   176: invokespecial   java/io/FileInputStream.<init>:(Ljava/io/File;)V
        //   179: aastore        
        //   180: iinc            6, 1
        //   183: goto            60
        //   186: astore          7
        //   188: iconst_0       
        //   189: istore          8
        //   191: iload           8
        //   193: aload_0        
        //   194: getfield        com/mopub/common/DiskLruCache.valueCount:I
        //   197: if_icmplt       203
        //   200: goto            225
        //   203: aload           5
        //   205: iload           8
        //   207: aaload         
        //   208: ifnull          225
        //   211: aload           5
        //   213: iload           8
        //   215: aaload         
        //   216: invokestatic    com/mopub/common/DiskLruCacheUtil.closeQuietly:(Ljava/io/Closeable;)V
        //   219: iinc            8, 1
        //   222: goto            191
        //   225: aconst_null    
        //   226: astore          4
        //   228: goto            30
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                           
        //  -----  -----  -----  -----  -------------------------------
        //  2      23     157    162    Any
        //  35     42     157    162    Any
        //  48     57     157    162    Any
        //  60     66     186    231    Ljava/io/FileNotFoundException;
        //  60     66     157    162    Any
        //  73     132    157    162    Any
        //  132    154    157    162    Any
        //  162    180    186    231    Ljava/io/FileNotFoundException;
        //  162    180    157    162    Any
        //  191    200    157    162    Any
        //  203    219    157    162    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0060:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final File getDirectory() {
        return this.directory;
    }
    
    public final long getMaxSize() {
        synchronized (this) {
            return this.maxSize;
        }
    }
    
    public final boolean isClosed() {
        synchronized (this) {
            return this.journalWriter == null;
        }
    }
    
    public final boolean remove(final String s) {
        while (true) {
            while (true) {
                int n = 0;
                Label_0131: {
                    final DiskLruCache$Entry diskLruCache$Entry;
                    synchronized (this) {
                        this.checkNotClosed();
                        this.validateKey(s);
                        diskLruCache$Entry = this.lruEntries.get(s);
                        if (diskLruCache$Entry != null) {
                            final DiskLruCache$Editor access$1 = diskLruCache$Entry.currentEditor;
                            n = 0;
                            if (access$1 == null) {
                                break Label_0131;
                            }
                        }
                        return false;
                        final File cleanFile = diskLruCache$Entry.getCleanFile(n);
                        // iftrue(Label_0104:, !cleanFile.exists() || cleanFile.delete())
                        throw new IOException("failed to delete " + cleanFile);
                    }
                    Label_0104: {
                        this.size -= diskLruCache$Entry.lengths[n];
                    }
                    diskLruCache$Entry.lengths[n] = 0L;
                    ++n;
                }
                if (n >= this.valueCount) {
                    ++this.redundantOpCount;
                    this.journalWriter.append((CharSequence)("REMOVE " + s + '\n'));
                    this.lruEntries.remove(s);
                    if (this.journalRebuildRequired()) {
                        this.executorService.submit((Callable<Object>)this.cleanupCallable);
                    }
                    return true;
                }
                continue;
            }
        }
    }
    
    public final void setMaxSize(final long maxSize) {
        synchronized (this) {
            this.maxSize = maxSize;
            this.executorService.submit((Callable<Object>)this.cleanupCallable);
        }
    }
    
    public final long size() {
        synchronized (this) {
            return this.size;
        }
    }
}
