// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import java.util.ArrayList;
import java.util.Map;
import java.io.EOFException;
import java.io.FileInputStream;
import java.util.Iterator;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.LinkedHashMap;
import java.io.Writer;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.Callable;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.io.Closeable;
import java.io.File;
import java.util.Arrays;
import java.io.IOException;

final class DiskLruCache$Entry
{
    private DiskLruCache$Editor currentEditor;
    private final String key;
    private final long[] lengths;
    private boolean readable;
    private long sequenceNumber;
    final /* synthetic */ DiskLruCache this$0;
    
    private DiskLruCache$Entry(final DiskLruCache this$0, final String key) {
        this.this$0 = this$0;
        this.key = key;
        this.lengths = new long[this$0.valueCount];
    }
    
    private IOException invalidLengths(final String[] array) {
        throw new IOException("unexpected journal line: " + Arrays.toString(array));
    }
    
    private void setLengths(final String[] array) {
        if (array.length != this.this$0.valueCount) {
            throw this.invalidLengths(array);
        }
        int i = 0;
        try {
            while (i < array.length) {
                this.lengths[i] = Long.parseLong(array[i]);
                ++i;
            }
        }
        catch (NumberFormatException ex) {
            throw this.invalidLengths(array);
        }
    }
    
    public final File getCleanFile(final int n) {
        return new File(this.this$0.directory, String.valueOf(this.key) + "." + n);
    }
    
    public final File getDirtyFile(final int n) {
        return new File(this.this$0.directory, String.valueOf(this.key) + "." + n + ".tmp");
    }
    
    public final String getLengths() {
        final StringBuilder sb = new StringBuilder();
        final long[] lengths = this.lengths;
        for (int length = lengths.length, i = 0; i < length; ++i) {
            sb.append(' ').append(lengths[i]);
        }
        return sb.toString();
    }
}
