// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import com.mopub.common.util.Streams;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import com.mopub.common.util.MoPubLog;
import com.mopub.common.util.DeviceUtils;
import android.support.v4.b.e;
import java.io.File;
import android.content.Context;
import com.mopub.common.util.Utils;
import java.io.IOException;

public class CacheService
{
    private static final int APP_VERSION = 1;
    private static final int DISK_CACHE_INDEX = 0;
    static final String UNIQUE_CACHE_NAME = "mopub-cache";
    private static final int VALUE_COUNT = 1;
    private static DiskLruCache sDiskLruCache;
    private static CacheService$MemoryLruCache sMemoryLruCache;
    
    @Deprecated
    public static void clearAndNullCaches() {
        while (true) {
            if (CacheService.sDiskLruCache == null) {
                break Label_0016;
            }
            try {
                CacheService.sDiskLruCache.delete();
                CacheService.sDiskLruCache = null;
                if (CacheService.sMemoryLruCache != null) {
                    CacheService.sMemoryLruCache.evictAll();
                    CacheService.sMemoryLruCache = null;
                }
            }
            catch (IOException ex) {
                CacheService.sDiskLruCache = null;
                continue;
            }
            break;
        }
    }
    
    public static boolean containsKeyDiskCache(final String s) {
        if (CacheService.sDiskLruCache != null) {
            try {
                if (CacheService.sDiskLruCache.get(createValidDiskCacheKey(s)) != null) {
                    return true;
                }
            }
            catch (Exception ex) {
                return false;
            }
        }
        return false;
    }
    
    public static String createValidDiskCacheKey(final String s) {
        return Utils.sha1(s);
    }
    
    public static byte[] get(final String s) {
        final byte[] fromMemoryCache = getFromMemoryCache(s);
        if (fromMemoryCache != null) {
            return fromMemoryCache;
        }
        return getFromDiskCache(s);
    }
    
    public static File getDiskCacheDirectory(final Context context) {
        return new File(String.valueOf(context.getCacheDir().getPath()) + File.separator + "mopub-cache");
    }
    
    @Deprecated
    public static DiskLruCache getDiskLruCache() {
        return CacheService.sDiskLruCache;
    }
    
    public static String getFilePathDiskCache(final String s) {
        if (CacheService.sDiskLruCache == null) {
            return null;
        }
        return CacheService.sDiskLruCache.getDirectory() + File.separator + createValidDiskCacheKey(s) + ".0";
    }
    
    public static byte[] getFromDiskCache(final String p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/mopub/common/CacheService.sDiskLruCache:Lcom/mopub/common/DiskLruCache;
        //     3: astore_1       
        //     4: aconst_null    
        //     5: astore_2       
        //     6: aload_1        
        //     7: ifnonnull       12
        //    10: aload_2        
        //    11: areturn        
        //    12: getstatic       com/mopub/common/CacheService.sDiskLruCache:Lcom/mopub/common/DiskLruCache;
        //    15: aload_0        
        //    16: invokestatic    com/mopub/common/CacheService.createValidDiskCacheKey:(Ljava/lang/String;)Ljava/lang/String;
        //    19: invokevirtual   com/mopub/common/DiskLruCache.get:(Ljava/lang/String;)Lcom/mopub/common/DiskLruCache$Snapshot;
        //    22: astore          8
        //    24: aload           8
        //    26: astore          4
        //    28: aload           4
        //    30: ifnonnull       47
        //    33: aconst_null    
        //    34: astore_2       
        //    35: aload           4
        //    37: ifnull          10
        //    40: aload           4
        //    42: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.close:()V
        //    45: aconst_null    
        //    46: areturn        
        //    47: aload           4
        //    49: iconst_0       
        //    50: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.getInputStream:(I)Ljava/io/InputStream;
        //    53: astore          9
        //    55: aconst_null    
        //    56: astore_2       
        //    57: aload           9
        //    59: ifnull          99
        //    62: aload           4
        //    64: iconst_0       
        //    65: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.getLength:(I)J
        //    68: l2i            
        //    69: newarray        B
        //    71: astore          10
        //    73: new             Ljava/io/BufferedInputStream;
        //    76: dup            
        //    77: aload           9
        //    79: invokespecial   java/io/BufferedInputStream.<init>:(Ljava/io/InputStream;)V
        //    82: astore          11
        //    84: aload           11
        //    86: aload           10
        //    88: invokestatic    com/mopub/common/util/Streams.readStream:(Ljava/io/InputStream;[B)V
        //    91: aload           11
        //    93: invokestatic    com/mopub/common/util/Streams.closeStream:(Ljava/io/Closeable;)V
        //    96: aload           10
        //    98: astore_2       
        //    99: aload           4
        //   101: ifnull          10
        //   104: aload           4
        //   106: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.close:()V
        //   109: aload_2        
        //   110: areturn        
        //   111: astore          12
        //   113: aload           11
        //   115: invokestatic    com/mopub/common/util/Streams.closeStream:(Ljava/io/Closeable;)V
        //   118: aload           12
        //   120: athrow         
        //   121: astore          13
        //   123: aload           10
        //   125: astore_2       
        //   126: aload           13
        //   128: astore_3       
        //   129: ldc             "Unable to get from DiskLruCache"
        //   131: aload_3        
        //   132: invokestatic    com/mopub/common/util/MoPubLog.d:(Ljava/lang/String;Ljava/lang/Throwable;)I
        //   135: pop            
        //   136: aload           4
        //   138: ifnull          10
        //   141: aload           4
        //   143: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.close:()V
        //   146: aload_2        
        //   147: areturn        
        //   148: astore          7
        //   150: aconst_null    
        //   151: astore          4
        //   153: aload           7
        //   155: astore          5
        //   157: aload           4
        //   159: ifnull          167
        //   162: aload           4
        //   164: invokevirtual   com/mopub/common/DiskLruCache$Snapshot.close:()V
        //   167: aload           5
        //   169: athrow         
        //   170: astore          5
        //   172: goto            157
        //   175: astore_3       
        //   176: aconst_null    
        //   177: astore_2       
        //   178: aconst_null    
        //   179: astore          4
        //   181: goto            129
        //   184: astore_3       
        //   185: aconst_null    
        //   186: astore_2       
        //   187: goto            129
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  12     24     175    184    Ljava/lang/Exception;
        //  12     24     148    157    Any
        //  47     55     184    190    Ljava/lang/Exception;
        //  47     55     170    175    Any
        //  62     73     184    190    Ljava/lang/Exception;
        //  62     73     170    175    Any
        //  73     84     121    129    Ljava/lang/Exception;
        //  73     84     170    175    Any
        //  84     91     111    121    Any
        //  91     96     121    129    Ljava/lang/Exception;
        //  91     96     170    175    Any
        //  113    121    121    129    Ljava/lang/Exception;
        //  113    121    170    175    Any
        //  129    136    170    175    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0047:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public static void getFromDiskCacheAsync(final String s, final CacheService$DiskLruCacheGetListener cacheService$DiskLruCacheGetListener) {
        new CacheService$DiskLruCacheGetTask(s, cacheService$DiskLruCacheGetListener).execute((Object[])new Void[0]);
    }
    
    public static byte[] getFromMemoryCache(final String s) {
        if (CacheService.sMemoryLruCache == null) {
            return null;
        }
        return (byte[])CacheService.sMemoryLruCache.get(s);
    }
    
    @Deprecated
    public static e getMemoryLruCache() {
        return CacheService.sMemoryLruCache;
    }
    
    public static void initializeCaches(final Context context) {
        initializeMemoryCache(context);
        initializeDiskCache(context);
    }
    
    public static boolean initializeDiskCache(final Context context) {
        boolean b = true;
        if (context == null) {
            b = false;
        }
        else if (CacheService.sDiskLruCache == null) {
            final File diskCacheDirectory = getDiskCacheDirectory(context);
            final long diskCacheSizeBytes = DeviceUtils.diskCacheSizeBytes(diskCacheDirectory);
            try {
                CacheService.sDiskLruCache = DiskLruCache.open(diskCacheDirectory, 1, 1, diskCacheSizeBytes);
                return b;
            }
            catch (IOException ex) {
                MoPubLog.d("Unable to create DiskLruCache", ex);
                return b;
            }
        }
        return b;
    }
    
    public static boolean initializeMemoryCache(final Context context) {
        if (context == null) {
            return false;
        }
        if (CacheService.sMemoryLruCache == null) {
            CacheService.sMemoryLruCache = new CacheService$MemoryLruCache(DeviceUtils.memoryCacheSizeBytes(context));
        }
        return true;
    }
    
    public static void put(final String s, final byte[] array) {
        putToMemoryCache(s, array);
        putToDiskCacheAsync(s, array);
    }
    
    public static boolean putToDiskCache(final String s, final InputStream inputStream) {
        if (CacheService.sDiskLruCache != null) {
            DiskLruCache$Editor edit = null;
            try {
                edit = CacheService.sDiskLruCache.edit(createValidDiskCacheKey(s));
                if (edit != null) {
                    final BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(edit.newOutputStream(0));
                    Streams.copyContent(inputStream, bufferedOutputStream);
                    bufferedOutputStream.flush();
                    bufferedOutputStream.close();
                    CacheService.sDiskLruCache.flush();
                    edit.commit();
                    return true;
                }
            }
            catch (Exception ex) {
                MoPubLog.d("Unable to put to DiskLruCache", ex);
                if (edit != null) {
                    try {
                        edit.abort();
                        return false;
                    }
                    catch (IOException ex2) {
                        return false;
                    }
                }
            }
        }
        return false;
    }
    
    public static boolean putToDiskCache(final String s, final byte[] array) {
        return putToDiskCache(s, new ByteArrayInputStream(array));
    }
    
    public static void putToDiskCacheAsync(final String s, final byte[] array) {
        new CacheService$DiskLruCachePutTask(s, array).execute((Object[])new Void[0]);
    }
    
    public static void putToMemoryCache(final String s, final byte[] array) {
        if (CacheService.sMemoryLruCache == null) {
            return;
        }
        CacheService.sMemoryLruCache.put(s, array);
    }
}
