// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common.util;

import org.apache.http.conn.util.InetAddressUtils;
import android.content.pm.ApplicationInfo;
import android.app.ActivityManager;
import android.net.ConnectivityManager;
import java.util.Iterator;
import java.net.InetAddress;
import java.util.Collections;
import java.net.NetworkInterface;
import android.provider.Settings$Secure;
import android.content.Context;
import android.os.StatFs;
import java.io.File;

public class DeviceUtils
{
    private static final int MAX_DISK_CACHE_SIZE = 104857600;
    private static final int MAX_MEMORY_CACHE_SIZE = 31457280;
    private static final int MIN_DISK_CACHE_SIZE = 31457280;
    
    public static long diskCacheSizeBytes(final File file) {
        try {
            final StatFs statFs = new StatFs(file.getAbsolutePath());
            final long n = statFs.getBlockCount() * statFs.getBlockSize() / 50L;
            return Math.max(Math.min(n, 104857600L), 31457280L);
        }
        catch (IllegalArgumentException ex) {
            MoPubLog.d("Unable to calculate 2% of available disk space, defaulting to minimum");
            final long n = 31457280L;
            return Math.max(Math.min(n, 104857600L), 31457280L);
        }
    }
    
    public static String getHashedUdid(final Context context) {
        if (context == null) {
            return null;
        }
        return Utils.sha1(Settings$Secure.getString(context.getContentResolver(), "android_id"));
    }
    
    public static String getIpAddress(final DeviceUtils$IP deviceUtils$IP) {
        final Iterator<NetworkInterface> iterator = Collections.list(NetworkInterface.getNetworkInterfaces()).iterator();
        while (iterator.hasNext()) {
            for (final InetAddress inetAddress : Collections.list(iterator.next().getInetAddresses())) {
                if (!inetAddress.isLoopbackAddress()) {
                    final String upperCase = inetAddress.getHostAddress().toUpperCase();
                    if (deviceUtils$IP.matches(upperCase)) {
                        return deviceUtils$IP.toString(upperCase);
                    }
                    continue;
                }
            }
        }
        return null;
    }
    
    public static String getUserAgent() {
        return System.getProperty("http.agent");
    }
    
    public static boolean isNetworkAvailable(final Context context) {
        if (context == null) {
            return false;
        }
        if (context.checkCallingOrSelfPermission("android.permission.INTERNET") == -1) {
            return false;
        }
        if (context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") == -1) {
            return true;
        }
        try {
            return ((ConnectivityManager)context.getSystemService("connectivity")).getActiveNetworkInfo().isConnected();
        }
        catch (NullPointerException ex) {
            return false;
        }
    }
    
    public static int memoryCacheSizeBytes(final Context context) {
        final ActivityManager activityManager = (ActivityManager)context.getSystemService("activity");
        final long n = activityManager.getMemoryClass();
        while (true) {
            Label_0112: {
                if (!VersionCode.currentApiLevel().isAtLeast(VersionCode.HONEYCOMB)) {
                    break Label_0112;
                }
                try {
                    if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null))) {
                        final long n2 = (int)new Reflection$MethodBuilder(activityManager, "getLargeMemoryClass").execute();
                        return (int)Math.min(31457280L, 1024L * (1024L * (n2 / 8L)));
                    }
                }
                catch (Exception ex) {
                    MoPubLog.d("Unable to reflectively determine large heap size on Honeycomb and above.");
                }
            }
            final long n2 = n;
            continue;
        }
    }
}
