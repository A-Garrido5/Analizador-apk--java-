// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common.util;

import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONTokener;
import org.json.JSONObject;

public class Json
{
    public static Object getJsonValue(final JSONObject jsonObject, final String s, final Class clazz) {
        if (jsonObject == null || s == null || clazz == null) {
            throw new IllegalArgumentException("Cannot pass any null argument to getJsonValue");
        }
        final Object opt = jsonObject.opt(s);
        if (opt == null) {
            MoPubLog.w("Tried to get Json value with key: " + s + ", but it was null");
            return null;
        }
        if (!clazz.isInstance(opt)) {
            MoPubLog.w("Tried to get Json value with key: " + s + ", of type: " + clazz.toString() + ", its type did not match");
            return null;
        }
        return clazz.cast(opt);
    }
    
    public static String[] jsonArrayToStringArray(final String s) {
        final String string = "{key:" + s + "}";
        try {
            final JSONArray jsonArray = ((JSONObject)new JSONTokener(string).nextValue()).getJSONArray("key");
            final String[] array = new String[jsonArray.length()];
            for (int i = 0; i < array.length; ++i) {
                array[i] = jsonArray.getString(i);
            }
            return array;
        }
        catch (JSONException ex) {
            return new String[0];
        }
    }
    
    public static Map jsonStringToMap(final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        if (s == null || s.equals("")) {
            return hashMap;
        }
        final JSONObject jsonObject = (JSONObject)new JSONTokener(s).nextValue();
        final Iterator keys = jsonObject.keys();
        while (keys.hasNext()) {
            final String s2 = keys.next();
            hashMap.put(s2, jsonObject.getString(s2));
        }
        return hashMap;
    }
    
    public static String mapToJsonString(final Map map) {
        if (map == null) {
            return "{}";
        }
        final StringBuilder sb = new StringBuilder();
        sb.append("{");
        final Iterator<Map.Entry<String, V>> iterator = map.entrySet().iterator();
        int n = 1;
        while (iterator.hasNext()) {
            final Map.Entry<String, V> entry = iterator.next();
            if (n == 0) {
                sb.append(",");
            }
            sb.append("\"");
            sb.append(entry.getKey());
            sb.append("\":\"");
            sb.append((String)entry.getValue());
            sb.append("\"");
            n = 0;
        }
        sb.append("}");
        return sb.toString();
    }
}
