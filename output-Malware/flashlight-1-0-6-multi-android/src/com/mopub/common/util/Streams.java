// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common.util;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.Closeable;

public class Streams
{
    public static void closeStream(final Closeable closeable) {
        if (closeable == null) {
            return;
        }
        try {
            closeable.close();
        }
        catch (IOException ex) {}
    }
    
    public static void copyContent(final InputStream inputStream, final OutputStream outputStream) {
        if (inputStream == null || outputStream == null) {
            throw new IOException("Unable to copy from or to a null stream.");
        }
        final byte[] array = new byte[16384];
        while (true) {
            final int read = inputStream.read(array);
            if (read == -1) {
                break;
            }
            outputStream.write(array, 0, read);
        }
    }
    
    public static void copyContent(final InputStream inputStream, final OutputStream outputStream, final long n) {
        if (inputStream == null || outputStream == null) {
            throw new IOException("Unable to copy from or to a null stream.");
        }
        final byte[] array = new byte[16384];
        long n2 = 0L;
        while (true) {
            final int read = inputStream.read(array);
            if (read == -1) {
                return;
            }
            n2 += read;
            if (n2 >= n) {
                throw new IOException("Error copying content: attempted to copy " + n2 + " bytes, with " + n + " maximum.");
            }
            outputStream.write(array, 0, read);
        }
    }
    
    public static void readStream(final InputStream inputStream, final byte[] array) {
        int n = 0;
        int i = array.length;
        do {
            final int read = inputStream.read(array, n, i);
            if (read == -1) {
                return;
            }
            n += read;
            i -= read;
        } while (i > 0);
    }
}
