// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common.util;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class Reflection$MethodBuilder
{
    private Class mClass;
    private final Object mInstance;
    private boolean mIsAccessible;
    private boolean mIsStatic;
    private final String mMethodName;
    private List mParameterClasses;
    private List mParameters;
    
    public Reflection$MethodBuilder(final Object mInstance, final String mMethodName) {
        this.mInstance = mInstance;
        this.mMethodName = mMethodName;
        this.mParameterClasses = new ArrayList();
        this.mParameters = new ArrayList();
        Class<?> class1;
        if (mInstance != null) {
            class1 = mInstance.getClass();
        }
        else {
            class1 = null;
        }
        this.mClass = class1;
    }
    
    public Reflection$MethodBuilder addParam(final Class clazz, final Object o) {
        this.mParameterClasses.add(clazz);
        this.mParameters.add(o);
        return this;
    }
    
    public Object execute() {
        final Method declaredMethodWithTraversal = Reflection.getDeclaredMethodWithTraversal(this.mClass, this.mMethodName, (Class[])this.mParameterClasses.toArray(new Class[this.mParameterClasses.size()]));
        if (this.mIsAccessible) {
            declaredMethodWithTraversal.setAccessible(true);
        }
        final Object[] array = this.mParameters.toArray();
        if (this.mIsStatic) {
            return declaredMethodWithTraversal.invoke(null, array);
        }
        return declaredMethodWithTraversal.invoke(this.mInstance, array);
    }
    
    public Reflection$MethodBuilder setAccessible() {
        this.mIsAccessible = true;
        return this;
    }
    
    public Reflection$MethodBuilder setStatic(final Class mClass) {
        this.mIsStatic = true;
        this.mClass = mClass;
        return this;
    }
}
