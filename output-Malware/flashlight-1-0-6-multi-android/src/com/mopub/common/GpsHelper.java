// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import android.content.SharedPreferences;
import com.mopub.common.factories.MethodBuilderFactory;
import com.mopub.common.util.MoPubLog;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import com.mopub.common.util.Reflection;
import android.content.Context;

public class GpsHelper
{
    public static final String ADVERTISING_ID_KEY = "advertisingId";
    public static final int GOOGLE_PLAY_SUCCESS_CODE = 0;
    public static final String IS_LIMIT_AD_TRACKING_ENABLED_KEY = "isLimitAdTrackingEnabled";
    private static String sAdvertisingIdClientClassName;
    private static String sPlayServicesUtilClassName;
    
    static {
        GpsHelper.sPlayServicesUtilClassName = "com.google.android.gms.common.GooglePlayServicesUtil";
        GpsHelper.sAdvertisingIdClientClassName = "com.google.android.gms.ads.identifier.AdvertisingIdClient";
    }
    
    public static void asyncFetchAdvertisingInfo(final Context context) {
        asyncFetchAdvertisingInfo(context, null);
    }
    
    public static void asyncFetchAdvertisingInfo(final Context context, final GpsHelper$GpsHelperListener gpsHelper$GpsHelperListener) {
        if (!Reflection.classFound(GpsHelper.sAdvertisingIdClientClassName)) {
            if (gpsHelper$GpsHelperListener != null) {
                gpsHelper$GpsHelperListener.onFetchAdInfoCompleted();
            }
        }
        else {
            try {
                AsyncTasks.safeExecuteOnExecutor(new GpsHelper$FetchAdvertisingInfoTask(context, gpsHelper$GpsHelperListener), (Object[])new Void[0]);
            }
            catch (Exception ex) {
                MoPubLog.d("Error executing FetchAdvertisingInfoTask", ex);
                if (gpsHelper$GpsHelperListener != null) {
                    gpsHelper$GpsHelperListener.onFetchAdInfoCompleted();
                }
            }
        }
    }
    
    public static void asyncFetchAdvertisingInfoIfNotCached(final Context context, final GpsHelper$GpsHelperListener gpsHelper$GpsHelperListener) {
        if (isGpsAvailable(context) && !isSharedPreferencesPopluated(context)) {
            asyncFetchAdvertisingInfo(context, gpsHelper$GpsHelperListener);
            return;
        }
        gpsHelper$GpsHelperListener.onFetchAdInfoCompleted();
    }
    
    static String getAdvertisingId(final Context context) {
        final boolean gpsAvailable = isGpsAvailable(context);
        String string = null;
        if (gpsAvailable) {
            string = SharedPreferencesHelper.getSharedPreferences(context).getString("advertisingId", (String)null);
        }
        return string;
    }
    
    static boolean isGpsAvailable(final Context context) {
        try {
            final Object execute = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable").setStatic(Class.forName(GpsHelper.sPlayServicesUtilClassName)).addParam(Context.class, context).execute();
            return execute != null && (int)execute == 0;
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    public static boolean isLimitAdTrackingEnabled(final Context context) {
        final boolean gpsAvailable = isGpsAvailable(context);
        boolean boolean1 = false;
        if (gpsAvailable) {
            boolean1 = SharedPreferencesHelper.getSharedPreferences(context).getBoolean("isLimitAdTrackingEnabled", false);
        }
        return boolean1;
    }
    
    static boolean isSharedPreferencesPopluated(final Context context) {
        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
        return sharedPreferences.contains("advertisingId") && sharedPreferences.contains("isLimitAdTrackingEnabled");
    }
    
    static String reflectedGetAdvertisingId(final Object o, final String s) {
        try {
            return (String)MethodBuilderFactory.create(o, "getId").execute();
        }
        catch (Exception ex) {
            return s;
        }
    }
    
    static boolean reflectedIsLimitAdTrackingEnabled(final Object o, boolean booleanValue) {
        try {
            final Boolean b = (Boolean)MethodBuilderFactory.create(o, "isLimitAdTrackingEnabled").execute();
            if (b != null) {
                booleanValue = b;
            }
            return booleanValue;
        }
        catch (Exception ex) {
            return booleanValue;
        }
    }
    
    @Deprecated
    public static void setClassNamesForTesting() {
        GpsHelper.sPlayServicesUtilClassName = "java.lang.Class";
        GpsHelper.sAdvertisingIdClientClassName = "java.lang.Class";
    }
    
    static void updateSharedPreferences(final Context context, final Object o) {
        SharedPreferencesHelper.getSharedPreferences(context).edit().putString("advertisingId", reflectedGetAdvertisingId(o, null)).putBoolean("isLimitAdTrackingEnabled", reflectedIsLimitAdTrackingEnabled(o, false)).commit();
    }
}
