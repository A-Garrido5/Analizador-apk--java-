// 
// Decompiled by Procyon v0.5.30
// 

package com.mopub.common;

import java.util.Arrays;
import java.util.Iterator;
import android.os.AsyncTask;
import com.mopub.common.util.AsyncTasks;
import org.apache.http.client.methods.HttpUriRequest;
import com.mopub.common.util.MoPubLog;
import android.os.Handler;
import android.os.Looper;
import com.mopub.common.util.ResponseHeader;
import android.webkit.WebView;
import org.apache.http.client.methods.HttpGet;
import android.content.Context;
import org.apache.http.params.HttpParams;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.params.HttpConnectionParams;
import com.mopub.common.util.DeviceUtils;
import android.net.http.AndroidHttpClient;

public class HttpClient
{
    private static final int CONNECTION_TIMEOUT = 10000;
    private static final int SOCKET_TIMEOUT = 10000;
    private static String sWebViewUserAgent;
    
    public static AndroidHttpClient getHttpClient() {
        final AndroidHttpClient instance = AndroidHttpClient.newInstance(DeviceUtils.getUserAgent());
        final HttpParams params = instance.getParams();
        HttpConnectionParams.setConnectionTimeout(params, 10000);
        HttpConnectionParams.setSoTimeout(params, 10000);
        HttpClientParams.setRedirecting(params, true);
        return instance;
    }
    
    public static String getWebViewUserAgent() {
        synchronized (HttpClient.class) {
            return HttpClient.sWebViewUserAgent;
        }
    }
    
    public static HttpGet initializeHttpGet(final String s, final Context context) {
        final HttpGet httpGet = new HttpGet(s);
        if (getWebViewUserAgent() == null && context != null) {
            setWebViewUserAgent(new WebView(context).getSettings().getUserAgentString());
        }
        final String webViewUserAgent = getWebViewUserAgent();
        if (webViewUserAgent != null) {
            httpGet.addHeader(ResponseHeader.USER_AGENT.getKey(), webViewUserAgent);
        }
        return httpGet;
    }
    
    public static void makeTrackingHttpRequest(final Iterable iterable, final Context context) {
        if (iterable == null || context == null) {
            return;
        }
        new Handler(Looper.getMainLooper()).post((Runnable)new Runnable() {
            private final /* synthetic */ Context val$appContext = context.getApplicationContext();
            private final /* synthetic */ DownloadTask$DownloadTaskListener val$downloadTaskListener = new DownloadTask$DownloadTaskListener() {
                @Override
                public void onComplete(final String s, final DownloadResponse downloadResponse) {
                    if (downloadResponse == null || downloadResponse.getStatusCode() != 200) {
                        MoPubLog.d("Failed to hit tracking endpoint: " + s);
                        return;
                    }
                    if (HttpResponses.asResponseString(downloadResponse) != null) {
                        MoPubLog.d("Successfully hit tracking endpoint: " + s);
                        return;
                    }
                    MoPubLog.d("Failed to hit tracking endpoint: " + s);
                }
            };
            
            @Override
            public void run() {
                for (final String s : iterable) {
                    try {
                        AsyncTasks.safeExecuteOnExecutor(new DownloadTask(this.val$downloadTaskListener), HttpClient.initializeHttpGet(s, this.val$appContext));
                    }
                    catch (Exception ex) {
                        MoPubLog.d("Failed to hit tracking endpoint: " + s);
                    }
                }
            }
        });
    }
    
    public static void makeTrackingHttpRequest(final String s, final Context context) {
        makeTrackingHttpRequest(Arrays.asList(s), context);
    }
    
    public static void setWebViewUserAgent(final String sWebViewUserAgent) {
        synchronized (HttpClient.class) {
            HttpClient.sWebViewUserAgent = sWebViewUserAgent;
        }
    }
}
