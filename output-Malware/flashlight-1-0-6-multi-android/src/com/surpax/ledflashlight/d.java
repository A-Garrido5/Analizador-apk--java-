// 
// Decompiled by Procyon v0.5.30
// 

package com.surpax.ledflashlight;

import org.json.JSONException;
import org.json.JSONObject;
import java.util.HashMap;
import org.json.JSONArray;
import android.content.SharedPreferences$Editor;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import android.content.Context;

public final class d
{
    public static List a(final Context context, final String s) {
        final String string = context.getSharedPreferences(s, 0).getString(s, (String)null);
        if (string == null || string.length() == 0) {
            return new ArrayList();
        }
        return Arrays.asList(string.split(","));
    }
    
    public static Map a(final Map map, final String s) {
        final String country = Locale.getDefault().getCountry();
        if (map.containsKey(s)) {
            final Map<K, List> map2 = map.get(s);
            while (true) {
                try {
                    final List<Map> list = map2.get("Regional");
                    if (list != null) {
                        for (final Map<K, List> map3 : list) {
                            final List list2 = map3.get("Regions");
                            if (list2 != null && list2.contains(country)) {
                                return map3;
                            }
                        }
                    }
                    if (map2.containsKey("Default")) {
                        return (Map)map2.get("Default");
                    }
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    continue;
                }
                break;
            }
        }
        return null;
    }
    
    public static void a(final Context context, final String s, final List list) {
        String string;
        if (list == null) {
            string = null;
        }
        else {
            final StringBuilder sb = new StringBuilder();
            final Iterator<String> iterator = list.iterator();
            int n = 0;
            while (iterator.hasNext()) {
                final String s2 = iterator.next();
                if (n != 0) {
                    sb.append(",");
                }
                else {
                    n = 1;
                }
                sb.append(s2);
            }
            string = sb.toString();
        }
        final SharedPreferences$Editor edit = context.getSharedPreferences(s, 0).edit();
        edit.putString(s, string);
        edit.commit();
    }
    
    private static void a(final Context context, final String s, final Map map) {
        final String string = context.getSharedPreferences("WidgetEvents", 0).getString("WidgetEvents", "");
        while (true) {
            try {
                final JSONArray jsonArray = new JSONArray(string);
                final HashMap<String, JSONObject> hashMap = new HashMap<String, JSONObject>();
                hashMap.put(s, new JSONObject(map));
                jsonArray.put((Object)new JSONObject((Map)hashMap));
                final SharedPreferences$Editor edit = context.getSharedPreferences("WidgetEvents", 0).edit();
                edit.putString("WidgetEvents", jsonArray.toString());
                edit.commit();
            }
            catch (JSONException ex) {
                final JSONArray jsonArray = new JSONArray();
                continue;
            }
            break;
        }
    }
    
    public static String b(final Map map, final String s) {
        if (!map.containsKey(s)) {
            return null;
        }
        final String value = map.get(s);
        if (value instanceof String) {
            return value;
        }
        if (!(value instanceof Map)) {
            return null;
        }
        final Map<K, String> map2 = (Map<K, String>)value;
        final String language = Locale.getDefault().getLanguage();
        if (map2.containsKey(language)) {
            return map2.get(language);
        }
        return map2.get("en");
    }
    
    private static List b(final Context context) {
    Label_0037_Outer:
        while (true) {
            final String string = context.getSharedPreferences("WidgetEvents", 0).getString("WidgetEvents", "");
            while (true) {
                JSONArray jsonArray;
                ArrayList<HashMap<String, Object>> list;
                int n;
                while (true) {
                    try {
                        jsonArray = new JSONArray(string);
                        list = new ArrayList<HashMap<String, Object>>();
                        n = 0;
                        if (n >= jsonArray.length()) {
                            return list;
                        }
                    }
                    catch (JSONException ex) {
                        jsonArray = new JSONArray();
                        continue Label_0037_Outer;
                    }
                    break;
                }
                final JSONObject optJSONObject = jsonArray.optJSONObject(n);
                final HashMap<String, HashMap<String, String>> hashMap = new HashMap<String, HashMap<String, String>>();
                final String optString = optJSONObject.names().optString(0);
                final JSONObject optJSONObject2 = optJSONObject.optJSONObject(optString);
                final HashMap<String, String> hashMap2 = new HashMap<String, String>();
                if (optJSONObject2 != null) {
                    final JSONArray names = optJSONObject2.names();
                    for (int i = 0; i < names.length(); ++i) {
                        final String optString2 = names.optString(i);
                        hashMap2.put(optString2, optJSONObject2.optString(optString2));
                    }
                }
                hashMap.put(optString, hashMap2);
                list.add((HashMap<String, Object>)hashMap);
                ++n;
                continue;
            }
        }
    }
    
    public static void b(final Context context, final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("WidgetName", s);
        a(context, "Widget_Added_New", hashMap);
    }
    
    public static void c(final Context context, final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("WidgetName", s);
        a(context, "Widget_Deleted_New", hashMap);
    }
    
    public static void d(final Context context, final String s) {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("WidgetName", s);
        a(context, "Widget_Clicked_New", hashMap);
    }
}
