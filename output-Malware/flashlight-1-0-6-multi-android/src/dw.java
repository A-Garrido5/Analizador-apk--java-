import java.io.ByteArrayOutputStream;
import com.nuance.nmsp.client.sdk.oem.i;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class dw implements bh, dq, dv
{
    private static final be g;
    private static long o;
    protected du a;
    public Vector b;
    protected dn c;
    protected int d;
    protected Object e;
    protected byte f;
    private ds h;
    private dv i;
    private am j;
    private am k;
    private byte l;
    private bf m;
    private Hashtable n;
    private long p;
    private Hashtable q;
    
    static {
        g = dh.a(dw.class);
        dw.o = 1L;
    }
    
    public dw(final dt c, final ds h, final Vector vector) {
        this.d = 0;
        this.f = 0;
        this.c = c;
        this.a = c.h();
        this.h = h;
        this.j = c.e();
        this.k = c.f();
        this.l = 5;
        this.m = c.g_();
        this.e = new Object();
        this.f = this.a.h();
        this.n = new Hashtable();
        this.q = new Hashtable();
        this.p = this.a.g();
        this.b = new Vector();
        if (vector != null) {
            for (int i = 0; i < vector.size(); ++i) {
                this.b.addElement(vector.elementAt(i).e());
            }
        }
    }
    
    private static dg a(final String s) {
        if (s.equalsIgnoreCase("sdk")) {
            return dg.a;
        }
        if (s.equalsIgnoreCase("nmsp")) {
            return dg.b;
        }
        if (s.equalsIgnoreCase("app")) {
            return dg.c;
        }
        if (s.equalsIgnoreCase("nss")) {
            return dg.d;
        }
        if (s.equalsIgnoreCase("slog")) {
            return dg.e;
        }
        if (s.equalsIgnoreCase("nsslog")) {
            return dg.f;
        }
        if (s.equalsIgnoreCase("gwlog")) {
            return dg.g;
        }
        if (s.equalsIgnoreCase("svsp")) {
            return dg.h;
        }
        if (s.equalsIgnoreCase("sip")) {
            return dg.i;
        }
        if (s.equalsIgnoreCase("sdp")) {
            return dg.j;
        }
        return null;
    }
    
    private void a(final Vector vector, final long n) {
        if (this.d != 2) {
            final ds h = this.h;
        }
        final byte[] array = new byte[0];
        this.n.put(new Long(n), new Byte((byte)2));
        this.q.put(new Long(n), vector);
        final String string = "<gp><rid>" + n + "</rid>";
        int i = 0;
        String string2 = string;
        while (i < vector.size()) {
            final df df = vector.elementAt(i);
            if (df.d() == dg.c || df.d() == dg.b || df.d() == dg.d || df.d() == dg.h) {
                string2 = string2 + "<" + df.d() + " p=\"" + df.a() + "\"/>";
            }
            ++i;
        }
        this.a.a((short)2583, "SEND_BCP_GET_PARAMS", (string2 + "</gp>").getBytes(), array, this.f, n, this.i, false);
    }
    
    public static long i() {
        return 0L;
    }
    
    @Override
    public void a() {
        dw.g.b("freeResource, disconnect timeout: 0");
        synchronized (this.e) {
            if (this.d == 2) {
                this.d = 0;
                final Integer n = new Integer(0);
                final bf m = this.m;
                final bg bg = new bg((byte)3, n);
                final Thread currentThread = Thread.currentThread();
                this.m.a();
                m.a(bg, this, currentThread);
                return;
            }
            dw.g.e("ResourceException the resource was unloaded. ");
            throw new dr("the resource was unloaded. ");
        }
    }
    
    @Override
    public final void a(final byte b, final long n, final short n2, final short n3, final short n4) {
        dw.g.b("onBcpResponse, TID: " + b + ", RID: " + n + ", status code: " + n2 + " , request state: " + n3 + ", completion cause: " + n4);
        if (n2 != 200) {
            final Byte b2 = this.n.get(new Long(n));
            if (b2 != null) {
                switch (b2) {
                    case 1: {
                        this.n.remove(new Long(n));
                        final ds h = this.h;
                    }
                    case 2: {
                        this.n.remove(new Long(n));
                        final ds h2 = this.h;
                    }
                }
            }
        }
    }
    
    @Override
    public final void a(final byte b, final long n, final short n2, final byte[] array) {
        dw.g.b("onBcpSetParamsComplete, TID: " + b + ", RID: " + n + ", status code: " + n2);
        if (this.n.remove(new Long(n)) == null) {
            dw.g.d("onBcpSetParamsComplete, RID: " + n + " already removed!");
            return;
        }
        final Vector<df> vector = new Vector<df>();
        if (array != null) {
            final String s = new String(array);
            int n3;
            if (s.startsWith(";")) {
                n3 = 1;
            }
            else {
                n3 = 0;
            }
            while (true) {
                final int index = s.indexOf(";", n3);
                if (index == -1) {
                    break;
                }
                final String substring = s.substring(n3, index);
                final int index2 = substring.indexOf(".");
                if (index2 != -1) {
                    vector.addElement(new df(substring.substring(index2 + 1), a(substring.substring(0, index2))));
                }
                n3 = index + 1;
            }
            if (n3 < s.length()) {
                final String substring2 = s.substring(n3);
                final int index3 = substring2.indexOf(".");
                if (index3 != -1) {
                    vector.addElement(new df(substring2.substring(index3 + 1), a(substring2.substring(0, index3))));
                }
            }
        }
        if (n2 == 200 || n2 == 201) {
            final ds h = this.h;
            return;
        }
        final ds h2 = this.h;
    }
    
    @Override
    public void a(final byte b, final short n) {
        dw.g.b("onBcpEvent, TID: " + b + ", event code: " + n);
        if (this.d == 2) {
            this.d = 0;
            final Enumeration<Long> keys = this.n.keys();
            while (keys.hasMoreElements()) {
                switch ((byte)this.n.remove(keys.nextElement())) {
                    default: {
                        continue;
                    }
                    case 1: {
                        final ds h = this.h;
                        continue;
                    }
                    case 2: {
                        final ds h2 = this.h;
                        continue;
                    }
                }
            }
            final ds h3 = this.h;
            this.a.b(this);
        }
    }
    
    @Override
    public void a(final byte b, final byte[] array) {
    }
    
    protected final void a(final dv i) {
        dw.g.b("loadResource");
        if (new i(this.b).a()) {
            this.j = bx.c(this.j);
            this.k = bx.c(this.k);
            ((dt)this.c).a(this.j);
            ((dt)this.c).b(this.k);
        }
        this.i = i;
        this.a.a(i);
        if (this.d == 0) {
            if (this.a.f() != null) {
                this.d = 2;
            }
            else {
                this.a.a(this.j, this.k);
                this.d = 1;
            }
            final long h = this.h();
            String s = "<lr><rid>" + h + "</rid>";
            switch (this.l) {
                case 5: {
                    return;
                }
                case 1: {
                    s += "<nr9><reco/></nr9>";
                    break;
                }
                case 2: {
                    s += "<nr9><tts/></nr9>";
                    break;
                }
                case 3: {
                    s += "<oper></oper>";
                    break;
                }
                case 4: {
                    s = s + "<dict>" + "</dict>";
                    break;
                }
            }
            this.a.a((short)2599, "SEND_BCP_LOAD_RESOURCE", (s + "</lr>").getBytes(), null, this.f, h, i, false);
        }
    }
    
    @Override
    public void a(final Object o, final Object o2) {
        final bg bg = (bg)o;
        switch (bg.a) {
            default: {}
            case 1: {
                final Object[] array = (Object[])bg.b;
                final Vector vector = (Vector)array[0];
                final long longValue = (long)array[1];
                if (this.d != 2) {
                    final ds h = this.h;
                    return;
                }
                boolean b = true;
                final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                final byte[] array2 = new byte[4];
                this.n.put(new Long(longValue), new Byte((byte)1));
                final String string = "<sp><rid>" + longValue + "</rid>";
                int n = 1;
                String s = string;
                for (int i = 0; i < vector.size(); ++i) {
                    final df df = vector.elementAt(i);
                    if (df.d() == dg.c || df.d() == dg.b || df.d() == dg.d) {
                        b = false;
                        s = s + "<" + df.d() + " p=\"" + df.a() + "\" v=\"" + bx.a(new String(df.b())) + "\"/>";
                    }
                    else {
                        if (df.d() == dg.h) {
                            b = false;
                        }
                        final StringBuilder append = new StringBuilder().append(s).append("<").append(df.d().toString()).append(" p=\"").append(df.a()).append("\" v=\"");
                        final int n2 = n + 1;
                        s = append.append(n).append("\"/>").toString();
                        final byte[] b2 = df.b();
                        bu.a(b2.length, array2, 0);
                        byteArrayOutputStream.write(array2, 0, 4);
                        byteArrayOutputStream.write(b2, 0, b2.length);
                        n = n2;
                    }
                }
                this.a.a((short)2581, "SEND_BCP_SET_PARAMS", (s + "</sp>").getBytes(), byteArrayOutputStream.toByteArray(), this.f, longValue, this.i, b);
                try {
                    byteArrayOutputStream.close();
                    return;
                }
                catch (Exception ex) {
                    return;
                }
            }
            case 2: {
                final Object[] array3 = (Object[])bg.b;
                this.a((Vector)array3[0], (long)array3[1]);
            }
            case 3: {
                this.a.a(this.f, (int)bg.b, this.i);
                final ds h2 = this.h;
            }
            case 4: {
                final int intValue = (int)bg.b;
                final long h3 = this.h();
                this.a.a((short)2608, "SEND_BCP_FREE_RESOURCE_ID", ("<fr><rid>" + h3 + "</rid>" + "<n>1</n>" + "<resids>" + "<res1><id>" + this.p + "</id>" + "<timeout>" + intValue + "<timeout></res1>" + "</resids>" + "</fr>").getBytes(), null, this.f, h3, this.i, true);
            }
        }
    }
    
    @Override
    public void a(final short n) {
        if (dw.g.b()) {
            dw.g.b("onSessionDisconnected, reason code: " + n);
        }
        final Enumeration<Long> keys = this.n.keys();
        while (keys.hasMoreElements()) {
            switch ((byte)this.n.remove(keys.nextElement())) {
                default: {
                    continue;
                }
                case 1: {
                    final ds h = this.h;
                    continue;
                }
                case 2: {
                    final ds h2 = this.h;
                    continue;
                }
            }
        }
        synchronized (this.e) {
            if (this.d == 2) {
                final ds h3 = this.h;
            }
            this.d = 0;
        }
    }
    
    @Override
    public void a(final byte[] array) {
        if (dw.g.b()) {
            dw.g.b("onSessionConnected, SID: " + array);
        }
        synchronized (this.e) {
            this.d = 2;
        }
    }
    
    @Override
    public final void b() {
        final ds h = this.h;
    }
    
    @Override
    public final void b(final byte b, final long n, final short n2, final byte[] array) {
        dw.g.b("onBcpGetParamsComplete, TID: " + b + ", RID: " + n);
        if (this.n.remove(new Long(n)) == null) {
            dw.g.d("onBcpGetParamsComplete, RID: " + n + " already removed!");
            this.q.remove(new Long(n));
            return;
        }
        final Vector<df> vector = this.q.remove(new Long(n));
        if (vector == null) {
            dw.g.e("Could not find the grammars associated with RID: " + n);
            return;
        }
        final String s = new String(array);
        int n3;
        int n4;
        if (s.startsWith(";")) {
            n3 = 1;
            n4 = 0;
        }
        else {
            n3 = 0;
            n4 = 0;
        }
        while (true) {
            final int index = s.indexOf(";", n3);
            if (index == -1) {
                break;
            }
            final String substring = s.substring(n3, index);
            if (substring.indexOf(":") == -1) {
                final df df = vector.elementAt(n4);
                vector.setElementAt(new df(df.a(), substring.getBytes(), df.d()), n4);
            }
            final int n5 = index + 1;
            ++n4;
            n3 = n5;
        }
        if (n3 < s.length()) {
            final String substring2 = s.substring(n3);
            if (substring2.indexOf(":") == -1) {
                final df df2 = vector.elementAt(n4);
                vector.setElementAt(new df(df2.a(), substring2.getBytes(), df2.d()), n4);
            }
        }
        if (n2 == 200 || n2 == 201) {
            final ds h = this.h;
            return;
        }
        final ds h2 = this.h;
    }
    
    @Override
    public void c() {
    }
    
    @Override
    public void d() {
    }
    
    @Override
    public void e() {
    }
    
    @Override
    public void f() {
    }
    
    public final dn g() {
        return this.c;
    }
    
    protected long h() {
        synchronized (this) {
            final long o = dw.o;
            dw.o = 1L + o;
            if (dw.o == Long.MIN_VALUE) {
                dw.o = 1L;
            }
            return o;
        }
    }
}
