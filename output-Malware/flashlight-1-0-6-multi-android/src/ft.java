import java.util.Hashtable;
import java.util.Vector;

// 
// Decompiled by Procyon v0.5.30
// 

public class ft implements fn
{
    private static final be a;
    private Vector b;
    
    static {
        a = dh.a(ft.class);
    }
    
    public ft(final Vector b) {
        if (ft.a.b()) {
            ft.a.b("Received " + b.size() + " sentences constituting the dictation result.");
        }
        this.b = b;
        for (int i = 0; i < this.b.size(); ++i) {
            final fu fu = b.elementAt(i);
            fu.a(this);
            fu.c();
        }
    }
    
    @Override
    public final int a() {
        return this.b.size();
    }
    
    @Override
    public final fp a(final int n) {
        if (n < 0 || n >= this.b.size()) {
            return null;
        }
        return this.b.elementAt(n);
    }
    
    final Vector a(final fu fu, final Vector vector) {
        int i = 0;
        if (vector.size() == 0) {
            return new Vector();
        }
        final long c = vector.elementAt(0).c();
        final long d = vector.elementAt(-1 + vector.size()).d();
        if (ft.a.b()) {
            ft.a.b("Getting alternatives of " + fu + " at times [" + c + ", " + d + "]");
        }
        final Vector<fs> vector2 = new Vector<fs>();
        final Hashtable<String, Object> hashtable = new Hashtable<String, Object>();
        final Object o = new Object();
        hashtable.put(fu.a(c, d).toString(), o);
        while (i < this.b.size()) {
            final fu fu2 = this.b.elementAt(i);
            if (fu2 == fu) {
                if (ft.a.b()) {
                    ft.a.b("Found the same sentence at index " + i);
                }
            }
            else {
                final fs a = fu2.a(c, d);
                fs.b();
                if (ft.a.b()) {
                    ft.a.b("Got alternative [" + a + "] for sentence at index " + i);
                }
                if (a.a() == 0) {
                    if (ft.a.b()) {
                        ft.a.b("Got no alternative for sentence at index " + i);
                    }
                }
                else {
                    final String string = a.toString();
                    if (hashtable.containsKey(string)) {
                        if (ft.a.b()) {
                            ft.a.b("That alternative has already been given by another sentence.");
                        }
                    }
                    else {
                        hashtable.put(string, o);
                        vector2.addElement(a);
                    }
                }
            }
            ++i;
        }
        return vector2;
    }
    
    @Override
    public String toString() {
        if (this.b.size() > 0) {
            return this.b.elementAt(0).toString();
        }
        return "";
    }
}
