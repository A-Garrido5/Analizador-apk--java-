////////////////////////////////////////////////////////////
// mraid.js
////////////////////////////////////////////////////////////

(function() {
	console.log("Setting up mraid object");

	var mraid = window.mraid = {};

	// constants

	var VERSION = "2.0";

	var STATES = mraid.STATES = {
		LOADING : "loading",
		DEFAULT : "default",
		EXPANDED : "expanded",
		RESIZED : "resized",
		HIDDEN : "hidden"
	};

	var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {
		INLINE : "inline",
		INTERSTITIAL : "interstitial"
	};

	var RESIZE_PROPERTIES_CUSTOM_CLOSE_POSITION = mraid.RESIZE_PROPERTIES_CUSTOM_CLOSE_POSITION = {
		TOP_LEFT : "top-left",
		TOP_RIGHT : "top-right",
		CENTER : "center",
		BOTTOM_LEFT : "bottom-left",
		BOTTOM_RIGHT : "bottom-right"
	};

	var ORIENTATION_PROPERTIES_FORCE_ORIENTATION = mraid.ORIENTATION_PROPERTIES_FORCE_ORIENTATION = {
		PORTRAIT : "portrait",
		LANDSCAPE : "landscape",
		NONE : "none"
	};

	var EVENTS = mraid.EVENTS = {
		ERROR : "error",
		READY : "ready",
		SIZECHANGE : "sizeChange",
		STATECHANGE : "stateChange",
		VIEWABLECHANGE : "viewableChange"
	};
	
	var SUPPORTED_FEATURES = mraid.SUPPORTED_FEATURES = {
		SMS : "sms",
		TEL : "tel",
		CALENDAR : "calendar",
		STOREPICTURE : "storePicture",
		INLINEVIDEO : "inlineVideo"
	};

	// state

	var state = STATES.LOADING;
	var placementType = PLACEMENT_TYPES.INLINE;
	var supportedFeatures = {};
	var isViewable = true;

	var expandProperties = {
		width : 0,
		height : 0,
		useCustomClose : false,
		isModal : true
	};

	var orientationProperties = {
		allowOrientationChange : true,
		forceOrientation : ORIENTATION_PROPERTIES_FORCE_ORIENTATION.NONE
	};

	var resizeProperties = {
		width : 2,
		height : 3,
		customClosePosition : RESIZE_PROPERTIES_CUSTOM_CLOSE_POSITION.TOP_LEFT,
		offsetX : 1,
		offsetY : 4,
		allowOffscreen : false
	};

	var currentPosition = {
		x : 0,
		y : 0,
		width : 0,
		height : 0
	};

	var defaultPosition = {
		x : 0,
		y : 0,
		width : 0,
		height : 0
	};

	var maxSize = {
		width : 0,
		height : 0
	};

	var screenSize = {
		width : 0,
		height : 0
	};

	var currentOrientation = 0;

	var listeners = {};

	/***************************************************************************
	 * "official" API: methods called by creative
	 **************************************************************************/

	 mraid.addEventListener = function(event, listener) {
	 	console.log('mraid.addEventListener ' + event + ': ' + String(listener));
	 	if (!event || !listener) {
	 		mraid.fireErrorEvent('Both event and listener are required.', 'addEventListener');
	 		return;
	 	}
	 	if (!contains(event, EVENTS)) {
	 		mraid.fireErrorEvent('Unknown MRAID event: ' + event, 'addEventListener');
	 		return;
	 	}
	 	var listenersForEvent = listeners[event] = listeners[event] || [];
		// check to make sure that the listener isn't already registered
		for (var i = 0; i < listenersForEvent.length; i++) {
			var str1 = String(listener);
			var str2 = String(listenersForEvent[i]);
			if (listener === listenersForEvent[i] || str1 === str2) {
				console.log('listener ' + str1 + ' is already registered for event ' + event);
				return;
			}
		}
		listenersForEvent.push(listener);
	};

	mraid.createCalendarEvent = function(parameters) {
		console.log("mraid.createCalendarEvent with " + parameters);
		mraidbridge.createCalendarEvent(JSON.stringify(parameters));
	};

	mraid.close = function() {
		console.log("mraid.close");
		mraidbridge.close();
	};

	mraid.expand = function(url) {
		if (url === undefined) {
			url = null;
			console.log("mraid.expand (1-part)");
		} else {
			console.log("mraid.expand " + url);
		}
		mraidbridge.expand(
				url,
				expandProperties.useCustomClose,
				orientationProperties.allowOrientationChange,
				orientationProperties.forceOrientation);
	};

	mraid.getCurrentPosition = function() {
		console.log("mraid.getCurrentPosition");
		return currentPosition;
	};

	mraid.getDefaultPosition = function() {
		console.log("mraid.getDefaultPosition");
		return defaultPosition;
	};

	mraid.getExpandProperties = function() {
		console.log("mraid.getExpandProperties");
		return expandProperties;
	};

	mraid.getMaxSize = function() {
		console.log("mraid.getMaxSize");
		return maxSize;
	};

	mraid.getOrientationProperties = function() {
		console.log("mraid.getOrientationProperties");
		return orientationProperties;
	};

	mraid.getPlacementType = function() {
		console.log("mraid.getPlacementType");
		return placementType;
	};

	mraid.getResizeProperties = function() {
		console.log("mraid.getResizeProperties");
		return resizeProperties;
	};

	mraid.getScreenSize = function() {
		console.log("mraid.getScreenSize");
		return screenSize;
	};

	mraid.getState = function() {
		console.log("mraid.getState");
		return state;
	};

	mraid.getVersion = function() {
		console.log("mraid.getVersion");
		return VERSION;
	};

	mraid.isViewable = function() {
		console.log("mraid.isViewable");
		return isViewable;
	};

	mraid.open = function(url) {
		console.log("mraid.open " + url);
		// var callString = "mraid://open?url=" + encodeURIComponent(url);
		mraidbridge.open(url);
	};

	mraid.playVideo = function(url) {
		console.log("mraid.playVideo " + url);
		var callString = "mraid://playVideo?url=" + encodeURIComponent(url);
		mraidbridge.playVideo(url);
	};

	mraid.removeEventListener = function(event, listener) {
		console.log('mraid.removeEventListener ' + event + ' : ' + String(listener));
		if (!event) {
			mraid.fireErrorEvent('Event is required.', 'removeEventListener');
			return;
		} 
		if (!contains(event, EVENTS)) {
			mraid.fireErrorEvent('Unknown MRAID event: ' + event, 'removeEventListener');
			return;
		}
		if (listeners.hasOwnProperty(event)) {
			if (listener) {
				var listenersForEvent = listeners[event];
				// try to find the given listener
				var len = listenersForEvent.length;
				for (var i = 0; i < len; i++) {
					var registeredListener = listenersForEvent[i];
					var str1 = String(listener);
					var str2 = String(registeredListener);
					if (listener === registeredListener || str1 === str2) {
						listenersForEvent.splice(i, 1);
						break;
					}
				}
				if (i === len) {
					console.log('listener ' + str1 + ' not found for event ' + event);
				}
				if (listenersForEvent.length === 0) {
					delete listeners[event];
				}
			} else {
				// no listener to remove was provided, so remove all listeners for given event
				delete listeners[event];
			}
		} else {
			console.log('no listeners registered for event ' + event);
		}
	};

	mraid.resize = function() {
		console.log("mraid.resize");
		mraidbridge.resize();
	};
	
	mraid.setExpandProperties = function(properties) {
		console.log('mraid.setExpandProperties');

		// TODO validate all the properties

		// expandProperties contains 3 read-write properties: width, height, and useCustomClose;
		// the isModal property is read-only
		var rwProps = [ 'width', 'height', 'useCustomClose' ];
		for (var i = 0; i < rwProps.length; i++) {
			var propname = rwProps[i];
			if (properties.hasOwnProperty(propname)) {
				expandProperties[propname] = properties[propname];
			}
		}
		mraidbridge.setExpandProperties(
				expandProperties.width,
				expandProperties.height,
				expandProperties.useCustomClose,
				expandProperties.isModal);
	};

	mraid.setOrientationProperties = function(properties) {
		console.log('mraid.setOrientationProperties');

		// TODO validate all the properties

		// orientationProperties contains 2 read-write properties: allowOrientationChange and forceOrientation
		var rwProps = [ 'allowOrientationChange', 'forceOrientation' ];
		for (var i = 0; i < rwProps.length; i++) {
			var propname = rwProps[i];
			if (properties.hasOwnProperty(propname)) {
				orientationProperties[propname] = properties[propname];
			}
		}
		mraidbridge.setOrientationProperties(
				orientationProperties.allowOrientationChange,
				orientationProperties.forceOrientation);
	};

	mraid.setResizeProperties = function(properties) {
		console.log("mraid.setResizeProperties");

		// TODO validate all the properties

		// resizeProperties contains 6 read-write properties:
		// width, height, customClosePosition, offsetX, offsetY, allowOffscreen
		var rwProps = [ 'width', 'height', 'customClosePosition', 'offsetX', 'offsetY', 'allowOffscreen' ];
		for (var i = 0; i < rwProps.length; i++) {
			var propname = rwProps[i];
			if (properties.hasOwnProperty(propname)) {
				resizeProperties[propname] = properties[propname];
			}
		}
		mraidbridge.setResizeProperties(
				resizeProperties.width,
				resizeProperties.height,
				resizeProperties.customClosePosition,
				resizeProperties.offsetX,
				resizeProperties.offsetY,
				resizeProperties.allowOffscreen);
	};

	mraid.storePicture = function(url) {
		console.log("mraid.storePicture " + url);
		// var callString = "mraid://storePicture?url=" + encodeURIComponent(url);
		mraidbridge.storePicture(url);
	};

	mraid.supports = function(feature) {
		console.log("mraid.supports " + feature + " " + supportedFeatures[feature]);
		return supportedFeatures[feature];
	};

	mraid.useCustomClose = function(useCustomClose) {
		console.log("mraid.useCustomClose " + useCustomClose);
		var property = {
			useCustomClose : useCustomClose
		};
		mraid.setExpandProperties(property);
	};

	/***************************************************************************
	 * helper methods called by SDK
	 **************************************************************************/

	// setters to change state
	mraid.setCurrentPosition = function(x, y, width, height) {
		console.log("mraid.setCurrentPosition " + x + "," + y + "," + width + "," + height);
		var previousPosition = currentPosition;
		currentPosition.x = x;
		currentPosition.y = y;
		currentPosition.width = width;
		currentPosition.height = height;
		// fire sizeChanged event if the size of the position has changed
		if (previousPosition.width !== currentPosition.width || previousPosition.height !== currentPosition.height) {
			mraid.fireSizeChangeEvent(currentPosition.width, currentPosition.height);
		}
	};

	mraid.setDefaultPosition = function(x, y, width, height) {
		console.log("mraid.setDefaultPosition " + x + "," + y + "," + width + "," + height);
		defaultPosition.x = x;
		defaultPosition.y = y;
		defaultPosition.width = width;
		defaultPosition.height = height;
	};
	
	mraid.setExpandSize = function(width, height) {
		console.log('mraid.setExpandSize ' + width + 'x' + height);
		expandProperties.width = width;
		expandProperties.height = height;
	};

	mraid.setMaxSize = function(width, height) {
		console.log("mraid.setMaxSize " + width + "x" + height);
		maxSize.width = width;
		maxSize.height = height;
	};

	mraid.setPlacementType = function(pt) {
		console.log("mraid.setPlacementType " + pt);
		placementType = pt;
	};

	mraid.setScreenSize = function(width, height) {
		console.log("mraid.setScreenSize " + width + "x" + height);
		screenSize.width = width;
		screenSize.height = height;
	};

	mraid.setState = function(newState) {
		console.log("mraid.setState " + newState);
		state = newState;
	};

	mraid.setSupports = function(feature, supported) {
		console.log("mraid.setSupports " + feature + " " + supported);
		supportedFeatures[feature] = supported;
	};

	mraid.setViewable = function(viewable) {
		console.log("mraid.setViewable " + viewable);
		if (isViewable !== viewable) {
			isViewable = viewable;
			mraid.fireViewableChangeEvent(isViewable);
		}
	};

	// methods to fire events

	mraid.fireErrorEvent = function(message, action) {
		console.log('mraid.fireErrorEvent ' + message + ' ' + action);
		fireEvent(mraid.EVENTS.ERROR, message, action);
	};

	mraid.fireReadyEvent = function() {
		console.log('mraid.fireReadyEvent');
		fireEvent(mraid.EVENTS.READY);
	};

	mraid.fireSizeChangeEvent = function(width, height) {
		console.log('mraid.fireSizeChangeEvent ' + width + 'x' + height);
		fireEvent(mraid.EVENTS.SIZECHANGE, width, height);
	};

	mraid.fireStateChangeEvent = function(state) {
		console.log('mraid.fireStateChangeEvent ' + state);
		fireEvent(mraid.EVENTS.STATECHANGE, state);
	};

	mraid.fireViewableChangeEvent = function(isViewable) {
		console.log('mraid.fireViewableChangeEvent ' + isViewable);
		fireEvent(mraid.EVENTS.VIEWABLECHANGE, isViewable);
	};

	// internal helper methods

	var fireEvent = function(event) {
		var args = Array.prototype.slice.call(arguments);
		args.shift();
		console.log('fireEvent ' + event + ' [' + args.toString() + ']');
		var eventListeners = listeners[event];
		if (eventListeners) {
			var len = eventListeners.length;
			console.log(len + ' listener(s) found');
			for (var i = 0; i < len; i++) {
				eventListeners[i].apply(null, args);
			}
		} else {
			console.log('no listeners found');
		}
	};

	var contains = function(value, array) {
		for (var i in array) {
			if (array[i] === value) {
				return true;
			}
		}
		return false;
	};

	mraid.dumpListeners = function() {
		var nEvents = Object.keys(listeners).length
		console.log('dumping listeners (' + nEvents + ' events)');
		for (var event in listeners) {
			var eventListeners = listeners[event];
			console.log('  ' + event + ' contains ' + eventListeners.length + ' listeners');
			for (var i = 0; i < eventListeners.length; i++) {
				console.log('    ' +  eventListeners[i]);
			}
		}
	};

}());
