// 
// Decompiled by Procyon v0.5.30
// 

package de.fastr.phonegap.plugins;

import org.json.JSONException;
import org.json.JSONArray;
import org.apache.cordova.CordovaResourceApi;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.io.FileNotFoundException;
import java.io.File;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.io.FileInputStream;
import android.net.Uri;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;

public class md5chksum extends CordovaPlugin
{
    private boolean file(final String s, final CallbackContext callbackContext) {
        final CordovaResourceApi resourceApi = this.webView.getResourceApi();
        final Uri parse = Uri.parse(s);
        Label_0096: {
            if (parse.getScheme() == null) {
                break Label_0096;
            }
            Uri fromFile = parse;
            while (true) {
                final Uri remapUri = resourceApi.remapUri(fromFile);
                final File mapUriToFile = resourceApi.mapUriToFile(remapUri);
                final byte[] array = new byte[4096];
                try {
                    final FileInputStream fileInputStream = new FileInputStream(mapUriToFile);
                    final MessageDigest instance = MessageDigest.getInstance("md5");
                    while (true) {
                        final int read = fileInputStream.read(array);
                        if (read <= 0) {
                            break;
                        }
                        instance.update(array, 0, read);
                    }
                    fileInputStream.close();
                    final String string = "0000000000000000000000000000000" + new BigInteger(1, instance.digest()).toString(16);
                    callbackContext.success(string.substring(-32 + string.length(), string.length()));
                    return true;
                    fromFile = Uri.fromFile(new File(s));
                }
                catch (FileNotFoundException ex) {
                    callbackContext.error("File not found" + remapUri.toString());
                    return false;
                }
                catch (NoSuchAlgorithmException ex2) {
                    callbackContext.error("No MD5-Implementation Found");
                    return false;
                }
                catch (IOException ex3) {
                    callbackContext.error("IO Error while processing MD5");
                    return false;
                }
            }
        }
    }
    
    private void runFile(final String s, final CallbackContext callbackContext) {
        this.cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                md5chksum.this.file(s, callbackContext);
            }
        });
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        if (s.equals("file")) {
            this.runFile(jsonArray.getString(0), callbackContext);
            return true;
        }
        return false;
    }
}
