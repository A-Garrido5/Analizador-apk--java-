// 
// Decompiled by Procyon v0.5.30
// 

package in.edelworks.sharedpreferences;

import android.content.Context;
import org.json.JSONException;
import android.app.Activity;
import org.apache.cordova.CallbackContext;
import org.json.JSONArray;
import android.content.SharedPreferences$Editor;
import android.content.SharedPreferences;
import org.apache.cordova.CordovaPlugin;

public class Sharedpreferences extends CordovaPlugin
{
    public static final String CLEAR = "clear";
    public static final String GET_BOOLEAN = "getBoolean";
    public static final String GET_FLOAT = "getFloat";
    public static final String GET_INT = "getInt";
    public static final String GET_LONG = "getLong";
    public static final String GET_SHARED_PREFERENCES = "getSharedPreferences";
    public static final String GET_STRING = "getString";
    public static final String[] MODE_ARRAY;
    public static String PREF_FILE;
    public static final String PUT_BOOLEAN = "putBoolean";
    public static final String PUT_FLOAT = "putFloat";
    public static final String PUT_INT = "putInt";
    public static final String PUT_LONG = "putLong";
    public static final String PUT_STRING = "putString";
    public static final String REMOVE = "remove";
    public static final String SHARED_PREFERENCES = "SharedPreferences";
    SharedPreferences SharedPref;
    SharedPreferences$Editor editor;
    
    static {
        Sharedpreferences.PREF_FILE = "";
        MODE_ARRAY = new String[] { "MODE_APPEND", "MODE_PRIVATE" };
    }
    
    public static boolean in_array(final String[] array, final String s) {
        for (int i = 0; i < array.length; ++i) {
            if (array[i].equals(s)) {
                return true;
            }
        }
        return false;
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        if ("getSharedPreferences".equals(s)) {
            Sharedpreferences.PREF_FILE = jsonArray.getString(0);
            final String string = jsonArray.getString(1);
            final Activity activity = this.cordova.getActivity();
            if (in_array(Sharedpreferences.MODE_ARRAY, string)) {
                while (true) {
                    Label_0113: {
                        if (!string.equals("MODE_APPEND")) {
                            break Label_0113;
                        }
                        try {
                            this.SharedPref = ((Context)activity).getSharedPreferences(Sharedpreferences.PREF_FILE, 32768);
                            callbackContext.success("Shared Preferences Created");
                            return true;
                        }
                        catch (Exception ex) {
                            callbackContext.error("Error creating Shared Preferences" + ex.getMessage());
                            return false;
                        }
                    }
                    if (!string.equals("MODE_PRIVATE")) {
                        continue;
                    }
                    try {
                        this.SharedPref = ((Context)activity).getSharedPreferences(Sharedpreferences.PREF_FILE, 32768);
                        continue;
                    }
                    catch (Exception ex2) {
                        callbackContext.error("Error creating Shared Preferences" + ex2.getMessage());
                        return false;
                    }
                    break;
                }
            }
            callbackContext.error("Invalid Mode provided");
            return false;
        }
        if ("putString".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.putString(jsonArray.getString(0), jsonArray.getString(1));
                this.editor.commit();
                callbackContext.success("Added Value " + jsonArray.getString(1) + " to Preferences key " + jsonArray.getString(0));
                return true;
            }
            catch (Exception ex3) {
                callbackContext.error("Error editing Key " + jsonArray.getString(0) + " with value " + jsonArray.getString(1) + ex3.getMessage());
                return false;
            }
        }
        if ("getString".equals(s)) {
            try {
                if (this.SharedPref.contains(jsonArray.getString(0))) {
                    callbackContext.success(this.SharedPref.getString(jsonArray.getString(0), ""));
                    return true;
                }
                callbackContext.error("No data");
                return false;
            }
            catch (Exception ex4) {
                callbackContext.error("Could Not Retreive " + jsonArray.getString(0) + ex4.getMessage());
                return false;
            }
        }
        if ("putBoolean".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.putBoolean(jsonArray.getString(0), jsonArray.getBoolean(1));
                this.editor.commit();
                callbackContext.success("Added Value " + jsonArray.getBoolean(1) + " to Preferences key " + jsonArray.getString(0));
                return true;
            }
            catch (Exception ex5) {
                callbackContext.error("Error editing Key " + jsonArray.getString(0) + " with value " + jsonArray.getBoolean(1) + ex5.getMessage());
                return false;
            }
        }
        if ("getBoolean".equals(s)) {
            try {
                if (this.SharedPref.contains(jsonArray.getString(0))) {
                    if (Boolean.valueOf(this.SharedPref.getBoolean(jsonArray.getString(0), false)).equals(true)) {
                        callbackContext.success(1);
                        return true;
                    }
                    callbackContext.success(0);
                    return true;
                }
            }
            catch (Exception ex6) {
                callbackContext.error("Could Not Retreive " + jsonArray.getString(0) + ex6.getMessage());
                return false;
            }
            callbackContext.error("No data");
            return false;
        }
        if ("putInt".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.putInt(jsonArray.getString(0), jsonArray.getInt(1));
                this.editor.commit();
                callbackContext.success("Added Value " + jsonArray.getInt(1) + " to Preferences key " + jsonArray.getString(0));
                return true;
            }
            catch (Exception ex7) {
                callbackContext.error("Error editing Key " + jsonArray.getString(0) + " with value " + jsonArray.getInt(1) + ex7.getMessage());
                return false;
            }
        }
        if ("getInt".equals(s)) {
            try {
                if (this.SharedPref.contains(jsonArray.getString(0))) {
                    callbackContext.success(Integer.valueOf(this.SharedPref.getInt(jsonArray.getString(0), 0)));
                    return true;
                }
                callbackContext.error("No data");
                return false;
            }
            catch (Exception ex8) {
                callbackContext.error("Could Not Retreive " + jsonArray.getString(0) + ex8.getMessage());
                return false;
            }
        }
        if ("putLong".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.putLong(jsonArray.getString(0), jsonArray.getLong(1));
                this.editor.commit();
                callbackContext.success("Added Value " + jsonArray.getLong(1) + " to Preferences key " + jsonArray.getString(0));
                return true;
            }
            catch (Exception ex9) {
                callbackContext.error("Error editing Key " + jsonArray.getString(0) + " with value " + jsonArray.getLong(1) + ex9.getMessage());
                return false;
            }
        }
        if ("getLong".equals(s)) {
            try {
                if (this.SharedPref.contains(jsonArray.getString(0))) {
                    callbackContext.success(Long.valueOf(this.SharedPref.getLong(jsonArray.getString(0), 0L)).toString());
                    return true;
                }
                callbackContext.error("No data");
                return false;
            }
            catch (Exception ex10) {
                callbackContext.error("Could Not Retreive " + jsonArray.getString(0) + ex10.getMessage());
                return false;
            }
        }
        if ("remove".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.remove(jsonArray.getString(0));
                this.editor.commit();
                callbackContext.success("Removed Value from Key " + jsonArray.getString(0));
                return true;
            }
            catch (Exception ex11) {
                callbackContext.error("Error editing Key " + jsonArray.getString(0) + " with value " + jsonArray.getLong(1) + ex11.getMessage());
                return false;
            }
        }
        if ("clear".equals(s)) {
            this.editor = this.SharedPref.edit();
            try {
                this.editor.clear();
                this.editor.commit();
                callbackContext.success("Cleared preference File ");
                return true;
            }
            catch (Exception ex12) {
                callbackContext.error("Could Not Clear Shared preference File " + ex12.getMessage());
                return false;
            }
        }
        callbackContext.error("Invalid Action");
        return false;
    }
}
