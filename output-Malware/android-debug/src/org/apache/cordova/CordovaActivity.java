// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import java.util.Map;
import android.view.MenuItem;
import org.json.JSONException;
import org.json.JSONObject;
import android.view.Menu;
import android.os.Build$VERSION;
import android.util.Log;
import android.os.Bundle;
import android.content.res.Configuration;
import android.content.Intent;
import java.util.Locale;
import java.util.List;
import android.content.DialogInterface;
import android.content.DialogInterface$OnClickListener;
import android.content.Context;
import android.app.AlertDialog$Builder;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import java.util.ArrayList;
import android.app.Activity;

public class CordovaActivity extends Activity
{
    private static int ACTIVITY_EXITING;
    private static int ACTIVITY_RUNNING;
    private static int ACTIVITY_STARTING;
    public static String TAG;
    protected CordovaWebView appView;
    protected CordovaInterfaceImpl cordovaInterface;
    protected boolean immersiveMode;
    protected boolean keepRunning;
    protected String launchUrl;
    protected ArrayList<PluginEntry> pluginEntries;
    protected CordovaPreferences preferences;
    
    static {
        CordovaActivity.TAG = "CordovaActivity";
        CordovaActivity.ACTIVITY_STARTING = 0;
        CordovaActivity.ACTIVITY_RUNNING = 1;
        CordovaActivity.ACTIVITY_EXITING = 2;
    }
    
    public CordovaActivity() {
        this.keepRunning = true;
    }
    
    protected void createViews() {
        this.appView.getView().setId(100);
        this.appView.getView().setLayoutParams((ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-1, -1));
        this.setContentView(this.appView.getView());
        if (this.preferences.contains("BackgroundColor")) {
            this.appView.getView().setBackgroundColor(this.preferences.getInteger("BackgroundColor", -16777216));
        }
        this.appView.getView().requestFocusFromTouch();
    }
    
    public void displayError(final String s, final String s2, final String s3, final boolean b) {
        this.runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                try {
                    final AlertDialog$Builder alertDialog$Builder = new AlertDialog$Builder((Context)CordovaActivity.this);
                    alertDialog$Builder.setMessage((CharSequence)s2);
                    alertDialog$Builder.setTitle((CharSequence)s);
                    alertDialog$Builder.setCancelable(false);
                    alertDialog$Builder.setPositiveButton((CharSequence)s3, (DialogInterface$OnClickListener)new DialogInterface$OnClickListener() {
                        public void onClick(final DialogInterface dialogInterface, final int n) {
                            dialogInterface.dismiss();
                            if (b) {
                                CordovaActivity.this.finish();
                            }
                        }
                    });
                    alertDialog$Builder.create();
                    alertDialog$Builder.show();
                }
                catch (Exception ex) {
                    CordovaActivity.this.finish();
                }
            }
        });
    }
    
    protected void init() {
        this.appView = this.makeWebView();
        this.createViews();
        if (!this.appView.isInitialized()) {
            this.appView.init(this.cordovaInterface, this.pluginEntries, this.preferences);
        }
        this.cordovaInterface.onCordovaInit(this.appView.getPluginManager());
        if ("media".equals(this.preferences.getString("DefaultVolumeStream", "").toLowerCase(Locale.ENGLISH))) {
            this.setVolumeControlStream(3);
        }
    }
    
    protected void loadConfig() {
        final ConfigXmlParser parser = new ConfigXmlParser();
        parser.parse((Context)this);
        (this.preferences = parser.getPreferences()).setPreferencesBundle(this.getIntent().getExtras());
        this.launchUrl = parser.getLaunchUrl();
        this.pluginEntries = parser.getPluginEntries();
        Config.parser = parser;
    }
    
    public void loadUrl(final String s) {
        if (this.appView == null) {
            this.init();
        }
        this.keepRunning = this.preferences.getBoolean("KeepRunning", true);
        this.appView.loadUrlIntoView(s, true);
    }
    
    protected CordovaInterfaceImpl makeCordovaInterface() {
        return new CordovaInterfaceImpl(this) {
            @Override
            public Object onMessage(final String s, final Object o) {
                return CordovaActivity.this.onMessage(s, o);
            }
        };
    }
    
    protected CordovaWebView makeWebView() {
        return new CordovaWebViewImpl(this.makeWebViewEngine());
    }
    
    protected CordovaWebViewEngine makeWebViewEngine() {
        return CordovaWebViewImpl.createEngine((Context)this, this.preferences);
    }
    
    protected void onActivityResult(final int n, final int n2, final Intent intent) {
        LOG.d(CordovaActivity.TAG, "Incoming Result. Request code = " + n);
        super.onActivityResult(n, n2, intent);
        this.cordovaInterface.onActivityResult(n, n2, intent);
    }
    
    public void onConfigurationChanged(final Configuration configuration) {
        super.onConfigurationChanged(configuration);
        if (this.appView != null) {
            final PluginManager pluginManager = this.appView.getPluginManager();
            if (pluginManager != null) {
                pluginManager.onConfigurationChanged(configuration);
            }
        }
    }
    
    public void onCreate(final Bundle bundle) {
        LOG.i(CordovaActivity.TAG, "Apache Cordova native platform version 4.1.1 is starting");
        LOG.d(CordovaActivity.TAG, "CordovaActivity.onCreate()");
        this.loadConfig();
        if (!this.preferences.getBoolean("ShowTitle", false)) {
            this.getWindow().requestFeature(1);
        }
        if (this.preferences.getBoolean("SetFullscreen", false)) {
            Log.d(CordovaActivity.TAG, "The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.");
            this.preferences.set("Fullscreen", true);
        }
        if (this.preferences.getBoolean("Fullscreen", false)) {
            if (Build$VERSION.SDK_INT >= 19) {
                this.immersiveMode = true;
            }
            else {
                this.getWindow().setFlags(1024, 1024);
            }
        }
        else {
            this.getWindow().setFlags(2048, 2048);
        }
        super.onCreate(bundle);
        this.cordovaInterface = this.makeCordovaInterface();
        if (bundle != null) {
            this.cordovaInterface.restoreInstanceState(bundle);
        }
    }
    
    public boolean onCreateOptionsMenu(final Menu menu) {
        if (this.appView != null) {
            this.appView.getPluginManager().postMessage("onCreateOptionsMenu", menu);
        }
        return super.onCreateOptionsMenu(menu);
    }
    
    public void onDestroy() {
        LOG.d(CordovaActivity.TAG, "CordovaActivity.onDestroy()");
        super.onDestroy();
        if (this.appView != null) {
            this.appView.handleDestroy();
        }
    }
    
    public Object onMessage(final String s, final Object o) {
        while (true) {
            Label_0052: {
                if (!"onReceivedError".equals(s)) {
                    break Label_0052;
                }
                final JSONObject jsonObject = (JSONObject)o;
                try {
                    this.onReceivedError(jsonObject.getInt("errorCode"), jsonObject.getString("description"), jsonObject.getString("url"));
                    return null;
                }
                catch (JSONException ex) {
                    ex.printStackTrace();
                    return null;
                }
            }
            if ("exit".equals(s)) {
                this.finish();
                continue;
            }
            continue;
        }
    }
    
    protected void onNewIntent(final Intent intent) {
        super.onNewIntent(intent);
        if (this.appView != null) {
            this.appView.onNewIntent(intent);
        }
    }
    
    public boolean onOptionsItemSelected(final MenuItem menuItem) {
        if (this.appView != null) {
            this.appView.getPluginManager().postMessage("onOptionsItemSelected", menuItem);
        }
        return true;
    }
    
    protected void onPause() {
        super.onPause();
        LOG.d(CordovaActivity.TAG, "Paused the activity.");
        if (this.appView != null) {
            this.appView.handlePause(this.keepRunning || this.cordovaInterface.activityResultCallback != null);
        }
    }
    
    public boolean onPrepareOptionsMenu(final Menu menu) {
        if (this.appView != null) {
            this.appView.getPluginManager().postMessage("onPrepareOptionsMenu", menu);
        }
        return true;
    }
    
    public void onReceivedError(final int n, final String s, final String s2) {
        final String string = this.preferences.getString("errorUrl", null);
        if (string != null && !s2.equals(string) && this.appView != null) {
            this.runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    CordovaActivity.this.appView.showWebPage(string, false, true, null);
                }
            });
            return;
        }
        this.runOnUiThread((Runnable)new Runnable() {
            final /* synthetic */ boolean val$exit = n != -2;
            
            @Override
            public void run() {
                if (this.val$exit) {
                    CordovaActivity.this.appView.getView().setVisibility(8);
                    CordovaActivity.this.displayError("Application Error", s + " (" + s2 + ")", "OK", this.val$exit);
                }
            }
        });
    }
    
    protected void onResume() {
        super.onResume();
        LOG.d(CordovaActivity.TAG, "Resumed the activity.");
        if (this.appView == null) {
            return;
        }
        this.getWindow().getDecorView().requestFocus();
        this.appView.handleResume(this.keepRunning);
    }
    
    protected void onSaveInstanceState(final Bundle bundle) {
        this.cordovaInterface.onSaveInstanceState(bundle);
        super.onSaveInstanceState(bundle);
    }
    
    protected void onStart() {
        super.onStart();
        LOG.d(CordovaActivity.TAG, "Started the activity.");
        if (this.appView == null) {
            return;
        }
        this.appView.handleStart();
    }
    
    protected void onStop() {
        super.onStop();
        LOG.d(CordovaActivity.TAG, "Stopped the activity.");
        if (this.appView == null) {
            return;
        }
        this.appView.handleStop();
    }
    
    public void onWindowFocusChanged(final boolean b) {
        super.onWindowFocusChanged(b);
        if (b && this.immersiveMode) {
            this.getWindow().getDecorView().setSystemUiVisibility(5894);
        }
    }
    
    public void startActivityForResult(final Intent intent, final int activityResultRequestCode, final Bundle bundle) {
        this.cordovaInterface.setActivityResultRequestCode(activityResultRequestCode);
        super.startActivityForResult(intent, activityResultRequestCode, bundle);
    }
}
