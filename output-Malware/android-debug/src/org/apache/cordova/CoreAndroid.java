// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import java.util.Map;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.telephony.TelephonyManager;
import android.content.Intent;
import android.content.Context;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;

class CoreAndroid extends CordovaPlugin
{
    public static final String PLUGIN_NAME = "CoreAndroid";
    protected static final String TAG = "CordovaApp";
    private CallbackContext messageChannel;
    private BroadcastReceiver telephonyReceiver;
    
    private void initTelephonyReceiver() {
        final IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("android.intent.action.PHONE_STATE");
        this.telephonyReceiver = new BroadcastReceiver() {
            public void onReceive(final Context context, final Intent intent) {
                if (intent != null && intent.getAction().equals("android.intent.action.PHONE_STATE") && intent.hasExtra("state")) {
                    final String stringExtra = intent.getStringExtra("state");
                    if (stringExtra.equals(TelephonyManager.EXTRA_STATE_RINGING)) {
                        LOG.i("CordovaApp", "Telephone RINGING");
                        CoreAndroid.this.webView.getPluginManager().postMessage("telephone", "ringing");
                    }
                    else {
                        if (stringExtra.equals(TelephonyManager.EXTRA_STATE_OFFHOOK)) {
                            LOG.i("CordovaApp", "Telephone OFFHOOK");
                            CoreAndroid.this.webView.getPluginManager().postMessage("telephone", "offhook");
                            return;
                        }
                        if (stringExtra.equals(TelephonyManager.EXTRA_STATE_IDLE)) {
                            LOG.i("CordovaApp", "Telephone IDLE");
                            CoreAndroid.this.webView.getPluginManager().postMessage("telephone", "idle");
                        }
                    }
                }
            }
        };
        this.webView.getContext().registerReceiver(this.telephonyReceiver, intentFilter);
    }
    
    private void sendEventMessage(final String s) {
        final JSONObject jsonObject = new JSONObject();
        while (true) {
            try {
                jsonObject.put("action", (Object)s);
                final PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, jsonObject);
                pluginResult.setKeepCallback(true);
                if (this.messageChannel != null) {
                    this.messageChannel.sendPluginResult(pluginResult);
                }
            }
            catch (JSONException ex) {
                LOG.e("CordovaApp", "Failed to create event message", (Throwable)ex);
                continue;
            }
            break;
        }
    }
    
    public void backHistory() {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                CoreAndroid.this.webView.backHistory();
            }
        });
    }
    
    public void clearCache() {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                CoreAndroid.this.webView.clearCache(true);
            }
        });
    }
    
    public void clearHistory() {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                CoreAndroid.this.webView.clearHistory();
            }
        });
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext messageChannel) throws JSONException {
        while (true) {
            final PluginResult.Status ok = PluginResult.Status.OK;
            while (true) {
                Label_0085: {
                    try {
                        if (s.equals("clearCache")) {
                            this.clearCache();
                        }
                        else {
                            if (!s.equals("show")) {
                                break Label_0085;
                            }
                            this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                                @Override
                                public void run() {
                                    CoreAndroid.this.webView.getPluginManager().postMessage("spinner", "stop");
                                }
                            });
                        }
                        messageChannel.sendPluginResult(new PluginResult(ok, ""));
                        return true;
                    }
                    catch (JSONException ex) {
                        messageChannel.sendPluginResult(new PluginResult(PluginResult.Status.JSON_EXCEPTION));
                        return false;
                    }
                }
                if (s.equals("loadUrl")) {
                    this.loadUrl(jsonArray.getString(0), jsonArray.optJSONObject(1));
                    continue;
                }
                if (s.equals("cancelLoadUrl")) {
                    continue;
                }
                if (s.equals("clearHistory")) {
                    this.clearHistory();
                    continue;
                }
                if (s.equals("backHistory")) {
                    this.backHistory();
                    continue;
                }
                if (s.equals("overrideButton")) {
                    this.overrideButton(jsonArray.getString(0), jsonArray.getBoolean(1));
                    continue;
                }
                if (s.equals("overrideBackbutton")) {
                    this.overrideBackbutton(jsonArray.getBoolean(0));
                    continue;
                }
                if (s.equals("exitApp")) {
                    this.exitApp();
                    continue;
                }
                if (s.equals("messageChannel")) {
                    break;
                }
                continue;
            }
        }
        this.messageChannel = messageChannel;
        return true;
    }
    
    public void exitApp() {
        this.webView.getPluginManager().postMessage("exit", null);
    }
    
    public void fireJavascriptEvent(final String s) {
        this.sendEventMessage(s);
    }
    
    public boolean isBackbuttonOverridden() {
        return this.webView.isButtonPlumbedToJs(4);
    }
    
    public void loadUrl(final String s, final JSONObject jsonObject) throws JSONException {
        LOG.d("App", "App.loadUrl(" + s + "," + jsonObject + ")");
        final HashMap<String, Boolean> hashMap = new HashMap<String, Boolean>();
        boolean boolean1 = false;
        boolean boolean2 = false;
        int int1 = 0;
        if (jsonObject != null) {
            final JSONArray names = jsonObject.names();
            for (int i = 0; i < names.length(); ++i) {
                final String string = names.getString(i);
                if (string.equals("wait")) {
                    int1 = jsonObject.getInt(string);
                }
                else if (string.equalsIgnoreCase("openexternal")) {
                    boolean2 = jsonObject.getBoolean(string);
                }
                else if (string.equalsIgnoreCase("clearhistory")) {
                    boolean1 = jsonObject.getBoolean(string);
                }
                else {
                    final Object value = jsonObject.get(string);
                    if (value != null) {
                        if (((String)value).getClass().equals(String.class)) {
                            hashMap.put(string, (Boolean)value);
                        }
                        else if (((String)value).getClass().equals(Boolean.class)) {
                            hashMap.put(string, (Boolean)value);
                        }
                        else if (((Boolean)value).getClass().equals(Integer.class)) {
                            hashMap.put(string, (Boolean)value);
                        }
                    }
                }
            }
        }
        while (true) {
            if (int1 <= 0) {
                break Label_0274;
            }
            try {
                // monitorenter(this)
                final long n = int1;
                try {
                    this.wait(n);
                    // monitorexit(this)
                    this.webView.showWebPage(s, boolean2, boolean1, (Map<String, Object>)hashMap);
                }
                finally {
                }
                // monitorexit(this)
            }
            catch (InterruptedException ex) {
                ex.printStackTrace();
                continue;
            }
            break;
        }
    }
    
    @Override
    public void onDestroy() {
        this.webView.getContext().unregisterReceiver(this.telephonyReceiver);
    }
    
    public void overrideBackbutton(final boolean b) {
        LOG.i("App", "WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!");
        this.webView.setButtonPlumbedToJs(4, b);
    }
    
    public void overrideButton(final String s, final boolean b) {
        LOG.i("App", "WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!");
        if (s.equals("volumeup")) {
            this.webView.setButtonPlumbedToJs(24, b);
        }
        else if (s.equals("volumedown")) {
            this.webView.setButtonPlumbedToJs(25, b);
        }
    }
    
    public void pluginInitialize() {
        this.initTelephonyReceiver();
    }
}
