// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.whitelist;

import android.util.Log;
import org.apache.cordova.ConfigXmlParser;
import org.xmlpull.v1.XmlPullParser;
import android.content.Context;
import org.apache.cordova.Whitelist;
import org.apache.cordova.CordovaPlugin;

public class WhitelistPlugin extends CordovaPlugin
{
    private static final String LOG_TAG = "WhitelistPlugin";
    private Whitelist allowedIntents;
    private Whitelist allowedNavigations;
    private Whitelist allowedRequests;
    
    public WhitelistPlugin() {
    }
    
    public WhitelistPlugin(final Context context) {
        this(new Whitelist(), new Whitelist(), null);
        new CustomConfigXmlParser().parse(context);
    }
    
    public WhitelistPlugin(final Whitelist allowedNavigations, final Whitelist allowedIntents, final Whitelist whitelist) {
        Whitelist allowedRequests = whitelist;
        if (allowedRequests == null) {
            allowedRequests = new Whitelist();
            allowedRequests.addWhiteListEntry("file:///*", false);
            allowedRequests.addWhiteListEntry("data:*", false);
        }
        this.allowedNavigations = allowedNavigations;
        this.allowedIntents = allowedIntents;
        this.allowedRequests = allowedRequests;
    }
    
    public WhitelistPlugin(final XmlPullParser xmlPullParser) {
        this(new Whitelist(), new Whitelist(), null);
        new CustomConfigXmlParser().parse(xmlPullParser);
    }
    
    public Whitelist getAllowedIntents() {
        return this.allowedIntents;
    }
    
    public Whitelist getAllowedNavigations() {
        return this.allowedNavigations;
    }
    
    public Whitelist getAllowedRequests() {
        return this.allowedRequests;
    }
    
    public void pluginInitialize() {
        if (this.allowedNavigations == null) {
            this.allowedNavigations = new Whitelist();
            this.allowedIntents = new Whitelist();
            this.allowedRequests = new Whitelist();
            new CustomConfigXmlParser().parse(this.webView.getContext());
        }
    }
    
    public void setAllowedIntents(final Whitelist allowedIntents) {
        this.allowedIntents = allowedIntents;
    }
    
    public void setAllowedNavigations(final Whitelist allowedNavigations) {
        this.allowedNavigations = allowedNavigations;
    }
    
    public void setAllowedRequests(final Whitelist allowedRequests) {
        this.allowedRequests = allowedRequests;
    }
    
    @Override
    public Boolean shouldAllowNavigation(final String s) {
        if (this.allowedNavigations.isUrlWhiteListed(s)) {
            return true;
        }
        return null;
    }
    
    @Override
    public Boolean shouldAllowRequest(final String s) {
        if (Boolean.TRUE == this.shouldAllowNavigation(s)) {
            return true;
        }
        if (this.allowedRequests.isUrlWhiteListed(s)) {
            return true;
        }
        return null;
    }
    
    @Override
    public Boolean shouldOpenExternalUrl(final String s) {
        if (this.allowedIntents.isUrlWhiteListed(s)) {
            return true;
        }
        return null;
    }
    
    private class CustomConfigXmlParser extends ConfigXmlParser
    {
        @Override
        public void handleEndTag(final XmlPullParser xmlPullParser) {
        }
        
        @Override
        public void handleStartTag(final XmlPullParser xmlPullParser) {
            final String name = xmlPullParser.getName();
            if (name.equals("content")) {
                WhitelistPlugin.this.allowedNavigations.addWhiteListEntry(xmlPullParser.getAttributeValue((String)null, "src"), false);
            }
            else if (name.equals("allow-navigation")) {
                final String attributeValue = xmlPullParser.getAttributeValue((String)null, "href");
                if ("*".equals(attributeValue)) {
                    WhitelistPlugin.this.allowedNavigations.addWhiteListEntry("http://*/*", false);
                    WhitelistPlugin.this.allowedNavigations.addWhiteListEntry("https://*/*", false);
                    WhitelistPlugin.this.allowedNavigations.addWhiteListEntry("data:*", false);
                    return;
                }
                WhitelistPlugin.this.allowedNavigations.addWhiteListEntry(attributeValue, false);
            }
            else {
                if (name.equals("allow-intent")) {
                    WhitelistPlugin.this.allowedIntents.addWhiteListEntry(xmlPullParser.getAttributeValue((String)null, "href"), false);
                    return;
                }
                if (name.equals("access")) {
                    final String attributeValue2 = xmlPullParser.getAttributeValue((String)null, "origin");
                    final String attributeValue3 = xmlPullParser.getAttributeValue((String)null, "subdomains");
                    int n;
                    if (xmlPullParser.getAttributeValue((String)null, "launch-external") != null) {
                        n = 1;
                    }
                    else {
                        n = 0;
                    }
                    final int n2 = n;
                    if (attributeValue2 != null) {
                        if (n2 != 0) {
                            Log.w("WhitelistPlugin", "Found <access launch-external> within config.xml. Please use <allow-intent> instead.");
                            WhitelistPlugin.this.allowedIntents.addWhiteListEntry(attributeValue2, attributeValue3 != null && attributeValue3.compareToIgnoreCase("true") == 0);
                            return;
                        }
                        if ("*".equals(attributeValue2)) {
                            WhitelistPlugin.this.allowedRequests.addWhiteListEntry("http://*/*", false);
                            WhitelistPlugin.this.allowedRequests.addWhiteListEntry("https://*/*", false);
                            return;
                        }
                        WhitelistPlugin.this.allowedRequests.addWhiteListEntry(attributeValue2, attributeValue3 != null && attributeValue3.compareToIgnoreCase("true") == 0);
                    }
                }
            }
        }
    }
}
