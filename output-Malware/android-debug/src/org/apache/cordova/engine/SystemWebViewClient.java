// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.engine;

import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.InputStream;
import android.webkit.WebResourceResponse;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager$NameNotFoundException;
import android.net.http.SslError;
import android.webkit.SslErrorHandler;
import org.apache.cordova.ICordovaHttpAuthHandler;
import org.apache.cordova.CordovaHttpAuthHandler;
import android.webkit.HttpAuthHandler;
import org.apache.cordova.LOG;
import android.annotation.TargetApi;
import org.apache.cordova.PluginManager;
import org.apache.cordova.ICordovaClientCertRequest;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.CordovaClientCertRequest;
import android.webkit.ClientCertRequest;
import android.graphics.Bitmap;
import android.webkit.WebView;
import org.apache.cordova.CordovaResourceApi;
import android.os.Build$VERSION;
import android.net.Uri;
import org.apache.cordova.AuthenticationToken;
import java.util.Hashtable;
import android.webkit.WebViewClient;

public class SystemWebViewClient extends WebViewClient
{
    private static final String TAG = "SystemWebViewClient";
    private Hashtable<String, AuthenticationToken> authenticationTokens;
    private boolean doClearHistory;
    boolean isCurrentlyLoading;
    protected final SystemWebViewEngine parentEngine;
    
    public SystemWebViewClient(final SystemWebViewEngine parentEngine) {
        this.doClearHistory = false;
        this.authenticationTokens = new Hashtable<String, AuthenticationToken>();
        this.parentEngine = parentEngine;
    }
    
    private static boolean needsKitKatContentUrlFix(final Uri uri) {
        return Build$VERSION.SDK_INT >= 19 && "content".equals(uri.getScheme());
    }
    
    private static boolean needsSpecialsInAssetUrlFix(final Uri uri) {
        if (CordovaResourceApi.getUriType(uri) == 1) {
            if (uri.getQuery() != null || uri.getFragment() != null) {
                return true;
            }
            if (uri.toString().contains("%")) {
                switch (Build$VERSION.SDK_INT) {
                    default: {
                        return false;
                    }
                    case 14:
                    case 15: {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public void clearAuthenticationTokens() {
        this.authenticationTokens.clear();
    }
    
    public AuthenticationToken getAuthenticationToken(final String s, final String s2) {
        AuthenticationToken authenticationToken = this.authenticationTokens.get(s.concat(s2));
        if (authenticationToken == null) {
            authenticationToken = this.authenticationTokens.get(s);
            if (authenticationToken == null) {
                authenticationToken = this.authenticationTokens.get(s2);
            }
            if (authenticationToken == null) {
                authenticationToken = this.authenticationTokens.get("");
            }
        }
        return authenticationToken;
    }
    
    public void onPageFinished(final WebView webView, final String s) {
        super.onPageFinished(webView, s);
        if (!this.isCurrentlyLoading && !s.startsWith("about:")) {
            return;
        }
        this.isCurrentlyLoading = false;
        if (this.doClearHistory) {
            webView.clearHistory();
            this.doClearHistory = false;
        }
        this.parentEngine.client.onPageFinishedLoading(s);
    }
    
    public void onPageStarted(final WebView webView, final String s, final Bitmap bitmap) {
        super.onPageStarted(webView, s, bitmap);
        this.isCurrentlyLoading = true;
        this.parentEngine.bridge.reset();
        this.parentEngine.client.onPageStarted(s);
    }
    
    @TargetApi(21)
    public void onReceivedClientCertRequest(final WebView webView, final ClientCertRequest clientCertRequest) {
        final PluginManager pluginManager = this.parentEngine.pluginManager;
        if (pluginManager != null && pluginManager.onReceivedClientCertRequest(null, new CordovaClientCertRequest(clientCertRequest))) {
            this.parentEngine.client.clearLoadTimeoutTimer();
            return;
        }
        super.onReceivedClientCertRequest(webView, clientCertRequest);
    }
    
    public void onReceivedError(final WebView webView, final int n, final String s, final String s2) {
        if (!this.isCurrentlyLoading) {
            return;
        }
        LOG.d("SystemWebViewClient", "CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s", n, s, s2);
        if (n == -10) {
            this.parentEngine.client.clearLoadTimeoutTimer();
            if (webView.canGoBack()) {
                webView.goBack();
                return;
            }
            super.onReceivedError(webView, n, s, s2);
        }
        this.parentEngine.client.onReceivedError(n, s, s2);
    }
    
    public void onReceivedHttpAuthRequest(final WebView webView, final HttpAuthHandler httpAuthHandler, final String s, final String s2) {
        final AuthenticationToken authenticationToken = this.getAuthenticationToken(s, s2);
        if (authenticationToken != null) {
            httpAuthHandler.proceed(authenticationToken.getUserName(), authenticationToken.getPassword());
            return;
        }
        final PluginManager pluginManager = this.parentEngine.pluginManager;
        if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(null, new CordovaHttpAuthHandler(httpAuthHandler), s, s2)) {
            this.parentEngine.client.clearLoadTimeoutTimer();
            return;
        }
        super.onReceivedHttpAuthRequest(webView, httpAuthHandler, s, s2);
    }
    
    @TargetApi(8)
    public void onReceivedSslError(final WebView webView, final SslErrorHandler sslErrorHandler, final SslError sslError) {
        final String packageName = this.parentEngine.cordova.getActivity().getPackageName();
        final PackageManager packageManager = this.parentEngine.cordova.getActivity().getPackageManager();
        try {
            if ((0x2 & packageManager.getApplicationInfo(packageName, 128).flags) != 0x0) {
                sslErrorHandler.proceed();
                return;
            }
            super.onReceivedSslError(webView, sslErrorHandler, sslError);
        }
        catch (PackageManager$NameNotFoundException ex) {
            super.onReceivedSslError(webView, sslErrorHandler, sslError);
        }
    }
    
    public AuthenticationToken removeAuthenticationToken(final String s, final String s2) {
        return this.authenticationTokens.remove(s.concat(s2));
    }
    
    public void setAuthenticationToken(final AuthenticationToken authenticationToken, String s, String s2) {
        if (s == null) {
            s = "";
        }
        if (s2 == null) {
            s2 = "";
        }
        this.authenticationTokens.put(s.concat(s2), authenticationToken);
    }
    
    @TargetApi(11)
    public WebResourceResponse shouldInterceptRequest(final WebView webView, final String s) {
        try {
            if (!this.parentEngine.pluginManager.shouldAllowRequest(s)) {
                LOG.w("SystemWebViewClient", "URL blocked by whitelist: " + s);
                return new WebResourceResponse("text/plain", "UTF-8", (InputStream)null);
            }
            final CordovaResourceApi resourceApi = this.parentEngine.resourceApi;
            final Uri parse = Uri.parse(s);
            final Uri remapUri = resourceApi.remapUri(parse);
            if (!parse.equals((Object)remapUri) || needsSpecialsInAssetUrlFix(parse) || needsKitKatContentUrlFix(parse)) {
                final CordovaResourceApi.OpenForReadResult openForRead = resourceApi.openForRead(remapUri, true);
                return new WebResourceResponse(openForRead.mimeType, "UTF-8", openForRead.inputStream);
            }
        }
        catch (IOException ex) {
            if (!(ex instanceof FileNotFoundException)) {
                LOG.e("SystemWebViewClient", "Error occurred while loading a file (returning a 404).", ex);
            }
            return new WebResourceResponse("text/plain", "UTF-8", (InputStream)null);
        }
        return null;
    }
    
    public boolean shouldOverrideUrlLoading(final WebView webView, final String s) {
        return this.parentEngine.client.onNavigationAttempt(s);
    }
}
