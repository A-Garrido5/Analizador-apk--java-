// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.engine;

import android.view.View;
import org.apache.cordova.ICordovaCookieManager;
import android.annotation.SuppressLint;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;
import android.webkit.WebSettings;
import android.webkit.WebSettings$LayoutAlgorithm;
import android.os.Build$VERSION;
import android.annotation.TargetApi;
import android.util.Log;
import android.webkit.WebView;
import android.content.Context;
import org.apache.cordova.CordovaResourceApi;
import android.content.BroadcastReceiver;
import org.apache.cordova.CordovaPreferences;
import org.apache.cordova.PluginManager;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.NativeToJsMessageQueue;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaBridge;
import org.apache.cordova.CordovaWebViewEngine;

public class SystemWebViewEngine implements CordovaWebViewEngine
{
    public static final String TAG = "SystemWebViewEngine";
    protected CordovaBridge bridge;
    protected Client client;
    protected final SystemCookieManager cookieManager;
    protected CordovaInterface cordova;
    protected NativeToJsMessageQueue nativeToJsMessageQueue;
    protected CordovaWebView parentWebView;
    protected PluginManager pluginManager;
    protected CordovaPreferences preferences;
    private BroadcastReceiver receiver;
    protected CordovaResourceApi resourceApi;
    protected final SystemWebView webView;
    
    public SystemWebViewEngine(final Context context, final CordovaPreferences cordovaPreferences) {
        this(new SystemWebView(context), cordovaPreferences);
    }
    
    public SystemWebViewEngine(final SystemWebView systemWebView) {
        this(systemWebView, null);
    }
    
    public SystemWebViewEngine(final SystemWebView webView, final CordovaPreferences preferences) {
        this.preferences = preferences;
        this.webView = webView;
        this.cookieManager = new SystemCookieManager(webView);
    }
    
    @TargetApi(19)
    private void enableRemoteDebugging() {
        try {
            WebView.setWebContentsDebuggingEnabled(true);
        }
        catch (IllegalArgumentException ex) {
            Log.d("SystemWebViewEngine", "You have one job! To turn on Remote Web Debugging! YOU HAVE FAILED! ");
            ex.printStackTrace();
        }
    }
    
    private static void exposeJsInterface(final WebView webView, final CordovaBridge cordovaBridge) {
        if (Build$VERSION.SDK_INT < 17) {
            Log.i("SystemWebViewEngine", "Disabled addJavascriptInterface() bridge since Android version is old.");
            return;
        }
        webView.addJavascriptInterface((Object)new SystemExposedJsApi(cordovaBridge), "_cordovaNative");
    }
    
    @SuppressLint({ "SetJavaScriptEnabled" })
    private void initWebViewSettings() {
    Label_0303_Outer:
        while (true) {
            this.webView.setInitialScale(0);
            this.webView.setVerticalScrollBarEnabled(false);
            final WebSettings settings = this.webView.getSettings();
            settings.setJavaScriptEnabled(true);
            settings.setJavaScriptCanOpenWindowsAutomatically(true);
            settings.setLayoutAlgorithm(WebSettings$LayoutAlgorithm.NORMAL);
            while (true) {
                String userAgentString;
                while (true) {
                    try {
                        final Method method = WebSettings.class.getMethod("setNavDump", Boolean.TYPE);
                        Log.d("SystemWebViewEngine", "CordovaWebView is running on device made by: " + Build.MANUFACTURER);
                        if (Build$VERSION.SDK_INT < 11 && Build.MANUFACTURER.contains("HTC")) {
                            method.invoke(settings, true);
                        }
                        settings.setSaveFormData(false);
                        settings.setSavePassword(false);
                        if (Build$VERSION.SDK_INT >= 16) {
                            settings.setAllowUniversalAccessFromFileURLs(true);
                        }
                        if (Build$VERSION.SDK_INT >= 17) {
                            settings.setMediaPlaybackRequiresUserGesture(false);
                        }
                        final String path = this.webView.getContext().getApplicationContext().getDir("database", 0).getPath();
                        settings.setDatabaseEnabled(true);
                        settings.setDatabasePath(path);
                        if ((0x2 & this.webView.getContext().getApplicationContext().getApplicationInfo().flags) != 0x0 && Build$VERSION.SDK_INT >= 19) {
                            this.enableRemoteDebugging();
                        }
                        settings.setGeolocationDatabasePath(path);
                        settings.setDomStorageEnabled(true);
                        settings.setGeolocationEnabled(true);
                        settings.setAppCacheMaxSize(5242880L);
                        settings.setAppCachePath(path);
                        settings.setAppCacheEnabled(true);
                        userAgentString = settings.getUserAgentString();
                        final String string = this.preferences.getString("OverrideUserAgent", null);
                        if (string != null) {
                            settings.setUserAgentString(string);
                            final IntentFilter intentFilter = new IntentFilter();
                            intentFilter.addAction("android.intent.action.CONFIGURATION_CHANGED");
                            if (this.receiver == null) {
                                this.receiver = new BroadcastReceiver() {
                                    public void onReceive(final Context context, final Intent intent) {
                                        settings.getUserAgentString();
                                    }
                                };
                                this.webView.getContext().registerReceiver(this.receiver, intentFilter);
                            }
                            return;
                        }
                    }
                    catch (NoSuchMethodException ex) {
                        Log.d("SystemWebViewEngine", "We are on a modern version of Android, we will deprecate HTC 2.3 devices in 2.8");
                        continue Label_0303_Outer;
                    }
                    catch (IllegalArgumentException ex2) {
                        Log.d("SystemWebViewEngine", "Doing the NavDump failed with bad arguments");
                        continue Label_0303_Outer;
                    }
                    catch (IllegalAccessException ex3) {
                        Log.d("SystemWebViewEngine", "This should never happen: IllegalAccessException means this isn't Android anymore");
                        continue Label_0303_Outer;
                    }
                    catch (InvocationTargetException ex4) {
                        Log.d("SystemWebViewEngine", "This should never happen: InvocationTargetException means this isn't Android anymore.");
                        continue Label_0303_Outer;
                    }
                    break;
                }
                final String string2 = this.preferences.getString("AppendUserAgent", null);
                if (string2 != null) {
                    settings.setUserAgentString(userAgentString + " " + string2);
                    continue;
                }
                continue;
            }
        }
    }
    
    @Override
    public boolean canGoBack() {
        return this.webView.canGoBack();
    }
    
    @Override
    public void clearCache() {
        this.webView.clearCache(true);
    }
    
    @Override
    public void clearHistory() {
        this.webView.clearHistory();
    }
    
    @Override
    public void destroy() {
        this.webView.chromeClient.destroyLastDialog();
        this.webView.destroy();
        if (this.receiver == null) {
            return;
        }
        try {
            this.webView.getContext().unregisterReceiver(this.receiver);
        }
        catch (Exception ex) {
            Log.e("SystemWebViewEngine", "Error unregistering configuration receiver: " + ex.getMessage(), (Throwable)ex);
        }
    }
    
    @Override
    public ICordovaCookieManager getCookieManager() {
        return this.cookieManager;
    }
    
    @Override
    public CordovaWebView getCordovaWebView() {
        return this.parentWebView;
    }
    
    @Override
    public String getUrl() {
        return this.webView.getUrl();
    }
    
    @Override
    public View getView() {
        return (View)this.webView;
    }
    
    @Override
    public boolean goBack() {
        if (this.webView.canGoBack()) {
            this.webView.goBack();
            return true;
        }
        return false;
    }
    
    @Override
    public void init(final CordovaWebView parentWebView, final CordovaInterface cordova, final Client client, final CordovaResourceApi resourceApi, final PluginManager pluginManager, final NativeToJsMessageQueue nativeToJsMessageQueue) {
        if (this.cordova != null) {
            throw new IllegalStateException();
        }
        if (this.preferences == null) {
            this.preferences = parentWebView.getPreferences();
        }
        this.parentWebView = parentWebView;
        this.cordova = cordova;
        this.client = client;
        this.resourceApi = resourceApi;
        this.pluginManager = pluginManager;
        this.nativeToJsMessageQueue = nativeToJsMessageQueue;
        this.webView.init(this, cordova);
        this.initWebViewSettings();
        nativeToJsMessageQueue.addBridgeMode((NativeToJsMessageQueue.BridgeMode)new NativeToJsMessageQueue.OnlineEventsBridgeMode((NativeToJsMessageQueue.OnlineEventsBridgeMode.OnlineEventsBridgeModeDelegate)new NativeToJsMessageQueue.OnlineEventsBridgeMode.OnlineEventsBridgeModeDelegate() {
            @Override
            public void runOnUiThread(final Runnable runnable) {
                SystemWebViewEngine.this.cordova.getActivity().runOnUiThread(runnable);
            }
            
            @Override
            public void setNetworkAvailable(final boolean networkAvailable) {
                SystemWebViewEngine.this.webView.setNetworkAvailable(networkAvailable);
            }
        }));
        this.bridge = new CordovaBridge(pluginManager, nativeToJsMessageQueue);
        exposeJsInterface(this.webView, this.bridge);
    }
    
    @Override
    public void loadUrl(final String s, final boolean b) {
        this.webView.loadUrl(s);
    }
    
    @Override
    public void setPaused(final boolean b) {
        if (b) {
            this.webView.pauseTimers();
            return;
        }
        this.webView.resumeTimers();
    }
    
    @Override
    public void stopLoading() {
        this.webView.stopLoading();
    }
}
