// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.engine;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import org.apache.cordova.CordovaPlugin;
import android.webkit.WebChromeClient$FileChooserParams;
import android.net.Uri;
import android.webkit.ValueCallback;
import android.util.Log;
import java.util.Arrays;
import android.webkit.PermissionRequest;
import android.webkit.JsPromptResult;
import android.webkit.JsResult;
import android.webkit.WebView;
import android.webkit.GeolocationPermissions$Callback;
import android.webkit.WebStorage$QuotaUpdater;
import android.annotation.TargetApi;
import android.webkit.ConsoleMessage;
import org.apache.cordova.LOG;
import android.os.Build$VERSION;
import android.widget.LinearLayout$LayoutParams;
import android.widget.ProgressBar;
import android.view.ViewGroup$LayoutParams;
import android.widget.RelativeLayout$LayoutParams;
import android.widget.LinearLayout;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import org.apache.cordova.CordovaDialogsHelper;
import android.webkit.WebChromeClient;

public class SystemWebChromeClient extends WebChromeClient
{
    private static final int FILECHOOSER_RESULTCODE = 5173;
    private static final String LOG_TAG = "SystemWebChromeClient";
    private long MAX_QUOTA;
    private CordovaDialogsHelper dialogsHelper;
    private View mCustomView;
    private WebChromeClient$CustomViewCallback mCustomViewCallback;
    private View mVideoProgressView;
    protected final SystemWebViewEngine parentEngine;
    
    public SystemWebChromeClient(final SystemWebViewEngine parentEngine) {
        this.MAX_QUOTA = 104857600L;
        this.parentEngine = parentEngine;
        this.dialogsHelper = new CordovaDialogsHelper(parentEngine.webView.getContext());
    }
    
    public void destroyLastDialog() {
        this.dialogsHelper.destroyLastDialog();
    }
    
    public View getVideoLoadingProgressView() {
        if (this.mVideoProgressView == null) {
            final LinearLayout mVideoProgressView = new LinearLayout(this.parentEngine.getView().getContext());
            mVideoProgressView.setOrientation(1);
            final RelativeLayout$LayoutParams layoutParams = new RelativeLayout$LayoutParams(-2, -2);
            layoutParams.addRule(13);
            mVideoProgressView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
            final ProgressBar progressBar = new ProgressBar(this.parentEngine.getView().getContext());
            final LinearLayout$LayoutParams layoutParams2 = new LinearLayout$LayoutParams(-2, -2);
            layoutParams2.gravity = 17;
            progressBar.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
            mVideoProgressView.addView((View)progressBar);
            this.mVideoProgressView = (View)mVideoProgressView;
        }
        return this.mVideoProgressView;
    }
    
    public void onConsoleMessage(final String s, final int n, final String s2) {
        if (Build$VERSION.SDK_INT == 7) {
            LOG.d("SystemWebChromeClient", "%s: Line %d : %s", s2, n, s);
            super.onConsoleMessage(s, n, s2);
        }
    }
    
    @TargetApi(8)
    public boolean onConsoleMessage(final ConsoleMessage consoleMessage) {
        if (consoleMessage.message() != null) {
            LOG.d("SystemWebChromeClient", "%s: Line %d : %s", consoleMessage.sourceId(), consoleMessage.lineNumber(), consoleMessage.message());
        }
        return super.onConsoleMessage(consoleMessage);
    }
    
    public void onExceededDatabaseQuota(final String s, final String s2, final long n, final long n2, final long n3, final WebStorage$QuotaUpdater webStorage$QuotaUpdater) {
        LOG.d("SystemWebChromeClient", "onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d", n2, n, n3);
        webStorage$QuotaUpdater.updateQuota(this.MAX_QUOTA);
    }
    
    public void onGeolocationPermissionsShowPrompt(final String s, final GeolocationPermissions$Callback geolocationPermissions$Callback) {
        super.onGeolocationPermissionsShowPrompt(s, geolocationPermissions$Callback);
        geolocationPermissions$Callback.invoke(s, true, false);
    }
    
    public void onHideCustomView() {
        this.parentEngine.getCordovaWebView().hideCustomView();
    }
    
    public boolean onJsAlert(final WebView webView, final String s, final String s2, final JsResult jsResult) {
        this.dialogsHelper.showAlert(s2, (CordovaDialogsHelper.Result)new CordovaDialogsHelper.Result() {
            @Override
            public void gotResult(final boolean b, final String s) {
                if (b) {
                    jsResult.confirm();
                    return;
                }
                jsResult.cancel();
            }
        });
        return true;
    }
    
    public boolean onJsConfirm(final WebView webView, final String s, final String s2, final JsResult jsResult) {
        this.dialogsHelper.showConfirm(s2, (CordovaDialogsHelper.Result)new CordovaDialogsHelper.Result() {
            @Override
            public void gotResult(final boolean b, final String s) {
                if (b) {
                    jsResult.confirm();
                    return;
                }
                jsResult.cancel();
            }
        });
        return true;
    }
    
    public boolean onJsPrompt(final WebView webView, final String s, final String s2, final String s3, final JsPromptResult jsPromptResult) {
        final String promptOnJsPrompt = this.parentEngine.bridge.promptOnJsPrompt(s, s2, s3);
        if (promptOnJsPrompt != null) {
            jsPromptResult.confirm(promptOnJsPrompt);
        }
        else {
            this.dialogsHelper.showPrompt(s2, s3, (CordovaDialogsHelper.Result)new CordovaDialogsHelper.Result() {
                @Override
                public void gotResult(final boolean b, final String s) {
                    if (b) {
                        jsPromptResult.confirm(s);
                        return;
                    }
                    jsPromptResult.cancel();
                }
            });
        }
        return true;
    }
    
    @TargetApi(21)
    public void onPermissionRequest(final PermissionRequest permissionRequest) {
        Log.d("SystemWebChromeClient", "onPermissionRequest: " + Arrays.toString(permissionRequest.getResources()));
        permissionRequest.grant(permissionRequest.getResources());
    }
    
    public void onShowCustomView(final View view, final WebChromeClient$CustomViewCallback webChromeClient$CustomViewCallback) {
        this.parentEngine.getCordovaWebView().showCustomView(view, webChromeClient$CustomViewCallback);
    }
    
    @TargetApi(21)
    public boolean onShowFileChooser(final WebView webView, final ValueCallback<Uri[]> valueCallback, final WebChromeClient$FileChooserParams webChromeClient$FileChooserParams) {
        final Intent intent = webChromeClient$FileChooserParams.createIntent();
        try {
            this.parentEngine.cordova.startActivityForResult(new CordovaPlugin() {
                @Override
                public void onActivityResult(final int n, final int n2, final Intent intent) {
                    final Uri[] result = WebChromeClient$FileChooserParams.parseResult(n2, intent);
                    Log.d("SystemWebChromeClient", "Receive file chooser URL: " + result);
                    valueCallback.onReceiveValue((Object)result);
                }
            }, intent, 5173);
            return true;
        }
        catch (ActivityNotFoundException ex) {
            Log.w("No activity found to handle file chooser intent.", (Throwable)ex);
            valueCallback.onReceiveValue((Object)null);
            return true;
        }
    }
    
    public void openFileChooser(final ValueCallback<Uri> valueCallback) {
        this.openFileChooser(valueCallback, "*/*");
    }
    
    public void openFileChooser(final ValueCallback<Uri> valueCallback, final String s) {
        this.openFileChooser(valueCallback, s, null);
    }
    
    public void openFileChooser(final ValueCallback<Uri> valueCallback, final String s, final String s2) {
        final Intent intent = new Intent("android.intent.action.GET_CONTENT");
        intent.addCategory("android.intent.category.OPENABLE");
        intent.setType("*/*");
        this.parentEngine.cordova.startActivityForResult(new CordovaPlugin() {
            @Override
            public void onActivityResult(final int n, final int n2, final Intent intent) {
                Object data;
                if (intent == null || n2 != -1) {
                    data = null;
                }
                else {
                    data = intent.getData();
                }
                Log.d("SystemWebChromeClient", "Receive file chooser URL: " + data);
                valueCallback.onReceiveValue(data);
            }
        }, intent, 5173);
    }
}
