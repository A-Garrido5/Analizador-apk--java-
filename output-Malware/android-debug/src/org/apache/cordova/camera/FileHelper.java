// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.camera;

import android.provider.MediaStore$Images$Media;
import android.provider.DocumentsContract;
import android.annotation.SuppressLint;
import android.database.Cursor;
import android.content.CursorLoader;
import android.content.Context;
import android.os.Build$VERSION;
import android.webkit.MimeTypeMap;
import java.util.Locale;
import java.io.IOException;
import java.io.FileInputStream;
import android.net.Uri;
import java.io.InputStream;
import org.apache.cordova.CordovaInterface;

public class FileHelper
{
    private static final String LOG_TAG = "FileUtils";
    private static final String _DATA = "_data";
    
    public static InputStream getInputStreamFromUriString(final String s, final CordovaInterface cordovaInterface) throws IOException {
        String substring = s;
        InputStream inputStream;
        if (substring.startsWith("content")) {
            inputStream = cordovaInterface.getActivity().getContentResolver().openInputStream(Uri.parse(substring));
        }
        else {
            Label_0165: {
                if (substring.startsWith("file://")) {
                    final int index = substring.indexOf("?");
                    if (index > -1) {
                        substring = substring.substring(0, index);
                    }
                    if (!substring.startsWith("file:///android_asset/")) {
                        while (true) {
                            try {
                                inputStream = cordovaInterface.getActivity().getContentResolver().openInputStream(Uri.parse(substring));
                                if (inputStream == null) {
                                    inputStream = new FileInputStream(getRealPath(substring, cordovaInterface));
                                    return inputStream;
                                }
                                return inputStream;
                            }
                            catch (Exception ex) {
                                inputStream = null;
                                continue;
                            }
                            break;
                        }
                        break Label_0165;
                    }
                    inputStream = cordovaInterface.getActivity().getAssets().open(Uri.parse(substring).getPath().substring(15));
                    return inputStream;
                }
            }
            inputStream = new FileInputStream(substring);
        }
        return inputStream;
    }
    
    public static String getMimeType(final String s, final CordovaInterface cordovaInterface) {
        final Uri parse = Uri.parse(s);
        String s2;
        if (s.startsWith("content://")) {
            s2 = cordovaInterface.getActivity().getContentResolver().getType(parse);
        }
        else {
            s2 = getMimeTypeForExtension(parse.getPath());
        }
        return s2;
    }
    
    public static String getMimeTypeForExtension(final String s) {
        String substring = s;
        final int lastIndex = substring.lastIndexOf(46);
        if (lastIndex != -1) {
            substring = substring.substring(lastIndex + 1);
        }
        final String lowerCase = substring.toLowerCase(Locale.getDefault());
        if (lowerCase.equals("3ga")) {
            return "audio/3gpp";
        }
        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(lowerCase);
    }
    
    public static String getRealPath(final Uri uri, final CordovaInterface cordovaInterface) {
        String s;
        if (Build$VERSION.SDK_INT < 11) {
            s = getRealPathFromURI_BelowAPI11((Context)cordovaInterface.getActivity(), uri);
        }
        else if (Build$VERSION.SDK_INT < 19) {
            s = getRealPathFromURI_API11to18((Context)cordovaInterface.getActivity(), uri);
        }
        else {
            s = getRealPathFromURI_API19((Context)cordovaInterface.getActivity(), uri);
        }
        return s;
    }
    
    public static String getRealPath(final String s, final CordovaInterface cordovaInterface) {
        return getRealPath(Uri.parse(s), cordovaInterface);
    }
    
    @SuppressLint({ "NewApi" })
    public static String getRealPathFromURI_API11to18(final Context context, final Uri uri) {
        final String[] array = { "_data" };
        try {
            final Cursor loadInBackground = new CursorLoader(context, uri, array, (String)null, (String[])null, (String)null).loadInBackground();
            String string = null;
            if (loadInBackground != null) {
                final int columnIndexOrThrow = loadInBackground.getColumnIndexOrThrow("_data");
                loadInBackground.moveToFirst();
                string = loadInBackground.getString(columnIndexOrThrow);
            }
            return string;
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    @SuppressLint({ "NewApi" })
    public static String getRealPathFromURI_API19(final Context context, final Uri uri) {
        String string = "";
        try {
            final String documentId = DocumentsContract.getDocumentId(uri);
            String s;
            if (documentId.indexOf(":") > -1) {
                s = documentId.split(":")[1];
            }
            else if (documentId.indexOf(";") > -1) {
                s = documentId.split(";")[1];
            }
            else {
                s = documentId;
            }
            final String s2 = s;
            final String[] array = { "_data" };
            final Cursor query = context.getContentResolver().query(MediaStore$Images$Media.EXTERNAL_CONTENT_URI, array, "_id=?", new String[] { s2 }, (String)null);
            final int columnIndex = query.getColumnIndex(array[0]);
            if (query.moveToFirst()) {
                string = query.getString(columnIndex);
            }
            query.close();
        }
        catch (Exception ex) {
            string = "";
        }
        return string;
    }
    
    public static String getRealPathFromURI_BelowAPI11(final Context context, final Uri uri) {
        final String[] array = { "_data" };
        try {
            final Cursor query = context.getContentResolver().query(uri, array, (String)null, (String[])null, (String)null);
            final int columnIndexOrThrow = query.getColumnIndexOrThrow("_data");
            query.moveToFirst();
            return query.getString(columnIndexOrThrow);
        }
        catch (Exception ex) {
            return null;
        }
    }
    
    public static String stripFileProtocol(final String s) {
        String substring = s;
        if (substring.startsWith("file://")) {
            substring = substring.substring(7);
        }
        return substring;
    }
}
