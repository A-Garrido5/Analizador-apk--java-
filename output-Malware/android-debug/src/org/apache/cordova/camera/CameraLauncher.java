// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.camera;

import android.util.Base64;
import java.io.ByteArrayOutputStream;
import org.json.JSONException;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import java.io.FileNotFoundException;
import android.content.ActivityNotFoundException;
import android.util.Log;
import android.os.Parcelable;
import android.content.Intent;
import java.io.OutputStream;
import android.graphics.Bitmap$CompressFormat;
import java.io.FileOutputStream;
import android.provider.MediaStore$Images$Media;
import android.content.ContentValues;
import java.io.InputStream;
import android.graphics.Rect;
import android.graphics.BitmapFactory$Options;
import java.io.IOException;
import org.apache.cordova.LOG;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import java.util.Date;
import java.text.SimpleDateFormat;
import android.os.Environment;
import java.io.File;
import android.graphics.Bitmap;
import android.database.Cursor;
import android.net.Uri;
import android.media.MediaScannerConnection;
import org.apache.cordova.CallbackContext;
import android.media.MediaScannerConnection$MediaScannerConnectionClient;
import org.apache.cordova.CordovaPlugin;

public class CameraLauncher extends CordovaPlugin implements MediaScannerConnection$MediaScannerConnectionClient
{
    private static final int ALLMEDIA = 2;
    private static final int CAMERA = 1;
    private static final int CROP_CAMERA = 100;
    private static final int DATA_URL = 0;
    private static final int FILE_URI = 1;
    private static final String GET_All = "Get All";
    private static final String GET_PICTURE = "Get Picture";
    private static final String GET_VIDEO = "Get Video";
    private static final int JPEG = 0;
    private static final String LOG_TAG = "CameraLauncher";
    private static final int NATIVE_URI = 2;
    private static final int PHOTOLIBRARY = 0;
    private static final int PICTURE = 0;
    private static final int PNG = 1;
    private static final int SAVEDPHOTOALBUM = 2;
    private static final int VIDEO = 1;
    private boolean allowEdit;
    public CallbackContext callbackContext;
    private MediaScannerConnection conn;
    private boolean correctOrientation;
    private Uri croppedUri;
    private int encodingType;
    private Uri imageUri;
    private int mQuality;
    private int mediaType;
    private int numPics;
    private boolean orientationCorrected;
    private boolean saveToPhotoAlbum;
    private Uri scanMe;
    private int targetHeight;
    private int targetWidth;
    
    public static int calculateSampleSize(final int n, final int n2, final int n3, final int n4) {
        if (n / n2 > n3 / n4) {
            return n / n3;
        }
        return n2 / n4;
    }
    
    private void checkForDuplicateImage(final int n) {
        int n2 = 1;
        final Uri whichContentStore = this.whichContentStore();
        final Cursor queryImgDB = this.queryImgDB(whichContentStore);
        final int count = queryImgDB.getCount();
        if (n == 1 && this.saveToPhotoAlbum) {
            n2 = 2;
        }
        if (count - this.numPics == n2) {
            queryImgDB.moveToLast();
            int intValue = Integer.valueOf(queryImgDB.getString(queryImgDB.getColumnIndex("_id")));
            if (n2 == 2) {
                --intValue;
            }
            this.cordova.getActivity().getContentResolver().delete(Uri.parse(whichContentStore + "/" + intValue), (String)null, (String[])null);
            queryImgDB.close();
        }
    }
    
    private void cleanup(final int n, final Uri uri, final Uri uri2, final Bitmap bitmap) {
        if (bitmap != null) {
            bitmap.recycle();
        }
        new File(FileHelper.stripFileProtocol(uri.toString())).delete();
        this.checkForDuplicateImage(n);
        if (this.saveToPhotoAlbum && uri2 != null) {
            this.scanForGallery(uri2);
        }
        System.gc();
    }
    
    private File createCaptureFile(final int n) {
        File file;
        if (n == 0) {
            file = new File(this.getTempDirectoryPath(), ".Pic.jpg");
        }
        else {
            if (n != 1) {
                throw new IllegalArgumentException("Invalid Encoding Type: " + n);
            }
            file = new File(this.getTempDirectoryPath(), ".Pic.png");
        }
        return file;
    }
    
    private int getImageOrientation(final Uri uri) {
        int int1 = 0;
        final String[] array = { "orientation" };
        try {
            final Cursor query = this.cordova.getActivity().getContentResolver().query(uri, array, (String)null, (String[])null, (String)null);
            int1 = 0;
            if (query != null) {
                query.moveToPosition(0);
                int1 = query.getInt(0);
                query.close();
            }
            return int1;
        }
        catch (Exception ex) {
            return int1;
        }
    }
    
    private String getPicutresPath() {
        return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath() + "/" + ("IMG_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".jpg");
    }
    
    private Bitmap getRotatedBitmap(final int n, final Bitmap bitmap, final ExifHelper exifHelper) {
        Bitmap bitmap2 = bitmap;
        final Matrix matrix = new Matrix();
        Label_0063: {
            if (n != 180) {
                break Label_0063;
            }
            matrix.setRotate((float)n);
            while (true) {
                final Bitmap bitmap3 = bitmap2;
                final Bitmap bitmap4 = bitmap2;
                try {
                    bitmap2 = Bitmap.createBitmap(bitmap3, 0, 0, bitmap4.getWidth(), bitmap2.getHeight(), matrix, true);
                    exifHelper.resetOrientation();
                    return bitmap2;
                    matrix.setRotate((float)n, bitmap2.getWidth() / 2.0f, bitmap2.getHeight() / 2.0f);
                }
                catch (OutOfMemoryError outOfMemoryError) {
                    return bitmap2;
                }
            }
        }
    }
    
    private Bitmap getScaledBitmap(final String s) throws IOException {
        if (this.targetWidth <= 0 && this.targetHeight <= 0) {
            InputStream inputStreamFromUriString = null;
            try {
                inputStreamFromUriString = FileHelper.getInputStreamFromUriString(s, this.cordova);
                final Bitmap decodeStream = BitmapFactory.decodeStream(inputStreamFromUriString);
                if (inputStreamFromUriString == null) {
                    return decodeStream;
                }
                final InputStream inputStream = inputStreamFromUriString;
                try {
                    inputStream.close();
                    return decodeStream;
                }
                catch (IOException ex) {
                    LOG.d("CameraLauncher", "Exception while closing file input stream.");
                }
            }
            finally {
                Label_0080: {
                    if (inputStreamFromUriString == null) {
                        break Label_0080;
                    }
                    final InputStream inputStream2 = inputStreamFromUriString;
                    try {
                        inputStream2.close();
                    }
                    catch (IOException ex2) {
                        LOG.d("CameraLauncher", "Exception while closing file input stream.");
                    }
                }
            }
        }
        final BitmapFactory$Options bitmapFactory$Options = new BitmapFactory$Options();
        bitmapFactory$Options.inJustDecodeBounds = true;
        InputStream inputStream3 = null;
        try {
            inputStream3 = FileHelper.getInputStreamFromUriString(s, this.cordova);
            BitmapFactory.decodeStream(inputStream3, (Rect)null, bitmapFactory$Options);
            Label_0139: {
                if (inputStream3 == null) {
                    break Label_0139;
                }
                final InputStream inputStream4 = inputStream3;
                try {
                    inputStream4.close();
                    if (bitmapFactory$Options.outWidth == 0 || bitmapFactory$Options.outHeight == 0) {
                        return null;
                    }
                }
                catch (IOException ex3) {
                    LOG.d("CameraLauncher", "Exception while closing file input stream.");
                }
            }
        }
        finally {
            Label_0182: {
                if (inputStream3 == null) {
                    break Label_0182;
                }
                final InputStream inputStream5 = inputStream3;
                try {
                    inputStream5.close();
                }
                catch (IOException ex4) {
                    LOG.d("CameraLauncher", "Exception while closing file input stream.");
                }
            }
        }
        final int[] calculateAspectRatio = this.calculateAspectRatio(bitmapFactory$Options.outWidth, bitmapFactory$Options.outHeight);
        bitmapFactory$Options.inJustDecodeBounds = false;
        bitmapFactory$Options.inSampleSize = calculateSampleSize(bitmapFactory$Options.outWidth, bitmapFactory$Options.outHeight, this.targetWidth, this.targetHeight);
        Bitmap decodeStream2;
        try {
            inputStream3 = FileHelper.getInputStreamFromUriString(s, this.cordova);
            decodeStream2 = BitmapFactory.decodeStream(inputStream3, (Rect)null, bitmapFactory$Options);
            Label_0269: {
                if (inputStream3 == null) {
                    break Label_0269;
                }
                final InputStream inputStream6 = inputStream3;
                try {
                    inputStream6.close();
                    if (decodeStream2 == null) {
                        return null;
                    }
                    return Bitmap.createScaledBitmap(decodeStream2, calculateAspectRatio[0], calculateAspectRatio[1], true);
                }
                catch (IOException ex5) {
                    LOG.d("CameraLauncher", "Exception while closing file input stream.");
                }
            }
        }
        finally {
            Label_0303: {
                if (inputStream3 == null) {
                    break Label_0303;
                }
                final InputStream inputStream7 = inputStream3;
                try {
                    inputStream7.close();
                }
                catch (IOException ex6) {
                    LOG.d("CameraLauncher", "Exception while closing file input stream.");
                }
            }
        }
        return Bitmap.createScaledBitmap(decodeStream2, calculateAspectRatio[0], calculateAspectRatio[1], true);
    }
    
    private String getTempDirectoryPath() {
        File cacheDir;
        if (Environment.getExternalStorageState().equals("mounted")) {
            cacheDir = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + this.cordova.getActivity().getPackageName() + "/cache/");
        }
        else {
            cacheDir = this.cordova.getActivity().getCacheDir();
        }
        cacheDir.mkdirs();
        return cacheDir.getAbsolutePath();
    }
    
    private Uri getUriFromMediaStore() {
        final ContentValues contentValues = new ContentValues();
        contentValues.put("mime_type", "image/jpeg");
        try {
            return this.cordova.getActivity().getContentResolver().insert(MediaStore$Images$Media.EXTERNAL_CONTENT_URI, contentValues);
        }
        catch (RuntimeException ex) {
            LOG.d("CameraLauncher", "Can't write to external media storage.");
            try {
                final Uri uri = this.cordova.getActivity().getContentResolver().insert(MediaStore$Images$Media.INTERNAL_CONTENT_URI, contentValues);
            }
            catch (RuntimeException ex2) {
                LOG.d("CameraLauncher", "Can't write to internal media storage.");
                return null;
            }
        }
    }
    
    private String ouputModifiedBitmap(final Bitmap bitmap, final Uri uri) throws IOException {
        final String string = this.getTempDirectoryPath() + "/modified.jpg";
        final FileOutputStream fileOutputStream = new FileOutputStream(string);
        bitmap.compress(Bitmap$CompressFormat.JPEG, this.mQuality, (OutputStream)fileOutputStream);
        fileOutputStream.close();
        final String realPath = FileHelper.getRealPath(uri, this.cordova);
        final ExifHelper exifHelper = new ExifHelper();
        if (realPath == null || this.encodingType != 0) {
            return string;
        }
        try {
            exifHelper.createInFile(realPath);
            exifHelper.readExifData();
            if (this.correctOrientation && this.orientationCorrected) {
                exifHelper.resetOrientation();
            }
            exifHelper.createOutFile(string);
            exifHelper.writeExifData();
            return string;
        }
        catch (IOException ex) {
            ex.printStackTrace();
            return string;
        }
    }
    
    private void performCrop(final Uri uri, final int n, final Intent intent) {
        try {
            final Intent intent2 = new Intent("com.android.camera.action.CROP");
            intent2.setDataAndType(uri, "image/*");
            intent2.putExtra("crop", "true");
            if (this.targetWidth > 0) {
                intent2.putExtra("outputX", this.targetWidth);
            }
            if (this.targetHeight > 0) {
                intent2.putExtra("outputY", this.targetHeight);
            }
            if (this.targetHeight > 0 && this.targetWidth > 0 && this.targetWidth == this.targetHeight) {
                intent2.putExtra("aspectX", 1);
                intent2.putExtra("aspectY", 1);
            }
            intent2.putExtra("output", (Parcelable)(this.croppedUri = Uri.fromFile(new File(this.getTempDirectoryPath(), System.currentTimeMillis() + ".jpg"))));
            if (this.cordova != null) {
                this.cordova.startActivityForResult(this, intent2, 100 + n);
            }
        }
        catch (ActivityNotFoundException ex2) {
            Log.e("CameraLauncher", "Crop operation not supported on this device");
            try {
                this.processResultFromCamera(n, intent);
            }
            catch (IOException ex) {
                ex.printStackTrace();
                Log.e("CameraLauncher", "Unable to write to file");
            }
        }
    }
    
    private void processResultFromCamera(final int n, final Intent intent) throws IOException {
        Uri uri = null;
        Bitmap bitmap = null;
    Label_0108_Outer:
        while (true) {
            final ExifHelper exifHelper = new ExifHelper();
            int orientation = 0;
            Label_0261: {
            Label_0213:
                while (true) {
                    while (true) {
                        try {
                            if (this.allowEdit && this.croppedUri != null) {
                                FileHelper.stripFileProtocol(this.croppedUri.toString());
                            }
                            else {
                                new StringBuilder().append(this.getTempDirectoryPath()).append("/.Pic.jpg").toString();
                            }
                            exifHelper.createInFile(this.getTempDirectoryPath() + "/.Pic.jpg");
                            exifHelper.readExifData();
                            orientation = exifHelper.getOrientation();
                            uri = null;
                            if (n != 0) {
                                break Label_0261;
                            }
                            if (this.croppedUri != null) {
                                bitmap = this.getScaledBitmap(FileHelper.stripFileProtocol(this.croppedUri.toString()));
                                if (bitmap == null) {
                                    bitmap = (Bitmap)intent.getExtras().get("data");
                                }
                                if (bitmap == null) {
                                    Log.d("CameraLauncher", "I either have a null image path or bitmap");
                                    this.failPicture("Unable to create bitmap!");
                                    return;
                                }
                                break Label_0213;
                            }
                        }
                        catch (IOException ex) {
                            ex.printStackTrace();
                            orientation = 0;
                            continue Label_0108_Outer;
                        }
                        break;
                    }
                    bitmap = this.getScaledBitmap(FileHelper.stripFileProtocol(this.imageUri.toString()));
                    continue;
                }
                if (orientation != 0 && this.correctOrientation) {
                    bitmap = this.getRotatedBitmap(orientation, bitmap, exifHelper);
                }
                this.processPicture(bitmap);
                this.checkForDuplicateImage(0);
                break;
            }
            if (n != 1 && n != 2) {
                throw new IllegalStateException();
            }
            Uri.fromFile(new File(this.getTempDirectoryPath(), System.currentTimeMillis() + ".jpg"));
            if (this.saveToPhotoAlbum) {
                uri = Uri.fromFile(new File(this.getPicutresPath()));
            }
            else {
                uri = Uri.fromFile(new File(this.getTempDirectoryPath(), System.currentTimeMillis() + ".jpg"));
            }
            if (uri == null) {
                this.failPicture("Error capturing image - no media storage found.");
                return;
            }
            if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation) {
                this.writeUncompressedImage(uri);
                this.callbackContext.success(uri.toString());
                bitmap = null;
                break;
            }
            bitmap = this.getScaledBitmap(FileHelper.stripFileProtocol(this.imageUri.toString()));
            if (orientation != 0 && this.correctOrientation) {
                bitmap = this.getRotatedBitmap(orientation, bitmap, exifHelper);
            }
            final OutputStream openOutputStream = this.cordova.getActivity().getContentResolver().openOutputStream(uri);
            bitmap.compress(Bitmap$CompressFormat.JPEG, this.mQuality, openOutputStream);
            openOutputStream.close();
            if (this.encodingType == 0) {
                exifHelper.createOutFile(uri.getPath());
                exifHelper.writeExifData();
            }
            if (this.saveToPhotoAlbum) {
                this.refreshGallery(uri);
            }
            this.callbackContext.success(uri.toString());
            break;
        }
        this.cleanup(1, this.imageUri, uri, bitmap);
    }
    
    private void processResultFromGallery(final int n, final Intent intent) {
        Uri uri = intent.getData();
        if (uri == null) {
            if (this.croppedUri == null) {
                this.failPicture("null data from photo library");
                return;
            }
            uri = this.croppedUri;
        }
        if (this.mediaType != 0) {
            this.callbackContext.success(uri.toString());
            return;
        }
        if (this.targetHeight == -1 && this.targetWidth == -1 && (n == 1 || n == 2) && !this.correctOrientation) {
            this.callbackContext.success(uri.toString());
            return;
        }
        final String string = uri.toString();
        final String mimeType = FileHelper.getMimeType(string, this.cordova);
        if (!"image/jpeg".equalsIgnoreCase(mimeType) && !"image/png".equalsIgnoreCase(mimeType)) {
            Log.d("CameraLauncher", "I either have a null image path or bitmap");
            this.failPicture("Unable to retrieve path to picture!");
            return;
        }
        Bitmap bitmap;
        while (true) {
            try {
                bitmap = this.getScaledBitmap(string);
                if (bitmap == null) {
                    Log.d("CameraLauncher", "I either have a null image path or bitmap");
                    this.failPicture("Unable to create bitmap!");
                    return;
                }
            }
            catch (IOException ex) {
                ex.printStackTrace();
                bitmap = null;
                continue;
            }
            break;
        }
    Label_0267:
        while (true) {
            if (!this.correctOrientation) {
                break Label_0267;
            }
            final int imageOrientation = this.getImageOrientation(uri);
            if (imageOrientation == 0) {
                break Label_0267;
            }
            while (true) {
                final Matrix matrix = new Matrix();
                matrix.setRotate((float)imageOrientation);
                final Bitmap bitmap2 = bitmap;
                final Bitmap bitmap3 = bitmap;
                while (true) {
                    try {
                        bitmap = Bitmap.createBitmap(bitmap2, 0, 0, bitmap3.getWidth(), bitmap.getHeight(), matrix, true);
                        this.orientationCorrected = true;
                        if (n == 0) {
                            this.processPicture(bitmap);
                            if (bitmap != null) {
                                bitmap.recycle();
                            }
                            System.gc();
                            return;
                        }
                    }
                    catch (OutOfMemoryError outOfMemoryError) {
                        this.orientationCorrected = false;
                        continue Label_0267;
                    }
                    if (n != 1 && n != 2) {
                        continue;
                    }
                    if ((this.targetHeight > 0 && this.targetWidth > 0) || (this.correctOrientation && this.orientationCorrected)) {
                        final Bitmap bitmap4 = bitmap;
                        final Uri uri2 = uri;
                        try {
                            this.callbackContext.success("file://" + this.ouputModifiedBitmap(bitmap4, uri2) + "?" + System.currentTimeMillis());
                            continue;
                        }
                        catch (Exception ex2) {
                            ex2.printStackTrace();
                            this.failPicture("Error retrieving image.");
                            continue;
                        }
                        continue;
                    }
                    this.callbackContext.success(uri.toString());
                    continue;
                }
            }
            break;
        }
    }
    
    private Cursor queryImgDB(final Uri uri) {
        return this.cordova.getActivity().getContentResolver().query(uri, new String[] { "_id" }, (String)null, (String[])null, (String)null);
    }
    
    private void refreshGallery(final Uri data) {
        final Intent intent = new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE");
        intent.setData(data);
        this.cordova.getActivity().sendBroadcast(intent);
    }
    
    private void scanForGallery(final Uri scanMe) {
        this.scanMe = scanMe;
        if (this.conn != null) {
            this.conn.disconnect();
        }
        (this.conn = new MediaScannerConnection(this.cordova.getActivity().getApplicationContext(), (MediaScannerConnection$MediaScannerConnectionClient)this)).connect();
    }
    
    private Uri whichContentStore() {
        if (Environment.getExternalStorageState().equals("mounted")) {
            return MediaStore$Images$Media.EXTERNAL_CONTENT_URI;
        }
        return MediaStore$Images$Media.INTERNAL_CONTENT_URI;
    }
    
    private void writeUncompressedImage(final Uri p0) throws FileNotFoundException, IOException {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore_2       
        //     2: aconst_null    
        //     3: astore_3       
        //     4: new             Ljava/io/FileInputStream;
        //     7: dup            
        //     8: aload_0        
        //     9: getfield        org/apache/cordova/camera/CameraLauncher.imageUri:Landroid/net/Uri;
        //    12: invokevirtual   android/net/Uri.toString:()Ljava/lang/String;
        //    15: invokestatic    org/apache/cordova/camera/FileHelper.stripFileProtocol:(Ljava/lang/String;)Ljava/lang/String;
        //    18: invokespecial   java/io/FileInputStream.<init>:(Ljava/lang/String;)V
        //    21: astore          4
        //    23: aload           4
        //    25: astore_2       
        //    26: aload_0        
        //    27: getfield        org/apache/cordova/camera/CameraLauncher.cordova:Lorg/apache/cordova/CordovaInterface;
        //    30: invokeinterface org/apache/cordova/CordovaInterface.getActivity:()Landroid/app/Activity;
        //    35: invokevirtual   android/app/Activity.getContentResolver:()Landroid/content/ContentResolver;
        //    38: aload_1        
        //    39: invokevirtual   android/content/ContentResolver.openOutputStream:(Landroid/net/Uri;)Ljava/io/OutputStream;
        //    42: astore_3       
        //    43: sipush          4096
        //    46: newarray        B
        //    48: astore          10
        //    50: aload_2        
        //    51: aload           10
        //    53: invokevirtual   java/io/FileInputStream.read:([B)I
        //    56: istore          11
        //    58: iload           11
        //    60: iconst_m1      
        //    61: if_icmpeq       76
        //    64: aload_3        
        //    65: aload           10
        //    67: iconst_0       
        //    68: iload           11
        //    70: invokevirtual   java/io/OutputStream.write:([BII)V
        //    73: goto            50
        //    76: aload_3        
        //    77: invokevirtual   java/io/OutputStream.flush:()V
        //    80: aload_3        
        //    81: ifnull          92
        //    84: aload_3        
        //    85: astore          14
        //    87: aload           14
        //    89: invokevirtual   java/io/OutputStream.close:()V
        //    92: aload_2        
        //    93: ifnull          104
        //    96: aload_2        
        //    97: astore          12
        //    99: aload           12
        //   101: invokevirtual   java/io/FileInputStream.close:()V
        //   104: return         
        //   105: astore          15
        //   107: ldc             "CameraLauncher"
        //   109: ldc_w           "Exception while closing output stream."
        //   112: invokestatic    org/apache/cordova/LOG.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   115: goto            92
        //   118: astore          13
        //   120: ldc             "CameraLauncher"
        //   122: ldc_w           "Exception while closing file input stream."
        //   125: invokestatic    org/apache/cordova/LOG.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   128: return         
        //   129: astore          5
        //   131: aload_3        
        //   132: ifnull          143
        //   135: aload_3        
        //   136: astore          8
        //   138: aload           8
        //   140: invokevirtual   java/io/OutputStream.close:()V
        //   143: aload_2        
        //   144: ifnull          155
        //   147: aload_2        
        //   148: astore          6
        //   150: aload           6
        //   152: invokevirtual   java/io/FileInputStream.close:()V
        //   155: aload           5
        //   157: athrow         
        //   158: astore          9
        //   160: ldc             "CameraLauncher"
        //   162: ldc_w           "Exception while closing output stream."
        //   165: invokestatic    org/apache/cordova/LOG.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   168: goto            143
        //   171: astore          7
        //   173: ldc             "CameraLauncher"
        //   175: ldc_w           "Exception while closing file input stream."
        //   178: invokestatic    org/apache/cordova/LOG.d:(Ljava/lang/String;Ljava/lang/String;)V
        //   181: goto            155
        //    Exceptions:
        //  throws java.io.FileNotFoundException
        //  throws java.io.IOException
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  4      23     129    184    Any
        //  26     50     129    184    Any
        //  50     58     129    184    Any
        //  64     73     129    184    Any
        //  76     80     129    184    Any
        //  87     92     105    118    Ljava/io/IOException;
        //  99     104    118    129    Ljava/io/IOException;
        //  138    143    158    171    Ljava/io/IOException;
        //  150    155    171    184    Ljava/io/IOException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0104:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public int[] calculateAspectRatio(final int n, final int n2) {
        int targetWidth = this.targetWidth;
        int targetHeight = this.targetHeight;
        if (targetWidth <= 0 && targetHeight <= 0) {
            targetWidth = n;
            targetHeight = n2;
        }
        else if (targetWidth > 0 && targetHeight <= 0) {
            targetHeight = n2 * targetWidth / n;
        }
        else if (targetWidth <= 0 && targetHeight > 0) {
            targetWidth = n * targetHeight / n2;
        }
        else {
            final double n3 = targetWidth / targetHeight;
            final double n4 = n / n2;
            if (n4 > n3) {
                targetHeight = n2 * targetWidth / n;
            }
            else if (n4 < n3) {
                targetWidth = n * targetHeight / n2;
            }
        }
        return new int[] { targetWidth, targetHeight };
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        this.callbackContext = callbackContext;
        if (s.equals("takePicture")) {
            this.saveToPhotoAlbum = false;
            this.targetHeight = 0;
            this.targetWidth = 0;
            this.encodingType = 0;
            this.mediaType = 0;
            this.mQuality = 80;
            this.mQuality = jsonArray.getInt(0);
            final int int1 = jsonArray.getInt(1);
            final int int2 = jsonArray.getInt(2);
            this.targetWidth = jsonArray.getInt(3);
            this.targetHeight = jsonArray.getInt(4);
            this.encodingType = jsonArray.getInt(5);
            this.mediaType = jsonArray.getInt(6);
            this.allowEdit = jsonArray.getBoolean(7);
            this.correctOrientation = jsonArray.getBoolean(8);
            this.saveToPhotoAlbum = jsonArray.getBoolean(9);
            if (this.targetWidth < 1) {
                this.targetWidth = -1;
            }
            if (this.targetHeight < 1) {
                this.targetHeight = -1;
            }
            Label_0204: {
                if (int2 != 1) {
                    break Label_0204;
                }
                try {
                    this.takePicture(int1, this.encodingType);
                    while (true) {
                        final PluginResult pluginResult = new PluginResult(PluginResult.Status.NO_RESULT);
                        pluginResult.setKeepCallback(true);
                        callbackContext.sendPluginResult(pluginResult);
                        return true;
                        this.getImage(int2, int1, this.encodingType);
                        continue;
                    }
                }
                // iftrue(Label_0178:, int2 != 0 && int2 != 2)
                catch (IllegalArgumentException ex) {
                    callbackContext.error("Illegal Argument Exception");
                    callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR));
                    return true;
                }
            }
        }
        return false;
    }
    
    public void failPicture(final String s) {
        this.callbackContext.error(s);
    }
    
    public void getImage(final int n, final int n2, final int n3) {
        final Intent intent = new Intent();
        String s = "Get Picture";
        this.croppedUri = null;
        if (this.mediaType == 0) {
            intent.setType("image/*");
            if (this.allowEdit) {
                intent.setAction("android.intent.action.PICK");
                intent.putExtra("crop", "true");
                if (this.targetWidth > 0) {
                    intent.putExtra("outputX", this.targetWidth);
                }
                if (this.targetHeight > 0) {
                    intent.putExtra("outputY", this.targetHeight);
                }
                if (this.targetHeight > 0 && this.targetWidth > 0 && this.targetWidth == this.targetHeight) {
                    intent.putExtra("aspectX", 1);
                    intent.putExtra("aspectY", 1);
                }
                intent.putExtra("output", (Parcelable)(this.croppedUri = Uri.fromFile(this.createCaptureFile(n3))));
            }
            else {
                intent.setAction("android.intent.action.GET_CONTENT");
                intent.addCategory("android.intent.category.OPENABLE");
            }
        }
        else if (this.mediaType == 1) {
            intent.setType("video/*");
            s = "Get Video";
            intent.setAction("android.intent.action.GET_CONTENT");
            intent.addCategory("android.intent.category.OPENABLE");
        }
        else if (this.mediaType == 2) {
            intent.setType("*/*");
            s = "Get All";
            intent.setAction("android.intent.action.GET_CONTENT");
            intent.addCategory("android.intent.category.OPENABLE");
        }
        if (this.cordova != null) {
            this.cordova.startActivityForResult(this, Intent.createChooser(intent, (CharSequence)new String(s)), 1 + (n2 + 16 * (n + 1)));
        }
    }
    
    @Override
    public void onActivityResult(final int n, final int n2, final Intent intent) {
        final int n3 = -1 + n / 16;
        final int n4 = -1 + n % 16;
        Label_0058: {
            if (n >= 100) {
                if (n2 != -1) {
                    break Label_0058;
                }
            }
            else if (n3 == 1) {
                if (n2 == -1) {
                    try {
                        if (this.allowEdit) {
                            this.performCrop(Uri.fromFile(new File(this.getTempDirectoryPath(), ".Pic.jpg")), n4, intent);
                            return;
                        }
                        this.processResultFromCamera(n4, intent);
                        return;
                    }
                    catch (IOException ex) {
                        ex.printStackTrace();
                        this.failPicture("Error capturing image.");
                        return;
                    }
                }
                if (n2 == 0) {
                    this.failPicture("Camera cancelled.");
                    return;
                }
                this.failPicture("Did not complete!");
                return;
            }
            else {
                if (n3 != 0 && n3 != 2) {
                    return;
                }
                if (n2 == -1 && intent != null) {
                    this.processResultFromGallery(n4, intent);
                    return;
                }
                if (n2 == 0) {
                    this.failPicture("Selection cancelled.");
                    return;
                }
                this.failPicture("Selection did not complete!");
                return;
            }
            final int n5 = n - 100;
            try {
                this.processResultFromCamera(n5, intent);
                return;
            }
            catch (IOException ex2) {
                ex2.printStackTrace();
                Log.e("CameraLauncher", "Unable to write to file");
                return;
            }
        }
        if (n2 == 0) {
            this.failPicture("Camera cancelled.");
            return;
        }
        this.failPicture("Did not complete!");
    }
    
    public void onMediaScannerConnected() {
        try {
            this.conn.scanFile(this.scanMe.toString(), "image/*");
        }
        catch (IllegalStateException ex) {
            LOG.e("CameraLauncher", "Can't scan file in MediaScanner after taking picture");
        }
    }
    
    public void onScanCompleted(final String s, final Uri uri) {
        this.conn.disconnect();
    }
    
    public void processPicture(final Bitmap bitmap) {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            if (bitmap.compress(Bitmap$CompressFormat.JPEG, this.mQuality, (OutputStream)byteArrayOutputStream)) {
                this.callbackContext.success(new String(Base64.encode(byteArrayOutputStream.toByteArray(), 2)));
            }
        }
        catch (Exception ex) {
            this.failPicture("Error compressing image.");
        }
    }
    
    public void takePicture(final int n, final int n2) {
        this.numPics = this.queryImgDB(this.whichContentStore()).getCount();
        final Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        final File captureFile = this.createCaptureFile(n2);
        intent.putExtra("output", (Parcelable)Uri.fromFile(captureFile));
        this.imageUri = Uri.fromFile(captureFile);
        if (this.cordova != null) {
            if (intent.resolveActivity(this.cordova.getActivity().getPackageManager()) == null) {
                LOG.d("CameraLauncher", "Error: You don't have a default camera.  Your device may not be CTS complaint.");
                return;
            }
            this.cordova.startActivityForResult(this, intent, 1 + (32 + n));
        }
    }
}
