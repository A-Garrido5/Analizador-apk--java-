// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import android.net.Uri;
import android.content.Intent;
import android.content.res.Configuration;
import org.json.JSONException;
import android.util.Log;
import java.util.Iterator;
import java.util.Collection;
import android.os.Debug;
import java.util.LinkedHashMap;

public class PluginManager
{
    private static final int SLOW_EXEC_WARNING_THRESHOLD;
    private static String TAG;
    private final CordovaWebView app;
    private final CordovaInterface ctx;
    private final LinkedHashMap<String, PluginEntry> entryMap;
    private boolean isInitialized;
    private final LinkedHashMap<String, CordovaPlugin> pluginMap;
    
    static {
        PluginManager.TAG = "PluginManager";
        int slow_EXEC_WARNING_THRESHOLD;
        if (Debug.isDebuggerConnected()) {
            slow_EXEC_WARNING_THRESHOLD = 60;
        }
        else {
            slow_EXEC_WARNING_THRESHOLD = 16;
        }
        SLOW_EXEC_WARNING_THRESHOLD = slow_EXEC_WARNING_THRESHOLD;
    }
    
    public PluginManager(final CordovaWebView app, final CordovaInterface ctx, final Collection<PluginEntry> pluginEntries) {
        this.pluginMap = new LinkedHashMap<String, CordovaPlugin>();
        this.entryMap = new LinkedHashMap<String, PluginEntry>();
        this.ctx = ctx;
        this.app = app;
        this.setPluginEntries(pluginEntries);
    }
    
    private CordovaPlugin instantiatePlugin(final String s) {
        Class<?> forName = null;
        while (true) {
            while (true) {
                Label_0103: {
                    if (s == null) {
                        break Label_0103;
                    }
                    try {
                        final boolean equals = "".equals(s);
                        forName = null;
                        if (!equals) {
                            forName = Class.forName(s);
                        }
                        break Label_0103;
                        final boolean b2;
                        final boolean b = b2 & CordovaPlugin.class.isAssignableFrom(forName);
                        CordovaPlugin cordovaPlugin = null;
                        // iftrue(Label_0056:, !b)
                        return (CordovaPlugin)forName.newInstance();
                        Label_0056: {
                            return cordovaPlugin;
                        }
                        b2 = false;
                        continue;
                        cordovaPlugin = (CordovaPlugin)forName.newInstance();
                        return cordovaPlugin;
                    }
                    catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Error adding plugin " + s + ".");
                        return null;
                    }
                }
                if (forName != null) {
                    final boolean b2 = true;
                    continue;
                }
                break;
            }
            continue;
        }
    }
    
    private void startupPlugins() {
        for (final PluginEntry pluginEntry : this.entryMap.values()) {
            if (pluginEntry.onload) {
                this.getPlugin(pluginEntry.service);
            }
            else {
                this.pluginMap.put(pluginEntry.service, null);
            }
        }
    }
    
    public void addService(final String s, final String s2) {
        this.addService(new PluginEntry(s, s2, false));
    }
    
    public void addService(final PluginEntry pluginEntry) {
        this.entryMap.put(pluginEntry.service, pluginEntry);
        if (pluginEntry.plugin != null) {
            pluginEntry.plugin.privateInitialize(pluginEntry.service, this.ctx, this.app, this.app.getPreferences());
            this.pluginMap.put(pluginEntry.service, pluginEntry.plugin);
        }
    }
    
    public void exec(final String s, final String s2, final String s3, final String s4) {
        final CordovaPlugin plugin = this.getPlugin(s);
        if (plugin == null) {
            Log.d(PluginManager.TAG, "exec() call to unknown plugin: " + s);
            this.app.sendPluginResult(new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION), s3);
        }
        else {
            final CallbackContext callbackContext = new CallbackContext(s3, this.app);
            try {
                final long currentTimeMillis = System.currentTimeMillis();
                final boolean execute = plugin.execute(s2, s4, callbackContext);
                final long n = System.currentTimeMillis() - currentTimeMillis;
                if (n > PluginManager.SLOW_EXEC_WARNING_THRESHOLD) {
                    Log.w(PluginManager.TAG, "THREAD WARNING: exec() call to " + s + "." + s2 + " blocked the main thread for " + n + "ms. Plugin should use CordovaInterface.getThreadPool().");
                }
                if (!execute) {
                    callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.INVALID_ACTION));
                }
            }
            catch (JSONException ex2) {
                callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.JSON_EXCEPTION));
            }
            catch (Exception ex) {
                Log.e(PluginManager.TAG, "Uncaught exception from plugin", (Throwable)ex);
                callbackContext.error(ex.getMessage());
            }
        }
    }
    
    public CordovaPlugin getPlugin(final String s) {
        CordovaPlugin cordovaPlugin = this.pluginMap.get(s);
        if (cordovaPlugin == null) {
            final PluginEntry pluginEntry = this.entryMap.get(s);
            if (pluginEntry == null) {
                return null;
            }
            if (pluginEntry.plugin != null) {
                cordovaPlugin = pluginEntry.plugin;
            }
            else {
                cordovaPlugin = this.instantiatePlugin(pluginEntry.pluginClass);
            }
            cordovaPlugin.privateInitialize(s, this.ctx, this.app, this.app.getPreferences());
            this.pluginMap.put(s, cordovaPlugin);
        }
        return cordovaPlugin;
    }
    
    public Collection<PluginEntry> getPluginEntries() {
        return this.entryMap.values();
    }
    
    public void init() {
        LOG.d(PluginManager.TAG, "init()");
        this.isInitialized = true;
        this.onPause(false);
        this.onDestroy();
        this.pluginMap.clear();
        this.startupPlugins();
    }
    
    public void onConfigurationChanged(final Configuration configuration) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onConfigurationChanged(configuration);
            }
        }
    }
    
    public void onDestroy() {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onDestroy();
            }
        }
    }
    
    public void onNewIntent(final Intent intent) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onNewIntent(intent);
            }
        }
    }
    
    public boolean onOverrideUrlLoading(final String s) {
        final Iterator<PluginEntry> iterator = this.entryMap.values().iterator();
        while (iterator.hasNext()) {
            final CordovaPlugin cordovaPlugin = this.pluginMap.get(iterator.next().service);
            if (cordovaPlugin != null && cordovaPlugin.onOverrideUrlLoading(s)) {
                return true;
            }
        }
        return false;
    }
    
    public void onPause(final boolean b) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onPause(b);
            }
        }
    }
    
    public boolean onReceivedClientCertRequest(final CordovaWebView cordovaWebView, final ICordovaClientCertRequest cordovaClientCertRequest) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null && cordovaPlugin.onReceivedClientCertRequest(this.app, cordovaClientCertRequest)) {
                return true;
            }
        }
        return false;
    }
    
    public boolean onReceivedHttpAuthRequest(final CordovaWebView cordovaWebView, final ICordovaHttpAuthHandler cordovaHttpAuthHandler, final String s, final String s2) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null && cordovaPlugin.onReceivedHttpAuthRequest(this.app, cordovaHttpAuthHandler, s, s2)) {
                return true;
            }
        }
        return false;
    }
    
    public void onReset() {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onReset();
            }
        }
    }
    
    public void onResume(final boolean b) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onResume(b);
            }
        }
    }
    
    public void onStart() {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onStart();
            }
        }
    }
    
    public void onStop() {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                cordovaPlugin.onStop();
            }
        }
    }
    
    public Object postMessage(final String s, final Object o) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                final Object onMessage = cordovaPlugin.onMessage(s, o);
                if (onMessage != null) {
                    return onMessage;
                }
                continue;
            }
        }
        return this.ctx.onMessage(s, o);
    }
    
    Uri remapUri(final Uri uri) {
        for (final CordovaPlugin cordovaPlugin : this.pluginMap.values()) {
            if (cordovaPlugin != null) {
                final Uri remapUri = cordovaPlugin.remapUri(uri);
                if (remapUri != null) {
                    return remapUri;
                }
                continue;
            }
        }
        return null;
    }
    
    public void setPluginEntries(final Collection<PluginEntry> collection) {
        if (this.isInitialized) {
            this.onPause(false);
            this.onDestroy();
            this.pluginMap.clear();
            this.entryMap.clear();
        }
        final Iterator<PluginEntry> iterator = collection.iterator();
        while (iterator.hasNext()) {
            this.addService(iterator.next());
        }
        if (this.isInitialized) {
            this.startupPlugins();
        }
    }
    
    public boolean shouldAllowBridgeAccess(final String s) {
        final Iterator<PluginEntry> iterator = this.entryMap.values().iterator();
        while (iterator.hasNext()) {
            final CordovaPlugin cordovaPlugin = this.pluginMap.get(iterator.next().service);
            if (cordovaPlugin != null) {
                final Boolean shouldAllowBridgeAccess = cordovaPlugin.shouldAllowBridgeAccess(s);
                if (shouldAllowBridgeAccess != null) {
                    return shouldAllowBridgeAccess;
                }
                continue;
            }
        }
        return s.startsWith("file://");
    }
    
    public boolean shouldAllowNavigation(final String s) {
        final Iterator<PluginEntry> iterator = this.entryMap.values().iterator();
        while (iterator.hasNext()) {
            final CordovaPlugin cordovaPlugin = this.pluginMap.get(iterator.next().service);
            if (cordovaPlugin != null) {
                final Boolean shouldAllowNavigation = cordovaPlugin.shouldAllowNavigation(s);
                if (shouldAllowNavigation != null) {
                    return shouldAllowNavigation;
                }
                continue;
            }
        }
        return s.startsWith("file://") || s.startsWith("about:blank");
    }
    
    public boolean shouldAllowRequest(final String s) {
        boolean booleanValue = true;
        final Iterator<PluginEntry> iterator = this.entryMap.values().iterator();
        while (iterator.hasNext()) {
            final CordovaPlugin cordovaPlugin = this.pluginMap.get(iterator.next().service);
            if (cordovaPlugin != null) {
                final Boolean shouldAllowRequest = cordovaPlugin.shouldAllowRequest(s);
                if (shouldAllowRequest != null) {
                    booleanValue = shouldAllowRequest;
                    return booleanValue;
                }
                continue;
            }
        }
        if (s.startsWith("blob:") || s.startsWith("data:") || s.startsWith("about:blank") || s.startsWith("https://ssl.gstatic.com/accessibility/javascript/android/")) {
            return booleanValue;
        }
        if (!s.startsWith("file://")) {
            return false;
        }
        if (s.contains("/app_webview/")) {
            return false;
        }
        return booleanValue;
    }
    
    public Boolean shouldOpenExternalUrl(final String s) {
        final Iterator<PluginEntry> iterator = this.entryMap.values().iterator();
        while (iterator.hasNext()) {
            final CordovaPlugin cordovaPlugin = this.pluginMap.get(iterator.next().service);
            if (cordovaPlugin != null) {
                final Boolean shouldOpenExternalUrl = cordovaPlugin.shouldOpenExternalUrl(s);
                if (shouldOpenExternalUrl != null) {
                    return shouldOpenExternalUrl;
                }
                continue;
            }
        }
        return false;
    }
}
