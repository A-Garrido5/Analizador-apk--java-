// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.file;

import android.net.Uri$Builder;
import android.content.ContentResolver;
import java.io.FileNotFoundException;
import org.json.JSONException;
import java.io.IOException;
import org.json.JSONObject;
import java.io.File;
import android.database.Cursor;
import android.net.Uri;
import org.apache.cordova.CordovaResourceApi;
import android.content.Context;

public class ContentFilesystem extends Filesystem
{
    private final Context context;
    
    public ContentFilesystem(final Context context, final CordovaResourceApi cordovaResourceApi) {
        super(Uri.parse("content://"), "content", cordovaResourceApi);
        this.context = context;
    }
    
    private Long resourceSizeForCursor(final Cursor cursor) {
        final int columnIndex = cursor.getColumnIndex("_size");
        if (columnIndex != -1) {
            final String string = cursor.getString(columnIndex);
            if (string != null) {
                return Long.parseLong(string);
            }
        }
        return null;
    }
    
    public LocalFilesystemURL URLforFilesystemPath(final String s) {
        return null;
    }
    
    public boolean canRemoveFileAtLocalURL(final LocalFilesystemURL localFilesystemURL) {
        return true;
    }
    
    public String filesystemPathForURL(final LocalFilesystemURL localFilesystemURL) {
        final File mapUriToFile = this.resourceApi.mapUriToFile(this.toNativeUri(localFilesystemURL));
        String absolutePath;
        if (mapUriToFile == null) {
            absolutePath = null;
        }
        else {
            absolutePath = mapUriToFile.getAbsolutePath();
        }
        return absolutePath;
    }
    
    public JSONObject getFileForLocalURL(final LocalFilesystemURL localFilesystemURL, final String s, final JSONObject jsonObject, final boolean b) throws IOException, TypeMismatchException, JSONException {
        throw new UnsupportedOperationException("getFile() not supported for content:. Use resolveLocalFileSystemURL instead.");
    }
    
    public JSONObject getFileMetadataForLocalURL(final LocalFilesystemURL p0) throws FileNotFoundException {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: lconst_0       
        //     1: lstore_2       
        //     2: aload_0        
        //     3: aload_1        
        //     4: invokevirtual   org/apache/cordova/file/ContentFilesystem.toNativeUri:(Lorg/apache/cordova/file/LocalFilesystemURL;)Landroid/net/Uri;
        //     7: astore          4
        //     9: aload_0        
        //    10: getfield        org/apache/cordova/file/ContentFilesystem.resourceApi:Lorg/apache/cordova/CordovaResourceApi;
        //    13: aload           4
        //    15: invokevirtual   org/apache/cordova/CordovaResourceApi.getMimeType:(Landroid/net/Uri;)Ljava/lang/String;
        //    18: astore          5
        //    20: aload_0        
        //    21: aload           4
        //    23: invokevirtual   org/apache/cordova/file/ContentFilesystem.openCursorForURL:(Landroid/net/Uri;)Landroid/database/Cursor;
        //    26: astore          6
        //    28: aload           6
        //    30: ifnull          145
        //    33: aload           6
        //    35: invokeinterface android/database/Cursor.moveToFirst:()Z
        //    40: ifeq            145
        //    43: aload_0        
        //    44: aload           6
        //    46: invokespecial   org/apache/cordova/file/ContentFilesystem.resourceSizeForCursor:(Landroid/database/Cursor;)Ljava/lang/Long;
        //    49: invokevirtual   java/lang/Long.longValue:()J
        //    52: lstore          12
        //    54: aload_0        
        //    55: aload           6
        //    57: invokevirtual   org/apache/cordova/file/ContentFilesystem.lastModifiedDateForCursor:(Landroid/database/Cursor;)Ljava/lang/Long;
        //    60: invokevirtual   java/lang/Long.longValue:()J
        //    63: lstore          21
        //    65: lload           21
        //    67: lstore_2       
        //    68: aload           6
        //    70: ifnull          80
        //    73: aload           6
        //    75: invokeinterface android/database/Cursor.close:()V
        //    80: new             Lorg/json/JSONObject;
        //    83: dup            
        //    84: invokespecial   org/json/JSONObject.<init>:()V
        //    87: astore          14
        //    89: aload           14
        //    91: ldc             "size"
        //    93: lload           12
        //    95: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;
        //    98: pop            
        //    99: aload           14
        //   101: ldc             "type"
        //   103: aload           5
        //   105: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   108: pop            
        //   109: aload           14
        //   111: ldc             "name"
        //   113: aload_0        
        //   114: getfield        org/apache/cordova/file/ContentFilesystem.name:Ljava/lang/String;
        //   117: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   120: pop            
        //   121: aload           14
        //   123: ldc             "fullPath"
        //   125: aload_1        
        //   126: getfield        org/apache/cordova/file/LocalFilesystemURL.path:Ljava/lang/String;
        //   129: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   132: pop            
        //   133: aload           14
        //   135: ldc             "lastModifiedDate"
        //   137: lload_2        
        //   138: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;
        //   141: pop            
        //   142: aload           14
        //   144: areturn        
        //   145: aload_0        
        //   146: getfield        org/apache/cordova/file/ContentFilesystem.resourceApi:Lorg/apache/cordova/CordovaResourceApi;
        //   149: aload           4
        //   151: invokevirtual   org/apache/cordova/CordovaResourceApi.openForRead:(Landroid/net/Uri;)Lorg/apache/cordova/CordovaResourceApi$OpenForReadResult;
        //   154: getfield        org/apache/cordova/CordovaResourceApi$OpenForReadResult.length:J
        //   157: lstore          10
        //   159: lload           10
        //   161: lstore          12
        //   163: goto            68
        //   166: astore          8
        //   168: new             Ljava/io/FileNotFoundException;
        //   171: dup            
        //   172: invokespecial   java/io/FileNotFoundException.<init>:()V
        //   175: astore          9
        //   177: aload           9
        //   179: athrow         
        //   180: astore          7
        //   182: aload           6
        //   184: ifnull          194
        //   187: aload           6
        //   189: invokeinterface android/database/Cursor.close:()V
        //   194: aload           7
        //   196: athrow         
        //   197: astore          15
        //   199: aconst_null    
        //   200: areturn        
        //    Exceptions:
        //  throws java.io.FileNotFoundException
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                    
        //  -----  -----  -----  -----  ------------------------
        //  33     65     166    180    Ljava/io/IOException;
        //  33     65     180    197    Any
        //  89     142    197    201    Lorg/json/JSONException;
        //  145    159    166    180    Ljava/io/IOException;
        //  145    159    180    197    Any
        //  168    180    180    197    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0145:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    protected Long lastModifiedDateForCursor(final Cursor cursor) {
        final int columnIndex = cursor.getColumnIndex((new String[] { "date_modified" })[0]);
        if (columnIndex != -1) {
            final String string = cursor.getString(columnIndex);
            if (string != null) {
                return Long.parseLong(string);
            }
        }
        return null;
    }
    
    public LocalFilesystemURL[] listChildren(final LocalFilesystemURL localFilesystemURL) throws FileNotFoundException {
        throw new UnsupportedOperationException("readEntriesAtLocalURL() not supported for content:. Use resolveLocalFileSystemURL instead.");
    }
    
    protected Cursor openCursorForURL(final Uri uri) {
        final ContentResolver contentResolver = this.context.getContentResolver();
        try {
            return contentResolver.query(uri, (String[])null, (String)null, (String[])null, (String)null);
        }
        catch (UnsupportedOperationException ex) {
            return null;
        }
    }
    
    public boolean recursiveRemoveFileAtLocalURL(final LocalFilesystemURL localFilesystemURL) throws NoModificationAllowedException {
        throw new NoModificationAllowedException("Cannot remove content url");
    }
    
    public boolean removeFileAtLocalURL(final LocalFilesystemURL localFilesystemURL) throws NoModificationAllowedException {
        final Uri nativeUri = this.toNativeUri(localFilesystemURL);
        try {
            this.context.getContentResolver().delete(nativeUri, (String)null, (String[])null);
            return true;
        }
        catch (UnsupportedOperationException ex) {
            throw new NoModificationAllowedException("Deleting not supported for content uri: " + nativeUri);
        }
    }
    
    @Override
    public LocalFilesystemURL toLocalUri(final Uri uri) {
        if (!"content".equals(uri.getScheme())) {
            return null;
        }
        String s = uri.getEncodedPath();
        if (s.length() > 0) {
            s = s.substring(1);
        }
        final Uri$Builder appendPath = new Uri$Builder().scheme("cdvfile").authority("localhost").path(this.name).appendPath(uri.getAuthority());
        if (s.length() > 0) {
            appendPath.appendEncodedPath(s);
        }
        return LocalFilesystemURL.parse(appendPath.encodedQuery(uri.getEncodedQuery()).encodedFragment(uri.getEncodedFragment()).build());
    }
    
    @Override
    public Uri toNativeUri(final LocalFilesystemURL localFilesystemURL) {
        final String substring = localFilesystemURL.uri.getEncodedPath().substring(2 + this.name.length());
        if (substring.length() < 2) {
            return null;
        }
        String s = "content://" + substring;
        final String encodedQuery = localFilesystemURL.uri.getEncodedQuery();
        if (encodedQuery != null) {
            s = s + '?' + encodedQuery;
        }
        final String encodedFragment = localFilesystemURL.uri.getEncodedFragment();
        if (encodedFragment != null) {
            s = s + '#' + encodedFragment;
        }
        return Uri.parse(s);
    }
    
    public long truncateFileAtURL(final LocalFilesystemURL localFilesystemURL, final long n) throws NoModificationAllowedException {
        throw new NoModificationAllowedException("Couldn't truncate file given its content URI");
    }
    
    public long writeToFileAtURL(final LocalFilesystemURL localFilesystemURL, final String s, final int n, final boolean b) throws NoModificationAllowedException {
        throw new NoModificationAllowedException("Couldn't write to file given its content URI");
    }
}
