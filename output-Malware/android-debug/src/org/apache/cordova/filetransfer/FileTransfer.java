// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.filetransfer;

import java.io.FilterInputStream;
import java.util.zip.Inflater;
import java.util.zip.GZIPInputStream;
import javax.net.ssl.KeyManager;
import java.security.SecureRandom;
import javax.net.ssl.SSLContext;
import java.lang.reflect.Method;
import org.apache.cordova.CordovaWebView;
import java.lang.reflect.InvocationTargetException;
import android.webkit.CookieManager;
import org.apache.cordova.CallbackContext;
import java.io.InputStream;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import android.util.Log;
import java.util.Iterator;
import org.json.JSONException;
import org.json.JSONArray;
import java.io.IOException;
import java.io.Closeable;
import org.json.JSONObject;
import java.net.URLConnection;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.HttpsURLConnection;
import java.io.File;
import org.apache.cordova.PluginResult;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.X509TrustManager;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import java.util.HashMap;
import javax.net.ssl.HostnameVerifier;
import org.apache.cordova.CordovaPlugin;

public class FileTransfer extends CordovaPlugin
{
    public static int ABORTED_ERR = 0;
    private static final String BOUNDARY = "+++++";
    public static int CONNECTION_ERR = 0;
    private static final HostnameVerifier DO_NOT_VERIFY;
    public static int FILE_NOT_FOUND_ERR = 0;
    public static int INVALID_URL_ERR = 0;
    private static final String LINE_END = "\r\n";
    private static final String LINE_START = "--";
    private static final String LOG_TAG = "FileTransfer";
    private static final int MAX_BUFFER_SIZE = 16384;
    public static int NOT_MODIFIED_ERR;
    private static HashMap<String, RequestContext> activeRequests;
    private static final TrustManager[] trustAllCerts;
    
    static {
        FileTransfer.FILE_NOT_FOUND_ERR = 1;
        FileTransfer.INVALID_URL_ERR = 2;
        FileTransfer.CONNECTION_ERR = 3;
        FileTransfer.ABORTED_ERR = 4;
        FileTransfer.NOT_MODIFIED_ERR = 5;
        FileTransfer.activeRequests = new HashMap<String, RequestContext>();
        DO_NOT_VERIFY = new HostnameVerifier() {
            @Override
            public boolean verify(final String s, final SSLSession sslSession) {
                return true;
            }
        };
        trustAllCerts = new TrustManager[] { new X509TrustManager() {
                @Override
                public void checkClientTrusted(final X509Certificate[] array, final String s) throws CertificateException {
                }
                
                @Override
                public void checkServerTrusted(final X509Certificate[] array, final String s) throws CertificateException {
                }
                
                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }
            } };
    }
    
    private void abort(final String s) {
        synchronized (FileTransfer.activeRequests) {
            final RequestContext requestContext = FileTransfer.activeRequests.remove(s);
            // monitorexit(FileTransfer.activeRequests)
            if (requestContext != null) {
                this.cordova.getThreadPool().execute(new Runnable() {
                    @Override
                    public void run() {
                        synchronized (requestContext) {
                            final File targetFile = requestContext.targetFile;
                            if (targetFile != null) {
                                targetFile.delete();
                            }
                            requestContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, createFileTransferError(FileTransfer.ABORTED_ERR, requestContext.source, requestContext.target, null, -1, null)));
                            requestContext.aborted = true;
                            if (requestContext.connection != null) {
                                requestContext.connection.disconnect();
                            }
                        }
                    }
                });
            }
        }
    }
    
    private static void addHeadersToRequest(final URLConnection urlConnection, final JSONObject jsonObject) {
        try {
            final Iterator keys = jsonObject.keys();
            while (keys.hasNext()) {
                final String string = keys.next().toString();
                final String replaceAll = string.replaceAll("\\n", "").replaceAll("\\s+", "").replaceAll(":", "").replaceAll("[^\\x20-\\x7E]+", "");
                JSONArray optJSONArray = jsonObject.optJSONArray(string);
                if (optJSONArray == null) {
                    optJSONArray = new JSONArray();
                    optJSONArray.put((Object)jsonObject.getString(string).replaceAll("\\s+", " ").replaceAll("\\n", " ").replaceAll("[^\\x20-\\x7E]+", " "));
                }
                urlConnection.setRequestProperty(replaceAll, optJSONArray.getString(0));
                for (int i = 1; i < optJSONArray.length(); ++i) {
                    urlConnection.addRequestProperty(string, optJSONArray.getString(i));
                }
            }
        }
        catch (JSONException ex) {}
    }
    
    private static JSONObject createFileTransferError(final int n, final String s, final String s2, final String s3, final Integer n2, final Throwable t) {
        JSONObject jsonObject = null;
        try {
            jsonObject = new JSONObject();
            jsonObject.put("code", n);
            jsonObject.put("source", (Object)s);
            jsonObject.put("target", (Object)s2);
            if (s3 != null) {
                jsonObject.put("body", (Object)s3);
            }
            if (n2 != null) {
                jsonObject.put("http_status", (Object)n2);
            }
            if (t != null) {
                String s4 = t.getMessage();
                if (s4 == null || "".equals(s4)) {
                    s4 = t.toString();
                }
                jsonObject.put("exception", (Object)s4);
            }
            return jsonObject;
        }
        catch (JSONException ex) {
            Log.e("FileTransfer", ex.getMessage(), (Throwable)ex);
            return jsonObject;
        }
    }
    
    private static JSONObject createFileTransferError(final int n, final String s, final String s2, final URLConnection urlConnection, final Throwable t) {
        final StringBuilder sb = new StringBuilder();
        int responseCode = 0;
        String string = null;
        while (true) {
            if (urlConnection == null) {
                break Label_0146;
            }
            try {
                final boolean b = urlConnection instanceof HttpURLConnection;
                responseCode = 0;
                string = null;
                if (!b) {
                    break Label_0146;
                }
                responseCode = ((HttpURLConnection)urlConnection).getResponseCode();
                final InputStream errorStream = ((HttpURLConnection)urlConnection).getErrorStream();
                string = null;
                if (errorStream == null) {
                    break Label_0146;
                }
                final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(errorStream, "UTF-8"));
                try {
                    String s3 = bufferedReader.readLine();
                    while (s3 != null) {
                        sb.append(s3);
                        s3 = bufferedReader.readLine();
                        if (s3 != null) {
                            sb.append('\n');
                        }
                    }
                    string = sb.toString();
                    bufferedReader.close();
                    return createFileTransferError(n, s, s2, string, responseCode, t);
                }
                finally {
                    bufferedReader.close();
                }
            }
            catch (Throwable t2) {
                Log.w("FileTransfer", "Error getting HTTP status code from connection.", t2);
                continue;
            }
            break;
        }
    }
    
    private void download(final String p0, final String p1, final JSONArray p2, final CallbackContext p3) throws JSONException {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Ljava/lang/StringBuilder;
        //     3: dup            
        //     4: invokespecial   java/lang/StringBuilder.<init>:()V
        //     7: astore          5
        //     9: ldc             "FileTransfer"
        //    11: aload           5
        //    13: ldc_w           "download "
        //    16: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    19: aload_1        
        //    20: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    23: ldc_w           " to "
        //    26: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    29: aload_2        
        //    30: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    33: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    36: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //    39: pop            
        //    40: aload_0        
        //    41: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //    44: invokeinterface org/apache/cordova/CordovaWebView.getResourceApi:()Lorg/apache/cordova/CordovaResourceApi;
        //    49: astore          7
        //    51: aload_3        
        //    52: iconst_2       
        //    53: invokevirtual   org/json/JSONArray.optBoolean:(I)Z
        //    56: istore          8
        //    58: aload_3        
        //    59: iconst_3       
        //    60: invokevirtual   org/json/JSONArray.getString:(I)Ljava/lang/String;
        //    63: astore          9
        //    65: aload_3        
        //    66: iconst_4       
        //    67: invokevirtual   org/json/JSONArray.optJSONObject:(I)Lorg/json/JSONObject;
        //    70: astore          10
        //    72: aload           7
        //    74: aload_1        
        //    75: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
        //    78: invokevirtual   org/apache/cordova/CordovaResourceApi.remapUri:(Landroid/net/Uri;)Landroid/net/Uri;
        //    81: astore          11
        //    83: aload_2        
        //    84: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
        //    87: astore          12
        //    89: aload           12
        //    91: invokevirtual   android/net/Uri.getScheme:()Ljava/lang/String;
        //    94: ifnull          224
        //    97: aload           12
        //    99: astore          14
        //   101: aload           7
        //   103: aload           14
        //   105: invokevirtual   org/apache/cordova/CordovaResourceApi.remapUri:(Landroid/net/Uri;)Landroid/net/Uri;
        //   108: astore          15
        //   110: aload           11
        //   112: invokestatic    org/apache/cordova/CordovaResourceApi.getUriType:(Landroid/net/Uri;)I
        //   115: istore          16
        //   117: iload           16
        //   119: bipush          6
        //   121: if_icmpne       244
        //   124: iconst_1       
        //   125: istore          17
        //   127: iload           17
        //   129: istore          18
        //   131: iload           18
        //   133: ifne            250
        //   136: iload           16
        //   138: iconst_5       
        //   139: if_icmpeq       250
        //   142: iconst_1       
        //   143: istore          19
        //   145: iload           19
        //   147: istore          20
        //   149: iload           16
        //   151: iconst_m1      
        //   152: if_icmpne       256
        //   155: getstatic       org/apache/cordova/filetransfer/FileTransfer.INVALID_URL_ERR:I
        //   158: aload_1        
        //   159: aload_2        
        //   160: aconst_null    
        //   161: iconst_0       
        //   162: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   165: aconst_null    
        //   166: invokestatic    org/apache/cordova/filetransfer/FileTransfer.createFileTransferError:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Throwable;)Lorg/json/JSONObject;
        //   169: astore          41
        //   171: new             Ljava/lang/StringBuilder;
        //   174: dup            
        //   175: invokespecial   java/lang/StringBuilder.<init>:()V
        //   178: astore          42
        //   180: ldc             "FileTransfer"
        //   182: aload           42
        //   184: ldc_w           "Unsupported URI: "
        //   187: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   190: aload           11
        //   192: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   195: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   198: invokestatic    android/util/Log.e:(Ljava/lang/String;Ljava/lang/String;)I
        //   201: pop            
        //   202: new             Lorg/apache/cordova/PluginResult;
        //   205: dup            
        //   206: getstatic       org/apache/cordova/PluginResult$Status.IO_EXCEPTION:Lorg/apache/cordova/PluginResult$Status;
        //   209: aload           41
        //   211: invokespecial   org/apache/cordova/PluginResult.<init>:(Lorg/apache/cordova/PluginResult$Status;Lorg/json/JSONObject;)V
        //   214: astore          44
        //   216: aload           4
        //   218: aload           44
        //   220: invokevirtual   org/apache/cordova/CallbackContext.sendPluginResult:(Lorg/apache/cordova/PluginResult;)V
        //   223: return         
        //   224: new             Ljava/io/File;
        //   227: dup            
        //   228: aload_2        
        //   229: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //   232: astore          13
        //   234: aload           13
        //   236: invokestatic    android/net/Uri.fromFile:(Ljava/io/File;)Landroid/net/Uri;
        //   239: astore          14
        //   241: goto            101
        //   244: iconst_0       
        //   245: istore          17
        //   247: goto            127
        //   250: iconst_0       
        //   251: istore          19
        //   253: goto            145
        //   256: aconst_null    
        //   257: astore          21
        //   259: iload           20
        //   261: ifeq            270
        //   264: iconst_1       
        //   265: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   268: astore          21
        //   270: aload           21
        //   272: ifnonnull       319
        //   275: aload_0        
        //   276: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //   279: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //   282: ldc_w           "getWhitelist"
        //   285: iconst_0       
        //   286: anewarray       Ljava/lang/Class;
        //   289: invokevirtual   java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
        //   292: aload_0        
        //   293: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //   296: iconst_0       
        //   297: anewarray       Ljava/lang/Object;
        //   300: invokevirtual   java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
        //   303: checkcast       Lorg/apache/cordova/Whitelist;
        //   306: aload_1        
        //   307: invokevirtual   org/apache/cordova/Whitelist.isUrlWhiteListed:(Ljava/lang/String;)Z
        //   310: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   313: astore          40
        //   315: aload           40
        //   317: astore          21
        //   319: aload           21
        //   321: ifnonnull       399
        //   324: aload_0        
        //   325: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //   328: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //   331: ldc_w           "getPluginManager"
        //   334: iconst_0       
        //   335: anewarray       Ljava/lang/Class;
        //   338: invokevirtual   java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
        //   341: aload_0        
        //   342: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //   345: iconst_0       
        //   346: anewarray       Ljava/lang/Object;
        //   349: invokevirtual   java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
        //   352: checkcast       Lorg/apache/cordova/PluginManager;
        //   355: astore          35
        //   357: aload           35
        //   359: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //   362: ldc_w           "shouldAllowRequest"
        //   365: iconst_1       
        //   366: anewarray       Ljava/lang/Class;
        //   369: dup            
        //   370: iconst_0       
        //   371: ldc             Ljava/lang/String;.class
        //   373: aastore        
        //   374: invokevirtual   java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
        //   377: aload           35
        //   379: iconst_1       
        //   380: anewarray       Ljava/lang/Object;
        //   383: dup            
        //   384: iconst_0       
        //   385: aload_1        
        //   386: aastore        
        //   387: invokevirtual   java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
        //   390: checkcast       Ljava/lang/Boolean;
        //   393: astore          36
        //   395: aload           36
        //   397: astore          21
        //   399: getstatic       java/lang/Boolean.TRUE:Ljava/lang/Boolean;
        //   402: aload           21
        //   404: invokevirtual   java/lang/Boolean.equals:(Ljava/lang/Object;)Z
        //   407: ifne            516
        //   410: new             Ljava/lang/StringBuilder;
        //   413: dup            
        //   414: invokespecial   java/lang/StringBuilder.<init>:()V
        //   417: astore          22
        //   419: ldc             "FileTransfer"
        //   421: aload           22
        //   423: ldc_w           "Source URL is not in white list: '"
        //   426: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   429: aload_1        
        //   430: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   433: ldc_w           "'"
        //   436: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   439: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   442: invokestatic    android/util/Log.w:(Ljava/lang/String;Ljava/lang/String;)I
        //   445: pop            
        //   446: getstatic       org/apache/cordova/filetransfer/FileTransfer.CONNECTION_ERR:I
        //   449: aload_1        
        //   450: aload_2        
        //   451: aconst_null    
        //   452: sipush          401
        //   455: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   458: aconst_null    
        //   459: invokestatic    org/apache/cordova/filetransfer/FileTransfer.createFileTransferError:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Throwable;)Lorg/json/JSONObject;
        //   462: astore          24
        //   464: new             Lorg/apache/cordova/PluginResult;
        //   467: dup            
        //   468: getstatic       org/apache/cordova/PluginResult$Status.IO_EXCEPTION:Lorg/apache/cordova/PluginResult$Status;
        //   471: aload           24
        //   473: invokespecial   org/apache/cordova/PluginResult.<init>:(Lorg/apache/cordova/PluginResult$Status;Lorg/json/JSONObject;)V
        //   476: astore          25
        //   478: aload           4
        //   480: aload           25
        //   482: invokevirtual   org/apache/cordova/CallbackContext.sendPluginResult:(Lorg/apache/cordova/PluginResult;)V
        //   485: return         
        //   486: astore          39
        //   488: goto            319
        //   491: astore          38
        //   493: goto            319
        //   496: astore          37
        //   498: goto            319
        //   501: astore          34
        //   503: goto            399
        //   506: astore          33
        //   508: goto            399
        //   511: astore          32
        //   513: goto            399
        //   516: new             Lorg/apache/cordova/filetransfer/FileTransfer$RequestContext;
        //   519: dup            
        //   520: aload_1        
        //   521: aload_2        
        //   522: aload           4
        //   524: invokespecial   org/apache/cordova/filetransfer/FileTransfer$RequestContext.<init>:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/cordova/CallbackContext;)V
        //   527: astore          26
        //   529: getstatic       org/apache/cordova/filetransfer/FileTransfer.activeRequests:Ljava/util/HashMap;
        //   532: astore          27
        //   534: aload           27
        //   536: monitorenter   
        //   537: getstatic       org/apache/cordova/filetransfer/FileTransfer.activeRequests:Ljava/util/HashMap;
        //   540: aload           9
        //   542: aload           26
        //   544: invokevirtual   java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   547: pop            
        //   548: aload           27
        //   550: monitorexit    
        //   551: aload_0        
        //   552: getfield        org/apache/cordova/filetransfer/FileTransfer.cordova:Lorg/apache/cordova/CordovaInterface;
        //   555: invokeinterface org/apache/cordova/CordovaInterface.getThreadPool:()Ljava/util/concurrent/ExecutorService;
        //   560: astore          30
        //   562: new             Lorg/apache/cordova/filetransfer/FileTransfer$4;
        //   565: dup            
        //   566: aload_0        
        //   567: aload           26
        //   569: aload           7
        //   571: aload           15
        //   573: aload           11
        //   575: iload           20
        //   577: iload           18
        //   579: iload           8
        //   581: aload           10
        //   583: aload_1        
        //   584: aload_2        
        //   585: aload           9
        //   587: invokespecial   org/apache/cordova/filetransfer/FileTransfer$4.<init>:(Lorg/apache/cordova/filetransfer/FileTransfer;Lorg/apache/cordova/filetransfer/FileTransfer$RequestContext;Lorg/apache/cordova/CordovaResourceApi;Landroid/net/Uri;Landroid/net/Uri;ZZZLorg/json/JSONObject;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
        //   590: astore          31
        //   592: aload           30
        //   594: aload           31
        //   596: invokeinterface java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
        //   601: return         
        //   602: astore          28
        //   604: aload           27
        //   606: monitorexit    
        //   607: aload           28
        //   609: athrow         
        //    Exceptions:
        //  throws org.json.JSONException
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                         
        //  -----  -----  -----  -----  ---------------------------------------------
        //  275    315    486    491    Ljava/lang/NoSuchMethodException;
        //  275    315    491    496    Ljava/lang/IllegalAccessException;
        //  275    315    496    501    Ljava/lang/reflect/InvocationTargetException;
        //  324    395    501    506    Ljava/lang/NoSuchMethodException;
        //  324    395    506    511    Ljava/lang/IllegalAccessException;
        //  324    395    511    516    Ljava/lang/reflect/InvocationTargetException;
        //  537    551    602    610    Any
        //  604    607    602    610    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0399:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static String getArgument(final JSONArray jsonArray, final int n, final String s) {
        String optString = s;
        if (jsonArray.length() > n) {
            optString = jsonArray.optString(n);
            if (optString == null || "null".equals(optString)) {
                optString = s;
            }
        }
        return optString;
    }
    
    private String getCookies(final String s) {
        final Class<? extends CordovaWebView> class1 = this.webView.getClass();
        while (true) {
            try {
                final Method method = class1.getMethod("getCookieManager", (Class<?>[])new Class[0]);
                final Class<?> returnType = method.getReturnType();
                String cookie = (String)returnType.getMethod("getCookie", String.class).invoke(returnType.cast(method.invoke(this.webView, new Object[0])), s);
                final int n = 1;
                if (n == 0) {
                    cookie = CookieManager.getInstance().getCookie(s);
                }
                return cookie;
            }
            catch (NoSuchMethodException ex) {
                final int n = 0;
                final String cookie = null;
                continue;
            }
            catch (IllegalAccessException ex2) {
                final int n = 0;
                final String cookie = null;
                continue;
            }
            catch (InvocationTargetException ex3) {
                final int n = 0;
                final String cookie = null;
                continue;
            }
            catch (ClassCastException ex4) {
                final int n = 0;
                final String cookie = null;
                continue;
            }
            break;
        }
    }
    
    private static TrackingInputStream getInputStream(final URLConnection urlConnection) throws IOException {
        final String contentEncoding = urlConnection.getContentEncoding();
        if (contentEncoding != null && contentEncoding.equalsIgnoreCase("gzip")) {
            return (TrackingInputStream)new TrackingGZIPInputStream(new ExposedGZIPInputStream(urlConnection.getInputStream()));
        }
        return (TrackingInputStream)new SimpleTrackingInputStream(urlConnection.getInputStream());
    }
    
    private static void safeClose(final Closeable closeable) {
        if (closeable == null) {
            return;
        }
        try {
            closeable.close();
        }
        catch (IOException ex) {}
    }
    
    private static SSLSocketFactory trustAllHosts(final HttpsURLConnection httpsURLConnection) {
        final SSLSocketFactory sslSocketFactory = httpsURLConnection.getSSLSocketFactory();
        try {
            final SSLContext instance = SSLContext.getInstance("TLS");
            instance.init(null, FileTransfer.trustAllCerts, new SecureRandom());
            httpsURLConnection.setSSLSocketFactory(instance.getSocketFactory());
            return sslSocketFactory;
        }
        catch (Exception ex) {
            Log.e("FileTransfer", ex.getMessage(), (Throwable)ex);
            return sslSocketFactory;
        }
    }
    
    private void upload(final String p0, final String p1, final JSONArray p2, final CallbackContext p3) throws JSONException {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: new             Ljava/lang/StringBuilder;
        //     3: dup            
        //     4: invokespecial   java/lang/StringBuilder.<init>:()V
        //     7: astore          5
        //     9: ldc             "FileTransfer"
        //    11: aload           5
        //    13: ldc_w           "upload "
        //    16: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    19: aload_1        
        //    20: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    23: ldc_w           " to "
        //    26: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    29: aload_2        
        //    30: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    33: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    36: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //    39: pop            
        //    40: aload_3        
        //    41: iconst_2       
        //    42: ldc_w           "file"
        //    45: invokestatic    org/apache/cordova/filetransfer/FileTransfer.getArgument:(Lorg/json/JSONArray;ILjava/lang/String;)Ljava/lang/String;
        //    48: astore          7
        //    50: aload_3        
        //    51: iconst_3       
        //    52: ldc_w           "image.jpg"
        //    55: invokestatic    org/apache/cordova/filetransfer/FileTransfer.getArgument:(Lorg/json/JSONArray;ILjava/lang/String;)Ljava/lang/String;
        //    58: astore          8
        //    60: aload_3        
        //    61: iconst_4       
        //    62: ldc_w           "image/jpeg"
        //    65: invokestatic    org/apache/cordova/filetransfer/FileTransfer.getArgument:(Lorg/json/JSONArray;ILjava/lang/String;)Ljava/lang/String;
        //    68: astore          9
        //    70: aload_3        
        //    71: iconst_5       
        //    72: invokevirtual   org/json/JSONArray.optJSONObject:(I)Lorg/json/JSONObject;
        //    75: ifnonnull       599
        //    78: aload           56
        //    80: astore          10
        //    82: new             Lorg/json/JSONObject;
        //    85: dup            
        //    86: invokespecial   org/json/JSONObject.<init>:()V
        //    89: astore          56
        //    91: aload           10
        //    93: astore          11
        //    95: aload_3        
        //    96: bipush          6
        //    98: invokevirtual   org/json/JSONArray.optBoolean:(I)Z
        //   101: istore          12
        //   103: aload_3        
        //   104: bipush          7
        //   106: invokevirtual   org/json/JSONArray.optBoolean:(I)Z
        //   109: ifne            121
        //   112: aload_3        
        //   113: bipush          7
        //   115: invokevirtual   org/json/JSONArray.isNull:(I)Z
        //   118: ifeq            609
        //   121: iconst_1       
        //   122: istore          13
        //   124: iload           13
        //   126: istore          14
        //   128: aload_3        
        //   129: bipush          8
        //   131: invokevirtual   org/json/JSONArray.optJSONObject:(I)Lorg/json/JSONObject;
        //   134: ifnonnull       615
        //   137: aload           11
        //   139: ldc_w           "headers"
        //   142: invokevirtual   org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;
        //   145: astore          15
        //   147: aload           15
        //   149: astore          16
        //   151: aload_3        
        //   152: bipush          9
        //   154: invokevirtual   org/json/JSONArray.getString:(I)Ljava/lang/String;
        //   157: astore          17
        //   159: aload_3        
        //   160: bipush          10
        //   162: ldc_w           "POST"
        //   165: invokestatic    org/apache/cordova/filetransfer/FileTransfer.getArgument:(Lorg/json/JSONArray;ILjava/lang/String;)Ljava/lang/String;
        //   168: astore          18
        //   170: aload_0        
        //   171: getfield        org/apache/cordova/filetransfer/FileTransfer.webView:Lorg/apache/cordova/CordovaWebView;
        //   174: invokeinterface org/apache/cordova/CordovaWebView.getResourceApi:()Lorg/apache/cordova/CordovaResourceApi;
        //   179: astore          19
        //   181: new             Ljava/lang/StringBuilder;
        //   184: dup            
        //   185: invokespecial   java/lang/StringBuilder.<init>:()V
        //   188: astore          20
        //   190: ldc             "FileTransfer"
        //   192: aload           20
        //   194: ldc_w           "fileKey: "
        //   197: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   200: aload           7
        //   202: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   205: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   208: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   211: pop            
        //   212: new             Ljava/lang/StringBuilder;
        //   215: dup            
        //   216: invokespecial   java/lang/StringBuilder.<init>:()V
        //   219: astore          22
        //   221: ldc             "FileTransfer"
        //   223: aload           22
        //   225: ldc_w           "fileName: "
        //   228: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   231: aload           8
        //   233: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   236: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   239: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   242: pop            
        //   243: new             Ljava/lang/StringBuilder;
        //   246: dup            
        //   247: invokespecial   java/lang/StringBuilder.<init>:()V
        //   250: astore          24
        //   252: ldc             "FileTransfer"
        //   254: aload           24
        //   256: ldc_w           "mimeType: "
        //   259: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   262: aload           9
        //   264: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   267: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   270: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   273: pop            
        //   274: new             Ljava/lang/StringBuilder;
        //   277: dup            
        //   278: invokespecial   java/lang/StringBuilder.<init>:()V
        //   281: astore          26
        //   283: ldc             "FileTransfer"
        //   285: aload           26
        //   287: ldc_w           "params: "
        //   290: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   293: aload           11
        //   295: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   298: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   301: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   304: pop            
        //   305: new             Ljava/lang/StringBuilder;
        //   308: dup            
        //   309: invokespecial   java/lang/StringBuilder.<init>:()V
        //   312: astore          28
        //   314: ldc             "FileTransfer"
        //   316: aload           28
        //   318: ldc_w           "trustEveryone: "
        //   321: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   324: iload           12
        //   326: invokevirtual   java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
        //   329: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   332: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   335: pop            
        //   336: new             Ljava/lang/StringBuilder;
        //   339: dup            
        //   340: invokespecial   java/lang/StringBuilder.<init>:()V
        //   343: astore          30
        //   345: ldc             "FileTransfer"
        //   347: aload           30
        //   349: ldc_w           "chunkedMode: "
        //   352: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   355: iload           14
        //   357: invokevirtual   java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
        //   360: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   363: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   366: pop            
        //   367: new             Ljava/lang/StringBuilder;
        //   370: dup            
        //   371: invokespecial   java/lang/StringBuilder.<init>:()V
        //   374: astore          32
        //   376: ldc             "FileTransfer"
        //   378: aload           32
        //   380: ldc_w           "headers: "
        //   383: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   386: aload           16
        //   388: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   391: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   394: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   397: pop            
        //   398: new             Ljava/lang/StringBuilder;
        //   401: dup            
        //   402: invokespecial   java/lang/StringBuilder.<init>:()V
        //   405: astore          34
        //   407: ldc             "FileTransfer"
        //   409: aload           34
        //   411: ldc_w           "objectId: "
        //   414: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   417: aload           17
        //   419: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   422: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   425: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   428: pop            
        //   429: new             Ljava/lang/StringBuilder;
        //   432: dup            
        //   433: invokespecial   java/lang/StringBuilder.<init>:()V
        //   436: astore          36
        //   438: ldc             "FileTransfer"
        //   440: aload           36
        //   442: ldc_w           "httpMethod: "
        //   445: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   448: aload           18
        //   450: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   453: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   456: invokestatic    android/util/Log.d:(Ljava/lang/String;Ljava/lang/String;)I
        //   459: pop            
        //   460: aload           19
        //   462: aload_2        
        //   463: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
        //   466: invokevirtual   org/apache/cordova/CordovaResourceApi.remapUri:(Landroid/net/Uri;)Landroid/net/Uri;
        //   469: astore          38
        //   471: aload_1        
        //   472: invokestatic    android/net/Uri.parse:(Ljava/lang/String;)Landroid/net/Uri;
        //   475: astore          39
        //   477: aload           39
        //   479: invokevirtual   android/net/Uri.getScheme:()Ljava/lang/String;
        //   482: ifnull          626
        //   485: aload           39
        //   487: astore          41
        //   489: aload           19
        //   491: aload           41
        //   493: invokevirtual   org/apache/cordova/CordovaResourceApi.remapUri:(Landroid/net/Uri;)Landroid/net/Uri;
        //   496: astore          42
        //   498: aload           38
        //   500: invokestatic    org/apache/cordova/CordovaResourceApi.getUriType:(Landroid/net/Uri;)I
        //   503: istore          43
        //   505: iload           43
        //   507: bipush          6
        //   509: if_icmpne       646
        //   512: iconst_1       
        //   513: istore          44
        //   515: iload           44
        //   517: istore          45
        //   519: iload           43
        //   521: iconst_5       
        //   522: if_icmpeq       652
        //   525: iload           45
        //   527: ifne            652
        //   530: getstatic       org/apache/cordova/filetransfer/FileTransfer.INVALID_URL_ERR:I
        //   533: aload_1        
        //   534: aload_2        
        //   535: aconst_null    
        //   536: iconst_0       
        //   537: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   540: aconst_null    
        //   541: invokestatic    org/apache/cordova/filetransfer/FileTransfer.createFileTransferError:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Throwable;)Lorg/json/JSONObject;
        //   544: astore          52
        //   546: new             Ljava/lang/StringBuilder;
        //   549: dup            
        //   550: invokespecial   java/lang/StringBuilder.<init>:()V
        //   553: astore          53
        //   555: ldc             "FileTransfer"
        //   557: aload           53
        //   559: ldc_w           "Unsupported URI: "
        //   562: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   565: aload           38
        //   567: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   570: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //   573: invokestatic    android/util/Log.e:(Ljava/lang/String;Ljava/lang/String;)I
        //   576: pop            
        //   577: new             Lorg/apache/cordova/PluginResult;
        //   580: dup            
        //   581: getstatic       org/apache/cordova/PluginResult$Status.IO_EXCEPTION:Lorg/apache/cordova/PluginResult$Status;
        //   584: aload           52
        //   586: invokespecial   org/apache/cordova/PluginResult.<init>:(Lorg/apache/cordova/PluginResult$Status;Lorg/json/JSONObject;)V
        //   589: astore          55
        //   591: aload           4
        //   593: aload           55
        //   595: invokevirtual   org/apache/cordova/CallbackContext.sendPluginResult:(Lorg/apache/cordova/PluginResult;)V
        //   598: return         
        //   599: aload_3        
        //   600: iconst_5       
        //   601: invokevirtual   org/json/JSONArray.optJSONObject:(I)Lorg/json/JSONObject;
        //   604: astore          10
        //   606: goto            91
        //   609: iconst_0       
        //   610: istore          13
        //   612: goto            124
        //   615: aload_3        
        //   616: bipush          8
        //   618: invokevirtual   org/json/JSONArray.optJSONObject:(I)Lorg/json/JSONObject;
        //   621: astore          15
        //   623: goto            147
        //   626: new             Ljava/io/File;
        //   629: dup            
        //   630: aload_1        
        //   631: invokespecial   java/io/File.<init>:(Ljava/lang/String;)V
        //   634: astore          40
        //   636: aload           40
        //   638: invokestatic    android/net/Uri.fromFile:(Ljava/io/File;)Landroid/net/Uri;
        //   641: astore          41
        //   643: goto            489
        //   646: iconst_0       
        //   647: istore          44
        //   649: goto            515
        //   652: new             Lorg/apache/cordova/filetransfer/FileTransfer$RequestContext;
        //   655: dup            
        //   656: aload_1        
        //   657: aload_2        
        //   658: aload           4
        //   660: invokespecial   org/apache/cordova/filetransfer/FileTransfer$RequestContext.<init>:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/cordova/CallbackContext;)V
        //   663: astore          46
        //   665: getstatic       org/apache/cordova/filetransfer/FileTransfer.activeRequests:Ljava/util/HashMap;
        //   668: astore          47
        //   670: aload           47
        //   672: monitorenter   
        //   673: getstatic       org/apache/cordova/filetransfer/FileTransfer.activeRequests:Ljava/util/HashMap;
        //   676: aload           17
        //   678: aload           46
        //   680: invokevirtual   java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   683: pop            
        //   684: aload           47
        //   686: monitorexit    
        //   687: aload_0        
        //   688: getfield        org/apache/cordova/filetransfer/FileTransfer.cordova:Lorg/apache/cordova/CordovaInterface;
        //   691: invokeinterface org/apache/cordova/CordovaInterface.getThreadPool:()Ljava/util/concurrent/ExecutorService;
        //   696: astore          50
        //   698: new             Lorg/apache/cordova/filetransfer/FileTransfer$1;
        //   701: dup            
        //   702: aload_0        
        //   703: aload           46
        //   705: aload           19
        //   707: aload           38
        //   709: iload           45
        //   711: iload           12
        //   713: aload           18
        //   715: aload           16
        //   717: aload_2        
        //   718: aload           11
        //   720: aload           7
        //   722: aload           8
        //   724: aload           9
        //   726: aload           42
        //   728: iload           14
        //   730: aload_1        
        //   731: aload           17
        //   733: invokespecial   org/apache/cordova/filetransfer/FileTransfer$1.<init>:(Lorg/apache/cordova/filetransfer/FileTransfer;Lorg/apache/cordova/filetransfer/FileTransfer$RequestContext;Lorg/apache/cordova/CordovaResourceApi;Landroid/net/Uri;ZZLjava/lang/String;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/JSONObject;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;ZLjava/lang/String;Ljava/lang/String;)V
        //   736: astore          51
        //   738: aload           50
        //   740: aload           51
        //   742: invokeinterface java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
        //   747: return         
        //   748: astore          48
        //   750: aload           47
        //   752: monitorexit    
        //   753: aload           48
        //   755: athrow         
        //    Exceptions:
        //  throws org.json.JSONException
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  673    687    748    756    Any
        //  750    753    748    756    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:3035)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        if (s.equals("upload") || s.equals("download")) {
            final String string = jsonArray.getString(0);
            final String string2 = jsonArray.getString(1);
            if (s.equals("upload")) {
                this.upload(string, string2, jsonArray, callbackContext);
            }
            else {
                this.download(string, string2, jsonArray, callbackContext);
            }
            return true;
        }
        if (s.equals("abort")) {
            this.abort(jsonArray.getString(0));
            callbackContext.success();
            return true;
        }
        return false;
    }
    
    private static class ExposedGZIPInputStream extends GZIPInputStream
    {
        public ExposedGZIPInputStream(final InputStream inputStream) throws IOException {
            super(inputStream);
        }
        
        public Inflater getInflater() {
            return this.inf;
        }
    }
    
    private static final class RequestContext
    {
        boolean aborted;
        CallbackContext callbackContext;
        HttpURLConnection connection;
        String source;
        String target;
        File targetFile;
        
        RequestContext(final String source, final String target, final CallbackContext callbackContext) {
            this.source = source;
            this.target = target;
            this.callbackContext = callbackContext;
        }
        
        void sendPluginResult(final PluginResult pluginResult) {
            synchronized (this) {
                if (!this.aborted) {
                    this.callbackContext.sendPluginResult(pluginResult);
                }
            }
        }
    }
    
    private static class SimpleTrackingInputStream extends TrackingInputStream
    {
        private long bytesRead;
        
        public SimpleTrackingInputStream(final InputStream inputStream) {
            super(inputStream);
            this.bytesRead = 0L;
        }
        
        private int updateBytesRead(final int n) {
            if (n != -1) {
                this.bytesRead += n;
            }
            return n;
        }
        
        @Override
        public long getTotalRawBytesRead() {
            return this.bytesRead;
        }
        
        @Override
        public int read() throws IOException {
            return this.updateBytesRead(super.read());
        }
        
        @Override
        public int read(final byte[] array, final int n, final int n2) throws IOException {
            return this.updateBytesRead(super.read(array, n, n2));
        }
    }
    
    private static class TrackingGZIPInputStream extends TrackingInputStream
    {
        private ExposedGZIPInputStream gzin;
        
        public TrackingGZIPInputStream(final ExposedGZIPInputStream gzin) throws IOException {
            super(gzin);
            this.gzin = gzin;
        }
        
        @Override
        public long getTotalRawBytesRead() {
            return this.gzin.getInflater().getBytesRead();
        }
    }
    
    private abstract static class TrackingInputStream extends FilterInputStream
    {
        public TrackingInputStream(final InputStream inputStream) {
            super(inputStream);
        }
        
        public abstract long getTotalRawBytesRead();
    }
}
