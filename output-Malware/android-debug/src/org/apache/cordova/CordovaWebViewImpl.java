// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import android.view.KeyEvent;
import android.content.ActivityNotFoundException;
import android.net.Uri;
import java.util.Map;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import android.content.Intent;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import android.view.ViewGroup;
import android.util.Log;
import org.apache.cordova.engine.SystemWebViewEngine;
import android.content.Context;
import java.util.HashSet;
import android.webkit.WebChromeClient$CustomViewCallback;
import android.view.View;
import java.util.Set;

public class CordovaWebViewImpl implements CordovaWebView
{
    public static final String TAG = "CordovaWebViewImpl";
    private CoreAndroid appPlugin;
    private Set<Integer> boundKeyCodes;
    private CordovaInterface cordova;
    protected final CordovaWebViewEngine engine;
    private EngineClient engineClient;
    private boolean hasPausedEver;
    private int loadUrlTimeout;
    String loadedUrl;
    private View mCustomView;
    private WebChromeClient$CustomViewCallback mCustomViewCallback;
    private NativeToJsMessageQueue nativeToJsMessageQueue;
    private PluginManager pluginManager;
    private CordovaPreferences preferences;
    private CordovaResourceApi resourceApi;
    
    public CordovaWebViewImpl(final CordovaWebViewEngine engine) {
        this.loadUrlTimeout = 0;
        this.engineClient = new EngineClient();
        this.boundKeyCodes = new HashSet<Integer>();
        this.engine = engine;
    }
    
    public static CordovaWebViewEngine createEngine(final Context context, final CordovaPreferences cordovaPreferences) {
        final String string = cordovaPreferences.getString("webview", SystemWebViewEngine.class.getCanonicalName());
        try {
            return (CordovaWebViewEngine)Class.forName(string).getConstructor(Context.class, CordovaPreferences.class).newInstance(context, cordovaPreferences);
        }
        catch (Exception ex) {
            throw new RuntimeException("Failed to create webview. ", ex);
        }
    }
    
    private void sendJavascriptEvent(final String s) {
        if (this.appPlugin == null) {
            this.appPlugin = (CoreAndroid)this.pluginManager.getPlugin("CoreAndroid");
        }
        if (this.appPlugin == null) {
            LOG.w("CordovaWebViewImpl", "Unable to fire event without existing plugin");
            return;
        }
        this.appPlugin.fireJavascriptEvent(s);
    }
    
    @Override
    public boolean backHistory() {
        return this.engine.goBack();
    }
    
    @Override
    public boolean canGoBack() {
        return this.engine.canGoBack();
    }
    
    @Override
    public void clearCache() {
        this.engine.clearCache();
    }
    
    @Deprecated
    @Override
    public void clearCache(final boolean b) {
        this.engine.clearCache();
    }
    
    @Override
    public void clearHistory() {
        this.engine.clearHistory();
    }
    
    @Override
    public Context getContext() {
        return this.engine.getView().getContext();
    }
    
    @Override
    public ICordovaCookieManager getCookieManager() {
        return this.engine.getCookieManager();
    }
    
    @Override
    public CordovaWebViewEngine getEngine() {
        return this.engine;
    }
    
    @Override
    public PluginManager getPluginManager() {
        return this.pluginManager;
    }
    
    @Override
    public CordovaPreferences getPreferences() {
        return this.preferences;
    }
    
    @Override
    public CordovaResourceApi getResourceApi() {
        return this.resourceApi;
    }
    
    @Override
    public String getUrl() {
        return this.engine.getUrl();
    }
    
    @Override
    public View getView() {
        return this.engine.getView();
    }
    
    @Override
    public void handleDestroy() {
        if (!this.isInitialized()) {
            return;
        }
        ++this.loadUrlTimeout;
        this.pluginManager.onDestroy();
        this.loadUrl("about:blank");
        this.engine.destroy();
        this.hideCustomView();
    }
    
    @Override
    public void handlePause(final boolean b) {
        if (this.isInitialized()) {
            this.hasPausedEver = true;
            this.pluginManager.onPause(b);
            this.sendJavascriptEvent("pause");
            if (!b) {
                this.engine.setPaused(true);
            }
        }
    }
    
    @Override
    public void handleResume(final boolean b) {
        if (this.isInitialized()) {
            this.engine.setPaused(false);
            this.pluginManager.onResume(b);
            if (this.hasPausedEver) {
                this.sendJavascriptEvent("resume");
            }
        }
    }
    
    @Override
    public void handleStart() {
        if (!this.isInitialized()) {
            return;
        }
        this.pluginManager.onStart();
    }
    
    @Override
    public void handleStop() {
        if (!this.isInitialized()) {
            return;
        }
        this.pluginManager.onStop();
    }
    
    @Deprecated
    @Override
    public void hideCustomView() {
        if (this.mCustomView == null) {
            return;
        }
        Log.d("CordovaWebViewImpl", "Hiding Custom View");
        this.mCustomView.setVisibility(8);
        ((ViewGroup)this.engine.getView().getParent()).removeView(this.mCustomView);
        this.mCustomView = null;
        this.mCustomViewCallback.onCustomViewHidden();
        this.engine.getView().setVisibility(0);
    }
    
    public void init(final CordovaInterface cordovaInterface) {
        this.init(cordovaInterface, new ArrayList<PluginEntry>(), new CordovaPreferences());
    }
    
    @Override
    public void init(final CordovaInterface cordova, final List<PluginEntry> list, final CordovaPreferences preferences) {
        if (this.cordova != null) {
            throw new IllegalStateException();
        }
        this.cordova = cordova;
        this.preferences = preferences;
        this.pluginManager = new PluginManager(this, this.cordova, list);
        this.resourceApi = new CordovaResourceApi(this.engine.getView().getContext(), this.pluginManager);
        (this.nativeToJsMessageQueue = new NativeToJsMessageQueue()).addBridgeMode((NativeToJsMessageQueue.BridgeMode)new NativeToJsMessageQueue.NoOpBridgeMode());
        this.nativeToJsMessageQueue.addBridgeMode((NativeToJsMessageQueue.BridgeMode)new NativeToJsMessageQueue.LoadUrlBridgeMode(this.engine, cordova));
        if (preferences.getBoolean("DisallowOverscroll", false)) {
            this.engine.getView().setOverScrollMode(2);
        }
        this.engine.init(this, cordova, (CordovaWebViewEngine.Client)this.engineClient, this.resourceApi, this.pluginManager, this.nativeToJsMessageQueue);
        assert this.engine.getView() instanceof CordovaWebViewEngine.EngineView;
        this.pluginManager.addService("CoreAndroid", "org.apache.cordova.CoreAndroid");
        this.pluginManager.init();
    }
    
    @Override
    public boolean isButtonPlumbedToJs(final int n) {
        return this.boundKeyCodes.contains(n);
    }
    
    @Deprecated
    @Override
    public boolean isCustomViewShowing() {
        return this.mCustomView != null;
    }
    
    @Override
    public boolean isInitialized() {
        return this.cordova != null;
    }
    
    @Override
    public void loadUrl(final String s) {
        this.loadUrlIntoView(s, true);
    }
    
    @Override
    public void loadUrlIntoView(final String loadedUrl, final boolean b) {
        LOG.d("CordovaWebViewImpl", ">>> loadUrl(" + loadedUrl + ")");
        if (loadedUrl.equals("about:blank") || loadedUrl.startsWith("javascript:")) {
            this.engine.loadUrl(loadedUrl, false);
            return;
        }
        final boolean b2 = b || this.loadedUrl == null;
        if (b2) {
            if (this.loadedUrl != null) {
                this.pluginManager.init();
            }
            this.loadedUrl = loadedUrl;
        }
        final int loadUrlTimeout = this.loadUrlTimeout;
        final int integer = this.preferences.getInteger("LoadUrlTimeoutValue", 20000);
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            final /* synthetic */ Runnable val$timeoutCheck = new Runnable(this, integer, loadUrlTimeout, new Runnable(this, loadedUrl) {
                final /* synthetic */ String val$url;
                
                @Override
                public void run() {
                    CordovaWebViewImpl.this.stopLoading();
                    LOG.e("CordovaWebViewImpl", "CordovaWebView: TIMEOUT ERROR!");
                    final JSONObject jsonObject = new JSONObject();
                    while (true) {
                        try {
                            jsonObject.put("errorCode", -6);
                            jsonObject.put("description", (Object)"The connection to the server was unsuccessful.");
                            jsonObject.put("url", (Object)this.val$url);
                            CordovaWebViewImpl.this.pluginManager.postMessage("onReceivedError", jsonObject);
                        }
                        catch (JSONException ex) {
                            continue;
                        }
                        break;
                    }
                }
            }) {
                final /* synthetic */ int val$currentLoadUrlTimeout;
                final /* synthetic */ Runnable val$loadError;
                final /* synthetic */ int val$loadUrlTimeoutValue;
                
                @Override
                public void run() {
                    while (true) {
                        try {
                            synchronized (this) {
                                Object.this.wait(this.val$loadUrlTimeoutValue);
                                // monitorexit(this)
                                if (CordovaWebViewImpl.this.loadUrlTimeout == this.val$currentLoadUrlTimeout) {
                                    CordovaWebViewImpl.this.cordova.getActivity().runOnUiThread(this.val$loadError);
                                }
                            }
                        }
                        catch (InterruptedException ex) {
                            ex.printStackTrace();
                            continue;
                        }
                        break;
                    }
                }
            };
            
            @Override
            public void run() {
                if (integer > 0) {
                    CordovaWebViewImpl.this.cordova.getThreadPool().execute(this.val$timeoutCheck);
                }
                CordovaWebViewImpl.this.engine.loadUrl(loadedUrl, b2);
            }
        });
    }
    
    @Override
    public void onNewIntent(final Intent intent) {
        if (this.pluginManager != null) {
            this.pluginManager.onNewIntent(intent);
        }
    }
    
    @Override
    public Object postMessage(final String s, final Object o) {
        return this.pluginManager.postMessage(s, o);
    }
    
    @Deprecated
    @Override
    public void sendJavascript(final String s) {
        this.nativeToJsMessageQueue.addJavaScript(s);
    }
    
    @Override
    public void sendPluginResult(final PluginResult pluginResult, final String s) {
        this.nativeToJsMessageQueue.addPluginResult(pluginResult, s);
    }
    
    @Override
    public void setButtonPlumbedToJs(final int n, final boolean b) {
        switch (n) {
            default: {
                throw new IllegalArgumentException("Unsupported keycode: " + n);
            }
            case 4:
            case 24:
            case 25: {
                if (b) {
                    this.boundKeyCodes.add(n);
                    return;
                }
                this.boundKeyCodes.remove(n);
            }
        }
    }
    
    @Deprecated
    @Override
    public void showCustomView(final View mCustomView, final WebChromeClient$CustomViewCallback mCustomViewCallback) {
        Log.d("CordovaWebViewImpl", "showing Custom View");
        if (this.mCustomView != null) {
            mCustomViewCallback.onCustomViewHidden();
            return;
        }
        this.mCustomView = mCustomView;
        this.mCustomViewCallback = mCustomViewCallback;
        final ViewGroup viewGroup = (ViewGroup)this.engine.getView().getParent();
        viewGroup.addView(mCustomView, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-1, -1, 17));
        this.engine.getView().setVisibility(8);
        viewGroup.setVisibility(0);
        viewGroup.bringToFront();
    }
    
    @Override
    public void showWebPage(final String s, final boolean b, final boolean b2, final Map<String, Object> map) {
        LOG.d("CordovaWebViewImpl", "showWebPage(%s, %b, %b, HashMap)", s, b, b2);
        if (b2) {
            this.engine.clearHistory();
        }
        if (!b) {
            if (this.pluginManager.shouldAllowNavigation(s)) {
                this.loadUrlIntoView(s, true);
            }
            else {
                LOG.w("CordovaWebViewImpl", "showWebPage: Refusing to load URL into webview since it is not in the <allow-navigation> whitelist. URL=" + s);
            }
        }
        if (!this.pluginManager.shouldOpenExternalUrl(s)) {
            LOG.w("CordovaWebViewImpl", "showWebPage: Refusing to send intent for URL since it is not in the <allow-intent> whitelist. URL=" + s);
            return;
        }
        while (true) {
            while (true) {
                Intent intent;
                Uri parse;
                try {
                    intent = new Intent("android.intent.action.VIEW");
                    intent.addCategory("android.intent.category.BROWSABLE");
                    parse = Uri.parse(s);
                    if ("file".equals(parse.getScheme())) {
                        intent.setDataAndType(parse, this.resourceApi.getMimeType(parse));
                        this.cordova.getActivity().startActivity(intent);
                        return;
                    }
                }
                catch (ActivityNotFoundException ex) {
                    LOG.e("CordovaWebViewImpl", "Error loading url " + s, (Throwable)ex);
                    return;
                }
                intent.setData(parse);
                continue;
            }
        }
    }
    
    @Override
    public void stopLoading() {
        ++this.loadUrlTimeout;
    }
    
    protected class EngineClient implements Client
    {
        @Override
        public void clearLoadTimeoutTimer() {
            CordovaWebViewImpl.this.loadUrlTimeout++;
        }
        
        @Override
        public Boolean onDispatchKeyEvent(final KeyEvent keyEvent) {
            final int keyCode = keyEvent.getKeyCode();
            boolean b;
            if (keyCode == 4) {
                b = true;
            }
            else {
                b = false;
            }
            if (keyEvent.getAction() == 0) {
                if (b && CordovaWebViewImpl.this.mCustomView != null) {
                    return true;
                }
                if (CordovaWebViewImpl.this.boundKeyCodes.contains(keyCode)) {
                    return true;
                }
                if (b) {
                    return CordovaWebViewImpl.this.engine.canGoBack();
                }
            }
            else if (keyEvent.getAction() == 1) {
                if (b && CordovaWebViewImpl.this.mCustomView != null) {
                    CordovaWebViewImpl.this.hideCustomView();
                    return true;
                }
                if (CordovaWebViewImpl.this.boundKeyCodes.contains(keyCode)) {
                    String s = null;
                    switch (keyCode) {
                        case 25: {
                            s = "volumedownbutton";
                            break;
                        }
                        case 24: {
                            s = "volumeupbutton";
                            break;
                        }
                        case 84: {
                            s = "searchbutton";
                            break;
                        }
                        case 82: {
                            s = "menubutton";
                            break;
                        }
                        case 4: {
                            s = "backbutton";
                            break;
                        }
                    }
                    if (s != null) {
                        CordovaWebViewImpl.this.sendJavascriptEvent(s);
                        return true;
                    }
                }
                else if (b) {
                    return CordovaWebViewImpl.this.engine.goBack();
                }
            }
            return null;
        }
        
        @Override
        public boolean onNavigationAttempt(final String s) {
            if (CordovaWebViewImpl.this.pluginManager.onOverrideUrlLoading(s)) {
                return true;
            }
            if (CordovaWebViewImpl.this.pluginManager.shouldAllowNavigation(s)) {
                return false;
            }
            if (CordovaWebViewImpl.this.pluginManager.shouldOpenExternalUrl(s)) {
                CordovaWebViewImpl.this.showWebPage(s, true, false, null);
                return true;
            }
            LOG.w("CordovaWebViewImpl", "Blocked (possibly sub-frame) navigation to non-allowed URL: " + s);
            return true;
        }
        
        @Override
        public void onPageFinishedLoading(final String s) {
            LOG.d("CordovaWebViewImpl", "onPageFinished(" + s + ")");
            this.clearLoadTimeoutTimer();
            CordovaWebViewImpl.this.pluginManager.postMessage("onPageFinished", s);
            if (CordovaWebViewImpl.this.engine.getView().getVisibility() != 0) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            Thread.sleep(2000L);
                            CordovaWebViewImpl.this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                                @Override
                                public void run() {
                                    CordovaWebViewImpl.this.pluginManager.postMessage("spinner", "stop");
                                }
                            });
                        }
                        catch (InterruptedException ex) {}
                    }
                }).start();
            }
            if (s.equals("about:blank")) {
                CordovaWebViewImpl.this.pluginManager.postMessage("exit", null);
            }
        }
        
        @Override
        public void onPageStarted(final String s) {
            LOG.d("CordovaWebViewImpl", "onPageDidNavigate(" + s + ")");
            CordovaWebViewImpl.this.boundKeyCodes.clear();
            CordovaWebViewImpl.this.pluginManager.onReset();
            CordovaWebViewImpl.this.pluginManager.postMessage("onPageStarted", s);
        }
        
        @Override
        public void onReceivedError(final int n, final String s, final String s2) {
            this.clearLoadTimeoutTimer();
            final JSONObject jsonObject = new JSONObject();
            while (true) {
                try {
                    jsonObject.put("errorCode", n);
                    jsonObject.put("description", (Object)s);
                    jsonObject.put("url", (Object)s2);
                    CordovaWebViewImpl.this.pluginManager.postMessage("onReceivedError", jsonObject);
                }
                catch (JSONException ex) {
                    ex.printStackTrace();
                    continue;
                }
                break;
            }
        }
    }
}
