// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.splashscreen;

import android.content.res.Configuration;
import org.json.JSONException;
import org.apache.cordova.CallbackContext;
import org.json.JSONArray;
import android.content.DialogInterface;
import android.content.DialogInterface$OnCancelListener;
import android.content.Context;
import android.view.Display;
import android.os.Handler;
import android.widget.ImageView$ScaleType;
import android.view.ViewGroup$LayoutParams;
import android.widget.LinearLayout$LayoutParams;
import android.view.View;
import org.apache.cordova.CordovaPreferences;
import android.widget.ImageView;
import android.app.Dialog;
import android.app.ProgressDialog;
import org.apache.cordova.CordovaPlugin;

public class SplashScreen extends CordovaPlugin
{
    private static final boolean HAS_BUILT_IN_SPLASH_SCREEN = false;
    private static final String LOG_TAG = "SplashScreen";
    private static boolean firstShow;
    private static ProgressDialog spinnerDialog;
    private static Dialog splashDialog;
    private int orientation;
    private ImageView splashImageView;
    
    static {
        SplashScreen.firstShow = true;
    }
    
    private View getView() {
        try {
            return (View)this.webView.getClass().getMethod("getView", (Class<?>[])new Class[0]).invoke(this.webView, new Object[0]);
        }
        catch (Exception ex) {
            return (View)this.webView;
        }
    }
    
    private boolean isMaintainAspectRatio() {
        return this.preferences.getBoolean("SplashMaintainAspectRatio", false);
    }
    
    private void loadSpinner() {
        String s;
        if (this.webView.canGoBack()) {
            s = this.preferences.getString("LoadingDialog", null);
        }
        else {
            s = this.preferences.getString("LoadingPageDialog", null);
        }
        if (s != null) {
            String substring = "";
            String substring2 = "Loading Application...";
            if (s.length() > 0) {
                final int index = s.indexOf(44);
                if (index > 0) {
                    substring = s.substring(0, index);
                    substring2 = s.substring(index + 1);
                }
                else {
                    substring = "";
                    substring2 = s;
                }
            }
            this.spinnerStart(substring, substring2);
        }
    }
    
    private void removeSplashScreen() {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                if (SplashScreen.splashDialog != null && SplashScreen.splashDialog.isShowing()) {
                    SplashScreen.splashDialog.dismiss();
                    SplashScreen.splashDialog = null;
                    SplashScreen.this.splashImageView = null;
                }
            }
        });
    }
    
    private void showSplashScreen(final boolean b) {
        final int integer = this.preferences.getInteger("SplashScreenDelay", 3000);
        final int integer2 = this.preferences.getInteger("SplashDrawableId", 0);
        if (SplashScreen.splashDialog != null && SplashScreen.splashDialog.isShowing()) {
            return;
        }
        if (integer2 == 0 || (integer <= 0 && b)) {
            return;
        }
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                final Display defaultDisplay = SplashScreen.this.cordova.getActivity().getWindowManager().getDefaultDisplay();
                final Context context = SplashScreen.this.webView.getContext();
                SplashScreen.this.splashImageView = new ImageView(context);
                SplashScreen.this.splashImageView.setImageResource(integer2);
                SplashScreen.this.splashImageView.setLayoutParams((ViewGroup$LayoutParams)new LinearLayout$LayoutParams(-1, -1));
                SplashScreen.this.splashImageView.setMinimumHeight(defaultDisplay.getHeight());
                SplashScreen.this.splashImageView.setMinimumWidth(defaultDisplay.getWidth());
                SplashScreen.this.splashImageView.setBackgroundColor(SplashScreen.this.preferences.getInteger("backgroundColor", -16777216));
                if (SplashScreen.this.isMaintainAspectRatio()) {
                    SplashScreen.this.splashImageView.setScaleType(ImageView$ScaleType.CENTER_CROP);
                }
                else {
                    SplashScreen.this.splashImageView.setScaleType(ImageView$ScaleType.FIT_XY);
                }
                SplashScreen.splashDialog = new Dialog(context, 16973840);
                if ((0x400 & SplashScreen.this.cordova.getActivity().getWindow().getAttributes().flags) == 0x400) {
                    SplashScreen.splashDialog.getWindow().setFlags(1024, 1024);
                }
                SplashScreen.splashDialog.setContentView((View)SplashScreen.this.splashImageView);
                SplashScreen.splashDialog.setCancelable(false);
                SplashScreen.splashDialog.show();
                if (b) {
                    new Handler().postDelayed((Runnable)new Runnable() {
                        @Override
                        public void run() {
                            SplashScreen.this.removeSplashScreen();
                        }
                    }, (long)integer);
                }
            }
        });
    }
    
    private void spinnerStart(final String s, final String s2) {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                SplashScreen.this.spinnerStop();
                SplashScreen.spinnerDialog = ProgressDialog.show(SplashScreen.this.webView.getContext(), (CharSequence)s, (CharSequence)s2, true, true, (DialogInterface$OnCancelListener)new DialogInterface$OnCancelListener() {
                    public void onCancel(final DialogInterface dialogInterface) {
                        SplashScreen.spinnerDialog = null;
                    }
                });
            }
        });
    }
    
    private void spinnerStop() {
        this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
            @Override
            public void run() {
                if (SplashScreen.spinnerDialog != null && SplashScreen.spinnerDialog.isShowing()) {
                    SplashScreen.spinnerDialog.dismiss();
                    SplashScreen.spinnerDialog = null;
                }
            }
        });
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        if (s.equals("hide")) {
            this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    SplashScreen.this.webView.postMessage("splashscreen", "hide");
                }
            });
        }
        else if (s.equals("show")) {
            this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    SplashScreen.this.webView.postMessage("splashscreen", "show");
                }
            });
        }
        else {
            if (!s.equals("spinnerStart")) {
                return false;
            }
            if (!SplashScreen.HAS_BUILT_IN_SPLASH_SCREEN) {
                this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                    final /* synthetic */ String val$message = jsonArray.getString(1);
                    final /* synthetic */ String val$title = jsonArray.getString(0);
                    
                    @Override
                    public void run() {
                        SplashScreen.this.spinnerStart(this.val$title, this.val$message);
                    }
                });
            }
        }
        callbackContext.success();
        return true;
    }
    
    @Override
    public void onConfigurationChanged(final Configuration configuration) {
        if (configuration.orientation != this.orientation) {
            this.orientation = configuration.orientation;
            if (this.splashImageView != null) {
                final int integer = this.preferences.getInteger("SplashDrawableId", 0);
                if (integer != 0) {
                    this.splashImageView.setImageDrawable(this.cordova.getActivity().getResources().getDrawable(integer));
                }
            }
        }
    }
    
    @Override
    public void onDestroy() {
        if (SplashScreen.HAS_BUILT_IN_SPLASH_SCREEN) {
            return;
        }
        this.removeSplashScreen();
    }
    
    @Override
    public Object onMessage(final String s, final Object o) {
        if (SplashScreen.HAS_BUILT_IN_SPLASH_SCREEN) {
            return null;
        }
        if ("splashscreen".equals(s)) {
            if ("hide".equals(o.toString())) {
                this.removeSplashScreen();
            }
            else {
                this.showSplashScreen(false);
            }
        }
        else if ("spinner".equals(s)) {
            if ("stop".equals(o.toString())) {
                this.spinnerStop();
                this.getView().setVisibility(0);
            }
        }
        else if ("onReceivedError".equals(s)) {
            this.spinnerStop();
        }
        return null;
    }
    
    @Override
    public void onPause(final boolean b) {
        if (SplashScreen.HAS_BUILT_IN_SPLASH_SCREEN) {
            return;
        }
        this.removeSplashScreen();
    }
    
    @Override
    protected void pluginInitialize() {
        if (SplashScreen.HAS_BUILT_IN_SPLASH_SCREEN || !SplashScreen.firstShow) {
            return;
        }
        this.getView().setVisibility(4);
        if (this.preferences.getInteger("SplashDrawableId", 0) == 0) {
            final String string = this.preferences.getString("SplashScreen", "screen");
            if (string != null) {
                int n = this.cordova.getActivity().getResources().getIdentifier(string, "drawable", this.cordova.getActivity().getClass().getPackage().getName());
                if (n == 0) {
                    n = this.cordova.getActivity().getResources().getIdentifier(string, "drawable", this.cordova.getActivity().getPackageName());
                }
                this.preferences.set("SplashDrawableId", n);
            }
        }
        this.orientation = this.cordova.getActivity().getResources().getConfiguration().orientation;
        SplashScreen.firstShow = false;
        this.loadSpinner();
        this.showSplashScreen(true);
    }
}
