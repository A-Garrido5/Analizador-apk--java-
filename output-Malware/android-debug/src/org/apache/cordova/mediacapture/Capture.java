// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova.mediacapture;

import java.io.OutputStream;
import org.apache.cordova.LOG;
import java.io.FileInputStream;
import android.content.ContentValues;
import org.apache.cordova.PluginResult;
import android.provider.MediaStore$Images$Media;
import android.os.Environment;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory$Options;
import android.util.Log;
import android.media.MediaPlayer;
import org.json.JSONException;
import android.database.Cursor;
import android.os.Build$VERSION;
import java.io.IOException;
import android.os.Parcelable;
import java.io.File;
import android.content.Intent;
import org.json.JSONObject;
import android.net.Uri;
import org.json.JSONArray;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;

public class Capture extends CordovaPlugin
{
    private static final String AUDIO_3GPP = "audio/3gpp";
    private static final int CAPTURE_AUDIO = 0;
    private static final int CAPTURE_IMAGE = 1;
    private static final int CAPTURE_INTERNAL_ERR = 0;
    private static final int CAPTURE_NO_MEDIA_FILES = 3;
    private static final int CAPTURE_VIDEO = 2;
    private static final String IMAGE_JPEG = "image/jpeg";
    private static final String LOG_TAG = "Capture";
    private static final String VIDEO_3GPP = "video/3gpp";
    private static final String VIDEO_MP4 = "video/mp4";
    private CallbackContext callbackContext;
    private int duration;
    private long limit;
    private int numPics;
    private int quality;
    private JSONArray results;
    
    private void captureAudio() {
        this.cordova.startActivityForResult(this, new Intent("android.provider.MediaStore.RECORD_SOUND"), 0);
    }
    
    private void captureImage() {
        this.numPics = this.queryImgDB(this.whichContentStore()).getCount();
        final Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        final File file = new File(this.getTempDirectoryPath(), "Capture.jpg");
        try {
            createWritableFile(file);
            intent.putExtra("output", (Parcelable)Uri.fromFile(file));
            this.cordova.startActivityForResult(this, intent, 1);
        }
        catch (IOException ex) {
            this.fail(this.createErrorObject(0, ex.toString()));
        }
    }
    
    private void captureVideo(final int n, final int n2) {
        final Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
        if (Build$VERSION.SDK_INT > 7) {
            intent.putExtra("android.intent.extra.durationLimit", n);
            intent.putExtra("android.intent.extra.videoQuality", n2);
        }
        this.cordova.startActivityForResult(this, intent, 2);
    }
    
    private void checkForDuplicateImage() {
        final Uri whichContentStore = this.whichContentStore();
        final Cursor queryImgDB = this.queryImgDB(whichContentStore);
        if (queryImgDB.getCount() - this.numPics == 2) {
            queryImgDB.moveToLast();
            this.cordova.getActivity().getContentResolver().delete(Uri.parse(whichContentStore + "/" + (-1 + Integer.valueOf(queryImgDB.getString(queryImgDB.getColumnIndex("_id"))))), (String)null, (String[])null);
        }
    }
    
    private JSONObject createErrorObject(final int n, final String s) {
        final JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("code", n);
            jsonObject.put("message", (Object)s);
            return jsonObject;
        }
        catch (JSONException ex) {
            return jsonObject;
        }
    }
    
    private JSONObject createMediaFile(final Uri p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        org/apache/cordova/mediacapture/Capture.webView:Lorg/apache/cordova/CordovaWebView;
        //     4: invokeinterface org/apache/cordova/CordovaWebView.getResourceApi:()Lorg/apache/cordova/CordovaResourceApi;
        //     9: aload_1        
        //    10: invokevirtual   org/apache/cordova/CordovaResourceApi.mapUriToFile:(Landroid/net/Uri;)Ljava/io/File;
        //    13: astore_2       
        //    14: new             Lorg/json/JSONObject;
        //    17: dup            
        //    18: invokespecial   org/json/JSONObject.<init>:()V
        //    21: astore_3       
        //    22: aload_0        
        //    23: getfield        org/apache/cordova/mediacapture/Capture.webView:Lorg/apache/cordova/CordovaWebView;
        //    26: invokevirtual   java/lang/Object.getClass:()Ljava/lang/Class;
        //    29: astore          4
        //    31: aload           4
        //    33: ldc_w           "getPluginManager"
        //    36: iconst_0       
        //    37: anewarray       Ljava/lang/Class;
        //    40: invokevirtual   java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
        //    43: aload_0        
        //    44: getfield        org/apache/cordova/mediacapture/Capture.webView:Lorg/apache/cordova/CordovaWebView;
        //    47: iconst_0       
        //    48: anewarray       Ljava/lang/Object;
        //    51: invokevirtual   java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
        //    54: checkcast       Lorg/apache/cordova/PluginManager;
        //    57: astore          22
        //    59: aload           22
        //    61: astore          6
        //    63: aload           6
        //    65: ifnonnull       92
        //    68: aload           4
        //    70: ldc_w           "pluginManager"
        //    73: invokevirtual   java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
        //    76: aload_0        
        //    77: getfield        org/apache/cordova/mediacapture/Capture.webView:Lorg/apache/cordova/CordovaWebView;
        //    80: invokevirtual   java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    83: checkcast       Lorg/apache/cordova/PluginManager;
        //    86: astore          19
        //    88: aload           19
        //    90: astore          6
        //    92: aload           6
        //    94: ldc_w           "File"
        //    97: invokevirtual   org/apache/cordova/PluginManager.getPlugin:(Ljava/lang/String;)Lorg/apache/cordova/CordovaPlugin;
        //   100: checkcast       Lorg/apache/cordova/file/FileUtils;
        //   103: aload_2        
        //   104: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //   107: invokevirtual   org/apache/cordova/file/FileUtils.filesystemURLforLocalPath:(Ljava/lang/String;)Lorg/apache/cordova/file/LocalFilesystemURL;
        //   110: astore          7
        //   112: aload_3        
        //   113: ldc_w           "name"
        //   116: aload_2        
        //   117: invokevirtual   java/io/File.getName:()Ljava/lang/String;
        //   120: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   123: pop            
        //   124: aload_3        
        //   125: ldc_w           "fullPath"
        //   128: aload_2        
        //   129: invokevirtual   java/io/File.toURI:()Ljava/net/URI;
        //   132: invokevirtual   java/net/URI.toString:()Ljava/lang/String;
        //   135: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   138: pop            
        //   139: aload           7
        //   141: ifnull          157
        //   144: aload_3        
        //   145: ldc_w           "localURL"
        //   148: aload           7
        //   150: invokevirtual   org/apache/cordova/file/LocalFilesystemURL.toString:()Ljava/lang/String;
        //   153: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   156: pop            
        //   157: aload_2        
        //   158: invokevirtual   java/io/File.getAbsoluteFile:()Ljava/io/File;
        //   161: invokevirtual   java/io/File.toString:()Ljava/lang/String;
        //   164: ldc_w           ".3gp"
        //   167: invokevirtual   java/lang/String.endsWith:(Ljava/lang/String;)Z
        //   170: ifne            189
        //   173: aload_2        
        //   174: invokevirtual   java/io/File.getAbsoluteFile:()Ljava/io/File;
        //   177: invokevirtual   java/io/File.toString:()Ljava/lang/String;
        //   180: ldc_w           ".3gpp"
        //   183: invokevirtual   java/lang/String.endsWith:(Ljava/lang/String;)Z
        //   186: ifeq            252
        //   189: aload_1        
        //   190: invokevirtual   android/net/Uri.toString:()Ljava/lang/String;
        //   193: ldc_w           "/audio/"
        //   196: invokevirtual   java/lang/String.contains:(Ljava/lang/CharSequence;)Z
        //   199: ifeq            239
        //   202: aload_3        
        //   203: ldc_w           "type"
        //   206: ldc             "audio/3gpp"
        //   208: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   211: pop            
        //   212: aload_3        
        //   213: ldc_w           "lastModifiedDate"
        //   216: aload_2        
        //   217: invokevirtual   java/io/File.lastModified:()J
        //   220: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;
        //   223: pop            
        //   224: aload_3        
        //   225: ldc_w           "size"
        //   228: aload_2        
        //   229: invokevirtual   java/io/File.length:()J
        //   232: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;
        //   235: pop            
        //   236: goto            281
        //   239: aload_3        
        //   240: ldc_w           "type"
        //   243: ldc             "video/3gpp"
        //   245: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   248: pop            
        //   249: goto            212
        //   252: aload_3        
        //   253: ldc_w           "type"
        //   256: aload_2        
        //   257: invokestatic    android/net/Uri.fromFile:(Ljava/io/File;)Landroid/net/Uri;
        //   260: aload_0        
        //   261: getfield        org/apache/cordova/mediacapture/Capture.cordova:Lorg/apache/cordova/CordovaInterface;
        //   264: invokestatic    org/apache/cordova/mediacapture/FileHelper.getMimeType:(Landroid/net/Uri;Lorg/apache/cordova/CordovaInterface;)Ljava/lang/String;
        //   267: invokevirtual   org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
        //   270: pop            
        //   271: goto            212
        //   274: astore          8
        //   276: aload           8
        //   278: invokevirtual   org/json/JSONException.printStackTrace:()V
        //   281: aload_3        
        //   282: areturn        
        //   283: astore          21
        //   285: aconst_null    
        //   286: astore          6
        //   288: goto            63
        //   291: astore          20
        //   293: aconst_null    
        //   294: astore          6
        //   296: goto            63
        //   299: astore          5
        //   301: aconst_null    
        //   302: astore          6
        //   304: goto            63
        //   307: astore          18
        //   309: goto            92
        //   312: astore          17
        //   314: goto            92
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                         
        //  -----  -----  -----  -----  ---------------------------------------------
        //  31     59     283    291    Ljava/lang/NoSuchMethodException;
        //  31     59     291    299    Ljava/lang/IllegalAccessException;
        //  31     59     299    307    Ljava/lang/reflect/InvocationTargetException;
        //  68     88     307    312    Ljava/lang/NoSuchFieldException;
        //  68     88     312    317    Ljava/lang/IllegalAccessException;
        //  112    139    274    281    Lorg/json/JSONException;
        //  144    157    274    281    Lorg/json/JSONException;
        //  157    189    274    281    Lorg/json/JSONException;
        //  189    212    274    281    Lorg/json/JSONException;
        //  212    236    274    281    Lorg/json/JSONException;
        //  239    249    274    281    Lorg/json/JSONException;
        //  252    271    274    281    Lorg/json/JSONException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0092:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:238)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:123)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static void createWritableFile(final File file) throws IOException {
        file.createNewFile();
        file.setWritable(true, false);
    }
    
    private JSONObject getAudioVideoData(final String dataSource, final JSONObject jsonObject, final boolean b) throws JSONException {
        final MediaPlayer mediaPlayer = new MediaPlayer();
        try {
            mediaPlayer.setDataSource(dataSource);
            mediaPlayer.prepare();
            jsonObject.put("duration", mediaPlayer.getDuration() / 1000);
            if (b) {
                jsonObject.put("height", mediaPlayer.getVideoHeight());
                jsonObject.put("width", mediaPlayer.getVideoWidth());
            }
            return jsonObject;
        }
        catch (IOException ex) {
            Log.d("Capture", "Error: loading video file");
            return jsonObject;
        }
    }
    
    private JSONObject getFormatData(final String s, final String s2) throws JSONException {
        String mimeType = s2;
        Uri uri;
        if (s.startsWith("file:")) {
            uri = Uri.parse(s);
        }
        else {
            uri = Uri.fromFile(new File(s));
        }
        final Uri uri2 = uri;
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("height", 0);
        jsonObject.put("width", 0);
        jsonObject.put("bitrate", 0);
        jsonObject.put("duration", 0);
        jsonObject.put("codecs", (Object)"");
        if (mimeType == null || mimeType.equals("") || "null".equals(mimeType)) {
            mimeType = FileHelper.getMimeType(uri2, this.cordova);
        }
        Log.d("Capture", "Mime type = " + mimeType);
        if (mimeType.equals("image/jpeg") || s.endsWith(".jpg")) {
            jsonObject = this.getImageData(uri2, jsonObject);
        }
        else if (mimeType.endsWith("audio/3gpp")) {
            jsonObject = this.getAudioVideoData(s, jsonObject, false);
        }
        else if (mimeType.equals("video/3gpp") || mimeType.equals("video/mp4")) {
            jsonObject = this.getAudioVideoData(s, jsonObject, true);
        }
        return jsonObject;
    }
    
    private JSONObject getImageData(final Uri uri, final JSONObject jsonObject) throws JSONException {
        final BitmapFactory$Options bitmapFactory$Options = new BitmapFactory$Options();
        bitmapFactory$Options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(uri.getPath(), bitmapFactory$Options);
        jsonObject.put("height", bitmapFactory$Options.outHeight);
        jsonObject.put("width", bitmapFactory$Options.outWidth);
        return jsonObject;
    }
    
    private String getTempDirectoryPath() {
        final File cacheDir = this.cordova.getActivity().getCacheDir();
        cacheDir.mkdirs();
        return cacheDir.getAbsolutePath();
    }
    
    private Cursor queryImgDB(final Uri uri) {
        return this.cordova.getActivity().getContentResolver().query(uri, new String[] { "_id" }, (String)null, (String[])null, (String)null);
    }
    
    private Uri whichContentStore() {
        if (Environment.getExternalStorageState().equals("mounted")) {
            return MediaStore$Images$Media.EXTERNAL_CONTENT_URI;
        }
        return MediaStore$Images$Media.INTERNAL_CONTENT_URI;
    }
    
    @Override
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        this.callbackContext = callbackContext;
        this.limit = 1L;
        this.duration = 0;
        this.results = new JSONArray();
        this.quality = 1;
        final JSONObject optJSONObject = jsonArray.optJSONObject(0);
        if (optJSONObject != null) {
            this.limit = optJSONObject.optLong("limit", 1L);
            this.duration = optJSONObject.optInt("duration", 0);
            this.quality = optJSONObject.optInt("quality", 1);
        }
        if (s.equals("getFormatData")) {
            callbackContext.success(this.getFormatData(jsonArray.getString(0), jsonArray.getString(1)));
            return true;
        }
        if (s.equals("captureAudio")) {
            this.captureAudio();
        }
        else if (s.equals("captureImage")) {
            this.captureImage();
        }
        else {
            if (!s.equals("captureVideo")) {
                return false;
            }
            this.captureVideo(this.duration, this.quality);
        }
        return true;
    }
    
    public void fail(final JSONObject jsonObject) {
        this.callbackContext.error(jsonObject);
    }
    
    @Override
    public void onActivityResult(final int n, final int n2, final Intent intent) {
        if (n2 == -1) {
            if (n == 0) {
                this.cordova.getThreadPool().execute(new Runnable() {
                    @Override
                    public void run() {
                        Capture.this.results.put((Object)Capture.this.createMediaFile(intent.getData()));
                        if (Capture.this.results.length() >= Capture.this.limit) {
                            Capture.this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, Capture.this.results));
                            return;
                        }
                        Capture.this.captureAudio();
                    }
                });
            }
            else {
                if (n == 1) {
                    this.cordova.getThreadPool().execute(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                final ContentValues contentValues = new ContentValues();
                                contentValues.put("mime_type", "image/jpeg");
                                Uri uri;
                                FileInputStream fileInputStream = null;
                                OutputStream openOutputStream = null;
                                try {
                                    uri = Capture.this.cordova.getActivity().getContentResolver().insert(MediaStore$Images$Media.EXTERNAL_CONTENT_URI, contentValues);
                                    fileInputStream = new FileInputStream(Capture.this.getTempDirectoryPath() + "/Capture.jpg");
                                    openOutputStream = Capture.this.cordova.getActivity().getContentResolver().openOutputStream(uri);
                                    final byte[] array = new byte[4096];
                                    while (true) {
                                        final int read = fileInputStream.read(array);
                                        if (read == -1) {
                                            break;
                                        }
                                        openOutputStream.write(array, 0, read);
                                    }
                                }
                                catch (UnsupportedOperationException ex2) {
                                    LOG.d("Capture", "Can't write to external media storage.");
                                    try {
                                        uri = Capture.this.cordova.getActivity().getContentResolver().insert(MediaStore$Images$Media.INTERNAL_CONTENT_URI, contentValues);
                                    }
                                    catch (UnsupportedOperationException ex3) {
                                        LOG.d("Capture", "Can't write to internal media storage.");
                                        Capture.this.fail(Capture.this.createErrorObject(0, "Error capturing image - no media storage found."));
                                        return;
                                    }
                                }
                                openOutputStream.flush();
                                openOutputStream.close();
                                fileInputStream.close();
                                Capture.this.results.put((Object)Capture.this.createMediaFile(uri));
                                Capture.this.checkForDuplicateImage();
                                if (Capture.this.results.length() >= Capture.this.limit) {
                                    Capture.this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, Capture.this.results));
                                }
                                else {
                                    Capture.this.captureImage();
                                }
                            }
                            catch (IOException ex) {
                                ex.printStackTrace();
                                Capture.this.fail(Capture.this.createErrorObject(0, "Error capturing image."));
                            }
                        }
                    });
                    return;
                }
                if (n == 2) {
                    this.cordova.getThreadPool().execute(new Runnable() {
                        @Override
                        public void run() {
                            final Intent val$intent = intent;
                            Uri uri = null;
                            if (val$intent != null) {
                                uri = intent.getData();
                            }
                            if (uri == null) {
                                uri = Uri.fromFile(new File(Capture.this.getTempDirectoryPath(), "Capture.avi"));
                            }
                            if (uri == null) {
                                Capture.this.fail(Capture.this.createErrorObject(3, "Error: data is null"));
                                return;
                            }
                            Capture.this.results.put((Object)Capture.this.createMediaFile(uri));
                            if (Capture.this.results.length() >= Capture.this.limit) {
                                Capture.this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, Capture.this.results));
                                return;
                            }
                            Capture.this.captureVideo(Capture.this.duration, Capture.this.quality);
                        }
                    });
                }
            }
            return;
        }
        if (n2 == 0) {
            if (this.results.length() > 0) {
                this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, this.results));
                return;
            }
            this.fail(this.createErrorObject(3, "Canceled."));
        }
        else {
            if (this.results.length() > 0) {
                this.callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, this.results));
                return;
            }
            this.fail(this.createErrorObject(3, "Did not complete!"));
        }
    }
}
