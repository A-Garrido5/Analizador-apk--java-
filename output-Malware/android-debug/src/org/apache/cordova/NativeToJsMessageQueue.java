// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import java.util.Iterator;
import android.util.Log;
import java.util.LinkedList;
import java.util.ArrayList;

public class NativeToJsMessageQueue
{
    static final boolean DISABLE_EXEC_CHAINING = false;
    private static final boolean FORCE_ENCODE_USING_EVAL = false;
    private static final String LOG_TAG = "JsMessageQueue";
    private static int MAX_PAYLOAD_SIZE;
    private BridgeMode activeBridgeMode;
    private ArrayList<BridgeMode> bridgeModes;
    private boolean paused;
    private final LinkedList<JsMessage> queue;
    
    static {
        NativeToJsMessageQueue.MAX_PAYLOAD_SIZE = 524288000;
    }
    
    public NativeToJsMessageQueue() {
        this.queue = new LinkedList<JsMessage>();
        this.bridgeModes = new ArrayList<BridgeMode>();
    }
    
    private int calculatePackedMessageLength(final JsMessage jsMessage) {
        final int calculateEncodedLength = jsMessage.calculateEncodedLength();
        return 1 + (calculateEncodedLength + String.valueOf(calculateEncodedLength).length());
    }
    
    private void enqueueMessage(final JsMessage jsMessage) {
        synchronized (this) {
            if (this.activeBridgeMode == null) {
                Log.d("JsMessageQueue", "Dropping Native->JS message due to disabled bridge");
                return;
            }
            this.queue.add(jsMessage);
            if (!this.paused) {
                this.activeBridgeMode.onNativeToJsMessageAvailable(this);
            }
        }
    }
    
    private void packMessage(final JsMessage jsMessage, final StringBuilder sb) {
        sb.append(jsMessage.calculateEncodedLength()).append(' ');
        jsMessage.encodeAsMessage(sb);
    }
    
    public void addBridgeMode(final BridgeMode bridgeMode) {
        this.bridgeModes.add(bridgeMode);
    }
    
    public void addJavaScript(final String s) {
        this.enqueueMessage(new JsMessage(s));
    }
    
    public void addPluginResult(final PluginResult pluginResult, final String s) {
        if (s == null) {
            Log.e("JsMessageQueue", "Got plugin result with no callbackId", new Throwable());
        }
        else {
            boolean b;
            if (pluginResult.getStatus() == PluginResult.Status.NO_RESULT.ordinal()) {
                b = true;
            }
            else {
                b = false;
            }
            final boolean keepCallback = pluginResult.getKeepCallback();
            if (!b || !keepCallback) {
                this.enqueueMessage(new JsMessage(pluginResult, s));
            }
        }
    }
    
    public boolean isBridgeEnabled() {
        return this.activeBridgeMode != null;
    }
    
    public boolean isEmpty() {
        return this.queue.isEmpty();
    }
    
    public String popAndEncode(final boolean b) {
        synchronized (this) {
            if (this.activeBridgeMode == null) {
                return null;
            }
            this.activeBridgeMode.notifyOfFlush(this, b);
            if (this.queue.isEmpty()) {
                return null;
            }
        }
        int n = 0;
        int n2 = 0;
        final Iterator<JsMessage> iterator = (Iterator<JsMessage>)this.queue.iterator();
        while (iterator.hasNext()) {
            final int calculatePackedMessageLength = this.calculatePackedMessageLength(iterator.next());
            if (n2 > 0 && n + calculatePackedMessageLength > NativeToJsMessageQueue.MAX_PAYLOAD_SIZE && NativeToJsMessageQueue.MAX_PAYLOAD_SIZE > 0) {
                break;
            }
            n += calculatePackedMessageLength;
            ++n2;
        }
        final StringBuilder sb = new StringBuilder(n);
        for (int i = 0; i < n2; ++i) {
            this.packMessage(this.queue.removeFirst(), sb);
        }
        if (!this.queue.isEmpty()) {
            sb.append('*');
        }
        // monitorexit(this)
        return sb.toString();
    }
    
    public String popAndEncodeAsJs() {
        int n = 0;
        int n2 = 0;
        Iterator<JsMessage> iterator;
        int n3 = 0;
        int n4 = 0;
        int n5;
        StringBuilder sb = null;
        int n6 = 0;
        JsMessage jsMessage;
        Label_0091_Outer:Label_0099_Outer:
        while (true) {
            while (true) {
            Label_0258:
                while (true) {
                Label_0252:
                    while (true) {
                        Label_0241: {
                            while (true) {
                                Label_0235: {
                                    synchronized (this) {
                                        if (this.queue.size() == 0) {
                                            return null;
                                        }
                                        n = 0;
                                        n2 = 0;
                                        iterator = (Iterator<JsMessage>)this.queue.iterator();
                                        if (iterator.hasNext()) {
                                            n3 = 50 + iterator.next().calculateEncodedLength();
                                            if (n2 <= 0 || n + n3 <= NativeToJsMessageQueue.MAX_PAYLOAD_SIZE || NativeToJsMessageQueue.MAX_PAYLOAD_SIZE <= 0) {
                                                break Label_0241;
                                            }
                                        }
                                        if (n2 != this.queue.size()) {
                                            break Label_0252;
                                        }
                                        n4 = 1;
                                        if (n4 == 0) {
                                            break Label_0258;
                                        }
                                        n5 = 0;
                                        sb = new StringBuilder(n5 + n);
                                        n6 = 0;
                                        if (n6 < n2) {
                                            jsMessage = this.queue.removeFirst();
                                            if (n4 != 0 && n6 + 1 == n2) {
                                                jsMessage.encodeAsJsMessage(sb);
                                                break Label_0235;
                                            }
                                            sb.append("try{");
                                            jsMessage.encodeAsJsMessage(sb);
                                            sb.append("}finally{");
                                            break Label_0235;
                                        }
                                    }
                                    break;
                                }
                                ++n6;
                                continue;
                            }
                        }
                        n += n3;
                        ++n2;
                        continue Label_0091_Outer;
                    }
                    n4 = 0;
                    continue Label_0099_Outer;
                }
                n5 = 100;
                continue;
            }
        }
        if (n4 == 0) {
            sb.append("window.setTimeout(function(){cordova.require('cordova/plugin/android/polling').pollOnce();},0);");
        }
        int i;
        if (n4 != 0) {
            i = 1;
        }
        else {
            i = 0;
        }
        while (i < n2) {
            sb.append('}');
            ++i;
        }
        // monitorexit(this)
        return sb.toString();
    }
    
    public void reset() {
        synchronized (this) {
            this.queue.clear();
            this.setBridgeMode(-1);
        }
    }
    
    public void setBridgeMode(final int n) {
        if (n >= -1 && n < this.bridgeModes.size()) {
            while (true) {
                Label_0141: {
                    if (n >= 0) {
                        break Label_0141;
                    }
                    final BridgeMode activeBridgeMode = null;
                    if (activeBridgeMode == this.activeBridgeMode) {
                        return;
                    }
                    final StringBuilder append = new StringBuilder().append("Set native->JS mode to ");
                    String simpleName;
                    if (activeBridgeMode == null) {
                        simpleName = "null";
                    }
                    else {
                        simpleName = activeBridgeMode.getClass().getSimpleName();
                    }
                    Log.d("JsMessageQueue", append.append(simpleName).toString());
                    synchronized (this) {
                        this.activeBridgeMode = activeBridgeMode;
                        if (activeBridgeMode != null) {
                            activeBridgeMode.reset();
                            if (!this.paused && !this.queue.isEmpty()) {
                                activeBridgeMode.onNativeToJsMessageAvailable(this);
                            }
                        }
                        return;
                    }
                }
                final BridgeMode activeBridgeMode = this.bridgeModes.get(n);
                continue;
            }
        }
        Log.d("JsMessageQueue", "Invalid NativeToJsBridgeMode: " + n);
    }
    
    public void setPaused(final boolean paused) {
        if (this.paused && paused) {
            Log.e("JsMessageQueue", "nested call to setPaused detected.", new Throwable());
        }
        if (!(this.paused = paused)) {
            synchronized (this) {
                if (!this.queue.isEmpty() && this.activeBridgeMode != null) {
                    this.activeBridgeMode.onNativeToJsMessageAvailable(this);
                }
            }
        }
    }
    
    public abstract static class BridgeMode
    {
        public void notifyOfFlush(final NativeToJsMessageQueue nativeToJsMessageQueue, final boolean b) {
        }
        
        public abstract void onNativeToJsMessageAvailable(final NativeToJsMessageQueue p0);
        
        public void reset() {
        }
    }
    
    private static class JsMessage
    {
        final String jsPayloadOrCallbackId;
        final PluginResult pluginResult;
        
        JsMessage(final String jsPayloadOrCallbackId) {
            if (jsPayloadOrCallbackId == null) {
                throw new NullPointerException();
            }
            this.jsPayloadOrCallbackId = jsPayloadOrCallbackId;
            this.pluginResult = null;
        }
        
        JsMessage(final PluginResult pluginResult, final String jsPayloadOrCallbackId) {
            if (jsPayloadOrCallbackId == null || pluginResult == null) {
                throw new NullPointerException();
            }
            this.jsPayloadOrCallbackId = jsPayloadOrCallbackId;
            this.pluginResult = pluginResult;
        }
        
        static int calculateEncodedLengthHelper(final PluginResult pluginResult) {
            int length = 0;
            switch (pluginResult.getMessageType()) {
                default: {
                    length = pluginResult.getMessage().length();
                    break;
                }
                case 4:
                case 5: {
                    return 1;
                }
                case 3: {
                    return 1 + pluginResult.getMessage().length();
                }
                case 1: {
                    return 1 + pluginResult.getStrMessage().length();
                }
                case 7: {
                    return 1 + pluginResult.getMessage().length();
                }
                case 6: {
                    return 1 + pluginResult.getMessage().length();
                }
                case 8: {
                    length = 1;
                    for (int i = 0; i < pluginResult.getMultipartMessagesSize(); ++i) {
                        final int calculateEncodedLengthHelper = calculateEncodedLengthHelper(pluginResult.getMultipartMessage(i));
                        length += calculateEncodedLengthHelper + (1 + String.valueOf(calculateEncodedLengthHelper).length());
                    }
                    break;
                }
            }
            return length;
        }
        
        static void encodeAsMessageHelper(final StringBuilder sb, final PluginResult pluginResult) {
            switch (pluginResult.getMessageType()) {
                default: {
                    sb.append(pluginResult.getMessage());
                    break;
                }
                case 4: {
                    sb.append(pluginResult.getMessage().charAt(0));
                }
                case 5: {
                    sb.append('N');
                }
                case 3: {
                    sb.append('n').append(pluginResult.getMessage());
                }
                case 1: {
                    sb.append('s');
                    sb.append(pluginResult.getStrMessage());
                }
                case 7: {
                    sb.append('S');
                    sb.append(pluginResult.getMessage());
                }
                case 6: {
                    sb.append('A');
                    sb.append(pluginResult.getMessage());
                }
                case 8: {
                    sb.append('M');
                    for (int i = 0; i < pluginResult.getMultipartMessagesSize(); ++i) {
                        final PluginResult multipartMessage = pluginResult.getMultipartMessage(i);
                        sb.append(String.valueOf(calculateEncodedLengthHelper(multipartMessage)));
                        sb.append(' ');
                        encodeAsMessageHelper(sb, multipartMessage);
                    }
                    break;
                }
            }
        }
        
        int calculateEncodedLength() {
            if (this.pluginResult == null) {
                return 1 + this.jsPayloadOrCallbackId.length();
            }
            return 1 + (1 + (2 + String.valueOf(this.pluginResult.getStatus()).length()) + this.jsPayloadOrCallbackId.length()) + calculateEncodedLengthHelper(this.pluginResult);
        }
        
        void encodeAsJsMessage(final StringBuilder sb) {
            if (this.pluginResult == null) {
                sb.append(this.jsPayloadOrCallbackId);
                return;
            }
            final int status = this.pluginResult.getStatus();
            sb.append("cordova.callbackFromNative('").append(this.jsPayloadOrCallbackId).append("',").append(status == PluginResult.Status.OK.ordinal() || status == PluginResult.Status.NO_RESULT.ordinal()).append(",").append(status).append(",[");
            switch (this.pluginResult.getMessageType()) {
                default: {
                    sb.append(this.pluginResult.getMessage());
                    break;
                }
                case 7: {
                    sb.append("atob('").append(this.pluginResult.getMessage()).append("')");
                    break;
                }
                case 6: {
                    sb.append("cordova.require('cordova/base64').toArrayBuffer('").append(this.pluginResult.getMessage()).append("')");
                    break;
                }
            }
            sb.append("],").append(this.pluginResult.getKeepCallback()).append(");");
        }
        
        void encodeAsMessage(final StringBuilder sb) {
            if (this.pluginResult == null) {
                sb.append('J').append(this.jsPayloadOrCallbackId);
                return;
            }
            final int status = this.pluginResult.getStatus();
            boolean b;
            if (status == PluginResult.Status.NO_RESULT.ordinal()) {
                b = true;
            }
            else {
                b = false;
            }
            boolean b2;
            if (status == PluginResult.Status.OK.ordinal()) {
                b2 = true;
            }
            else {
                b2 = false;
            }
            final boolean keepCallback = this.pluginResult.getKeepCallback();
            char c;
            if (b || b2) {
                c = 'S';
            }
            else {
                c = 'F';
            }
            final StringBuilder append = sb.append(c);
            char c2;
            if (keepCallback) {
                c2 = '1';
            }
            else {
                c2 = '0';
            }
            append.append(c2).append(status).append(' ').append(this.jsPayloadOrCallbackId).append(' ');
            encodeAsMessageHelper(sb, this.pluginResult);
        }
    }
    
    public static class LoadUrlBridgeMode extends BridgeMode
    {
        private final CordovaInterface cordova;
        private final CordovaWebViewEngine engine;
        
        public LoadUrlBridgeMode(final CordovaWebViewEngine engine, final CordovaInterface cordova) {
            this.engine = engine;
            this.cordova = cordova;
        }
        
        @Override
        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue nativeToJsMessageQueue) {
            this.cordova.getActivity().runOnUiThread((Runnable)new Runnable() {
                @Override
                public void run() {
                    final String popAndEncodeAsJs = nativeToJsMessageQueue.popAndEncodeAsJs();
                    if (popAndEncodeAsJs != null) {
                        LoadUrlBridgeMode.this.engine.loadUrl("javascript:" + popAndEncodeAsJs, false);
                    }
                }
            });
        }
    }
    
    public static class NoOpBridgeMode extends BridgeMode
    {
        @Override
        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue nativeToJsMessageQueue) {
        }
    }
    
    public static class OnlineEventsBridgeMode extends BridgeMode
    {
        private final OnlineEventsBridgeModeDelegate delegate;
        private boolean ignoreNextFlush;
        private boolean online;
        
        public OnlineEventsBridgeMode(final OnlineEventsBridgeModeDelegate delegate) {
            this.delegate = delegate;
        }
        
        @Override
        public void notifyOfFlush(final NativeToJsMessageQueue nativeToJsMessageQueue, final boolean b) {
            if (b && !this.ignoreNextFlush) {
                this.online = !this.online;
            }
        }
        
        @Override
        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue nativeToJsMessageQueue) {
            this.delegate.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (!nativeToJsMessageQueue.isEmpty()) {
                        OnlineEventsBridgeMode.this.ignoreNextFlush = false;
                        OnlineEventsBridgeMode.this.delegate.setNetworkAvailable(OnlineEventsBridgeMode.this.online);
                    }
                }
            });
        }
        
        @Override
        public void reset() {
            this.delegate.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    OnlineEventsBridgeMode.this.online = false;
                    OnlineEventsBridgeMode.this.ignoreNextFlush = true;
                    OnlineEventsBridgeMode.this.delegate.setNetworkAvailable(true);
                }
            });
        }
        
        public interface OnlineEventsBridgeModeDelegate
        {
            void runOnUiThread(final Runnable p0);
            
            void setNetworkAvailable(final boolean p0);
        }
    }
}
