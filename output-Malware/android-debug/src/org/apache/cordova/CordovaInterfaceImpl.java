// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import android.os.Bundle;
import android.util.Log;
import android.content.Intent;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import android.app.Activity;

public class CordovaInterfaceImpl implements CordovaInterface
{
    private static final String TAG = "CordovaInterfaceImpl";
    protected Activity activity;
    protected CordovaPlugin activityResultCallback;
    protected int activityResultRequestCode;
    protected String initCallbackService;
    protected PluginManager pluginManager;
    protected ActivityResultHolder savedResult;
    protected ExecutorService threadPool;
    
    public CordovaInterfaceImpl(final Activity activity) {
        this(activity, Executors.newCachedThreadPool());
    }
    
    public CordovaInterfaceImpl(final Activity activity, final ExecutorService threadPool) {
        this.activity = activity;
        this.threadPool = threadPool;
    }
    
    @Override
    public Activity getActivity() {
        return this.activity;
    }
    
    @Override
    public ExecutorService getThreadPool() {
        return this.threadPool;
    }
    
    public boolean onActivityResult(final int n, final int n2, final Intent intent) {
        CordovaPlugin cordovaPlugin = this.activityResultCallback;
        if (cordovaPlugin == null && this.initCallbackService != null) {
            this.savedResult = new ActivityResultHolder(n, n2, intent);
            if (this.pluginManager != null) {
                cordovaPlugin = this.pluginManager.getPlugin(this.initCallbackService);
            }
        }
        this.activityResultCallback = null;
        if (cordovaPlugin != null) {
            Log.d("CordovaInterfaceImpl", "Sending activity result to plugin");
            this.initCallbackService = null;
            this.savedResult = null;
            cordovaPlugin.onActivityResult(n, n2, intent);
            return true;
        }
        final StringBuilder append = new StringBuilder().append("Got an activity result, but no plugin was registered to receive it");
        String s;
        if (this.savedResult != null) {
            s = " yet!";
        }
        else {
            s = ".";
        }
        Log.w("CordovaInterfaceImpl", append.append(s).toString());
        return false;
    }
    
    public void onCordovaInit(final PluginManager pluginManager) {
        this.pluginManager = pluginManager;
        if (this.savedResult != null) {
            this.onActivityResult(this.savedResult.requestCode, this.savedResult.resultCode, this.savedResult.intent);
        }
    }
    
    @Override
    public Object onMessage(final String s, final Object o) {
        if ("exit".equals(s)) {
            this.activity.finish();
        }
        return null;
    }
    
    public void onSaveInstanceState(final Bundle bundle) {
        if (this.activityResultCallback != null) {
            bundle.putString("callbackService", this.activityResultCallback.getServiceName());
        }
    }
    
    public void restoreInstanceState(final Bundle bundle) {
        this.initCallbackService = bundle.getString("callbackService");
    }
    
    @Override
    public void setActivityResultCallback(final CordovaPlugin activityResultCallback) {
        if (this.activityResultCallback != null) {
            this.activityResultCallback.onActivityResult(this.activityResultRequestCode, 0, null);
        }
        this.activityResultCallback = activityResultCallback;
    }
    
    public void setActivityResultRequestCode(final int activityResultRequestCode) {
        this.activityResultRequestCode = activityResultRequestCode;
    }
    
    @Override
    public void startActivityForResult(final CordovaPlugin activityResultCallback, final Intent intent, final int n) {
        this.setActivityResultCallback(activityResultCallback);
        try {
            this.activity.startActivityForResult(intent, n);
        }
        catch (RuntimeException ex) {
            this.activityResultCallback = null;
            throw ex;
        }
    }
    
    private static class ActivityResultHolder
    {
        private Intent intent;
        private int requestCode;
        private int resultCode;
        
        public ActivityResultHolder(final int requestCode, final int resultCode, final Intent intent) {
            this.requestCode = requestCode;
            this.resultCode = resultCode;
            this.intent = intent;
        }
    }
}
