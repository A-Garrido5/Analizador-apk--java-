// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import java.io.IOException;
import org.xmlpull.v1.XmlPullParserException;
import android.content.Context;
import java.util.Locale;
import org.xmlpull.v1.XmlPullParser;
import java.util.regex.Pattern;
import java.util.ArrayList;

public class ConfigXmlParser
{
    private static String TAG;
    boolean insideFeature;
    private String launchUrl;
    boolean onload;
    String paramType;
    String pluginClass;
    private ArrayList<PluginEntry> pluginEntries;
    private CordovaPreferences prefs;
    String service;
    
    static {
        ConfigXmlParser.TAG = "ConfigXmlParser";
    }
    
    public ConfigXmlParser() {
        this.launchUrl = "file:///android_asset/www/index.html";
        this.prefs = new CordovaPreferences();
        this.pluginEntries = new ArrayList<PluginEntry>(20);
        this.insideFeature = false;
        this.service = "";
        this.pluginClass = "";
        this.paramType = "";
        this.onload = false;
    }
    
    private void setStartUrl(String substring) {
        if (Pattern.compile("^[a-z-]+://").matcher(substring).find()) {
            this.launchUrl = substring;
            return;
        }
        if (substring.charAt(0) == '/') {
            substring = substring.substring(1);
        }
        this.launchUrl = "file:///android_asset/www/" + substring;
    }
    
    public String getLaunchUrl() {
        return this.launchUrl;
    }
    
    public ArrayList<PluginEntry> getPluginEntries() {
        return this.pluginEntries;
    }
    
    public CordovaPreferences getPreferences() {
        return this.prefs;
    }
    
    public void handleEndTag(final XmlPullParser xmlPullParser) {
        if (xmlPullParser.getName().equals("feature")) {
            this.pluginEntries.add(new PluginEntry(this.service, this.pluginClass, this.onload));
            this.service = "";
            this.pluginClass = "";
            this.insideFeature = false;
            this.onload = false;
        }
    }
    
    public void handleStartTag(final XmlPullParser xmlPullParser) {
        final String name = xmlPullParser.getName();
        if (name.equals("feature")) {
            this.insideFeature = true;
            this.service = xmlPullParser.getAttributeValue((String)null, "name");
        }
        else if (this.insideFeature && name.equals("param")) {
            this.paramType = xmlPullParser.getAttributeValue((String)null, "name");
            if (this.paramType.equals("service")) {
                this.service = xmlPullParser.getAttributeValue((String)null, "value");
                return;
            }
            if (this.paramType.equals("package") || this.paramType.equals("android-package")) {
                this.pluginClass = xmlPullParser.getAttributeValue((String)null, "value");
                return;
            }
            if (this.paramType.equals("onload")) {
                this.onload = "true".equals(xmlPullParser.getAttributeValue((String)null, "value"));
            }
        }
        else {
            if (name.equals("preference")) {
                this.prefs.set(xmlPullParser.getAttributeValue((String)null, "name").toLowerCase(Locale.ENGLISH), xmlPullParser.getAttributeValue((String)null, "value"));
                return;
            }
            if (name.equals("content")) {
                final String attributeValue = xmlPullParser.getAttributeValue((String)null, "src");
                if (attributeValue != null) {
                    this.setStartUrl(attributeValue);
                }
            }
        }
    }
    
    public void parse(final Context context) {
        int n = context.getResources().getIdentifier("config", "xml", context.getClass().getPackage().getName());
        if (n == 0) {
            n = context.getResources().getIdentifier("config", "xml", context.getPackageName());
            if (n == 0) {
                LOG.e(ConfigXmlParser.TAG, "res/xml/config.xml is missing!");
                return;
            }
        }
        this.parse((XmlPullParser)context.getResources().getXml(n));
    }
    
    public void parse(final XmlPullParser xmlPullParser) {
        int i = -1;
        Label_0017_Outer:Block_4_Outer:
        while (i != 1) {
            Label_0031: {
                if (i != 2) {
                    break Label_0031;
                }
                this.handleStartTag(xmlPullParser);
                try {
                    // iftrue(Label_0017:, i != 3)
                    while (true) {
                        while (true) {
                            i = xmlPullParser.next();
                            continue Label_0017_Outer;
                            this.handleEndTag(xmlPullParser);
                            continue Block_4_Outer;
                        }
                        continue;
                    }
                }
                catch (XmlPullParserException ex) {
                    ex.printStackTrace();
                    continue;
                }
                catch (IOException ex2) {
                    ex2.printStackTrace();
                    continue;
                }
            }
            break;
        }
    }
}
