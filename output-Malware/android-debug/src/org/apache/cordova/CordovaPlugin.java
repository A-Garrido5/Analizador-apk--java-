// 
// Decompiled by Procyon v0.5.30
// 

package org.apache.cordova;

import android.net.Uri$Builder;
import android.content.res.Configuration;
import android.content.Intent;
import java.io.IOException;
import java.io.FileNotFoundException;
import android.net.Uri;
import org.json.JSONException;
import org.json.JSONArray;

public class CordovaPlugin
{
    public CordovaInterface cordova;
    protected CordovaPreferences preferences;
    private String serviceName;
    public CordovaWebView webView;
    
    public boolean execute(final String s, final String s2, final CallbackContext callbackContext) throws JSONException {
        return this.execute(s, new JSONArray(s2), callbackContext);
    }
    
    public boolean execute(final String s, final CordovaArgs cordovaArgs, final CallbackContext callbackContext) throws JSONException {
        return false;
    }
    
    public boolean execute(final String s, final JSONArray jsonArray, final CallbackContext callbackContext) throws JSONException {
        return this.execute(s, new CordovaArgs(jsonArray), callbackContext);
    }
    
    protected Uri fromPluginUri(final Uri uri) {
        return Uri.parse(uri.getQueryParameter("origUri"));
    }
    
    public String getServiceName() {
        return this.serviceName;
    }
    
    public CordovaResourceApi.OpenForReadResult handleOpenForRead(final Uri uri) throws IOException {
        throw new FileNotFoundException("Plugin can't handle uri: " + uri);
    }
    
    public void initialize(final CordovaInterface cordovaInterface, final CordovaWebView cordovaWebView) {
    }
    
    public void onActivityResult(final int n, final int n2, final Intent intent) {
    }
    
    public void onConfigurationChanged(final Configuration configuration) {
    }
    
    public void onDestroy() {
    }
    
    public Object onMessage(final String s, final Object o) {
        return null;
    }
    
    public void onNewIntent(final Intent intent) {
    }
    
    public boolean onOverrideUrlLoading(final String s) {
        return false;
    }
    
    public void onPause(final boolean b) {
    }
    
    public boolean onReceivedClientCertRequest(final CordovaWebView cordovaWebView, final ICordovaClientCertRequest cordovaClientCertRequest) {
        return false;
    }
    
    public boolean onReceivedHttpAuthRequest(final CordovaWebView cordovaWebView, final ICordovaHttpAuthHandler cordovaHttpAuthHandler, final String s, final String s2) {
        return false;
    }
    
    public void onReset() {
    }
    
    public void onResume(final boolean b) {
    }
    
    public void onStart() {
    }
    
    public void onStop() {
    }
    
    protected void pluginInitialize() {
    }
    
    public final void privateInitialize(final String serviceName, final CordovaInterface cordova, final CordovaWebView webView, final CordovaPreferences preferences) {
        assert this.cordova == null;
        this.serviceName = serviceName;
        this.cordova = cordova;
        this.webView = webView;
        this.preferences = preferences;
        this.initialize(cordova, webView);
        this.pluginInitialize();
    }
    
    public Uri remapUri(final Uri uri) {
        return null;
    }
    
    public Boolean shouldAllowBridgeAccess(final String s) {
        return this.shouldAllowNavigation(s);
    }
    
    public Boolean shouldAllowNavigation(final String s) {
        return null;
    }
    
    public Boolean shouldAllowRequest(final String s) {
        return null;
    }
    
    public Boolean shouldOpenExternalUrl(final String s) {
        return null;
    }
    
    protected Uri toPluginUri(final Uri uri) {
        return new Uri$Builder().scheme("cdvplugin").authority(this.serviceName).appendQueryParameter("origUri", uri.toString()).build();
    }
}
